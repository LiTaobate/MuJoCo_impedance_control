/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2022-04-06 23:31:28.878488
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKsin(j[4]);
x8=IKcos(j[4]);
x9=IKsin(j[0]);
x10=IKsin(j[5]);
x11=IKcos(j[5]);
x12=((0.39225)*x0);
x13=((0.09465)*x0);
x14=((1.0)*x9);
x15=((0.09465)*x9);
x16=((1.0)*x6);
x17=((0.39225)*x9);
x18=((1.0)*x5);
x19=((0.425)*x1);
x20=((1.0)*x0);
x21=(x1*x3);
x22=(x2*x4);
x23=(x1*x2);
x24=(x3*x4);
x25=(x20*x21);
x26=(x14*x21);
x27=(x24+x23);
x28=((((-1.0)*x22))+(((1.0)*x21)));
x29=((((-1.0)*x23))+(((-1.0)*x24)));
x30=(x28*x5);
x31=(((x0*x22))+(((-1.0)*x25)));
x32=(((x22*x9))+(((-1.0)*x26)));
x33=(x29*x6);
x34=(x25+(((-1.0)*x20*x22)));
x35=((((-1.0)*x14*x22))+x26);
x36=(x20*((x24+x23)));
x37=(x14*((x24+x23)));
x38=(((x27*x5))+((x28*x6)));
x39=(x38*x8);
x40=((((-1.0)*x14*x7))+((x8*((((x31*x5))+((x36*x6)))))));
x41=(((x0*x7))+((x8*((((x32*x5))+((x37*x6)))))));
eerot[0]=(((x11*x40))+((x10*((((x34*x6))+((x36*x5)))))));
eerot[1]=((((-1.0)*x14*x8))+((x7*(((((-1.0)*x18*x31))+(((-1.0)*x16*x36)))))));
eerot[2]=(((x10*x40))+((x11*(((((-1.0)*x18*x36))+(((-1.0)*x16*x34)))))));
IkReal x42=((1.0)*x13);
eetrans[0]=(((x0*x19))+(((-1.0)*x12*x22))+(((-0.10915)*x9))+((x6*(((((-1.0)*x21*x42))+((x13*x22))))))+((x5*(((((-1.0)*x23*x42))+(((-1.0)*x24*x42))))))+((x12*x21)));
eerot[3]=(((x11*x41))+((x10*((((x35*x6))+((x37*x5)))))));
eerot[4]=(((x0*x8))+((x7*(((((-1.0)*x18*x32))+(((-1.0)*x16*x37)))))));
eerot[5]=(((x10*x41))+((x11*(((((-1.0)*x18*x37))+(((-1.0)*x16*x35)))))));
IkReal x43=((1.0)*x15);
eetrans[1]=((((0.10915)*x0))+((x19*x9))+(((-1.0)*x17*x22))+((x17*x21))+((x5*(((((-1.0)*x23*x43))+(((-1.0)*x24*x43))))))+((x6*(((((-1.0)*x21*x43))+((x15*x22)))))));
eerot[6]=(((x11*x39))+((x10*((x33+x30)))));
eerot[7]=(x7*(((((-1.0)*x16*x28))+(((-1.0)*x18*x27)))));
eerot[8]=(((x11*(((((-1.0)*x33))+(((-1.0)*x30))))))+((x10*x39)));
eetrans[2]=((0.08916)+((x5*(((((-0.09465)*x21))+(((0.09465)*x22))))))+(((-0.425)*x4))+((x6*(((((0.09465)*x23))+(((0.09465)*x24))))))+(((-0.39225)*x23))+(((-0.39225)*x24)));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=((-1.0)*r02);
new_r02=r01;
new_px=px;
new_r10=r10;
new_r11=((-1.0)*r12);
new_r12=r11;
new_py=py;
new_r20=r20;
new_r21=((-1.0)*r22);
new_r22=r21;
new_pz=((-0.08916)+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x44=((1.0)*px);
IkReal x45=((1.0)*pz);
IkReal x46=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x46))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x45)));
rxp0_2=((((-1.0)*r10*x44))+((py*r00)));
rxp1_0=((((-1.0)*r21*x46))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x45)));
rxp1_2=((((-1.0)*r11*x44))+((py*r01)));
rxp2_0=((((-1.0)*r22*x46))+((pz*r12)));
rxp2_1=((((-1.0)*r02*x45))+((px*r22)));
rxp2_2=((((-1.0)*r12*x44))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x47=((0.1893)*npx);
IkReal x48=((0.1893)*npy);
IkReal x49=((0.09465)*r22);
IkReal x50=((0.09465)*r21);
IkReal x51=((-0.09465)*r20);
IkReal x52=((-1.0)*r20);
IkReal x53=((-1.0)*rxp0_2);
IkReal x54=((-0.09465)*r21);
IkReal x55=((-1.0)*r21);
IkReal x56=((-1.0)*rxp1_2);
IkReal x57=((-1.0)*npx);
IkReal x58=((-1.0)*r22);
IkReal x59=((-1.0)*npz);
matrixinvcoeffs[0]=x51;
matrixinvcoeffs[1]=x47;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x52;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x53;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x51;
matrixinvcoeffs[19]=x47;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x52;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x53;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x54;
matrixinvcoeffs[33]=x48;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x55;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x56;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x54;
matrixinvcoeffs[51]=x48;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x55;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x56;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x58;
matrixinvcoeffs[76]=x49;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x59;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x49;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x56;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x54;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x56;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x50;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x52;
matrixinvcoeffs[133]=x57;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x52;
matrixinvcoeffs[151]=x57;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x51;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x58;
matrixinvcoeffs[165]=x59;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x49;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x58;
matrixinvcoeffs[183]=x59;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x55;
matrixinvcoeffs[204]=x50;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x56;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x50;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x57;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x51;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x52;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x51;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x53;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x60=pz*pz;
IkReal x61=pp*pp;
IkReal x62=((0.1893)*pz);
IkReal x63=((1.7)*pz);
IkReal x64=(gclwh15_9*npx);
IkReal x65=(gclwh6_11*r21);
IkReal x66=(pp*r22);
IkReal x67=((0.00702803935125)*r21);
IkReal x68=(gclwh5_9*npz);
IkReal x69=(gclwh8_11*r20);
IkReal x70=(npy*pz);
IkReal x71=((3.60823078949063e-5)*r22);
IkReal x72=(gclwh14_3*rxp0_2);
IkReal x73=((0.000977833645875)*r20);
IkReal x74=(npz*pz);
IkReal x75=((0.000977833645875)*r21);
IkReal x76=(gclwh10_12*r22);
IkReal x77=(gclwh10_2*rxp2_2);
IkReal x78=((0.00076243651125)*rxp1_2);
IkReal x79=((0.00600991575645741)*r20);
IkReal x80=((0.154705425)*rxp1_2);
IkReal x81=((0.017917245)*r21);
IkReal x82=(gclwh6_11*rxp1_2);
IkReal x83=((0.3786)*rxp1_2);
IkReal x84=(gclwh7_0*rxp1_2);
IkReal x85=((0.7572)*rxp1_2);
IkReal x86=((0.154705425)*rxp2_2);
IkReal x87=((2.0)*gclwh11_10);
IkReal x88=(gclwh12_8*r21);
IkReal x89=((0.81725)*pp);
IkReal x90=(pp*pz);
IkReal x91=(gclwh14_2*r20);
IkReal x92=(pp*r21);
IkReal x93=((2.0)*gclwh4_11);
IkReal x94=(gclwh8_12*r20);
IkReal x95=(npx*pz);
IkReal x96=(gclwh14_8*rxp0_2);
IkReal x97=((0.1893)*rxp2_2);
IkReal x98=(gclwh5_9*rxp2_2);
IkReal x99=((0.020662095)*rxp1_2);
IkReal x100=((0.007321434238125)*r21);
IkReal x101=((1.6345)*pz);
IkReal x102=((0.0089586225)*pz);
IkReal x103=(gclwh13_0*r21);
IkReal x104=(gclwh5_9*r22);
IkReal x105=(gclwh11_10*r22);
IkReal x106=(gclwh11_13*r22);
IkReal x107=((1.0)*r21);
IkReal x108=((0.3786)*rxp0_2);
IkReal x109=(gclwh14_14*rxp0_2);
IkReal x110=(pp*r20);
IkReal x111=((0.00195566729175)*r22);
IkReal x112=(gclwh15_10*rxp0_2);
IkReal x113=(gclwh14_8*r20);
IkReal x114=(gclwh12_8*rxp1_2);
IkReal x115=((2.0)*gclwh9_10);
IkReal x116=((2.0)*gclwh15_10);
IkReal x117=(gclwh5_15*rxp2_2);
IkReal x118=((2.0)*gclwh13_10);
IkReal x119=((0.00702803935125)*r20);
IkReal x120=(gclwh13_9*r21);
IkReal x121=(gclwh5_0*r22);
IkReal x122=((0.01464286847625)*r20);
IkReal x123=(gclwh15_1*r20);
IkReal x124=((0.000977833645875)*r22);
IkReal x125=((0.0089586225)*r20);
IkReal x126=((2.0)*gclwh10_11);
IkReal x127=(gclwh5_10*r22);
IkReal x128=((2.0)*pp);
IkReal x129=(gclwh15_9*r20);
IkReal x130=(gclwh1_3*r20);
IkReal x131=((0.00195566729175)*r20);
IkReal x132=(gclwh4_3*rxp2_2);
IkReal x133=((0.2183)*gclwh13_15);
IkReal x134=((2.0)*gclwh7_10);
IkReal x135=(gclwh15_0*r20);
IkReal x136=(gclwh9_0*r20);
IkReal x137=(gclwh15_15*rxp0_2);
IkReal x138=(gclwh2_1*r21);
IkReal x139=((4.0)*gclwh11_10);
IkReal x140=((0.30941085)*rxp0_2);
IkReal x141=(gclwh9_0*rxp0_2);
IkReal x142=(gclwh5_10*rxp2_2);
IkReal x143=((0.2183)*gclwh12_14);
IkReal x144=((0.2183)*gclwh14_14);
IkReal x145=(gclwh4_2*rxp2_2);
IkReal x146=((0.03275)*pp);
IkReal x147=((0.006199575)*rxp1_2);
IkReal x148=(gclwh12_2*rxp1_2);
IkReal x149=(gclwh5_0*rxp2_2);
IkReal x150=((3.60823078949063e-5)*r21);
IkReal x151=(gclwh14_11*rxp0_2);
IkReal x152=((0.020662095)*rxp0_2);
IkReal x153=(gclwh14_8*npx);
IkReal x154=((4.0)*gclwh9_10);
IkReal x155=((0.00195566729175)*r21);
IkReal x156=(gclwh8_12*rxp0_2);
IkReal x157=((0.01464286847625)*r21);
IkReal x158=((0.3786)*rxp2_2);
IkReal x159=((0.01464286847625)*r22);
IkReal x160=(gclwh7_13*r21);
IkReal x161=((4.0)*gclwh7_10);
IkReal x162=(gclwh13_0*rxp1_2);
IkReal x163=((0.1893)*rxp1_2);
IkReal x164=(gclwh6_2*r21);
IkReal x165=(gclwh5_1*rxp2_2);
IkReal x166=(gclwh8_2*rxp0_2);
IkReal x167=(gclwh9_10*r20);
IkReal x168=((4.0)*pp);
IkReal x169=(gclwh15_1*rxp0_2);
IkReal x170=(gclwh9_13*r20);
IkReal x171=((0.0089586225)*r21);
IkReal x172=(gclwh0_0*r20);
IkReal x173=(gclwh10_11*r22);
IkReal x174=((2.0)*gclwh12_11);
IkReal x175=((0.0655)*pz);
IkReal x176=((0.006199575)*rxp2_2);
IkReal x177=(gclwh12_14*rxp1_2);
IkReal x178=(gclwh15_0*rxp0_2);
IkReal x179=((2.0)*npx);
IkReal x180=(gclwh9_13*rxp0_2);
IkReal x181=((1.0)*pp);
IkReal x182=((4.0)*gclwh10_11);
IkReal x183=(gclwh15_9*rxp0_2);
IkReal x184=((3.60823078949063e-5)*r20);
IkReal x185=((0.00702803935125)*r22);
IkReal x186=(gclwh8_2*r20);
IkReal x187=((0.2183)*gclwh5_15);
IkReal x188=(gclwh10_2*r22);
IkReal x189=(gclwh5_1*r22);
IkReal x190=(gclwh13_9*rxp1_2);
IkReal x191=((2.0)*gclwh5_10);
IkReal x192=((0.020662095)*rxp2_2);
IkReal x193=(gclwh4_8*r22);
IkReal x194=((0.017917245)*r20);
IkReal x195=(gclwh7_0*r21);
IkReal x196=((0.00600991575645741)*r21);
IkReal x197=(gclwh11_0*r22);
IkReal x198=(gclwh6_12*r21);
IkReal x199=((0.2183)*gclwh15_15);
IkReal x200=(gclwh11_0*rxp2_2);
IkReal x201=((0.2183)*gclwh4_14);
IkReal x202=(gclwh4_14*rxp2_2);
IkReal x203=(gclwh6_2*rxp1_2);
IkReal x204=((0.1893)*rxp0_2);
IkReal x205=(gclwh4_8*rxp2_2);
IkReal x206=((0.12699240901125)*rxp1_2);
IkReal x207=(gclwh14_2*rxp0_2);
IkReal x208=(gclwh4_3*r22);
IkReal x209=((0.1893)*pp);
IkReal x210=(gclwh13_15*rxp1_2);
IkReal x211=(gclwh1_2*r20);
IkReal x212=((2.0)*gclwh14_11);
IkReal x213=(gclwh4_11*r22);
IkReal x214=((0.020662095)*x109);
IkReal x215=(gclwh6_5*x75);
IkReal x216=(gclwh8_5*x73);
IkReal x217=(gclwh12_14*x99);
IkReal x218=(gclwh10_5*x124);
IkReal x219=(gclwh4_14*x192);
IkReal x220=((0.0089586225)*x65);
IkReal x221=(gclwh12_11*x163);
IkReal x222=((0.017917245)*x114);
IkReal x223=((0.017917245)*x205);
IkReal x224=(gclwh4_11*x97);
IkReal x225=((0.0089586225)*x69);
IkReal x226=((0.1893)*x151);
IkReal x227=((0.0089586225)*x173);
IkReal x228=((0.017917245)*x96);
IkReal x229=((0.017917245)*x98);
IkReal x230=((0.0089586225)*x105);
IkReal x231=((0.1893)*x112);
IkReal x232=((0.017917245)*x190);
IkReal x233=(gclwh9_10*x125);
IkReal x234=((0.017917245)*x183);
IkReal x235=(gclwh13_10*x163);
IkReal x236=(gclwh7_10*x171);
IkReal x237=(gclwh5_10*x97);
IkReal x238=((0.020662095)*x137);
IkReal x239=(gclwh7_7*x75);
IkReal x240=(gclwh9_7*x73);
IkReal x241=(gclwh13_15*x99);
IkReal x242=((0.020662095)*x117);
IkReal x243=(gclwh11_7*x124);
IkReal x244=(gclwh10_5*x192);
IkReal x245=(gclwh8_5*x152);
IkReal x246=(gclwh14_14*x73);
IkReal x247=(gclwh6_5*x99);
IkReal x248=(gclwh4_14*x124);
IkReal x249=(gclwh12_14*x75);
IkReal x250=(gclwh8_11*x204);
IkReal x251=((0.000847933619625)*x88);
IkReal x252=(gclwh12_11*x171);
IkReal x253=(gclwh10_11*x97);
IkReal x254=((0.0089586225)*x213);
IkReal x255=((0.000847933619625)*x193);
IkReal x256=((0.1893)*x82);
IkReal x257=(gclwh14_11*x125);
IkReal x258=((0.000847933619625)*x113);
IkReal x259=(gclwh9_10*x204);
IkReal x260=(gclwh13_10*x171);
IkReal x261=(gclwh11_10*x97);
IkReal x262=((0.000847933619625)*x129);
IkReal x263=((0.0089586225)*x127);
IkReal x264=((0.000847933619625)*x104);
IkReal x265=(gclwh7_10*x163);
IkReal x266=((0.000847933619625)*x120);
IkReal x267=(gclwh15_10*x125);
IkReal x268=(gclwh5_15*x124);
IkReal x269=(gclwh7_7*x99);
IkReal x270=(gclwh13_15*x75);
IkReal x271=(gclwh15_15*x73);
IkReal x272=(gclwh9_7*x152);
IkReal x273=(gclwh11_7*x192);
IkReal x274=((0.017917245)*x173);
IkReal x275=(gclwh14_11*x108);
IkReal x276=((0.017917245)*x69);
IkReal x277=((0.04132419)*x109);
IkReal x278=((0.04132419)*x177);
IkReal x279=((0.04132419)*x202);
IkReal x280=(gclwh4_11*x158);
IkReal x281=((0.017917245)*x65);
IkReal x282=(gclwh12_11*x83);
IkReal x283=((0.04132419)*x117);
IkReal x284=((0.04132419)*x210);
IkReal x285=((0.04132419)*x137);
IkReal x286=((0.017917245)*x167);
IkReal x287=(gclwh15_10*x108);
IkReal x288=((0.017917245)*x105);
IkReal x289=(gclwh7_10*x81);
IkReal x290=((0.3786)*x142);
IkReal x291=(gclwh13_10*x83);
IkReal x292=((0.3786)*x82);
IkReal x293=(gclwh14_11*x194);
IkReal x294=(gclwh14_14*x131);
IkReal x295=(gclwh4_14*x111);
IkReal x296=(gclwh12_14*x155);
IkReal x297=(gclwh14_8*x110);
IkReal x298=((2.0)*x60);
IkReal x299=((1.0)*x61);
IkReal x300=(r21*x61);
IkReal x301=((0.2183)*gclwh10_5*x74);
IkReal x302=((0.2183)*gclwh8_5*x95);
IkReal x303=((0.10915)*gclwh6_5*x92);
IkReal x304=((0.2183)*gclwh6_5*x70);
IkReal x305=((0.10915)*gclwh8_5*x110);
IkReal x306=((0.10915)*gclwh10_5*x66);
IkReal x307=(gclwh12_3*pp*x163);
IkReal x308=(x126*x74);
IkReal x309=(x102*x186);
IkReal x310=((2.0)*gclwh8_11*x95);
IkReal x311=(gclwh10_2*pz*x66);
IkReal x312=(x207*x62);
IkReal x313=(x186*x90);
IkReal x314=(gclwh4_3*pp*x97);
IkReal x315=(x102*x188);
IkReal x316=(x148*x62);
IkReal x317=((2.0)*gclwh6_11*x70);
IkReal x318=(x145*x62);
IkReal x319=(x209*x72);
IkReal x320=(x102*x164);
IkReal x321=(gclwh13_1*pp*x163);
IkReal x322=(x102*x197);
IkReal x323=(x102*x136);
IkReal x324=(gclwh5_1*pp*x97);
IkReal x325=(x178*x62);
IkReal x326=(gclwh11_0*pz*x66);
IkReal x327=(x134*x70);
IkReal x328=(x136*x90);
IkReal x329=(x74*x87);
IkReal x330=(x169*x209);
IkReal x331=(x115*x95);
IkReal x332=(x102*x195);
IkReal x333=(x162*x62);
IkReal x334=(x149*x62);
IkReal x335=((0.10915)*gclwh7_7*x92);
IkReal x336=((0.2183)*gclwh9_7*x95);
IkReal x337=((0.2183)*gclwh11_7*x74);
IkReal x338=((0.10915)*gclwh9_7*x110);
IkReal x339=((0.2183)*gclwh7_7*x70);
IkReal x340=((0.10915)*gclwh11_7*x66);
IkReal x341=((0.10915)*gclwh14_14*x110);
IkReal x342=(x201*x74);
IkReal x343=(x143*x70);
IkReal x344=((0.10915)*gclwh12_14*x92);
IkReal x345=(x144*x95);
IkReal x346=((0.10915)*gclwh4_14*x66);
IkReal x347=((0.09465)*gclwh4_8*x66);
IkReal x348=(x90*x91);
IkReal x349=(gclwh12_3*x300);
IkReal x350=(x203*x62);
IkReal x351=(gclwh3_3*x300);
IkReal x352=(x130*x61);
IkReal x353=(gclwh3_2*r21*x102);
IkReal x354=(x212*x95);
IkReal x355=(x153*x62);
IkReal x356=(x102*x91);
IkReal x357=((0.09465)*pp*x88);
IkReal x358=(x208*x61);
IkReal x359=(x102*x211);
IkReal x360=(x166*x62);
IkReal x361=(x74*x93);
IkReal x362=(gclwh4_2*r22*x102);
IkReal x363=(gclwh4_8*npz*x62);
IkReal x364=(gclwh12_2*r21*x102);
IkReal x365=(x62*x77);
IkReal x366=((0.09465)*x297);
IkReal x367=(x174*x70);
IkReal x368=(gclwh12_8*npy*x62);
IkReal x369=(x123*x61);
IkReal x370=(x62*x68);
IkReal x371=(gclwh5_0*pz*x66);
IkReal x372=(gclwh13_9*npy*x62);
IkReal x373=(x102*x121);
IkReal x374=(x103*x90);
IkReal x375=((0.09465)*gclwh15_9*x110);
IkReal x376=(x116*x95);
IkReal x377=(x102*x103);
IkReal x378=(x138*x61);
IkReal x379=(gclwh2_0*r21*x102);
IkReal x380=(x141*x62);
IkReal x381=(x200*x62);
IkReal x382=(gclwh0_1*r20*x61);
IkReal x383=(x102*x172);
IkReal x384=((0.09465)*gclwh5_9*x66);
IkReal x385=(x62*x84);
IkReal x386=((0.09465)*gclwh13_9*x92);
IkReal x387=(x102*x135);
IkReal x388=(x62*x64);
IkReal x389=(x191*x74);
IkReal x390=(x118*x70);
IkReal x391=((0.10915)*gclwh13_15*x92);
IkReal x392=((0.10915)*gclwh5_15*x66);
IkReal x393=(x199*x95);
IkReal x394=((0.10915)*gclwh15_15*x110);
IkReal x395=(x187*x74);
IkReal x396=(x133*x70);
IkReal x397=(x128*x69);
IkReal x398=(x126*x66);
IkReal x399=((4.0)*gclwh6_11*x70);
IkReal x400=((4.0)*gclwh8_11*x95);
IkReal x401=(x128*x65);
IkReal x402=(x182*x74);
IkReal x403=(x66*x87);
IkReal x404=(x161*x70);
IkReal x405=(x110*x115);
IkReal x406=(x134*x92);
IkReal x407=(x154*x95);
IkReal x408=(x139*x74);
IkReal x409=(x110*x212);
IkReal x410=((4.0)*gclwh12_11*x70);
IkReal x411=((4.0)*gclwh4_11*x74);
IkReal x412=(x110*x144);
IkReal x413=((0.4366)*gclwh12_14*x70);
IkReal x414=((0.4366)*gclwh4_14*x74);
IkReal x415=(x143*x92);
IkReal x416=((0.4366)*gclwh14_14*x95);
IkReal x417=(x201*x66);
IkReal x418=(gclwh6_2*npy*x298);
IkReal x419=(gclwh6_2*x107*x90);
IkReal x420=(gclwh10_2*npz*x298);
IkReal x421=(gclwh8_2*x179*x60);
IkReal x422=(gclwh7_0*npy*x298);
IkReal x423=(gclwh9_0*x179*x60);
IkReal x424=(gclwh11_0*npz*x298);
IkReal x425=(gclwh7_0*x107*x90);
IkReal x426=(gclwh12_2*npy*x298);
IkReal x427=(gclwh3_2*npy*x298);
IkReal x428=(gclwh1_2*x179*x60);
IkReal x429=(gclwh14_3*x179*x90);
IkReal x430=(gclwh4_2*npz*x298);
IkReal x431=(gclwh4_3*x128*x74);
IkReal x432=(gclwh12_2*x107*x90);
IkReal x433=((1.0)*x211*x90);
IkReal x434=(gclwh3_3*x128*x70);
IkReal x435=((1.0)*gclwh4_2*pz*x66);
IkReal x436=(gclwh1_3*x179*x90);
IkReal x437=(gclwh3_2*x107*x90);
IkReal x438=(gclwh12_3*x128*x70);
IkReal x439=(gclwh14_2*x179*x60);
IkReal x440=(gclwh14_3*r20*x299);
IkReal x441=(gclwh0_0*x179*x60);
IkReal x442=(gclwh2_0*npy*x298);
IkReal x443=(gclwh5_1*x128*x74);
IkReal x444=(gclwh13_1*x128*x70);
IkReal x445=(gclwh15_0*x179*x60);
IkReal x446=(gclwh2_1*x128*x70);
IkReal x447=(gclwh0_1*x179*x90);
IkReal x448=(gclwh5_0*npz*x298);
IkReal x449=(gclwh13_0*npy*x298);
IkReal x450=((1.0)*x172*x90);
IkReal x451=((1.0)*x135*x90);
IkReal x452=(gclwh2_0*x107*x90);
IkReal x453=(gclwh13_1*x107*x61);
IkReal x454=(x189*x299);
IkReal x455=(gclwh15_1*x179*x90);
IkReal x456=(x278+x279);
IkReal x457=(x284+x283);
IkReal x458=(x245+x244);
IkReal x459=(x217+x219);
IkReal x460=(x242+x241);
IkReal x461=(x272+x273);
IkReal x462=(x317+x225+x227+x226);
IkReal x463=(x327+x233+x230+x231);
IkReal x464=(x389+x390+x265+x267);
IkReal x465=(x361+x367+x256+x257);
IkReal x466=(x294+x412+x413+x414);
IkReal x467=(x302+x303+x301+x215);
IkReal x468=(x342+x343+x341+x246);
IkReal x469=(x395+x394+x396+x271);
IkReal x470=(x337+x336+x335+x239);
IkReal x471=(x376+x259+x261+x260+x263);
IkReal x472=(x354+x254+x250+x252+x253);
IkReal x473=(x308+x310+x221+x220+x224);
IkReal x474=(x331+x329+x236+x237+x235);
IkReal x475=(x346+x344+x345+x249+x248);
IkReal x476=(x391+x393+x392+x268+x270);
IkReal x477=(x339+x338+x340+x243+x240);
IkReal x478=(x295+x296+x416+x417+x415);
IkReal x479=(x292+x293+x409+x410+x411);
IkReal x480=(x306+x304+x305+x216+x218);
IkReal x481=(x282+x281+x280+x401+x400+x402);
IkReal x482=(x290+x291+x289+x407+x406+x408);
IkReal x483=(x288+x287+x286+x403+x405+x404);
IkReal x484=(x397+x399+x398+x276+x274+x275);
IkReal x485=(((gclwh8_11*x108))+((gclwh10_11*x158))+((x174*x92))+((x66*x93))+((gclwh12_11*x81))+(((0.017917245)*x213))+(((4.0)*gclwh14_11*x95)));
IkReal x486=(x320+x319+x318+x316+x228+x419+x421+x420);
IkReal x487=(x333+x332+x330+x334+x234+x425+x424+x423);
IkReal x488=(x309+x307+x315+x314+x311+x313+x312+x223+x222+x418);
IkReal x489=(x324+x325+x326+x321+x322+x323+x328+x229+x232+x422);
IkReal x490=(x386+x387+x384+x385+x388+x264+x266+x449+x448+x447+x446+x454+x455+x452+x453+x450+x451);
IkReal x491=(x351+x350+x353+x352+x355+x357+x356+x359+x358+x347+x348+x349+x255+x251+x429+x428+x427+x426+x430+x62);
IkReal x492=(x368+x360+x362+x363+x364+x365+x366+x258+x438+x439+x431+x432+x433+x434+x435+x436+x437+x440);
IkReal x493=(x382+x383+x380+x381+x379+x378+x377+x375+x374+x373+x372+x371+x370+x369+x262+x445+x444+x441+x443+x442+x62);
op[0]=((((1.6345)*gclwh10_12*x74))+(((0.154705425)*x96))+(((-1.0)*x480))+((gclwh6_12*x100))+(((-0.007321434238125)*x94))+(((-1.6345)*gclwh6_12*x70))+(((-1.0)*gclwh4_8*x86))+x459+x467+(((-0.81725)*gclwh10_12*x66))+((x198*x89))+(((-1.0)*x214))+(((1.6345)*gclwh8_12*x95))+(((-0.007321434238125)*x76))+(((-1.0)*gclwh12_8*x80))+(((-1.0)*x89*x94)));
op[1]=(((pp*x69))+(((-1.0)*x486))+(((-1.0)*gclwh12_3*x206))+(((-1.0)*x473))+(((-0.12699240901125)*x132))+x488+x462+(((-1.0)*x181*x65))+(((0.12699240901125)*x72))+((gclwh10_11*x66)));
op[2]=((-0.17125635)+(((-1.0)*x481))+x484);
op[3]=(((gclwh10_2*x185))+(((-0.160905)*x96))+(((0.7845)*gclwh8_2*x110))+(((-1.0)*gclwh6_2*x67))+((gclwh8_2*x119))+(((-0.7845)*gclwh6_2*x92))+(((0.160905)*x205))+(((-0.14850585)*x145))+(((-0.14850585)*x148))+(((-1.569)*gclwh10_2*x74))+(((0.7845)*gclwh10_2*x66))+(((0.160905)*x114))+(((-1.0)*x456))+x277+(((-1.569)*gclwh8_2*x95))+(((0.14850585)*x207))+(((1.569)*gclwh6_2*x70)));
op[4]=((((-0.000293394886875)*x76))+(((-0.0655)*gclwh6_12*x70))+(((-1.0)*x480))+(((0.03275)*gclwh6_12*x92))+(((-0.03275)*gclwh10_12*x66))+(((-0.000293394886875)*x94))+(((-1.0)*x459))+((gclwh4_8*x176))+x214+x467+(((0.0655)*gclwh10_12*x74))+(((-1.0)*x146*x94))+(((0.0655)*gclwh8_12*x95))+(((0.006199575)*x114))+(((-0.006199575)*x96))+(((0.000293394886875)*x198)));
op[5]=(((pp*x65))+(((-1.0)*x486))+(((-1.0)*x462))+x488+x473+(((-1.0)*x181*x69))+(((-0.00076243651125)*x132))+(((0.00076243651125)*x72))+(((-1.0)*gclwh12_3*x78))+(((-1.0)*gclwh10_11*x66)));
op[6]=((((0.12699240901125)*x169))+(((-1.0)*x487))+(((-1.0)*gclwh9_10*x110))+((gclwh7_10*x92))+(((-1.0)*gclwh13_1*x206))+(((-1.0)*gclwh11_10*x66))+(((-1.0)*x463))+x489+x474+(((-0.12699240901125)*x165)));
op[7]=(((gclwh7_13*x100))+(((-1.0)*gclwh13_9*x80))+((x160*x89))+(((0.154705425)*x183))+(((-1.0)*x477))+(((-1.0)*gclwh5_9*x86))+(((-1.0)*x238))+x460+x470+(((1.6345)*gclwh9_13*x95))+(((-0.007321434238125)*x106))+(((-0.007321434238125)*x170))+(((1.6345)*gclwh11_13*x74))+(((-1.6345)*gclwh7_13*x70))+(((-1.0)*x170*x89))+(((-0.81725)*gclwh11_13*x66)));
op[8]=((((-0.160905)*x190))+(((-0.160905)*x98))+(((0.160905)*x183))+(((1.569)*gclwh7_0*x70))+(((0.14850585)*x178))+(((-0.14850585)*x149))+(((-1.0)*gclwh7_0*x67))+(((0.7845)*gclwh11_0*x66))+(((-0.14850585)*x162))+x457+(((-1.569)*gclwh11_0*x74))+(((-1.569)*gclwh9_0*x95))+(((-1.0)*x285))+((gclwh9_0*x119))+(((-0.7845)*gclwh7_0*x92))+((gclwh11_0*x185))+(((0.7845)*gclwh9_0*x110)));
op[9]=((-0.17125635)+(((-1.0)*x482))+x483);
op[10]=((((-1.0)*x487))+(((-1.0)*gclwh7_10*x92))+(((-1.0)*x474))+x489+x463+(((0.00076243651125)*x169))+(((-1.0)*gclwh13_1*x78))+((gclwh9_10*x110))+(((-0.00076243651125)*x165))+((gclwh11_10*x66)));
op[11]=((((0.000293394886875)*x160))+(((-0.03275)*gclwh9_13*x110))+(((0.03275)*gclwh7_13*x92))+(((-0.006199575)*x183))+(((-0.0655)*gclwh7_13*x70))+(((-1.0)*x477))+(((-1.0)*x460))+(((-0.000293394886875)*x106))+((gclwh13_9*x147))+(((0.0655)*gclwh11_13*x74))+(((-0.03275)*gclwh11_13*x66))+x238+x470+(((0.0655)*gclwh9_13*x95))+(((-0.000293394886875)*x170))+(((0.006199575)*x98)));
op[12]=((((1.6345)*gclwh4_8*x74))+(((1.6345)*gclwh12_8*x70))+((x113*x89))+(((-1.6345)*gclwh14_8*x95))+(((0.154705425)*x156))+(((-1.0)*x468))+(((-0.007321434238125)*x88))+((gclwh10_12*x86))+x458+x475+(((-0.81725)*gclwh4_8*x66))+(((-1.0)*x247))+(((0.007321434238125)*x113))+(((-1.0)*x88*x89))+(((-1.0)*gclwh6_12*x80))+(((-0.007321434238125)*x193)));
op[13]=((-0.679811285)+(((1.341705325)*gclwh12_3*x70))+(((-1.0)*x492))+(((-0.00600991575645741)*x208))+((gclwh14_3*x79))+(((1.341705325)*gclwh4_3*x74))+(((-1.0)*gclwh12_3*x196))+(((-0.66189404)*gclwh4_3*x66))+(((-0.66189404)*gclwh12_3*x92))+(((-1.0)*x472))+((gclwh3_3*x196))+(((-0.679811285)*gclwh1_3*x110))+(((-0.679811285)*gclwh3_3*x92))+(((1.341705325)*gclwh3_3*x70))+(((-1.0)*gclwh4_11*x66))+((gclwh1_3*x79))+(((1.341705325)*gclwh1_3*x95))+x491+x465+(((-1.341705325)*gclwh14_3*x95))+((gclwh14_11*x110))+(((-1.0)*gclwh12_11*x92))+(((0.66189404)*gclwh14_3*x110)));
op[14]=((-0.07735732)+(((-1.0)*x485))+x479);
op[15]=((((-1.0)*gclwh4_2*x185))+(((-0.14850585)*x77))+(((1.569)*gclwh3_2*x70))+(((0.7845)*pp*x91))+(((-0.7845)*gclwh12_2*x92))+(((-0.007614829125)*x113))+(((-1.0)*x478))+((x153*x63))+(((1.569)*gclwh12_2*x70))+(((-0.14850585)*x166))+(((0.00702803935125)*x91))+(((0.85)*pp*x88))+x466+(((0.007614829125)*x193))+(((-1.0)*gclwh12_2*x67))+(((-0.85)*x297))+(((0.007614829125)*x88))+((gclwh3_2*x67))+(((-0.7845)*gclwh1_2*x110))+(((0.85)*gclwh4_8*x66))+(((1.569)*gclwh4_2*x74))+(((-0.7845)*gclwh3_2*x92))+((gclwh1_2*x119))+(((-1.569)*gclwh14_2*x95))+(((1.569)*gclwh1_2*x95))+(((-1.0)*gclwh12_8*npy*x63))+(((-1.0)*gclwh4_8*npz*x63))+(((0.14850585)*x203))+(((-0.7845)*gclwh4_2*x66)));
op[16]=((((0.0655)*gclwh14_8*x95))+(((-1.0)*gclwh6_12*x147))+(((0.03275)*gclwh4_8*x66))+((x146*x88))+(((-0.0655)*gclwh12_8*x70))+(((-0.0655)*gclwh4_8*x74))+(((-1.0)*x475))+(((-0.000293394886875)*x113))+x458+x468+(((0.006199575)*x156))+(((0.000293394886875)*x88))+((gclwh10_12*x176))+(((-1.0)*x247))+(((-0.03275)*x297))+(((0.000293394886875)*x193)));
op[17]=((0.012986285)+(((-0.00493096)*gclwh14_3*x110))+(((-1.0)*gclwh14_11*x110))+(((0.008055325)*gclwh3_3*x70))+(((-1.0)*x492))+((gclwh4_11*x66))+(((0.00493096)*gclwh4_3*x66))+(((-1.0)*x465))+(((-0.012986285)*gclwh3_3*x92))+(((0.008055325)*gclwh12_3*x70))+x491+x472+(((0.008055325)*gclwh4_3*x74))+(((-0.008055325)*gclwh14_3*x95))+((gclwh3_3*x150))+(((0.00493096)*gclwh12_3*x92))+(((3.60823078949063e-5)*x130))+(((-1.0)*gclwh4_3*x71))+(((-0.012986285)*gclwh1_3*x110))+((gclwh12_11*x92))+((gclwh14_3*x184))+(((-1.0)*gclwh12_3*x150))+(((0.008055325)*gclwh1_3*x95)));
op[18]=((0.679811285)+(((0.66189404)*gclwh5_1*x66))+(((-1.0)*x490))+(((1.341705325)*gclwh0_1*x95))+(((-0.66189404)*gclwh15_1*x110))+(((0.00600991575645741)*x189))+(((-0.679811285)*gclwh0_1*x110))+(((-1.341705325)*gclwh5_1*x74))+(((-1.0)*x471))+(((-1.341705325)*gclwh13_1*x70))+(((-1.0)*gclwh13_10*x92))+((gclwh15_10*x110))+(((-1.0)*gclwh15_1*x79))+(((-1.0)*gclwh5_10*x66))+x493+x464+(((0.66189404)*gclwh13_1*x92))+(((1.341705325)*gclwh2_1*x70))+(((0.00600991575645741)*x138))+(((-0.679811285)*gclwh2_1*x92))+((gclwh0_1*x79))+(((1.341705325)*gclwh15_1*x95))+((gclwh13_1*x196)));
op[19]=(((x101*x64))+(((-1.0)*x476))+(((-1.0)*x461))+(((-1.0)*gclwh11_13*x86))+(((-0.154705425)*x180))+x269+(((-0.007321434238125)*x129))+x469+(((-1.6345)*gclwh13_9*x70))+(((0.007321434238125)*x104))+((gclwh7_13*x80))+(((0.81725)*gclwh5_9*x66))+((gclwh13_9*x100))+(((-1.0)*x101*x68))+(((-1.0)*x129*x89))+((x120*x89)));
op[20]=((((-0.7845)*gclwh15_0*x110))+((gclwh15_15*x131))+((gclwh0_0*x119))+(((-0.85)*gclwh15_9*x110))+(((-0.007614829125)*x129))+(((0.007614829125)*x104))+((gclwh2_0*x67))+(((-0.14850585)*x84))+(((-0.7845)*gclwh2_0*x92))+(((-1.0)*gclwh15_0*x119))+(((0.4366)*gclwh13_15*x70))+(((0.007614829125)*x120))+((x110*x199))+(((-1.569)*gclwh5_0*x74))+(((0.7845)*gclwh5_0*x66))+((gclwh13_0*x67))+(((1.569)*gclwh15_0*x95))+(((0.14850585)*x141))+(((-0.7845)*gclwh0_0*x110))+(((1.569)*gclwh2_0*x70))+(((-1.0)*x133*x92))+(((1.569)*gclwh0_0*x95))+((x63*x64))+(((-1.0)*x187*x66))+(((-1.0)*gclwh5_15*x111))+(((0.85)*gclwh5_9*x66))+(((0.4366)*gclwh5_15*x74))+(((-1.0)*gclwh13_15*x155))+(((0.85)*gclwh13_9*x92))+(((-0.4366)*gclwh15_15*x95))+(((0.00702803935125)*x121))+(((0.14850585)*x200))+(((-1.0)*gclwh13_9*npy*x63))+(((-1.0)*x63*x68))+(((0.7845)*gclwh13_0*x92))+(((-1.569)*gclwh13_0*x70)));
op[21]=((-0.07735732)+(((4.0)*gclwh15_10*x95))+((gclwh11_10*x158))+(((-4.0)*gclwh13_10*x70))+(((-1.0)*x110*x116))+(((-1.0)*gclwh15_10*x194))+((x118*x92))+(((0.017917245)*x127))+((gclwh9_10*x108))+((gclwh13_10*x81))+(((-4.0)*gclwh5_10*x74))+((x191*x66))+(((-1.0)*gclwh7_10*x83)));
op[22]=((-0.012986285)+((gclwh5_1*x71))+(((0.008055325)*gclwh2_1*x70))+(((-1.0)*x490))+(((-1.0)*gclwh15_10*x110))+(((-0.00493096)*gclwh5_1*x66))+(((-0.012986285)*gclwh2_1*x92))+(((-0.008055325)*gclwh5_1*x74))+(((0.008055325)*gclwh15_1*x95))+(((-1.0)*x464))+(((-0.012986285)*gclwh0_1*x110))+x493+x471+((gclwh0_1*x184))+(((0.00493096)*gclwh15_1*x110))+(((3.60823078949063e-5)*x138))+(((-0.00493096)*gclwh13_1*x92))+(((0.008055325)*gclwh0_1*x95))+((gclwh13_10*x92))+((gclwh5_10*x66))+(((-3.60823078949063e-5)*x123))+(((-0.008055325)*gclwh13_1*x70))+((gclwh13_1*x150)));
op[23]=(((x175*x68))+(((0.0655)*gclwh13_9*x70))+(((-0.006199575)*x180))+(((0.03275)*gclwh15_9*x110))+(((-0.03275)*gclwh13_9*x92))+(((-1.0)*x175*x64))+(((-0.000293394886875)*x120))+(((0.000293394886875)*x129))+((gclwh7_13*x147))+(((-0.03275)*gclwh5_9*x66))+(((-1.0)*x469))+(((-1.0)*x461))+(((-0.000293394886875)*x104))+x269+x476+(((-1.0)*gclwh11_13*x176)));
op[24]=((-0.35681135)+(((-1.0)*x481))+x484);
op[25]=((((-3.269)*gclwh8_2*x95))+((gclwh8_2*x122))+((gclwh10_2*x159))+(((-1.0)*gclwh6_2*x157))+(((3.269)*gclwh6_2*x70))+(((-3.269)*gclwh10_2*x74))+(((-1.0)*x456))+x277+((gclwh14_2*x140))+(((-0.30941085)*x145))+(((-0.30941085)*x148))+(((-1.6345)*gclwh6_2*x92))+(((1.6345)*gclwh8_2*x110))+(((1.6345)*gclwh10_2*x66)));
op[26]=((((1.569)*pp*x94))+(((0.08264838)*x109))+(((1.569)*gclwh10_12*x66))+(((-3.138)*gclwh10_12*x74))+(((0.0140560787025)*x76))+(((-1.569)*gclwh6_12*x92))+(((-0.08264838)*x177))+(((0.0140560787025)*x94))+(((-0.08264838)*x202))+(((-0.0140560787025)*x198))+(((3.138)*gclwh6_12*x70))+(((-3.138)*gclwh8_12*x95)));
op[27]=((((0.03583449)*x65))+((x168*x65))+(((8.0)*gclwh10_11*x74))+(((0.7572)*gclwh4_11*rxp2_2))+(((-0.03583449)*x69))+(((-0.03583449)*x173))+(((-1.0)*x168*x69))+(((8.0)*gclwh8_11*x95))+(((-0.7572)*x151))+(((-1.0)*x182*x66))+((gclwh12_11*x85))+(((-8.0)*gclwh6_11*x70)));
op[28]=((-0.01429865)+(((-1.0)*x484))+x481);
op[29]=((((-0.00058678977375)*x164))+(((-0.131)*gclwh8_2*x95))+(((0.00058678977375)*x186))+(((0.00058678977375)*x188))+(((0.0655)*gclwh8_2*x110))+x456+(((-0.0655)*gclwh6_2*x92))+(((-1.0)*x277))+(((0.131)*gclwh6_2*x70))+(((-0.131)*gclwh10_2*x74))+(((0.01239915)*x207))+(((0.0655)*gclwh10_2*x66))+(((-0.01239915)*x148))+(((-0.01239915)*x145)));
op[30]=(((gclwh11_0*x159))+(((-3.269)*gclwh9_0*x95))+(((-1.6345)*gclwh7_0*x92))+(((-0.30941085)*x162))+(((3.269)*gclwh7_0*x70))+(((1.6345)*gclwh9_0*x110))+((gclwh9_0*x122))+x457+(((-0.30941085)*x149))+(((-1.0)*gclwh7_0*x157))+(((-3.269)*gclwh11_0*x74))+(((1.6345)*gclwh11_0*x66))+((gclwh15_0*x140))+(((-1.0)*x285)));
op[31]=((-0.35681135)+(((-1.0)*x482))+x483);
op[32]=((((0.03583449)*x167))+(((-1.0)*x161*x92))+(((-1.0)*gclwh13_10*x85))+(((-0.03583449)*gclwh7_10*r21))+((x110*x154))+(((0.03583449)*x105))+(((-8.0)*gclwh11_10*x74))+(((8.0)*gclwh7_10*x70))+(((-0.7572)*x142))+(((0.7572)*x112))+((x139*x66))+(((-8.0)*gclwh9_10*x95)));
op[33]=((((-0.0140560787025)*x160))+(((-3.138)*gclwh11_13*x74))+(((-0.08264838)*x117))+(((1.569)*gclwh9_13*x110))+(((0.0140560787025)*x106))+(((-0.08264838)*x210))+(((0.08264838)*x137))+(((1.569)*gclwh11_13*x66))+(((3.138)*gclwh7_13*x70))+(((0.0140560787025)*x170))+(((-1.569)*gclwh7_13*x92))+(((-3.138)*gclwh9_13*x95)));
op[34]=((((-0.0655)*gclwh7_0*x92))+(((-0.00058678977375)*x195))+(((0.00058678977375)*x197))+(((0.131)*gclwh7_0*x70))+(((0.00058678977375)*x136))+(((-1.0)*x457))+x285+(((0.0655)*gclwh11_0*x66))+(((-0.131)*gclwh11_0*x74))+(((0.0655)*gclwh9_0*x110))+(((-0.131)*gclwh9_0*x95))+(((-0.01239915)*x162))+(((0.01239915)*x178))+(((-0.01239915)*x149)));
op[35]=((-0.01429865)+(((-1.0)*x483))+x482);
op[36]=((1.31196768)+(((-1.0)*x485))+x479);
op[37]=((((-1.6345)*gclwh3_2*x92))+(((3.269)*gclwh12_2*x70))+(((-1.0)*gclwh12_2*x157))+(((0.30941085)*x203))+(((-1.0)*x478))+(((-3.269)*gclwh14_2*x95))+(((-1.6345)*gclwh1_2*x110))+(((0.01464286847625)*x91))+(((-1.0)*gclwh4_2*x159))+(((3.269)*gclwh1_2*x95))+x466+(((-1.6345)*gclwh12_2*x92))+(((3.269)*gclwh3_2*x70))+((gclwh3_2*x157))+((gclwh1_2*x122))+(((-1.0)*gclwh8_2*x140))+(((-1.6345)*gclwh4_2*x66))+(((1.6345)*pp*x91))+(((3.269)*gclwh4_2*x74))+(((-0.30941085)*x77)));
IkReal x494=pz*pz;
IkReal x495=pp*pp;
IkReal x496=((0.1893)*pz);
IkReal x497=((1.7)*pz);
IkReal x498=(gclwh15_9*npx);
IkReal x499=(pp*r21);
IkReal x500=(pp*r22);
IkReal x501=((0.00702803935125)*r21);
IkReal x502=(gclwh5_9*npz);
IkReal x503=(pp*r20);
IkReal x504=(npy*pz);
IkReal x505=((4.0)*gclwh12_11);
IkReal x506=((3.60823078949063e-5)*r22);
IkReal x507=(gclwh14_3*rxp0_2);
IkReal x508=((0.000977833645875)*r20);
IkReal x509=(npz*pz);
IkReal x510=((0.000977833645875)*r21);
IkReal x511=(gclwh10_2*rxp2_2);
IkReal x512=((0.00076243651125)*rxp1_2);
IkReal x513=((0.00600991575645741)*r20);
IkReal x514=((0.154705425)*rxp1_2);
IkReal x515=((0.4366)*gclwh5_15);
IkReal x516=(gclwh6_11*rxp1_2);
IkReal x517=(gclwh7_0*rxp1_2);
IkReal x518=((0.154705425)*rxp2_2);
IkReal x519=((2.0)*gclwh11_10);
IkReal x520=((0.2970117)*rxp1_2);
IkReal x521=((0.017917245)*r21);
IkReal x522=(gclwh14_2*pz);
IkReal x523=(gclwh12_8*r21);
IkReal x524=(gclwh14_2*rxp0_2);
IkReal x525=((2.0)*gclwh4_11);
IkReal x526=((0.007321434238125)*r20);
IkReal x527=(npx*pz);
IkReal x528=((0.4366)*gclwh15_15);
IkReal x529=(gclwh10_11*rxp2_2);
IkReal x530=(gclwh5_9*rxp2_2);
IkReal x531=((0.020662095)*rxp1_2);
IkReal x532=((0.007321434238125)*r21);
IkReal x533=(gclwh0_0*r20);
IkReal x534=((0.0089586225)*r21);
IkReal x535=(gclwh13_0*pz);
IkReal x536=((1.6345)*pz);
IkReal x537=((0.007321434238125)*r22);
IkReal x538=((1.0)*pz);
IkReal x539=(gclwh14_14*rxp0_2);
IkReal x540=(gclwh4_14*r22);
IkReal x541=((0.1893)*rxp0_2);
IkReal x542=((0.00058678977375)*r22);
IkReal x543=(gclwh12_8*rxp1_2);
IkReal x544=((2.0)*gclwh9_10);
IkReal x545=((0.1893)*rxp2_2);
IkReal x546=((2.0)*gclwh15_10);
IkReal x547=((4.0)*gclwh14_11);
IkReal x548=(gclwh5_15*rxp2_2);
IkReal x549=((0.020662095)*rxp0_2);
IkReal x550=((2.0)*gclwh13_10);
IkReal x551=((0.3786)*rxp1_2);
IkReal x552=(gclwh9_0*r20);
IkReal x553=(gclwh13_9*r21);
IkReal x554=(gclwh15_1*r20);
IkReal x555=((0.000977833645875)*r22);
IkReal x556=((0.006199575)*rxp0_2);
IkReal x557=(gclwh6_2*rxp1_2);
IkReal x558=((0.0089586225)*r20);
IkReal x559=((2.0)*gclwh10_11);
IkReal x560=((2.0)*pp);
IkReal x561=((0.00058678977375)*r21);
IkReal x562=(gclwh1_3*r20);
IkReal x563=(gclwh14_14*r20);
IkReal x564=(gclwh9_0*rxp0_2);
IkReal x565=(gclwh4_3*rxp2_2);
IkReal x566=(gclwh5_0*r22);
IkReal x567=((0.03583449)*r20);
IkReal x568=((0.00058678977375)*r20);
IkReal x569=((0.2183)*gclwh13_15);
IkReal x570=((2.0)*gclwh7_10);
IkReal x571=(gclwh2_1*r21);
IkReal x572=((4.0)*gclwh15_10);
IkReal x573=((0.0089586225)*pz);
IkReal x574=((0.2183)*gclwh12_14);
IkReal x575=((0.2183)*gclwh14_14);
IkReal x576=(gclwh11_0*rxp2_2);
IkReal x577=(gclwh8_2*rxp0_2);
IkReal x578=((0.3786)*rxp2_2);
IkReal x579=(gclwh12_2*rxp1_2);
IkReal x580=(gclwh5_0*rxp2_2);
IkReal x581=((3.60823078949063e-5)*r21);
IkReal x582=(gclwh15_9*r20);
IkReal x583=((0.3786)*rxp0_2);
IkReal x584=((0.006199575)*rxp1_2);
IkReal x585=(gclwh14_8*npx);
IkReal x586=(gclwh13_15*r21);
IkReal x587=((0.017917245)*r20);
IkReal x588=(gclwh5_15*r22);
IkReal x589=((0.000293394886875)*r21);
IkReal x590=(gclwh13_0*rxp1_2);
IkReal x591=(gclwh7_10*rxp1_2);
IkReal x592=((0.000293394886875)*r22);
IkReal x593=(gclwh5_1*rxp2_2);
IkReal x594=((0.154705425)*rxp0_2);
IkReal x595=((0.4366)*gclwh13_15);
IkReal x596=((0.0089586225)*r22);
IkReal x597=((0.2970117)*rxp2_2);
IkReal x598=(gclwh5_9*r22);
IkReal x599=((0.7572)*rxp0_2);
IkReal x600=((4.0)*gclwh4_11);
IkReal x601=(gclwh15_1*rxp0_2);
IkReal x602=((0.000293394886875)*r20);
IkReal x603=((2.0)*gclwh6_11);
IkReal x604=((0.4366)*gclwh12_14);
IkReal x605=((0.017917245)*r22);
IkReal x606=(gclwh15_0*r20);
IkReal x607=(gclwh15_15*r20);
IkReal x608=((2.0)*gclwh12_11);
IkReal x609=(gclwh14_8*rxp0_2);
IkReal x610=((0.0655)*pz);
IkReal x611=((0.006199575)*rxp2_2);
IkReal x612=((0.04132419)*rxp1_2);
IkReal x613=((0.4366)*gclwh4_14);
IkReal x614=(gclwh15_0*rxp0_2);
IkReal x615=(gclwh14_8*r20);
IkReal x616=((0.03583449)*r22);
IkReal x617=((2.0)*gclwh8_11);
IkReal x618=((4.0)*gclwh13_10);
IkReal x619=(gclwh15_9*rxp0_2);
IkReal x620=((3.60823078949063e-5)*r20);
IkReal x621=((0.00702803935125)*r22);
IkReal x622=((0.2183)*gclwh5_15);
IkReal x623=(gclwh5_1*r22);
IkReal x624=((4.0)*gclwh5_10);
IkReal x625=(gclwh13_9*rxp1_2);
IkReal x626=((2.0)*gclwh5_10);
IkReal x627=((0.4366)*gclwh14_14);
IkReal x628=((0.020662095)*rxp2_2);
IkReal x629=(gclwh4_8*r22);
IkReal x630=(gclwh4_2*rxp2_2);
IkReal x631=((0.00600991575645741)*r21);
IkReal x632=((0.2183)*gclwh15_15);
IkReal x633=((0.2183)*gclwh4_14);
IkReal x634=((0.00702803935125)*r20);
IkReal x635=(gclwh12_14*r21);
IkReal x636=(gclwh4_8*rxp2_2);
IkReal x637=((0.2970117)*rxp0_2);
IkReal x638=(gclwh8_2*pz);
IkReal x639=(gclwh13_1*rxp1_2);
IkReal x640=((0.1893)*pp);
IkReal x641=(gclwh12_3*rxp1_2);
IkReal x642=((0.01464286847625)*r21);
IkReal x643=((0.1893)*rxp1_2);
IkReal x644=(gclwh4_3*r22);
IkReal x645=((2.0)*gclwh14_11);
IkReal x646=((0.03583449)*r21);
IkReal x647=((0.00195566729175)*x586);
IkReal x648=((0.00195566729175)*x588);
IkReal x649=((0.00195566729175)*x607);
IkReal x650=(gclwh15_10*x587);
IkReal x651=(gclwh7_10*x551);
IkReal x652=(gclwh5_10*x605);
IkReal x653=(gclwh9_10*x583);
IkReal x654=(gclwh13_10*x521);
IkReal x655=(gclwh11_10*x578);
IkReal x656=(gclwh12_14*x531);
IkReal x657=(gclwh6_5*x510);
IkReal x658=(gclwh4_14*x628);
IkReal x659=(gclwh8_5*x508);
IkReal x660=((0.020662095)*x539);
IkReal x661=(gclwh10_5*x555);
IkReal x662=((0.017917245)*x543);
IkReal x663=(gclwh8_11*x558);
IkReal x664=(gclwh14_11*x541);
IkReal x665=((0.017917245)*x636);
IkReal x666=(gclwh10_11*x596);
IkReal x667=(gclwh6_11*x534);
IkReal x668=(gclwh12_11*x643);
IkReal x669=(gclwh4_11*x545);
IkReal x670=((0.017917245)*x609);
IkReal x671=((0.017917245)*x530);
IkReal x672=(gclwh13_10*x643);
IkReal x673=(gclwh7_10*x534);
IkReal x674=(gclwh5_10*x545);
IkReal x675=((0.017917245)*x625);
IkReal x676=((0.017917245)*x619);
IkReal x677=(gclwh11_10*x596);
IkReal x678=(gclwh15_10*x541);
IkReal x679=(gclwh9_10*x558);
IkReal x680=(gclwh13_15*x531);
IkReal x681=((0.020662095)*x548);
IkReal x682=(gclwh7_7*x510);
IkReal x683=(gclwh9_7*x508);
IkReal x684=(gclwh15_15*x549);
IkReal x685=(gclwh11_7*x555);
IkReal x686=(gclwh12_11*x521);
IkReal x687=((0.3786)*x529);
IkReal x688=(gclwh4_11*x605);
IkReal x689=(gclwh8_11*x583);
IkReal x690=((0.00195566729175)*x540);
IkReal x691=((0.00195566729175)*x635);
IkReal x692=((0.00195566729175)*x563);
IkReal x693=((0.000977833645875)*x540);
IkReal x694=(gclwh10_5*x628);
IkReal x695=(gclwh12_14*x510);
IkReal x696=(gclwh8_5*x549);
IkReal x697=(gclwh6_5*x531);
IkReal x698=(gclwh14_14*x508);
IkReal x699=((0.000847933619625)*x523);
IkReal x700=((0.1893)*x516);
IkReal x701=(gclwh14_11*x558);
IkReal x702=((0.000847933619625)*x629);
IkReal x703=(gclwh8_11*x541);
IkReal x704=(gclwh12_11*x534);
IkReal x705=((0.1893)*x529);
IkReal x706=(gclwh4_11*x596);
IkReal x707=((0.000847933619625)*x615);
IkReal x708=((0.1893)*x591);
IkReal x709=(gclwh15_10*x558);
IkReal x710=((0.000847933619625)*x582);
IkReal x711=((0.000847933619625)*x598);
IkReal x712=(gclwh9_10*x541);
IkReal x713=(gclwh13_10*x534);
IkReal x714=((0.000847933619625)*x553);
IkReal x715=(gclwh11_10*x545);
IkReal x716=(gclwh5_10*x596);
IkReal x717=(gclwh15_15*x508);
IkReal x718=(gclwh7_7*x531);
IkReal x719=(gclwh5_15*x555);
IkReal x720=(gclwh9_7*x549);
IkReal x721=(gclwh11_7*x628);
IkReal x722=(gclwh13_15*x510);
IkReal x723=((2.0)*x494);
IkReal x724=(r21*x495);
IkReal x725=((1.0)*x495);
IkReal x726=(x499*x569);
IkReal x727=(x527*x528);
IkReal x728=(x500*x622);
IkReal x729=(x504*x595);
IkReal x730=(x503*x632);
IkReal x731=(x509*x515);
IkReal x732=(x503*x546);
IkReal x733=(x509*x624);
IkReal x734=(x504*x618);
IkReal x735=(x499*x550);
IkReal x736=(x527*x572);
IkReal x737=(x500*x626);
IkReal x738=((0.2183)*gclwh10_5*x509);
IkReal x739=((0.2183)*gclwh8_5*x527);
IkReal x740=((0.10915)*gclwh6_5*x499);
IkReal x741=((0.2183)*gclwh6_5*x504);
IkReal x742=((0.10915)*gclwh8_5*x503);
IkReal x743=((0.10915)*gclwh10_5*x500);
IkReal x744=(x640*x641);
IkReal x745=(x504*x603);
IkReal x746=(x558*x638);
IkReal x747=(gclwh10_2*pz*x500);
IkReal x748=(x496*x524);
IkReal x749=(x503*x638);
IkReal x750=(gclwh4_3*pp*x545);
IkReal x751=(gclwh10_2*r22*x573);
IkReal x752=(x496*x579);
IkReal x753=(x509*x559);
IkReal x754=(x496*x630);
IkReal x755=(x507*x640);
IkReal x756=(x527*x617);
IkReal x757=(gclwh6_2*pz*x534);
IkReal x758=(x639*x640);
IkReal x759=(x509*x519);
IkReal x760=(x527*x544);
IkReal x761=(gclwh11_0*r22*x573);
IkReal x762=(x552*x573);
IkReal x763=(gclwh5_1*pp*x545);
IkReal x764=(x496*x614);
IkReal x765=(gclwh11_0*pz*x500);
IkReal x766=(gclwh9_0*pz*x503);
IkReal x767=(gclwh15_1*pp*x541);
IkReal x768=(gclwh7_0*pz*x534);
IkReal x769=(x496*x590);
IkReal x770=(x496*x580);
IkReal x771=(x504*x570);
IkReal x772=((0.10915)*gclwh7_7*x499);
IkReal x773=((0.2183)*gclwh9_7*x527);
IkReal x774=((0.2183)*gclwh11_7*x509);
IkReal x775=((0.10915)*gclwh9_7*x503);
IkReal x776=((0.2183)*gclwh7_7*x504);
IkReal x777=((0.10915)*gclwh11_7*x500);
IkReal x778=(x500*x525);
IkReal x779=(x499*x608);
IkReal x780=(x527*x547);
IkReal x781=(x499*x574);
IkReal x782=(x527*x627);
IkReal x783=(x500*x633);
IkReal x784=(x503*x575);
IkReal x785=(x504*x604);
IkReal x786=(x509*x613);
IkReal x787=((0.10915)*gclwh12_14*x499);
IkReal x788=(x527*x575);
IkReal x789=((0.10915)*gclwh4_14*x500);
IkReal x790=((0.10915)*gclwh14_14*x503);
IkReal x791=(x509*x633);
IkReal x792=(x504*x574);
IkReal x793=((0.09465)*gclwh4_8*x500);
IkReal x794=(x503*x522);
IkReal x795=(gclwh12_3*x724);
IkReal x796=(x509*x525);
IkReal x797=(x496*x557);
IkReal x798=(gclwh3_3*x724);
IkReal x799=(x495*x562);
IkReal x800=(gclwh3_2*pz*x534);
IkReal x801=(x496*x585);
IkReal x802=(x522*x558);
IkReal x803=((0.09465)*gclwh12_8*x499);
IkReal x804=(x495*x644);
IkReal x805=(gclwh1_2*pz*x558);
IkReal x806=(x504*x608);
IkReal x807=(x496*x577);
IkReal x808=(gclwh4_2*r22*x573);
IkReal x809=(gclwh4_8*npz*x496);
IkReal x810=(gclwh12_2*pz*x534);
IkReal x811=(x496*x511);
IkReal x812=(x527*x645);
IkReal x813=((0.09465)*gclwh14_8*x503);
IkReal x814=(gclwh12_8*npy*x496);
IkReal x815=(x495*x554);
IkReal x816=(x496*x502);
IkReal x817=(gclwh5_0*pz*x500);
IkReal x818=(gclwh13_9*npy*x496);
IkReal x819=(x566*x573);
IkReal x820=(x499*x535);
IkReal x821=((0.09465)*gclwh15_9*x503);
IkReal x822=(x534*x535);
IkReal x823=(x495*x571);
IkReal x824=(x509*x626);
IkReal x825=(gclwh2_0*pz*x534);
IkReal x826=(x496*x564);
IkReal x827=(x504*x550);
IkReal x828=(x496*x576);
IkReal x829=(gclwh0_1*r20*x495);
IkReal x830=(x533*x573);
IkReal x831=((0.09465)*gclwh5_9*x500);
IkReal x832=(x496*x517);
IkReal x833=((0.09465)*gclwh13_9*x499);
IkReal x834=(gclwh15_0*pz*x558);
IkReal x835=(x496*x498);
IkReal x836=(x527*x546);
IkReal x837=((0.10915)*gclwh15_15*x503);
IkReal x838=(x509*x622);
IkReal x839=(x504*x569);
IkReal x840=((0.10915)*gclwh13_15*x499);
IkReal x841=((0.10915)*gclwh5_15*x500);
IkReal x842=(x527*x632);
IkReal x843=(gclwh6_2*npy*x723);
IkReal x844=(gclwh6_2*x499*x538);
IkReal x845=(gclwh10_2*npz*x723);
IkReal x846=(gclwh8_2*npx*x723);
IkReal x847=(gclwh7_0*npy*x723);
IkReal x848=(gclwh9_0*npx*x723);
IkReal x849=(gclwh11_0*npz*x723);
IkReal x850=(gclwh7_0*x499*x538);
IkReal x851=(gclwh12_2*npy*x723);
IkReal x852=(gclwh3_2*npy*x723);
IkReal x853=(gclwh1_2*npx*x723);
IkReal x854=(gclwh14_3*x527*x560);
IkReal x855=(gclwh4_2*npz*x723);
IkReal x856=(gclwh4_3*x509*x560);
IkReal x857=(gclwh12_2*x499*x538);
IkReal x858=(gclwh1_2*x503*x538);
IkReal x859=(gclwh3_3*x504*x560);
IkReal x860=(gclwh4_2*x500*x538);
IkReal x861=(gclwh1_3*x527*x560);
IkReal x862=(gclwh3_2*x499*x538);
IkReal x863=(gclwh12_3*x504*x560);
IkReal x864=(gclwh14_2*npx*x723);
IkReal x865=(gclwh14_3*r20*x725);
IkReal x866=(gclwh0_0*npx*x723);
IkReal x867=(gclwh2_0*npy*x723);
IkReal x868=(gclwh5_1*x509*x560);
IkReal x869=(gclwh13_1*x504*x560);
IkReal x870=(gclwh15_0*npx*x723);
IkReal x871=(gclwh2_1*x504*x560);
IkReal x872=(gclwh0_1*x527*x560);
IkReal x873=(gclwh5_0*npz*x723);
IkReal x874=(gclwh13_0*npy*x723);
IkReal x875=(gclwh0_0*x503*x538);
IkReal x876=(gclwh15_0*x503*x538);
IkReal x877=(gclwh2_0*x499*x538);
IkReal x878=((1.0)*gclwh13_1*x724);
IkReal x879=(x623*x725);
IkReal x880=(gclwh15_1*x527*x560);
IkReal x881=(x656+x658);
IkReal x882=(x694+x696);
IkReal x883=(x681+x680);
IkReal x884=(x720+x721);
IkReal x885=(x678+x679+x677+x771);
IkReal x886=(x663+x664+x666+x745);
IkReal x887=(x700+x701+x796+x806);
IkReal x888=(x708+x709+x827+x824);
IkReal x889=(x649+x731+x730+x729);
IkReal x890=(x657+x739+x738+x740);
IkReal x891=(x698+x791+x790+x792);
IkReal x892=(x692+x786+x784+x785);
IkReal x893=(x682+x773+x772+x774);
IkReal x894=(x717+x837+x838+x839);
IkReal x895=(x713+x712+x715+x716+x836);
IkReal x896=(x703+x706+x704+x705+x812);
IkReal x897=(x672+x673+x674+x759+x760);
IkReal x898=(x669+x668+x667+x756+x753);
IkReal x899=(((gclwh14_11*x587))+(((0.3786)*x516))+((x503*x645))+((x509*x600))+((x504*x505)));
IkReal x900=(x690+x691+x782+x783+x781);
IkReal x901=(x650+x651+x734+x733+x732);
IkReal x902=(x695+x693+x787+x788+x789);
IkReal x903=(x719+x722+x841+x840+x842);
IkReal x904=(x659+x661+x742+x743+x741);
IkReal x905=(x647+x648+x726+x727+x728);
IkReal x906=(x683+x685+x777+x776+x775);
IkReal x907=(x652+x653+x654+x655+x737+x736+x735);
IkReal x908=(x689+x688+x687+x686+x779+x778+x780);
IkReal x909=(x676+x770+x768+x769+x767+x850+x849+x848);
IkReal x910=(x670+x755+x754+x757+x752+x845+x844+x846);
IkReal x911=(x671+x675+x758+x764+x765+x766+x761+x762+x763+x847);
IkReal x912=(x662+x665+x751+x750+x746+x747+x744+x748+x749+x843);
IkReal x913=(x711+x714+x878+x879+x871+x872+x873+x874+x875+x876+x877+x880+x834+x835+x831+x832+x833);
IkReal x914=(x496+x699+x702+x793+x795+x794+x797+x799+x798+x852+x853+x851+x854+x855+x805+x804+x801+x800+x803+x802);
IkReal x915=(x707+x856+x857+x858+x859+x865+x864+x863+x862+x861+x860+x814+x813+x810+x811+x809+x808+x807);
IkReal x916=(x496+x710+x869+x868+x867+x866+x870+x818+x819+x816+x817+x815+x829+x828+x823+x822+x821+x820+x826+x825+x830);
op[38]=((((-0.0039113345835)*x635))+(((0.0039113345835)*x563))+((x503*x627))+(((0.8732)*gclwh12_14*x504))+(((0.8732)*gclwh4_14*x509))+(((-1.0)*gclwh8_12*x637))+(((-1.0)*gclwh10_12*x597))+(((-0.8732)*gclwh14_14*x527))+(((-0.0039113345835)*x540))+(((-1.0)*x499*x604))+((gclwh6_12*x520))+(((-1.0)*x500*x613)));
op[39]=((-0.05940486)+(((0.7572)*x529))+(((-1.0)*x503*x547))+((x500*x600))+((gclwh8_11*x599))+(((-0.7572)*x516))+(((-8.0)*gclwh4_11*x509))+((gclwh12_11*x646))+(((-8.0)*gclwh12_11*x504))+(((-1.0)*gclwh14_11*x567))+((x499*x505))+((gclwh4_11*x616))+(((8.0)*gclwh14_11*x527)));
op[40]=((0.02168232)+(((-1.0)*x899))+x908);
op[41]=(((gclwh1_2*x568))+((gclwh3_2*x561))+(((-0.01239915)*x577))+((gclwh14_2*x568))+(((-0.131)*npx*x522))+(((-1.0)*gclwh12_2*x561))+(((-0.0655)*gclwh1_2*x503))+(((-1.0)*x892))+(((0.01239915)*x557))+(((0.0655)*gclwh14_2*x503))+(((-0.0655)*gclwh3_2*x499))+(((0.131)*gclwh12_2*x504))+(((-0.0655)*gclwh12_2*x499))+(((0.131)*gclwh1_2*x527))+(((-0.0655)*gclwh4_2*x500))+x900+(((-0.01239915)*x511))+(((0.131)*gclwh4_2*x509))+(((0.131)*gclwh3_2*x504))+(((-1.0)*gclwh4_2*x542)));
op[42]=((((-3.269)*gclwh13_0*x504))+(((-0.30941085)*x517))+(((-1.6345)*gclwh2_0*x499))+(((-1.6345)*gclwh15_0*x503))+(((0.30941085)*x564))+(((3.269)*gclwh0_0*x527))+(((-1.0)*x905))+(((1.6345)*gclwh13_0*x499))+(((-3.269)*gclwh5_0*x509))+(((-1.6345)*gclwh0_0*x503))+(((0.30941085)*x576))+(((0.01464286847625)*x566))+((gclwh13_0*x642))+((gclwh2_0*x642))+(((-0.01464286847625)*x606))+(((0.01464286847625)*x533))+x889+(((3.269)*gclwh2_0*x504))+(((3.269)*gclwh15_0*x527))+(((1.6345)*gclwh5_0*x500)));
op[43]=((1.31196768)+(((-1.0)*x901))+x907);
op[44]=((0.05940486)+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*gclwh15_10*x567))+(((-8.0)*gclwh5_10*x509))+(((-1.0)*x503*x572))+(((-8.0)*gclwh13_10*x504))+(((-0.7572)*x591))+(((8.0)*gclwh15_10*x527))+((gclwh13_10*x646))+((gclwh5_10*x616))+((x499*x618))+((x500*x624))+((gclwh9_10*x599)));
op[45]=(((x499*x595))+(((0.8732)*gclwh15_15*x527))+(((-1.0)*x503*x528))+(((-1.0)*gclwh7_13*x520))+(((-0.8732)*gclwh5_15*x509))+((gclwh9_13*x637))+(((-0.8732)*gclwh13_15*x504))+(((-0.0039113345835)*x607))+((x500*x515))+(((0.0039113345835)*x586))+(((0.0039113345835)*x588))+((gclwh11_13*x597)));
op[46]=((((0.131)*gclwh15_0*x527))+(((0.131)*gclwh2_0*x504))+(((-0.0655)*gclwh15_0*x503))+(((-0.0655)*gclwh0_0*x503))+(((0.00058678977375)*x533))+(((-0.131)*gclwh13_0*x504))+(((0.131)*gclwh0_0*x527))+(((0.0655)*gclwh13_0*x499))+((gclwh5_0*x542))+(((-1.0)*x889))+(((0.01239915)*x576))+(((-0.0655)*gclwh2_0*x499))+((gclwh13_0*x561))+((gclwh2_0*x561))+(((-0.131)*gclwh5_0*x509))+x905+(((0.0655)*gclwh5_0*x500))+(((-0.01239915)*x517))+(((-1.0)*gclwh15_0*x568))+(((0.01239915)*x564)));
op[47]=((0.02168232)+(((-1.0)*x907))+x901);
op[48]=(((gclwh10_12*x537))+(((-1.0)*gclwh12_8*x514))+((gclwh8_12*x526))+(((-1.0)*gclwh4_8*x518))+(((-1.0)*x904))+(((0.81725)*gclwh8_12*x503))+(((-0.81725)*gclwh6_12*x499))+(((-1.0)*x881))+((gclwh14_8*x594))+(((0.81725)*gclwh10_12*x500))+x660+(((-1.6345)*gclwh10_12*x509))+(((1.6345)*gclwh6_12*x504))+(((-1.6345)*gclwh8_12*x527))+(((-1.0)*gclwh6_12*x532))+x890);
op[49]=((((-1.0)*gclwh10_11*x500))+(((-1.0)*x910))+(((-0.12699240901125)*x565))+((gclwh6_11*x499))+(((-1.0)*x886))+(((-0.12699240901125)*x641))+x898+(((0.12699240901125)*x507))+x912+(((-1.0)*gclwh8_11*x503)));
op[50]=((0.17125635)+((gclwh12_11*x551))+((gclwh6_11*x521))+(((-1.0)*x500*x559))+(((4.0)*gclwh8_11*x527))+(((-4.0)*gclwh6_11*x504))+(((-1.0)*gclwh14_11*x583))+((gclwh4_11*x578))+(((4.0)*gclwh10_11*x509))+(((-1.0)*gclwh8_11*x587))+((x499*x603))+(((-1.0)*gclwh10_11*x605))+(((-1.0)*x503*x617)));
op[51]=((((-0.04132419)*x539))+(((-0.160905)*x609))+(((-1.0)*gclwh8_2*x634))+(((0.160905)*x636))+(((-0.14850585)*x524))+((gclwh6_2*x501))+(((0.14850585)*x579))+(((1.569)*gclwh10_2*x509))+(((-1.0)*gclwh10_2*x621))+(((0.04132419)*gclwh4_14*rxp2_2))+(((0.160905)*x543))+(((-0.7845)*gclwh8_2*x503))+((gclwh12_14*x612))+(((0.14850585)*x630))+(((0.7845)*gclwh6_2*x499))+(((-1.569)*gclwh6_2*x504))+(((1.569)*gclwh8_2*x527))+(((-0.7845)*gclwh10_2*x500)));
op[52]=((((-0.0655)*gclwh8_12*x527))+(((0.0655)*gclwh6_12*x504))+(((-0.03275)*gclwh6_12*x499))+(((-1.0)*x904))+((gclwh4_8*x611))+(((0.03275)*gclwh8_12*x503))+((gclwh10_12*x592))+(((-0.0655)*gclwh10_12*x509))+(((-1.0)*x660))+(((0.006199575)*x543))+(((0.03275)*gclwh10_12*x500))+(((-1.0)*gclwh14_8*x556))+x881+x890+((gclwh8_12*x602))+(((-1.0)*gclwh6_12*x589)));
op[53]=(((gclwh8_11*x503))+(((0.00076243651125)*x507))+(((-1.0)*x898))+(((-1.0)*x910))+((gclwh10_11*x500))+(((-0.00076243651125)*x565))+x886+(((-1.0)*gclwh6_11*x499))+x912+(((-1.0)*gclwh12_3*x512)));
op[54]=(((gclwh11_10*x500))+((gclwh9_10*x503))+(((-1.0)*x909))+(((-1.0)*x897))+(((-0.12699240901125)*x593))+(((0.12699240901125)*x601))+(((-1.0)*gclwh7_10*x499))+(((-0.12699240901125)*x639))+x885+x911);
op[55]=((((-1.0)*gclwh13_9*x514))+(((-1.6345)*gclwh9_13*x527))+(((0.81725)*gclwh11_13*x500))+(((0.81725)*gclwh9_13*x503))+(((-1.0)*gclwh5_9*x518))+(((-1.0)*x906))+(((-1.0)*gclwh7_13*x532))+(((-1.0)*x883))+((gclwh11_13*x537))+(((1.6345)*gclwh7_13*x504))+x684+((gclwh15_9*x594))+x893+(((-1.6345)*gclwh11_13*x509))+(((-0.81725)*gclwh7_13*x499))+((gclwh9_13*x526)));
op[56]=((((-1.0)*gclwh13_15*x612))+(((-0.7845)*gclwh11_0*x500))+(((0.14850585)*x580))+(((-0.00702803935125)*x552))+(((-1.569)*gclwh7_0*x504))+(((-1.0)*gclwh11_0*x621))+((gclwh7_0*x501))+(((-0.14850585)*x614))+(((1.569)*gclwh9_0*x527))+(((0.04132419)*gclwh15_15*rxp0_2))+(((-0.160905)*x625))+(((0.14850585)*x590))+(((-0.160905)*x530))+(((1.569)*gclwh11_0*x509))+(((-0.7845)*gclwh9_0*x503))+(((0.160905)*x619))+(((0.7845)*gclwh7_0*x499))+(((-0.04132419)*x548)));
op[57]=((0.17125635)+(((4.0)*gclwh11_10*x509))+((gclwh13_10*x551))+((gclwh5_10*x578))+(((-1.0)*gclwh9_10*x587))+(((-1.0)*gclwh11_10*x605))+(((-1.0)*gclwh15_10*x583))+(((-1.0)*x503*x544))+(((-1.0)*x500*x519))+((x499*x570))+((gclwh7_10*x521))+(((-4.0)*gclwh7_10*x504))+(((4.0)*gclwh9_10*x527)));
op[58]=((((-1.0)*gclwh11_10*x500))+(((-1.0)*x909))+(((-1.0)*x885))+(((-1.0)*gclwh13_1*x512))+(((-1.0)*gclwh9_10*x503))+(((0.00076243651125)*x601))+x897+((gclwh7_10*x499))+x911+(((-0.00076243651125)*x593)));
op[59]=((((-0.0655)*gclwh9_13*x527))+(((-0.03275)*gclwh7_13*x499))+(((-1.0)*gclwh7_13*x589))+(((0.03275)*gclwh9_13*x503))+(((-1.0)*x684))+(((-1.0)*x906))+(((-1.0)*gclwh15_9*x556))+(((0.0655)*gclwh7_13*x504))+(((0.006199575)*x530))+x883+x893+((gclwh9_13*x602))+((gclwh13_9*x584))+((gclwh11_13*x592))+(((0.03275)*gclwh11_13*x500))+(((-0.0655)*gclwh11_13*x509)));
op[60]=((((-1.0)*gclwh10_12*x518))+(((-1.0)*gclwh4_8*x537))+(((1.6345)*gclwh4_8*x509))+(((1.6345)*gclwh12_8*x504))+(((-1.0)*x902))+((gclwh6_12*x514))+(((-0.81725)*gclwh4_8*x500))+(((-0.007321434238125)*x523))+(((-1.0)*gclwh8_12*x594))+(((-0.81725)*gclwh12_8*x499))+((gclwh14_8*x526))+(((-1.0)*x697))+(((0.81725)*gclwh14_8*x503))+x882+x891+(((-1.6345)*gclwh14_8*x527)));
op[61]=((0.679811285)+((gclwh3_3*x631))+(((-0.679811285)*gclwh3_3*x499))+(((-1.0)*gclwh14_11*x503))+(((-0.66189404)*gclwh12_3*x499))+(((-0.00600991575645741)*x644))+(((1.341705325)*gclwh12_3*x504))+((gclwh12_11*x499))+(((-1.0)*x915))+((gclwh14_3*x513))+(((-1.0)*x887))+(((0.66189404)*gclwh14_3*x503))+(((1.341705325)*gclwh4_3*x509))+(((-0.66189404)*gclwh4_3*x500))+(((1.341705325)*gclwh3_3*x504))+x896+(((-1.0)*gclwh12_3*x631))+(((1.341705325)*gclwh1_3*x527))+(((-1.341705325)*gclwh14_3*x527))+(((-0.679811285)*gclwh1_3*x503))+x914+((gclwh4_11*x500))+((gclwh1_3*x513)));
op[62]=((0.07735732)+(((-1.0)*x899))+x908);
op[63]=((((-1.569)*gclwh1_2*x527))+(((-1.0)*gclwh4_8*npz*x497))+(((-1.569)*gclwh12_2*x504))+(((-0.85)*gclwh14_8*x503))+(((0.85)*gclwh4_8*x500))+(((-1.0)*gclwh1_2*x634))+(((0.14850585)*x511))+(((-1.0)*x892))+(((0.14850585)*x577))+(((-0.14850585)*x557))+(((-0.7845)*gclwh14_2*x503))+((gclwh12_2*x501))+(((1.569)*npx*x522))+((x497*x585))+(((0.007614829125)*x523))+(((0.7845)*gclwh1_2*x503))+(((-1.569)*gclwh4_2*x509))+(((-0.007614829125)*x615))+(((-1.0)*gclwh12_8*npy*x497))+(((0.85)*gclwh12_8*x499))+(((0.7845)*gclwh3_2*x499))+(((0.7845)*gclwh4_2*x500))+x900+(((0.007614829125)*x629))+(((0.7845)*gclwh12_2*x499))+(((-1.0)*gclwh14_2*x634))+(((-1.0)*gclwh3_2*x501))+((gclwh4_2*x621))+(((-1.569)*gclwh3_2*x504)));
op[64]=((((0.0655)*gclwh14_8*x527))+(((-1.0)*gclwh14_8*x602))+(((0.000293394886875)*x523))+(((-1.0)*x891))+(((0.03275)*gclwh12_8*x499))+((gclwh4_8*x592))+(((-0.0655)*gclwh12_8*x504))+(((-1.0)*gclwh8_12*x556))+((gclwh6_12*x584))+(((-1.0)*x697))+x882+(((-0.03275)*gclwh14_8*x503))+(((-0.0655)*gclwh4_8*x509))+(((-1.0)*gclwh10_12*x611))+x902+(((0.03275)*gclwh4_8*x500)));
op[65]=((-0.012986285)+(((0.008055325)*gclwh3_3*x504))+(((3.60823078949063e-5)*x562))+(((0.008055325)*gclwh4_3*x509))+((gclwh14_11*x503))+(((0.00493096)*gclwh12_3*x499))+(((-0.012986285)*gclwh3_3*x499))+(((-1.0)*x896))+((gclwh3_3*x581))+(((-1.0)*x915))+(((-1.0)*gclwh12_3*x581))+(((-1.0)*gclwh4_11*x500))+(((-0.008055325)*gclwh14_3*x527))+(((0.008055325)*gclwh12_3*x504))+(((0.008055325)*gclwh1_3*x527))+(((-0.00493096)*gclwh14_3*x503))+(((0.00493096)*gclwh4_3*x500))+(((-1.0)*gclwh4_3*x506))+x887+x914+(((-1.0)*gclwh12_11*x499))+((gclwh14_3*x620))+(((-0.012986285)*gclwh1_3*x503)));
op[66]=((-0.679811285)+((gclwh0_1*x513))+((gclwh13_1*x631))+(((-1.341705325)*gclwh5_1*x509))+(((-1.0)*gclwh15_1*x513))+(((1.341705325)*gclwh15_1*x527))+(((1.341705325)*gclwh0_1*x527))+(((-1.0)*gclwh15_10*x503))+(((-1.0)*x913))+(((-0.679811285)*gclwh0_1*x503))+(((0.00600991575645741)*x571))+(((-1.0)*x888))+(((-0.66189404)*gclwh15_1*x503))+(((0.66189404)*gclwh13_1*x499))+(((-1.341705325)*gclwh13_1*x504))+((gclwh5_10*x500))+((gclwh13_10*x499))+x895+(((-0.679811285)*gclwh2_1*x499))+x916+(((0.66189404)*gclwh5_1*x500))+(((0.00600991575645741)*x623))+(((1.341705325)*gclwh2_1*x504)));
op[67]=((((0.81725)*gclwh13_9*x499))+((gclwh9_13*x594))+(((-1.0)*x894))+((gclwh11_13*x518))+(((-1.0)*x884))+((gclwh13_9*x532))+(((-1.0)*x502*x536))+(((0.81725)*gclwh5_9*x500))+(((-1.0)*gclwh15_9*x526))+x718+(((-0.81725)*gclwh15_9*x503))+((gclwh5_9*x537))+((x498*x536))+x903+(((-1.6345)*gclwh13_9*x504))+(((-1.0)*gclwh7_13*x514)));
op[68]=((((-1.0)*gclwh13_0*x501))+(((-0.14850585)*x564))+(((-0.85)*gclwh15_9*x503))+(((-0.7845)*gclwh13_0*x499))+(((-1.569)*gclwh0_0*x527))+(((-1.0)*gclwh13_9*npy*x497))+(((-1.569)*gclwh2_0*x504))+(((-1.0)*x497*x502))+(((0.7845)*gclwh2_0*x499))+(((0.007614829125)*x598))+(((0.14850585)*x517))+((x497*x498))+(((-0.7845)*gclwh5_0*x500))+(((-1.0)*x889))+(((0.00702803935125)*x606))+(((-0.00702803935125)*x566))+(((-0.14850585)*x576))+(((0.85)*gclwh5_9*x500))+(((0.007614829125)*x553))+(((0.7845)*gclwh15_0*x503))+(((-1.569)*gclwh15_0*x527))+(((-0.007614829125)*x582))+(((-1.0)*gclwh2_0*x501))+(((1.569)*gclwh13_0*x504))+(((0.7845)*gclwh0_0*x503))+(((0.85)*gclwh13_9*x499))+x905+(((1.569)*gclwh5_0*x509))+(((-0.00702803935125)*x533)));
op[69]=((0.07735732)+(((-1.0)*x907))+x901);
op[70]=((0.012986285)+(((-1.0)*gclwh13_10*x499))+((gclwh5_1*x506))+((gclwh0_1*x620))+((gclwh13_1*x581))+(((-1.0)*gclwh5_10*x500))+(((0.008055325)*gclwh0_1*x527))+(((-1.0)*x895))+(((-1.0)*x913))+(((-0.012986285)*gclwh2_1*x499))+(((3.60823078949063e-5)*x571))+(((0.00493096)*gclwh15_1*x503))+(((-0.00493096)*gclwh13_1*x499))+(((-0.012986285)*gclwh0_1*x503))+(((0.008055325)*gclwh2_1*x504))+(((-3.60823078949063e-5)*x554))+(((0.008055325)*gclwh15_1*x527))+(((-0.00493096)*gclwh5_1*x500))+x888+x916+(((-0.008055325)*gclwh5_1*x509))+(((-0.008055325)*gclwh13_1*x504))+((gclwh15_10*x503)));
op[71]=((((-1.0)*gclwh7_13*x584))+((gclwh9_13*x556))+(((0.0655)*gclwh13_9*x504))+((gclwh11_13*x611))+(((-1.0)*x903))+((x502*x610))+(((-1.0)*x884))+(((0.03275)*gclwh15_9*x503))+(((-1.0)*gclwh5_9*x592))+(((0.000293394886875)*x582))+(((-1.0)*x498*x610))+x718+x894+(((-0.03275)*gclwh13_9*x499))+(((-0.000293394886875)*x553))+(((-0.03275)*gclwh5_9*x500)));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x917=htj1*htj1;
CheckValue<IkReal> x918=IKPowWithIntegerCheck(((1.0)+x917),-1);
if(!x918.valid){
continue;
}
cj1array[numsolutions]=((x918.value)*(((1.0)+(((-1.0)*x917)))));
CheckValue<IkReal> x919=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x919.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x919.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x920=htj2*htj2;
CheckValue<IkReal> x921=IKPowWithIntegerCheck(((1.0)+x920),-1);
if(!x921.valid){
continue;
}
cj2array[numsolutions]=((x921.value)*(((1.0)+(((-1.0)*x920)))));
CheckValue<IkReal> x922=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x922.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x922.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x923=htj3*htj3;
CheckValue<IkReal> x924=IKPowWithIntegerCheck(((1.0)+x923),-1);
if(!x924.valid){
continue;
}
cj3array[numsolutions]=((x924.value)*(((1.0)+(((-1.0)*x923)))));
CheckValue<IkReal> x925=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x925.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x925.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x926=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x926);
rxp1_0=(pz*r11);
rxp1_1=(r01*x926);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x927=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x927);
rxp1_0=(pz*r11);
rxp1_1=(r01*x927);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x928=IKPowWithIntegerCheck(r22,-1);
if(!x928.valid){
continue;
}
CheckValue<IkReal> x929=IKPowWithIntegerCheck(sj3,-1);
if(!x929.valid){
continue;
}
sj4array[0]=((x928.value)*(x929.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x930=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x930);
rxp1_0=(pz*r11);
rxp1_1=(r01*x930);
IkReal x931=((16.0)*sj4);
IkReal x932=(cj1*cj2);
IkReal x933=((4.0)*sj3);
IkReal x934=((8.0)*sj4);
IkReal x935=((4.0)*cj4);
IkReal x936=(sj1*sj2);
IkReal x937=((4.0)*sj4);
IkReal x938=(cj3*r02);
IkReal x939=((16.0)*sj3);
IkReal x940=((8.0)*sj3);
IkReal x941=((12.0)*cj4);
IkReal x942=((12.0)*sj4);
IkReal x943=(cj3*r12);
IkReal x944=(r11*x933);
IkReal x945=(r01*x933);
IkReal x946=(r01*x936);
IkReal x947=(cj3*cj4*r01);
IkReal x948=(cj3*cj4*r11);
IkReal x949=(cj3*r10*x935);
IkReal x950=(x942*x943);
IkReal x951=(cj3*r00*x935);
IkReal x952=(x938*x942);
IkReal x953=(r00*x936*x937);
IkReal x954=(r02*x936*x941);
IkReal x955=(r00*x932*x937);
IkReal x956=(r02*x932*x941);
IkReal x957=(r10*x936*x937);
IkReal x958=(r12*x932*x941);
IkReal x959=(r12*x936*x941);
IkReal x960=(r10*x932*x937);
IkReal x961=(x955+x944);
IkReal x962=(x957+x945);
IkReal x963=(x953+x949);
IkReal x964=(x956+x950);
IkReal x965=(x960+x951);
IkReal x966=(x959+x952);
j5eval[0]=((((0.5)*(IKabs((x962+x958+(((-1.0)*x965))+(((-1.0)*x966)))))))+(((0.5)*(IKabs(((((-1.0)*r02*x932*x935))+((r02*x935*x936))+(((-1.0)*x937*x943))+x961+(((-1.0)*x963)))))))+(((0.5)*(IKabs((x963+x954+(((-1.0)*x964))+(((-1.0)*x961)))))))+(((0.5)*(IKabs((x965+x958+(((-1.0)*x962))+(((-1.0)*x966)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x939))+((r01*x931*x932))+(((-16.0)*x948))+(((-1.0)*x931*x946)))))))+(((0.5)*(IKabs(((((-1.0)*r11*x931*x932))+((r11*x931*x936))+(((-16.0)*x947))+(((-1.0)*r00*x939)))))))+(IKabs((((r01*x932*x934))+(((-8.0)*x948))+(((-1.0)*r10*x940))+(((-1.0)*x934*x946)))))+(IKabs(((((-1.0)*r11*x932*x934))+(((-1.0)*r00*x940))+((r11*x934*x936))+(((-8.0)*x947)))))+(((0.5)*(IKabs((x961+x954+(((-1.0)*x964))+(((-1.0)*x963)))))))+(((0.5)*(IKabs(((((-1.0)*r12*x935*x936))+(((-1.0)*x937*x938))+x962+((r12*x932*x935))+(((-1.0)*x965))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x967=(r10*sj3);
IkReal x968=(r01*sj4);
IkReal x969=(cj1*cj2);
IkReal x970=(cj3*cj4);
IkReal x971=(sj1*sj2);
IkReal x972=(cj4*r02);
IkReal x973=((4.0)*r11*sj3);
IkReal x974=(cj3*r12*sj4);
IkReal x975=((4.0)*r00*sj4);
IkReal x976=((4.0)*r10*x970);
IkReal x977=((12.0)*x974);
IkReal x978=((4.0)*x974);
IkReal x979=(x969*x975);
IkReal x980=(x971*x975);
IkReal x981=((12.0)*x971*x972);
IkReal x982=((12.0)*x969*x972);
IkReal x983=((4.0)*x971*x972);
IkReal x984=((4.0)*x969*x972);
IkReal x985=(x973+x979);
IkReal x986=(x980+x976);
IkReal x987=(x984+x978);
IkReal x988=(x982+x977);
IkReal x989=((((8.0)*x968*x969))+(((-8.0)*x967))+(((-8.0)*x968*x971))+(((-8.0)*r11*x970)));
op[0]=((((-1.0)*x986))+(((-1.0)*x987))+x985+x983);
op[1]=x989;
op[2]=((((-1.0)*x986))+(((-1.0)*x988))+x985+x981);
op[3]=((((16.0)*x968*x969))+(((-16.0)*r11*x970))+(((-16.0)*x968*x971))+(((-16.0)*x967)));
op[4]=((((-1.0)*x985))+(((-1.0)*x988))+x986+x981);
op[5]=x989;
op[6]=((((-1.0)*x985))+(((-1.0)*x987))+x986+x983);
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x990=(cj1*cj2);
IkReal x991=((4.0)*cj4);
IkReal x992=(sj1*sj2);
IkReal x993=((4.0)*sj4);
IkReal x994=(r00*sj3);
IkReal x995=(cj3*r02);
IkReal x996=((4.0)*r01*sj3);
IkReal x997=((16.0)*r11*sj4);
IkReal x998=(cj3*cj4*r01);
IkReal x999=((12.0)*cj4*r12);
IkReal x1000=((8.0)*r11*sj4);
IkReal x1001=(cj3*r00*x991);
IkReal x1002=((12.0)*sj4*x995);
IkReal x1003=(x993*x995);
IkReal x1004=(r10*x990*x993);
IkReal x1005=(r10*x992*x993);
IkReal x1006=(x990*x999);
IkReal x1007=(x992*x999);
IkReal x1008=(r12*x990*x991);
IkReal x1009=(r12*x991*x992);
IkReal x1010=(x1005+x996);
IkReal x1011=(x1004+x1001);
IkReal x1012=(x1009+x1003);
IkReal x1013=(x1007+x1002);
IkReal x1014=(((x1000*x992))+(((-1.0)*x1000*x990))+(((-8.0)*x998))+(((-8.0)*x994)));
j5evalpoly[0]=((((htj5*htj5)*((x1011+x1006+(((-1.0)*x1010))+(((-1.0)*x1013))))))+x1011+x1008+(((-1.0)*x1010))+(((-1.0)*x1012))+(((htj5*htj5*htj5)*((((x992*x997))+(((-1.0)*x990*x997))+(((-16.0)*x998))+(((-16.0)*x994))))))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1010+x1008+(((-1.0)*x1011))+(((-1.0)*x1012))))))+((x1014*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5*htj5*htj5)*((x1010+x1006+(((-1.0)*x1011))+(((-1.0)*x1013))))))+((htj5*x1014)));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1015=(cj5*sj4);
IkReal x1016=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1015))+((r01*x1016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1015))+((cj4*r12))+(((-1.0)*r11*x1016)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1015))+((r01*x1016))))+IKsqr((((r10*x1015))+((cj4*r12))+(((-1.0)*r11*x1016))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1015))+((r01*x1016))), (((r10*x1015))+((cj4*r12))+(((-1.0)*r11*x1016))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1017=IKcos(j0);
IkReal x1018=IKsin(j0);
IkReal x1019=(r02*sj4);
IkReal x1020=((1.0)*sj3);
IkReal x1021=(r12*sj4);
IkReal x1022=(cj3*cj4);
IkReal x1023=((1.0)*cj5);
IkReal x1024=(r11*sj5);
IkReal x1025=((1.0)*cj1);
IkReal x1026=((0.39225)*sj1);
IkReal x1027=(cj5*r01);
IkReal x1028=(r01*sj5);
IkReal x1029=(r00*sj5);
IkReal x1030=((1.0)*sj1);
IkReal x1031=((0.39225)*cj2);
IkReal x1032=(cj5*r11);
IkReal x1033=(r10*sj5);
IkReal x1034=((1.0)*cj4);
IkReal x1035=(sj2*x1017);
IkReal x1036=(sj2*x1018);
IkReal x1037=(cj4*cj5*sj3);
IkReal x1038=(cj1*x1017);
IkReal x1039=(cj2*x1017);
IkReal x1040=(cj1*x1018);
IkReal x1041=(cj2*x1018);
evalcond[0]=(x1017+((sj4*x1024))+(((-1.0)*r12*x1034))+(((-1.0)*r10*sj4*x1023)));
evalcond[1]=((((-1.0)*r00*sj4*x1023))+((sj4*x1028))+(((-1.0)*r02*x1034))+(((-1.0)*x1018)));
evalcond[2]=(((x1031*x1038))+(((0.425)*x1038))+(((-1.0)*x1026*x1035))+(((-0.10915)*x1018))+(((-1.0)*px))+(((-0.09465)*x1027))+(((-0.09465)*x1029)));
evalcond[3]=((((0.10915)*x1017))+(((-1.0)*x1026*x1036))+((x1031*x1040))+(((-1.0)*py))+(((-0.09465)*x1032))+(((-0.09465)*x1033))+(((0.425)*x1040)));
evalcond[4]=((((-1.0)*x1025*x1039))+((cj3*x1019))+((sj1*x1035))+((x1022*x1028))+(((-1.0)*r00*x1022*x1023))+((sj3*x1027))+((sj3*x1029)));
evalcond[5]=((((-1.0)*x1025*x1041))+((sj1*x1036))+((sj3*x1033))+((sj3*x1032))+((x1022*x1024))+((cj3*x1021))+(((-1.0)*r10*x1022*x1023)));
evalcond[6]=(((r00*x1037))+(((-1.0)*x1025*x1035))+(((-1.0)*x1019*x1020))+(((-1.0)*x1030*x1039))+(((-1.0)*cj4*x1020*x1028))+((cj3*x1027))+((cj3*x1029)));
evalcond[7]=(((r10*x1037))+(((-1.0)*x1025*x1036))+((cj3*x1033))+((cj3*x1032))+(((-1.0)*x1020*x1021))+(((-1.0)*cj4*x1020*x1024))+(((-1.0)*x1030*x1041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1042=IKPowWithIntegerCheck(cj3,-1);
if(!x1042.valid){
continue;
}
CheckValue<IkReal> x1043=IKPowWithIntegerCheck(r22,-1);
if(!x1043.valid){
continue;
}
sj4array[0]=((-1.0)*(x1042.value)*(x1043.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1044=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1044);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1044);
IkReal x1045=((16.0)*sj4);
IkReal x1046=(cj1*cj2);
IkReal x1047=((4.0)*sj3);
IkReal x1048=((8.0)*sj4);
IkReal x1049=((4.0)*cj4);
IkReal x1050=(sj1*sj2);
IkReal x1051=((4.0)*sj4);
IkReal x1052=(cj3*r02);
IkReal x1053=((16.0)*sj3);
IkReal x1054=((8.0)*sj3);
IkReal x1055=((12.0)*cj4);
IkReal x1056=((12.0)*sj4);
IkReal x1057=(cj3*r12);
IkReal x1058=(r11*x1047);
IkReal x1059=(r01*x1047);
IkReal x1060=(r01*x1050);
IkReal x1061=(cj3*cj4*r01);
IkReal x1062=(cj3*cj4*r11);
IkReal x1063=(cj3*r10*x1049);
IkReal x1064=(x1056*x1057);
IkReal x1065=(cj3*r00*x1049);
IkReal x1066=(x1052*x1056);
IkReal x1067=(r00*x1050*x1051);
IkReal x1068=(r02*x1050*x1055);
IkReal x1069=(r00*x1046*x1051);
IkReal x1070=(r02*x1046*x1055);
IkReal x1071=(r10*x1050*x1051);
IkReal x1072=(r12*x1046*x1055);
IkReal x1073=(r12*x1050*x1055);
IkReal x1074=(r10*x1046*x1051);
IkReal x1075=(x1058+x1069);
IkReal x1076=(x1059+x1071);
IkReal x1077=(x1063+x1067);
IkReal x1078=(x1070+x1064);
IkReal x1079=(x1074+x1065);
IkReal x1080=(x1073+x1066);
j5eval[0]=((((0.5)*(IKabs((((r12*x1046*x1049))+(((-1.0)*r12*x1049*x1050))+x1076+(((-1.0)*x1079))+(((-1.0)*x1051*x1052)))))))+(((0.5)*(IKabs(((((-1.0)*r10*x1053))+(((-1.0)*x1045*x1060))+(((-16.0)*x1062))+((r01*x1045*x1046)))))))+(((0.5)*(IKabs((x1075+(((-1.0)*x1077))+((r02*x1049*x1050))+(((-1.0)*r02*x1046*x1049))+(((-1.0)*x1051*x1057)))))))+(IKabs(((((-1.0)*r00*x1054))+(((-1.0)*r11*x1046*x1048))+((r11*x1048*x1050))+(((-8.0)*x1061)))))+(((0.5)*(IKabs((x1079+x1072+(((-1.0)*x1080))+(((-1.0)*x1076)))))))+(IKabs(((((-1.0)*r10*x1054))+(((-1.0)*x1048*x1060))+((r01*x1046*x1048))+(((-8.0)*x1062)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1053))+(((-1.0)*r11*x1045*x1046))+(((-16.0)*x1061))+((r11*x1045*x1050)))))))+(((0.5)*(IKabs((x1077+x1068+(((-1.0)*x1075))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1075+x1068+(((-1.0)*x1077))+(((-1.0)*x1078)))))))+(((0.5)*(IKabs((x1076+x1072+(((-1.0)*x1080))+(((-1.0)*x1079))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1081=(r10*sj3);
IkReal x1082=(r01*sj4);
IkReal x1083=(cj1*cj2);
IkReal x1084=(cj3*cj4);
IkReal x1085=(sj1*sj2);
IkReal x1086=(cj4*r02);
IkReal x1087=((4.0)*r11*sj3);
IkReal x1088=(cj3*r12*sj4);
IkReal x1089=((4.0)*r00*sj4);
IkReal x1090=((4.0)*r10*x1084);
IkReal x1091=((12.0)*x1088);
IkReal x1092=((4.0)*x1088);
IkReal x1093=(x1083*x1089);
IkReal x1094=(x1085*x1089);
IkReal x1095=((12.0)*x1085*x1086);
IkReal x1096=((12.0)*x1083*x1086);
IkReal x1097=((4.0)*x1085*x1086);
IkReal x1098=((4.0)*x1083*x1086);
IkReal x1099=(x1093+x1087);
IkReal x1100=(x1094+x1090);
IkReal x1101=(x1092+x1098);
IkReal x1102=(x1096+x1091);
IkReal x1103=((((-8.0)*r11*x1084))+(((-8.0)*x1082*x1085))+(((8.0)*x1082*x1083))+(((-8.0)*x1081)));
op[0]=(x1097+x1099+(((-1.0)*x1100))+(((-1.0)*x1101)));
op[1]=x1103;
op[2]=(x1095+x1099+(((-1.0)*x1100))+(((-1.0)*x1102)));
op[3]=((((-16.0)*x1081))+(((-16.0)*x1082*x1085))+(((16.0)*x1082*x1083))+(((-16.0)*r11*x1084)));
op[4]=(x1100+x1095+(((-1.0)*x1099))+(((-1.0)*x1102)));
op[5]=x1103;
op[6]=(x1100+x1097+(((-1.0)*x1099))+(((-1.0)*x1101)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1104=(cj1*cj2);
IkReal x1105=((4.0)*cj4);
IkReal x1106=(sj1*sj2);
IkReal x1107=((4.0)*sj4);
IkReal x1108=(r00*sj3);
IkReal x1109=(cj3*r02);
IkReal x1110=((4.0)*r01*sj3);
IkReal x1111=((16.0)*r11*sj4);
IkReal x1112=(cj3*cj4*r01);
IkReal x1113=((12.0)*cj4*r12);
IkReal x1114=((8.0)*r11*sj4);
IkReal x1115=(cj3*r00*x1105);
IkReal x1116=((12.0)*sj4*x1109);
IkReal x1117=(x1107*x1109);
IkReal x1118=(r10*x1104*x1107);
IkReal x1119=(r10*x1106*x1107);
IkReal x1120=(x1104*x1113);
IkReal x1121=(x1106*x1113);
IkReal x1122=(r12*x1104*x1105);
IkReal x1123=(r12*x1105*x1106);
IkReal x1124=(x1110+x1119);
IkReal x1125=(x1115+x1118);
IkReal x1126=(x1117+x1123);
IkReal x1127=(x1116+x1121);
IkReal x1128=((((-1.0)*x1104*x1114))+(((-8.0)*x1108))+(((-8.0)*x1112))+((x1106*x1114)));
j5evalpoly[0]=(((htj5*x1128))+((x1128*(htj5*htj5*htj5*htj5*htj5)))+x1122+x1125+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1122+x1124+(((-1.0)*x1126))+(((-1.0)*x1125))))))+(((htj5*htj5*htj5)*(((((-16.0)*x1112))+(((-16.0)*x1108))+(((-1.0)*x1104*x1111))+((x1106*x1111))))))+(((-1.0)*x1126))+(((-1.0)*x1124))+(((htj5*htj5)*((x1120+x1125+(((-1.0)*x1127))+(((-1.0)*x1124))))))+(((htj5*htj5*htj5*htj5)*((x1120+x1124+(((-1.0)*x1127))+(((-1.0)*x1125)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1129=(cj5*sj4);
IkReal x1130=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x1130))+(((-1.0)*r00*x1129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1129))+(((-1.0)*r11*x1130))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x1130))+(((-1.0)*r00*x1129))))+IKsqr((((r10*x1129))+(((-1.0)*r11*x1130))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x1130))+(((-1.0)*r00*x1129))), (((r10*x1129))+(((-1.0)*r11*x1130))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1131=IKcos(j0);
IkReal x1132=IKsin(j0);
IkReal x1133=(r02*sj4);
IkReal x1134=((1.0)*sj3);
IkReal x1135=(r12*sj4);
IkReal x1136=(cj3*cj4);
IkReal x1137=((1.0)*cj5);
IkReal x1138=(r11*sj5);
IkReal x1139=((1.0)*cj1);
IkReal x1140=((0.39225)*sj1);
IkReal x1141=(cj5*r01);
IkReal x1142=(r01*sj5);
IkReal x1143=(r00*sj5);
IkReal x1144=((1.0)*sj1);
IkReal x1145=((0.39225)*cj2);
IkReal x1146=(cj5*r11);
IkReal x1147=(r10*sj5);
IkReal x1148=((1.0)*cj4);
IkReal x1149=(sj2*x1131);
IkReal x1150=(sj2*x1132);
IkReal x1151=(cj4*cj5*sj3);
IkReal x1152=(cj1*x1131);
IkReal x1153=(cj2*x1131);
IkReal x1154=(cj1*x1132);
IkReal x1155=(cj2*x1132);
evalcond[0]=(x1131+((sj4*x1138))+(((-1.0)*r12*x1148))+(((-1.0)*r10*sj4*x1137)));
evalcond[1]=(((sj4*x1142))+(((-1.0)*r02*x1148))+(((-1.0)*x1132))+(((-1.0)*r00*sj4*x1137)));
evalcond[2]=((((-1.0)*x1140*x1149))+(((0.425)*x1152))+(((-1.0)*px))+(((-0.10915)*x1132))+(((-0.09465)*x1143))+(((-0.09465)*x1141))+((x1145*x1152)));
evalcond[3]=((((0.425)*x1154))+(((-1.0)*x1140*x1150))+(((0.10915)*x1131))+(((-1.0)*py))+(((-0.09465)*x1146))+(((-0.09465)*x1147))+((x1145*x1154)));
evalcond[4]=(((cj3*x1133))+((sj3*x1141))+((sj3*x1143))+((sj1*x1149))+(((-1.0)*x1139*x1153))+(((-1.0)*r00*x1136*x1137))+((x1136*x1142)));
evalcond[5]=(((cj3*x1135))+((x1136*x1138))+(((-1.0)*r10*x1136*x1137))+((sj3*x1146))+((sj3*x1147))+(((-1.0)*x1139*x1155))+((sj1*x1150)));
evalcond[6]=(((r00*x1151))+(((-1.0)*x1144*x1153))+((cj3*x1143))+((cj3*x1141))+(((-1.0)*x1139*x1149))+(((-1.0)*x1133*x1134))+(((-1.0)*cj4*x1134*x1142)));
evalcond[7]=((((-1.0)*x1144*x1155))+(((-1.0)*cj4*x1134*x1138))+((cj3*x1146))+((cj3*x1147))+(((-1.0)*x1134*x1135))+(((-1.0)*x1139*x1150))+((r10*x1151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1156=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1156);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1156);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1157=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1157);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1157);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1158=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1158);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1158);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1159=IKPowWithIntegerCheck(r22,-1);
if(!x1159.valid){
continue;
}
sj4array[0]=((-1.0)*(x1159.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1160=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1162 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1162.valid){
continue;
}
IkReal x1161=x1162.value;
j5array[0]=((-1.0)*x1161);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1161)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1163=(cj5*sj4);
IkReal x1164=(sj4*sj5);
if( IKabs((((r01*x1164))+(((-1.0)*r00*x1163)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1163))+(((-1.0)*r11*x1164)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1164))+(((-1.0)*r00*x1163))))+IKsqr((((r10*x1163))+(((-1.0)*r11*x1164))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1164))+(((-1.0)*r00*x1163))), (((r10*x1163))+(((-1.0)*r11*x1164))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1165=IKcos(j0);
IkReal x1166=IKsin(j0);
IkReal x1167=(cj5*r01);
IkReal x1168=(sj4*sj5);
IkReal x1169=(cj5*r11);
IkReal x1170=((0.425)*cj1);
IkReal x1171=(r00*sj5);
IkReal x1172=(r10*sj5);
IkReal x1173=((1.0)*cj1*sj2);
IkReal x1174=((1.0)*cj2*sj1);
IkReal x1175=((1.0)*cj5*sj4);
evalcond[0]=(x1165+((r11*x1168))+(((-1.0)*r10*x1175)));
evalcond[1]=(((r01*x1168))+(((-1.0)*r00*x1175))+(((-1.0)*x1166)));
evalcond[2]=((((-1.0)*x1165*x1174))+(((-1.0)*x1165*x1173))+x1167+x1171);
evalcond[3]=(x1169+x1172+(((-1.0)*x1166*x1174))+(((-1.0)*x1166*x1173)));
evalcond[4]=((((-0.10915)*x1166))+((x1165*x1170))+(((-0.09465)*x1167))+(((-0.09465)*x1171))+(((-1.0)*px)));
evalcond[5]=(((x1166*x1170))+(((-0.09465)*x1169))+(((-0.09465)*x1172))+(((0.10915)*x1165))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1176=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1176);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1176);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1177=IKPowWithIntegerCheck(r22,-1);
if(!x1177.valid){
continue;
}
sj4array[0]=((x1177.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1178=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1178);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1178);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1180 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1180.valid){
continue;
}
IkReal x1179=x1180.value;
j5array[0]=((-1.0)*x1179);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1179)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1181=(cj5*sj4);
IkReal x1182=(sj4*sj5);
if( IKabs((((r01*x1182))+(((-1.0)*r00*x1181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1181))+(((-1.0)*r11*x1182)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1182))+(((-1.0)*r00*x1181))))+IKsqr((((r10*x1181))+(((-1.0)*r11*x1182))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1182))+(((-1.0)*r00*x1181))), (((r10*x1181))+(((-1.0)*r11*x1182))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1183=IKcos(j0);
IkReal x1184=IKsin(j0);
IkReal x1185=(sj4*sj5);
IkReal x1186=(cj5*r11);
IkReal x1187=((1.0)*sj5);
IkReal x1188=((0.425)*cj1);
IkReal x1189=((0.09465)*sj5);
IkReal x1190=((1.0)*cj5);
IkReal x1191=((1.0)*cj1*sj2);
IkReal x1192=((1.0)*cj2*sj1);
evalcond[0]=(x1183+((r11*x1185))+(((-1.0)*r10*sj4*x1190)));
evalcond[1]=((((-1.0)*r00*sj4*x1190))+((r01*x1185))+(((-1.0)*x1184)));
evalcond[2]=(((x1183*x1188))+(((-0.09465)*cj5*r01))+(((-0.10915)*x1184))+(((-1.0)*px))+(((-1.0)*r00*x1189)));
evalcond[3]=((((-0.09465)*x1186))+((x1184*x1188))+(((0.10915)*x1183))+(((-1.0)*r10*x1189))+(((-1.0)*py)));
evalcond[4]=((((-1.0)*x1183*x1192))+(((-1.0)*x1183*x1191))+(((-1.0)*r00*x1187))+(((-1.0)*r01*x1190)));
evalcond[5]=((((-1.0)*x1184*x1191))+(((-1.0)*x1184*x1192))+(((-1.0)*r10*x1187))+(((-1.0)*x1186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1193=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1193);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1193);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1194=IKPowWithIntegerCheck(r22,-1);
if(!x1194.valid){
continue;
}
sj4array[0]=((x1194.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1195=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1195);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1195);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
IkReal x1196=x1197.value;
j5array[0]=((-1.0)*x1196);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1196)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1198=(cj5*sj4);
IkReal x1199=(sj4*sj5);
if( IKabs((((r01*x1199))+(((-1.0)*r00*x1198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1198))+(((-1.0)*r11*x1199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1199))+(((-1.0)*r00*x1198))))+IKsqr((((r10*x1198))+(((-1.0)*r11*x1199))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1199))+(((-1.0)*r00*x1198))), (((r10*x1198))+(((-1.0)*r11*x1199))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1200=IKcos(j0);
IkReal x1201=IKsin(j0);
IkReal x1202=(cj5*r01);
IkReal x1203=(sj4*sj5);
IkReal x1204=(r00*sj5);
IkReal x1205=(sj1*sj2);
IkReal x1206=(cj5*r11);
IkReal x1207=((0.39225)*cj2);
IkReal x1208=(r10*sj5);
IkReal x1209=((0.39225)*x1205);
IkReal x1210=(cj1*x1200);
IkReal x1211=((1.0)*x1201);
IkReal x1212=((1.0)*cj5*sj4);
IkReal x1213=(cj1*x1201);
evalcond[0]=(x1200+((r11*x1203))+(((-1.0)*r10*x1212)));
evalcond[1]=((((-1.0)*r00*x1212))+((r01*x1203))+(((-1.0)*x1211)));
evalcond[2]=(x1204+x1202+(((-1.0)*cj2*x1210))+((x1200*x1205)));
evalcond[3]=(x1208+x1206+(((-1.0)*cj1*cj2*x1211))+((x1201*x1205)));
evalcond[4]=((((0.425)*x1210))+(((-0.10915)*x1201))+((x1207*x1210))+(((-1.0)*px))+(((-1.0)*x1200*x1209))+(((-0.09465)*x1202))+(((-0.09465)*x1204)));
evalcond[5]=((((0.425)*x1213))+(((0.10915)*x1200))+((x1207*x1213))+(((-1.0)*py))+(((-1.0)*x1201*x1209))+(((-0.09465)*x1208))+(((-0.09465)*x1206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1214=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1214);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1214);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1215=IKPowWithIntegerCheck(r22,-1);
if(!x1215.valid){
continue;
}
sj4array[0]=((-1.0)*(x1215.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1216=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1216);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1216);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1218 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1218.valid){
continue;
}
IkReal x1217=x1218.value;
j5array[0]=((-1.0)*x1217);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1217)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1219=(cj5*sj4);
IkReal x1220=(sj4*sj5);
if( IKabs((((r01*x1220))+(((-1.0)*r00*x1219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1220))+((r10*x1219)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1220))+(((-1.0)*r00*x1219))))+IKsqr(((((-1.0)*r11*x1220))+((r10*x1219))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1220))+(((-1.0)*r00*x1219))), ((((-1.0)*r11*x1220))+((r10*x1219))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1221=IKcos(j0);
IkReal x1222=IKsin(j0);
IkReal x1223=(sj4*sj5);
IkReal x1224=(cj5*r11);
IkReal x1225=(cj5*r01);
IkReal x1226=((1.0)*sj5);
IkReal x1227=((0.09465)*sj5);
IkReal x1228=(sj1*sj2);
IkReal x1229=((0.39225)*cj2);
IkReal x1230=((0.39225)*x1228);
IkReal x1231=((1.0)*x1222);
IkReal x1232=(cj1*x1221);
IkReal x1233=((1.0)*cj5*sj4);
IkReal x1234=(cj1*x1222);
evalcond[0]=(x1221+(((-1.0)*r10*x1233))+((r11*x1223)));
evalcond[1]=((((-1.0)*r00*x1233))+((r01*x1223))+(((-1.0)*x1231)));
evalcond[2]=((((-1.0)*r00*x1226))+(((-1.0)*x1225))+((x1221*x1228))+(((-1.0)*cj2*x1232)));
evalcond[3]=((((-1.0)*cj1*cj2*x1231))+(((-1.0)*x1224))+(((-1.0)*r10*x1226))+((x1222*x1228)));
evalcond[4]=((((-1.0)*r00*x1227))+(((-1.0)*x1221*x1230))+(((-1.0)*px))+(((-0.09465)*x1225))+(((0.425)*x1232))+(((-0.10915)*x1222))+((x1229*x1232)));
evalcond[5]=((((-1.0)*x1222*x1230))+(((-1.0)*py))+(((-0.09465)*x1224))+(((-1.0)*r10*x1227))+(((0.425)*x1234))+(((0.10915)*x1221))+((x1229*x1234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1235=IKPowWithIntegerCheck(r22,-1);
if(!x1235.valid){
continue;
}
CheckValue<IkReal> x1236=IKPowWithIntegerCheck(sj3,-1);
if(!x1236.valid){
continue;
}
sj4array[0]=((x1235.value)*(x1236.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1237=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1237);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1237);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1238=((4.0)*r01);
IkReal x1239=((16.0)*r00);
IkReal x1240=(cj3*sj2);
IkReal x1241=((8.0)*r00);
IkReal x1242=(cj2*cj3);
IkReal x1243=(cj4*r01);
IkReal x1244=((16.0)*cj1);
IkReal x1245=((8.0)*sj1);
IkReal x1246=((16.0)*sj1);
IkReal x1247=((8.0)*cj1);
IkReal x1248=(sj2*sj3);
IkReal x1249=(cj2*sj3);
IkReal x1250=(sj1*x1249);
IkReal x1251=((4.0)*cj4*r00);
IkReal x1252=(((sj1*x1248*x1251))+((x1238*x1250))+((cj1*x1238*x1248))+((sj1*x1238*x1240)));
IkReal x1253=(((cj1*x1238*x1242))+((cj1*x1240*x1251))+((sj1*x1242*x1251))+((cj1*x1249*x1251)));
IkReal x1254=((((-1.0)*x1252))+x1253);
IkReal x1255=(((x1241*x1250))+(((-1.0)*cj1*x1241*x1242))+(((-1.0)*x1243*x1245*x1248))+((x1243*x1247*x1249))+((cj1*x1241*x1248))+((x1240*x1243*x1247))+((sj1*x1240*x1241))+((x1242*x1243*x1245)));
IkReal x1256=((((-1.0)*x1253))+x1252);
op[0]=x1254;
op[1]=x1255;
op[2]=x1254;
op[3]=(((sj1*x1239*x1240))+(((-1.0)*x1243*x1246*x1248))+((x1243*x1244*x1249))+((x1239*x1250))+((x1240*x1243*x1244))+(((-1.0)*cj1*x1239*x1242))+((x1242*x1243*x1246))+((cj1*x1239*x1248)));
op[4]=x1256;
op[5]=x1255;
op[6]=x1256;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1257=(cj5*sj4);
IkReal x1258=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1257))+((r01*x1258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1257))+(((-1.0)*r11*x1258)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1257))+((r01*x1258))))+IKsqr((((r10*x1257))+(((-1.0)*r11*x1258))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1257))+((r01*x1258))), (((r10*x1257))+(((-1.0)*r11*x1258))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1259=IKcos(j0);
IkReal x1260=IKsin(j0);
IkReal x1261=((0.39225)*sj1);
IkReal x1262=((1.0)*cj3);
IkReal x1263=((1.0)*cj1);
IkReal x1264=(r11*sj5);
IkReal x1265=(cj5*r01);
IkReal x1266=(cj5*r11);
IkReal x1267=(r01*sj5);
IkReal x1268=(cj3*cj4);
IkReal x1269=(r00*sj5);
IkReal x1270=((0.39225)*cj2);
IkReal x1271=((1.0)*sj1);
IkReal x1272=(r10*sj5);
IkReal x1273=(sj2*x1259);
IkReal x1274=(cj4*cj5*r00);
IkReal x1275=(cj1*x1260);
IkReal x1276=(sj2*x1260);
IkReal x1277=(cj4*cj5*r10);
IkReal x1278=((1.0)*cj4*sj3);
IkReal x1279=(cj1*x1259);
IkReal x1280=(cj2*x1259);
IkReal x1281=((1.0)*cj5*sj4);
evalcond[0]=(x1259+((sj4*x1264))+(((-1.0)*r10*x1281)));
evalcond[1]=(((sj4*x1267))+(((-1.0)*r00*x1281))+(((-1.0)*x1260)));
evalcond[2]=(((sj1*x1273))+(((-1.0)*x1263*x1280))+((x1267*x1268))+(((-1.0)*x1262*x1274))+((sj3*x1269))+((sj3*x1265)));
evalcond[3]=(((sj3*x1272))+(((-1.0)*cj2*x1260*x1263))+((sj1*x1276))+((x1264*x1268))+(((-1.0)*x1262*x1277))+((sj3*x1266)));
evalcond[4]=(((sj3*x1274))+(((-1.0)*x1267*x1278))+((cj3*x1265))+((cj3*x1269))+(((-1.0)*x1263*x1273))+(((-1.0)*x1271*x1280)));
evalcond[5]=(((sj3*x1277))+(((-1.0)*cj2*x1260*x1271))+((cj3*x1266))+(((-1.0)*x1263*x1276))+((cj3*x1272))+(((-1.0)*x1264*x1278)));
evalcond[6]=((((-0.10915)*x1260))+(((-0.09465)*x1265))+(((-0.09465)*x1269))+(((-1.0)*x1261*x1273))+(((-1.0)*px))+(((0.425)*x1279))+((x1270*x1279)));
evalcond[7]=((((-0.09465)*x1272))+(((-0.09465)*x1266))+(((-1.0)*x1261*x1276))+(((0.10915)*x1259))+(((-1.0)*py))+(((0.425)*x1275))+((x1270*x1275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1282=IKPowWithIntegerCheck(cj3,-1);
if(!x1282.valid){
continue;
}
CheckValue<IkReal> x1283=IKPowWithIntegerCheck(r22,-1);
if(!x1283.valid){
continue;
}
sj4array[0]=((-1.0)*(x1282.value)*(x1283.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1284=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1284);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1284);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1285=((4.0)*r01);
IkReal x1286=((16.0)*r00);
IkReal x1287=(cj3*sj2);
IkReal x1288=((8.0)*r00);
IkReal x1289=(cj2*cj3);
IkReal x1290=(cj4*r01);
IkReal x1291=((16.0)*cj1);
IkReal x1292=((8.0)*sj1);
IkReal x1293=((16.0)*sj1);
IkReal x1294=((8.0)*cj1);
IkReal x1295=(sj2*sj3);
IkReal x1296=(cj2*sj3);
IkReal x1297=(sj1*x1296);
IkReal x1298=((4.0)*cj4*r00);
IkReal x1299=(((sj1*x1295*x1298))+((x1285*x1297))+((sj1*x1285*x1287))+((cj1*x1285*x1295)));
IkReal x1300=(((sj1*x1289*x1298))+((cj1*x1285*x1289))+((cj1*x1296*x1298))+((cj1*x1287*x1298)));
IkReal x1301=(x1300+(((-1.0)*x1299)));
IkReal x1302=(((sj1*x1287*x1288))+(((-1.0)*cj1*x1288*x1289))+((x1290*x1294*x1296))+(((-1.0)*x1290*x1292*x1295))+((x1287*x1290*x1294))+((x1289*x1290*x1292))+((x1288*x1297))+((cj1*x1288*x1295)));
IkReal x1303=(x1299+(((-1.0)*x1300)));
op[0]=x1301;
op[1]=x1302;
op[2]=x1301;
op[3]=(((sj1*x1286*x1287))+((cj1*x1286*x1295))+((x1290*x1291*x1296))+(((-1.0)*x1290*x1293*x1295))+((x1286*x1297))+((x1287*x1290*x1291))+((x1289*x1290*x1293))+(((-1.0)*cj1*x1286*x1289)));
op[4]=x1303;
op[5]=x1302;
op[6]=x1303;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1304=(cj5*sj4);
IkReal x1305=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1304))+((r01*x1305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1304))+(((-1.0)*r11*x1305)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1304))+((r01*x1305))))+IKsqr((((r10*x1304))+(((-1.0)*r11*x1305))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1304))+((r01*x1305))), (((r10*x1304))+(((-1.0)*r11*x1305))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1306=IKcos(j0);
IkReal x1307=IKsin(j0);
IkReal x1308=((0.39225)*sj1);
IkReal x1309=((1.0)*cj3);
IkReal x1310=((1.0)*cj1);
IkReal x1311=(r11*sj5);
IkReal x1312=(cj5*r01);
IkReal x1313=(cj5*r11);
IkReal x1314=(r01*sj5);
IkReal x1315=(cj3*cj4);
IkReal x1316=(r00*sj5);
IkReal x1317=((0.39225)*cj2);
IkReal x1318=((1.0)*sj1);
IkReal x1319=(r10*sj5);
IkReal x1320=(sj2*x1306);
IkReal x1321=(cj4*cj5*r00);
IkReal x1322=(cj1*x1307);
IkReal x1323=(sj2*x1307);
IkReal x1324=(cj4*cj5*r10);
IkReal x1325=((1.0)*cj4*sj3);
IkReal x1326=(cj1*x1306);
IkReal x1327=(cj2*x1306);
IkReal x1328=((1.0)*cj5*sj4);
evalcond[0]=(x1306+((sj4*x1311))+(((-1.0)*r10*x1328)));
evalcond[1]=((((-1.0)*x1307))+(((-1.0)*r00*x1328))+((sj4*x1314)));
evalcond[2]=((((-1.0)*x1309*x1321))+((sj3*x1316))+((sj3*x1312))+((x1314*x1315))+(((-1.0)*x1310*x1327))+((sj1*x1320)));
evalcond[3]=((((-1.0)*x1309*x1324))+((sj3*x1313))+((sj3*x1319))+((x1311*x1315))+(((-1.0)*cj2*x1307*x1310))+((sj1*x1323)));
evalcond[4]=(((sj3*x1321))+(((-1.0)*x1314*x1325))+((cj3*x1316))+((cj3*x1312))+(((-1.0)*x1310*x1320))+(((-1.0)*x1318*x1327)));
evalcond[5]=((((-1.0)*cj2*x1307*x1318))+((sj3*x1324))+((cj3*x1313))+((cj3*x1319))+(((-1.0)*x1310*x1323))+(((-1.0)*x1311*x1325)));
evalcond[6]=((((-1.0)*x1308*x1320))+(((-0.10915)*x1307))+(((-1.0)*px))+(((-0.09465)*x1316))+(((-0.09465)*x1312))+(((0.425)*x1326))+((x1317*x1326)));
evalcond[7]=((((-1.0)*x1308*x1323))+(((0.10915)*x1306))+(((-1.0)*py))+(((-0.09465)*x1313))+(((-0.09465)*x1319))+(((0.425)*x1322))+((x1317*x1322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1331 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1331.valid){
continue;
}
IkReal x1329=((1.0)*(x1331.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1332=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1332.valid){
continue;
}
if( (((-1.0)*(x1332.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1332.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1330=((-1.0)*(IKasin(((-1.0)*(x1332.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1329))+(((-1.0)*x1330)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1329))+(((1.0)*x1330)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1333=cj5*cj5;
IkReal x1334=r21*r21;
IkReal x1335=(sj3*x1333);
IkReal x1336=(((sj3*(r22*r22)))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((x1335*(r20*r20)))+((sj3*x1334))+(((-1.0)*x1334*x1335)));
j4eval[0]=x1336;
j4eval[1]=IKsign(x1336);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1337=cj5*cj5;
IkReal x1338=r21*r21;
IkReal x1339=((1.0)*cj3);
IkReal x1340=(cj3*x1337);
IkReal x1341=((((-1.0)*x1339*(r22*r22)))+(((-1.0)*x1337*x1339*(r20*r20)))+((x1338*x1340))+(((-1.0)*x1338*x1339))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1341;
j4eval[1]=IKsign(x1341);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1342=cj1*cj1;
IkReal x1343=cj2*cj2;
IkReal x1344=(cj1*sj1*sj2);
IkReal x1345=(cj2*x1342);
IkReal x1346=(x1342*x1343);
j0eval[0]=((6.19369221392727)+x1342+(((-11.4971359451148)*cj2*x1344))+(((-5.74856797255738)*x1343))+(((12.4570625281677)*x1345))+(((11.4971359451148)*x1346))+(((-12.4570625281677)*x1344)));
j0eval[1]=IKsign(((66309514.0)+(((-61544025.0)*x1343))+(((133365000.0)*x1345))+(((123088050.0)*x1346))+(((-123088050.0)*cj2*x1344))+(((10705975.0)*x1342))+(((-133365000.0)*x1344))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1347=((1.0)*cj5);
IkReal x1348=((1.0)*sj5);
IkReal x1349=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1349;
j0eval[1]=((IKabs(((((-1.0)*r00*x1348))+(((-1.0)*r01*x1347)))))+(IKabs(((((-1.0)*r11*x1347))+(((-1.0)*r10*x1348))))));
j0eval[2]=IKsign(x1349);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1350=cj5*cj5;
IkReal x1351=r21*r21;
IkReal x1352=(sj1*sj2);
IkReal x1353=(r21*sj5);
IkReal x1354=(cj5*r20);
IkReal x1355=(cj1*cj2);
IkReal x1356=(x1351+(r22*r22)+(((-1.0)*x1350*x1351))+((x1350*(r20*r20)))+(((-2.0)*x1353*x1354)));
j4eval[0]=x1356;
j4eval[1]=IKsign(x1356);
j4eval[2]=((IKabs(((((-1.0)*x1352*x1354))+((x1354*x1355))+(((-1.0)*x1353*x1355))+((x1352*x1353)))))+(IKabs((((r22*x1352))+(((-1.0)*r22*x1355))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1357=IKsin(j0);
IkReal x1358=IKcos(j0);
evalcond[0]=((((-0.10915)*x1357))+(((-1.0)*px))+(((0.425)*x1358)));
evalcond[1]=((((0.10915)*x1358))+(((-1.0)*py))+(((0.425)*x1357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1359=((1.0)*cj5);
IkReal x1360=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1359)));
j4eval[0]=x1360;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1359))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1360);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1361=((1.0)*cj5);
IkReal x1362=((((-1.0)*r11*x1361))+(((-1.0)*r10*sj5)));
j4eval[0]=x1362;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1361)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1362);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1363=cj5*cj5;
IkReal x1364=((1.0)*sj5);
IkReal x1365=(cj5*r20);
IkReal x1366=(r11*r21);
IkReal x1367=(x1366+(((-1.0)*r11*x1364*x1365))+((r10*r20*x1363))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1364))+(((-1.0)*x1363*x1366)));
j4eval[0]=x1367;
j4eval[1]=IKsign(x1367);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1364))+((cj0*x1365))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1368=cj5*cj5;
IkReal x1369=((1.0)*sj5);
IkReal x1370=(cj5*r20);
IkReal x1371=(r11*r21);
CheckValue<IkReal> x1372 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1369))+((cj0*x1370)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1372.valid){
continue;
}
CheckValue<IkReal> x1373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1369*x1370))+x1371+((r10*r20*x1368))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1369))+(((-1.0)*x1368*x1371)))),-1);
if(!x1373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1372.value)+(((1.5707963267949)*(x1373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1374=IKsin(j4);
IkReal x1375=IKcos(j4);
IkReal x1376=((1.0)*sj0);
IkReal x1377=(cj5*r00);
IkReal x1378=(r11*sj5);
IkReal x1379=(cj5*r10);
IkReal x1380=(r21*sj5);
IkReal x1381=(cj5*r20);
IkReal x1382=(r01*sj5);
IkReal x1383=((1.0)*x1375);
IkReal x1384=((1.0)*x1374);
evalcond[0]=((((-1.0)*x1381*x1384))+(((-1.0)*r22*x1383))+((x1374*x1380)));
evalcond[1]=((((-1.0)*x1380*x1383))+((x1375*x1381))+(((-1.0)*r22*x1384)));
evalcond[2]=((((-1.0)*r12*x1383))+cj0+((x1374*x1378))+(((-1.0)*x1379*x1384)));
evalcond[3]=((((-1.0)*r02*x1383))+(((-1.0)*x1377*x1384))+(((-1.0)*x1376))+((x1374*x1382)));
evalcond[4]=(((x1375*x1377))+(((-1.0)*r02*x1384))+(((-1.0)*x1382*x1383))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1384))+((x1375*x1379))+(((-1.0)*x1376))+(((-1.0)*x1378*x1383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1385=((1.0)*cj5);
CheckValue<IkReal> x1386=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1385))+(((-1.0)*r10*sj5)))),-1);
if(!x1386.valid){
continue;
}
CheckValue<IkReal> x1387 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1385)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1386.value)))+(x1387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1388=IKsin(j4);
IkReal x1389=IKcos(j4);
IkReal x1390=((1.0)*sj0);
IkReal x1391=(cj5*r00);
IkReal x1392=(r11*sj5);
IkReal x1393=(cj5*r10);
IkReal x1394=(r21*sj5);
IkReal x1395=(cj5*r20);
IkReal x1396=(r01*sj5);
IkReal x1397=((1.0)*x1389);
IkReal x1398=((1.0)*x1388);
evalcond[0]=(((x1388*x1394))+(((-1.0)*x1395*x1398))+(((-1.0)*r22*x1397)));
evalcond[1]=((((-1.0)*x1394*x1397))+(((-1.0)*r22*x1398))+((x1389*x1395)));
evalcond[2]=((((-1.0)*r12*x1397))+((x1388*x1392))+cj0+(((-1.0)*x1393*x1398)));
evalcond[3]=(((x1388*x1396))+(((-1.0)*r02*x1397))+(((-1.0)*x1391*x1398))+(((-1.0)*x1390)));
evalcond[4]=((((-1.0)*r02*x1398))+(((-1.0)*x1396*x1397))+((x1389*x1391))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1392*x1397))+(((-1.0)*r12*x1398))+((x1389*x1393))+(((-1.0)*x1390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1399=((1.0)*cj5);
CheckValue<IkReal> x1400 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1399))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1400.valid){
continue;
}
CheckValue<IkReal> x1401=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1399)))),-1);
if(!x1401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1400.value)+(((1.5707963267949)*(x1401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1402=IKsin(j4);
IkReal x1403=IKcos(j4);
IkReal x1404=((1.0)*sj0);
IkReal x1405=(cj5*r00);
IkReal x1406=(r11*sj5);
IkReal x1407=(cj5*r10);
IkReal x1408=(r21*sj5);
IkReal x1409=(cj5*r20);
IkReal x1410=(r01*sj5);
IkReal x1411=((1.0)*x1403);
IkReal x1412=((1.0)*x1402);
evalcond[0]=((((-1.0)*r22*x1411))+(((-1.0)*x1409*x1412))+((x1402*x1408)));
evalcond[1]=((((-1.0)*r22*x1412))+(((-1.0)*x1408*x1411))+((x1403*x1409)));
evalcond[2]=(cj0+(((-1.0)*x1407*x1412))+(((-1.0)*r12*x1411))+((x1402*x1406)));
evalcond[3]=(((x1402*x1410))+(((-1.0)*r02*x1411))+(((-1.0)*x1404))+(((-1.0)*x1405*x1412)));
evalcond[4]=((((-1.0)*r02*x1412))+((x1403*x1405))+(((-1.0)*x1410*x1411))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1404))+((x1403*x1407))+(((-1.0)*r12*x1412))+(((-1.0)*x1406*x1411)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1413=IKsin(j0);
IkReal x1414=IKcos(j0);
evalcond[0]=((((-0.10915)*x1413))+(((0.425)*x1414))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x1414))+(((0.425)*x1413))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1415=((1.0)*cj5);
IkReal x1416=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1415)));
j4eval[0]=x1416;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1415)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1416);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1417=cj5*cj5;
IkReal x1418=((1.0)*r21);
IkReal x1419=(cj5*sj5);
IkReal x1420=((1.0)*r20);
IkReal x1421=((((-1.0)*r01*x1419*x1420))+((r01*r21))+((r00*r20*x1417))+(((-1.0)*r01*x1417*x1418))+(((-1.0)*r00*x1418*x1419))+((r02*r22)));
j4eval[0]=x1421;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1420)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1421);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1422=cj5*cj5;
IkReal x1423=(r21*sj5);
IkReal x1424=(r11*r21);
IkReal x1425=((1.0)*cj5*r20);
IkReal x1426=((((-1.0)*r11*sj5*x1425))+(((-1.0)*x1422*x1424))+((r12*r22))+(((-1.0)*cj5*r10*x1423))+x1424+((r10*r20*x1422)));
j4eval[0]=x1426;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1425))+((sj0*x1423))))));
j4eval[2]=IKsign(x1426);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1427=cj5*cj5;
IkReal x1428=(r21*sj5);
IkReal x1429=(r11*r21);
IkReal x1430=((1.0)*cj5*r20);
CheckValue<IkReal> x1431 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1430))+((sj0*x1428)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1431.valid){
continue;
}
CheckValue<IkReal> x1432=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1427*x1429))+(((-1.0)*r11*sj5*x1430))+((r12*r22))+(((-1.0)*cj5*r10*x1428))+x1429+((r10*r20*x1427)))),-1);
if(!x1432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1431.value)+(((1.5707963267949)*(x1432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1433=IKsin(j4);
IkReal x1434=IKcos(j4);
IkReal x1435=(r11*sj5);
IkReal x1436=(cj5*r00);
IkReal x1437=(cj5*r10);
IkReal x1438=(r21*sj5);
IkReal x1439=(cj5*r20);
IkReal x1440=(r01*sj5);
IkReal x1441=((1.0)*x1434);
IkReal x1442=((1.0)*x1433);
evalcond[0]=((((-1.0)*r22*x1441))+((x1433*x1438))+(((-1.0)*x1439*x1442)));
evalcond[1]=((((-1.0)*r22*x1442))+(((-1.0)*x1438*x1441))+((x1434*x1439)));
evalcond[2]=(cj0+((x1433*x1435))+(((-1.0)*r12*x1441))+(((-1.0)*x1437*x1442)));
evalcond[3]=(cj0+((x1434*x1436))+(((-1.0)*r02*x1442))+(((-1.0)*x1440*x1441)));
evalcond[4]=(sj0+(((-1.0)*r12*x1442))+((x1434*x1437))+(((-1.0)*x1435*x1441)));
evalcond[5]=((((-1.0)*sj0))+((x1433*x1440))+(((-1.0)*r02*x1441))+(((-1.0)*x1436*x1442)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1443=cj5*cj5;
IkReal x1444=((1.0)*r21);
IkReal x1445=(cj5*sj5);
IkReal x1446=((1.0)*r20);
CheckValue<IkReal> x1447=IKPowWithIntegerCheck(IKsign((((r00*r20*x1443))+(((-1.0)*r01*x1445*x1446))+(((-1.0)*r01*x1443*x1444))+(((-1.0)*r00*x1444*x1445))+((r01*r21))+((r02*r22)))),-1);
if(!x1447.valid){
continue;
}
CheckValue<IkReal> x1448 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1446)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1448.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1447.value)))+(x1448.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1449=IKsin(j4);
IkReal x1450=IKcos(j4);
IkReal x1451=(r11*sj5);
IkReal x1452=(cj5*r00);
IkReal x1453=(cj5*r10);
IkReal x1454=(r21*sj5);
IkReal x1455=(cj5*r20);
IkReal x1456=(r01*sj5);
IkReal x1457=((1.0)*x1450);
IkReal x1458=((1.0)*x1449);
evalcond[0]=((((-1.0)*r22*x1457))+(((-1.0)*x1455*x1458))+((x1449*x1454)));
evalcond[1]=((((-1.0)*r22*x1458))+((x1450*x1455))+(((-1.0)*x1454*x1457)));
evalcond[2]=(cj0+(((-1.0)*x1453*x1458))+((x1449*x1451))+(((-1.0)*r12*x1457)));
evalcond[3]=(cj0+((x1450*x1452))+(((-1.0)*r02*x1458))+(((-1.0)*x1456*x1457)));
evalcond[4]=(sj0+((x1450*x1453))+(((-1.0)*x1451*x1457))+(((-1.0)*r12*x1458)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1457))+(((-1.0)*x1452*x1458))+((x1449*x1456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1459=((1.0)*cj5);
CheckValue<IkReal> x1460=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1459)))),-1);
if(!x1460.valid){
continue;
}
CheckValue<IkReal> x1461 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1459))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1460.value)))+(x1461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1462=IKsin(j4);
IkReal x1463=IKcos(j4);
IkReal x1464=(r11*sj5);
IkReal x1465=(cj5*r00);
IkReal x1466=(cj5*r10);
IkReal x1467=(r21*sj5);
IkReal x1468=(cj5*r20);
IkReal x1469=(r01*sj5);
IkReal x1470=((1.0)*x1463);
IkReal x1471=((1.0)*x1462);
evalcond[0]=((((-1.0)*r22*x1470))+(((-1.0)*x1468*x1471))+((x1462*x1467)));
evalcond[1]=((((-1.0)*r22*x1471))+((x1463*x1468))+(((-1.0)*x1467*x1470)));
evalcond[2]=(cj0+(((-1.0)*r12*x1470))+((x1462*x1464))+(((-1.0)*x1466*x1471)));
evalcond[3]=(((x1463*x1465))+cj0+(((-1.0)*x1469*x1470))+(((-1.0)*r02*x1471)));
evalcond[4]=(((x1463*x1466))+sj0+(((-1.0)*r12*x1471))+(((-1.0)*x1464*x1470)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1465*x1471))+((x1462*x1469))+(((-1.0)*r02*x1470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1472=((1.0)*cj5);
IkReal x1473=((((-1.0)*r01*x1472))+(((-1.0)*r00*sj5)));
j4eval[0]=x1473;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1472)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1473);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1474=((1.0)*cj5);
IkReal x1475=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1474)));
j4eval[0]=x1475;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1474))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1475);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1476=cj5*cj5;
IkReal x1477=((1.0)*sj5);
IkReal x1478=(cj5*r20);
IkReal x1479=(r11*r21);
IkReal x1480=((((-1.0)*cj5*r10*r21*x1477))+(((-1.0)*r11*x1477*x1478))+((r12*r22))+(((-1.0)*x1476*x1479))+x1479+((r10*r20*x1476)));
j4eval[0]=x1480;
j4eval[1]=IKsign(x1480);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1477))+((cj0*x1478)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1481=cj5*cj5;
IkReal x1482=((1.0)*sj5);
IkReal x1483=(cj5*r20);
IkReal x1484=(r11*r21);
CheckValue<IkReal> x1485=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1482*x1483))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1482))+(((-1.0)*x1481*x1484))+x1484+((r10*r20*x1481)))),-1);
if(!x1485.valid){
continue;
}
CheckValue<IkReal> x1486 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1482))+((cj0*x1483)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1486.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1485.value)))+(x1486.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1487=IKsin(j4);
IkReal x1488=IKcos(j4);
IkReal x1489=((1.0)*sj0);
IkReal x1490=(cj5*r00);
IkReal x1491=(r11*sj5);
IkReal x1492=(cj5*r10);
IkReal x1493=(r21*sj5);
IkReal x1494=(cj5*r20);
IkReal x1495=(r01*sj5);
IkReal x1496=((1.0)*x1488);
IkReal x1497=((1.0)*x1487);
evalcond[0]=((((-1.0)*x1494*x1497))+((x1487*x1493))+(((-1.0)*r22*x1496)));
evalcond[1]=((((-1.0)*x1493*x1496))+(((-1.0)*r22*x1497))+((x1488*x1494)));
evalcond[2]=((((-1.0)*r12*x1496))+cj0+((x1487*x1491))+(((-1.0)*x1492*x1497)));
evalcond[3]=((((-1.0)*x1489))+((x1487*x1495))+(((-1.0)*r02*x1496))+(((-1.0)*x1490*x1497)));
evalcond[4]=((((-1.0)*x1495*x1496))+(((-1.0)*r02*x1497))+((x1488*x1490))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1497))+(((-1.0)*x1489))+(((-1.0)*x1491*x1496))+((x1488*x1492)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1498=((1.0)*cj5);
CheckValue<IkReal> x1499=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1498)))),-1);
if(!x1499.valid){
continue;
}
CheckValue<IkReal> x1500 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1498))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1499.value)))+(x1500.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1501=IKsin(j4);
IkReal x1502=IKcos(j4);
IkReal x1503=((1.0)*sj0);
IkReal x1504=(cj5*r00);
IkReal x1505=(r11*sj5);
IkReal x1506=(cj5*r10);
IkReal x1507=(r21*sj5);
IkReal x1508=(cj5*r20);
IkReal x1509=(r01*sj5);
IkReal x1510=((1.0)*x1502);
IkReal x1511=((1.0)*x1501);
evalcond[0]=((((-1.0)*r22*x1510))+((x1501*x1507))+(((-1.0)*x1508*x1511)));
evalcond[1]=((((-1.0)*r22*x1511))+(((-1.0)*x1507*x1510))+((x1502*x1508)));
evalcond[2]=(cj0+(((-1.0)*x1506*x1511))+((x1501*x1505))+(((-1.0)*r12*x1510)));
evalcond[3]=((((-1.0)*x1503))+(((-1.0)*x1504*x1511))+((x1501*x1509))+(((-1.0)*r02*x1510)));
evalcond[4]=((((-1.0)*r02*x1511))+(((-1.0)*x1509*x1510))+((x1502*x1504))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1503))+((x1502*x1506))+(((-1.0)*x1505*x1510))+(((-1.0)*r12*x1511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1512=((1.0)*cj5);
CheckValue<IkReal> x1513=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1512))+(((-1.0)*r00*sj5)))),-1);
if(!x1513.valid){
continue;
}
CheckValue<IkReal> x1514 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1512))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1513.value)))+(x1514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1515=IKsin(j4);
IkReal x1516=IKcos(j4);
IkReal x1517=((1.0)*sj0);
IkReal x1518=(cj5*r00);
IkReal x1519=(r11*sj5);
IkReal x1520=(cj5*r10);
IkReal x1521=(r21*sj5);
IkReal x1522=(cj5*r20);
IkReal x1523=(r01*sj5);
IkReal x1524=((1.0)*x1516);
IkReal x1525=((1.0)*x1515);
evalcond[0]=((((-1.0)*r22*x1524))+(((-1.0)*x1522*x1525))+((x1515*x1521)));
evalcond[1]=((((-1.0)*r22*x1525))+((x1516*x1522))+(((-1.0)*x1521*x1524)));
evalcond[2]=((((-1.0)*r12*x1524))+cj0+((x1515*x1519))+(((-1.0)*x1520*x1525)));
evalcond[3]=((((-1.0)*x1517))+(((-1.0)*x1518*x1525))+(((-1.0)*r02*x1524))+((x1515*x1523)));
evalcond[4]=((((-1.0)*r02*x1525))+((x1516*x1518))+(((-1.0)*x1523*x1524))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1525))+(((-1.0)*x1517))+(((-1.0)*x1519*x1524))+((x1516*x1520)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1526=((1.0)*cj5);
IkReal x1527=((((-1.0)*r01*x1526))+(((-1.0)*r00*sj5)));
j4eval[0]=x1527;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1526))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1527);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1528=cj5*cj5;
IkReal x1529=((1.0)*r21);
IkReal x1530=(cj5*sj5);
IkReal x1531=((1.0)*r20);
IkReal x1532=(((r00*r20*x1528))+(((-1.0)*r01*x1530*x1531))+((r01*r21))+(((-1.0)*r01*x1528*x1529))+(((-1.0)*r00*x1529*x1530))+((r02*r22)));
j4eval[0]=x1532;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1531)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1532);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1533=cj5*cj5;
IkReal x1534=(r21*sj5);
IkReal x1535=(r11*r21);
IkReal x1536=((1.0)*cj5*r20);
IkReal x1537=((((-1.0)*x1533*x1535))+((r12*r22))+x1535+(((-1.0)*cj5*r10*x1534))+(((-1.0)*r11*sj5*x1536))+((r10*r20*x1533)));
j4eval[0]=x1537;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1536))+((sj0*x1534))))));
j4eval[2]=IKsign(x1537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1538=cj5*cj5;
IkReal x1539=(r21*sj5);
IkReal x1540=(r11*r21);
IkReal x1541=((1.0)*cj5*r20);
CheckValue<IkReal> x1542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1541))+((r12*r22))+x1540+(((-1.0)*cj5*r10*x1539))+((r10*r20*x1538))+(((-1.0)*x1538*x1540)))),-1);
if(!x1542.valid){
continue;
}
CheckValue<IkReal> x1543 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1539))+(((-1.0)*sj0*x1541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1542.value)))+(x1543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1544=IKsin(j4);
IkReal x1545=IKcos(j4);
IkReal x1546=(r11*sj5);
IkReal x1547=(cj5*r00);
IkReal x1548=(cj5*r10);
IkReal x1549=(r21*sj5);
IkReal x1550=(cj5*r20);
IkReal x1551=(r01*sj5);
IkReal x1552=((1.0)*x1545);
IkReal x1553=((1.0)*x1544);
evalcond[0]=(((x1544*x1549))+(((-1.0)*r22*x1552))+(((-1.0)*x1550*x1553)));
evalcond[1]=((((-1.0)*x1549*x1552))+(((-1.0)*r22*x1553))+((x1545*x1550)));
evalcond[2]=(cj0+((x1544*x1546))+(((-1.0)*x1548*x1553))+(((-1.0)*r12*x1552)));
evalcond[3]=(cj0+(((-1.0)*r02*x1553))+(((-1.0)*x1551*x1552))+((x1545*x1547)));
evalcond[4]=(sj0+(((-1.0)*x1546*x1552))+(((-1.0)*r12*x1553))+((x1545*x1548)));
evalcond[5]=((((-1.0)*sj0))+((x1544*x1551))+(((-1.0)*r02*x1552))+(((-1.0)*x1547*x1553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1554=cj5*cj5;
IkReal x1555=((1.0)*r21);
IkReal x1556=(cj5*sj5);
IkReal x1557=((1.0)*r20);
CheckValue<IkReal> x1558=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1555*x1556))+((r01*r21))+((r00*r20*x1554))+(((-1.0)*r01*x1556*x1557))+(((-1.0)*r01*x1554*x1555))+((r02*r22)))),-1);
if(!x1558.valid){
continue;
}
CheckValue<IkReal> x1559 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1557)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1559.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1558.value)))+(x1559.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1560=IKsin(j4);
IkReal x1561=IKcos(j4);
IkReal x1562=(r11*sj5);
IkReal x1563=(cj5*r00);
IkReal x1564=(cj5*r10);
IkReal x1565=(r21*sj5);
IkReal x1566=(cj5*r20);
IkReal x1567=(r01*sj5);
IkReal x1568=((1.0)*x1561);
IkReal x1569=((1.0)*x1560);
evalcond[0]=(((x1560*x1565))+(((-1.0)*x1566*x1569))+(((-1.0)*r22*x1568)));
evalcond[1]=((((-1.0)*x1565*x1568))+(((-1.0)*r22*x1569))+((x1561*x1566)));
evalcond[2]=(((x1560*x1562))+cj0+(((-1.0)*x1564*x1569))+(((-1.0)*r12*x1568)));
evalcond[3]=((((-1.0)*r02*x1569))+cj0+(((-1.0)*x1567*x1568))+((x1561*x1563)));
evalcond[4]=(sj0+(((-1.0)*x1562*x1568))+((x1561*x1564))+(((-1.0)*r12*x1569)));
evalcond[5]=(((x1560*x1567))+(((-1.0)*sj0))+(((-1.0)*r02*x1568))+(((-1.0)*x1563*x1569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1570=((1.0)*cj5);
CheckValue<IkReal> x1571 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1570)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1571.valid){
continue;
}
CheckValue<IkReal> x1572=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1570)))),-1);
if(!x1572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1571.value)+(((1.5707963267949)*(x1572.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1573=IKsin(j4);
IkReal x1574=IKcos(j4);
IkReal x1575=(r11*sj5);
IkReal x1576=(cj5*r00);
IkReal x1577=(cj5*r10);
IkReal x1578=(r21*sj5);
IkReal x1579=(cj5*r20);
IkReal x1580=(r01*sj5);
IkReal x1581=((1.0)*x1574);
IkReal x1582=((1.0)*x1573);
evalcond[0]=(((x1573*x1578))+(((-1.0)*x1579*x1582))+(((-1.0)*r22*x1581)));
evalcond[1]=((((-1.0)*x1578*x1581))+(((-1.0)*r22*x1582))+((x1574*x1579)));
evalcond[2]=(cj0+(((-1.0)*x1577*x1582))+((x1573*x1575))+(((-1.0)*r12*x1581)));
evalcond[3]=((((-1.0)*x1580*x1581))+cj0+(((-1.0)*r02*x1582))+((x1574*x1576)));
evalcond[4]=(sj0+(((-1.0)*r12*x1582))+((x1574*x1577))+(((-1.0)*x1575*x1581)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1581))+((x1573*x1580))+(((-1.0)*x1576*x1582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1583=IKcos(j0);
IkReal x1584=IKsin(j0);
evalcond[0]=((((-0.425)*x1583))+(((-1.0)*px))+(((-0.10915)*x1584)));
evalcond[1]=((((-0.425)*x1584))+(((-1.0)*py))+(((0.10915)*x1583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1585=((1.0)*cj5);
IkReal x1586=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1585)));
j4eval[0]=x1586;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1585))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1586);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1587=cj5*cj5;
IkReal x1588=((1.0)*r21);
IkReal x1589=(cj5*sj5);
IkReal x1590=((1.0)*r20);
IkReal x1591=((((-1.0)*r01*x1589*x1590))+(((-1.0)*r01*x1587*x1588))+(((-1.0)*r00*x1588*x1589))+((r01*r21))+((r00*r20*x1587))+((r02*r22)));
j4eval[0]=x1591;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1590))))));
j4eval[2]=IKsign(x1591);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1592=cj5*cj5;
IkReal x1593=(r21*sj5);
IkReal x1594=(r11*r21);
IkReal x1595=((1.0)*cj5*r20);
IkReal x1596=(((r10*r20*x1592))+((r12*r22))+x1594+(((-1.0)*r11*sj5*x1595))+(((-1.0)*x1592*x1594))+(((-1.0)*cj5*r10*x1593)));
j4eval[0]=x1596;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1595))+((sj0*x1593))))));
j4eval[2]=IKsign(x1596);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1597=cj5*cj5;
IkReal x1598=(r21*sj5);
IkReal x1599=(r11*r21);
IkReal x1600=((1.0)*cj5*r20);
CheckValue<IkReal> x1601=IKPowWithIntegerCheck(IKsign((((r10*r20*x1597))+(((-1.0)*r11*sj5*x1600))+((r12*r22))+(((-1.0)*x1597*x1599))+x1599+(((-1.0)*cj5*r10*x1598)))),-1);
if(!x1601.valid){
continue;
}
CheckValue<IkReal> x1602 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1600))+((sj0*x1598)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1602.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1601.value)))+(x1602.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1603=IKsin(j4);
IkReal x1604=IKcos(j4);
IkReal x1605=(r11*sj5);
IkReal x1606=(cj5*r00);
IkReal x1607=(cj5*r10);
IkReal x1608=(r21*sj5);
IkReal x1609=(cj5*r20);
IkReal x1610=(r01*sj5);
IkReal x1611=((1.0)*x1604);
IkReal x1612=((1.0)*x1603);
evalcond[0]=((((-1.0)*r22*x1611))+((x1603*x1608))+(((-1.0)*x1609*x1612)));
evalcond[1]=((((-1.0)*r22*x1612))+(((-1.0)*x1608*x1611))+((x1604*x1609)));
evalcond[2]=((((-1.0)*r12*x1611))+cj0+((x1603*x1605))+(((-1.0)*x1607*x1612)));
evalcond[3]=(cj0+(((-1.0)*x1610*x1611))+(((-1.0)*r02*x1612))+((x1604*x1606)));
evalcond[4]=((((-1.0)*r12*x1612))+sj0+(((-1.0)*x1605*x1611))+((x1604*x1607)));
evalcond[5]=((((-1.0)*x1606*x1612))+(((-1.0)*sj0))+(((-1.0)*r02*x1611))+((x1603*x1610)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1613=cj5*cj5;
IkReal x1614=((1.0)*r21);
IkReal x1615=(cj5*sj5);
IkReal x1616=((1.0)*r20);
CheckValue<IkReal> x1617 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1617.valid){
continue;
}
CheckValue<IkReal> x1618=IKPowWithIntegerCheck(IKsign((((r00*r20*x1613))+(((-1.0)*r00*x1614*x1615))+((r01*r21))+(((-1.0)*r01*x1615*x1616))+((r02*r22))+(((-1.0)*r01*x1613*x1614)))),-1);
if(!x1618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1617.value)+(((1.5707963267949)*(x1618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1619=IKsin(j4);
IkReal x1620=IKcos(j4);
IkReal x1621=(r11*sj5);
IkReal x1622=(cj5*r00);
IkReal x1623=(cj5*r10);
IkReal x1624=(r21*sj5);
IkReal x1625=(cj5*r20);
IkReal x1626=(r01*sj5);
IkReal x1627=((1.0)*x1620);
IkReal x1628=((1.0)*x1619);
evalcond[0]=((((-1.0)*x1625*x1628))+(((-1.0)*r22*x1627))+((x1619*x1624)));
evalcond[1]=(((x1620*x1625))+(((-1.0)*r22*x1628))+(((-1.0)*x1624*x1627)));
evalcond[2]=((((-1.0)*r12*x1627))+cj0+(((-1.0)*x1623*x1628))+((x1619*x1621)));
evalcond[3]=(((x1620*x1622))+cj0+(((-1.0)*r02*x1628))+(((-1.0)*x1626*x1627)));
evalcond[4]=((((-1.0)*r12*x1628))+((x1620*x1623))+sj0+(((-1.0)*x1621*x1627)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1627))+(((-1.0)*x1622*x1628))+((x1619*x1626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1629=((1.0)*cj5);
CheckValue<IkReal> x1630 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1629)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1630.valid){
continue;
}
CheckValue<IkReal> x1631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1629)))),-1);
if(!x1631.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1630.value)+(((1.5707963267949)*(x1631.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1632=IKsin(j4);
IkReal x1633=IKcos(j4);
IkReal x1634=(r11*sj5);
IkReal x1635=(cj5*r00);
IkReal x1636=(cj5*r10);
IkReal x1637=(r21*sj5);
IkReal x1638=(cj5*r20);
IkReal x1639=(r01*sj5);
IkReal x1640=((1.0)*x1633);
IkReal x1641=((1.0)*x1632);
evalcond[0]=((((-1.0)*r22*x1640))+(((-1.0)*x1638*x1641))+((x1632*x1637)));
evalcond[1]=((((-1.0)*r22*x1641))+(((-1.0)*x1637*x1640))+((x1633*x1638)));
evalcond[2]=(cj0+(((-1.0)*r12*x1640))+((x1632*x1634))+(((-1.0)*x1636*x1641)));
evalcond[3]=(cj0+(((-1.0)*x1639*x1640))+((x1633*x1635))+(((-1.0)*r02*x1641)));
evalcond[4]=(sj0+(((-1.0)*r12*x1641))+(((-1.0)*x1634*x1640))+((x1633*x1636)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1635*x1641))+((x1632*x1639))+(((-1.0)*r02*x1640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1642=IKcos(j0);
IkReal x1643=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x1642))+(((-0.10915)*x1643)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x1642))+(((-0.425)*x1643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1644=((1.0)*cj5);
IkReal x1645=((((-1.0)*r01*x1644))+(((-1.0)*r00*sj5)));
j4eval[0]=x1645;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1644)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1646=((1.0)*cj5);
IkReal x1647=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1646)));
j4eval[0]=x1647;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1646))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1647);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1648=cj5*cj5;
IkReal x1649=((1.0)*sj5);
IkReal x1650=(cj5*r20);
IkReal x1651=(r11*r21);
IkReal x1652=(x1651+(((-1.0)*cj5*r10*r21*x1649))+((r12*r22))+(((-1.0)*x1648*x1651))+((r10*r20*x1648))+(((-1.0)*r11*x1649*x1650)));
j4eval[0]=x1652;
j4eval[1]=IKsign(x1652);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x1649))+((cj0*x1650))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1653=cj5*cj5;
IkReal x1654=((1.0)*sj5);
IkReal x1655=(cj5*r20);
IkReal x1656=(r11*r21);
CheckValue<IkReal> x1657 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1654))+((cj0*x1655)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1657.valid){
continue;
}
CheckValue<IkReal> x1658=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1653*x1656))+(((-1.0)*cj5*r10*r21*x1654))+x1656+((r12*r22))+(((-1.0)*r11*x1654*x1655))+((r10*r20*x1653)))),-1);
if(!x1658.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1657.value)+(((1.5707963267949)*(x1658.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1659=IKsin(j4);
IkReal x1660=IKcos(j4);
IkReal x1661=((1.0)*sj0);
IkReal x1662=(cj5*r00);
IkReal x1663=(r11*sj5);
IkReal x1664=(cj5*r10);
IkReal x1665=(r21*sj5);
IkReal x1666=(cj5*r20);
IkReal x1667=(r01*sj5);
IkReal x1668=((1.0)*x1660);
IkReal x1669=((1.0)*x1659);
evalcond[0]=((((-1.0)*r22*x1668))+((x1659*x1665))+(((-1.0)*x1666*x1669)));
evalcond[1]=(((x1660*x1666))+(((-1.0)*r22*x1669))+(((-1.0)*x1665*x1668)));
evalcond[2]=(cj0+(((-1.0)*r12*x1668))+((x1659*x1663))+(((-1.0)*x1664*x1669)));
evalcond[3]=((((-1.0)*x1662*x1669))+(((-1.0)*x1661))+((x1659*x1667))+(((-1.0)*r02*x1668)));
evalcond[4]=(((x1660*x1662))+(((-1.0)*x1667*x1668))+(((-1.0)*r02*x1669))+(((-1.0)*cj0)));
evalcond[5]=(((x1660*x1664))+(((-1.0)*r12*x1669))+(((-1.0)*x1663*x1668))+(((-1.0)*x1661)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1670=((1.0)*cj5);
CheckValue<IkReal> x1671=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1670)))),-1);
if(!x1671.valid){
continue;
}
CheckValue<IkReal> x1672 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1670))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1672.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1671.value)))+(x1672.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1673=IKsin(j4);
IkReal x1674=IKcos(j4);
IkReal x1675=((1.0)*sj0);
IkReal x1676=(cj5*r00);
IkReal x1677=(r11*sj5);
IkReal x1678=(cj5*r10);
IkReal x1679=(r21*sj5);
IkReal x1680=(cj5*r20);
IkReal x1681=(r01*sj5);
IkReal x1682=((1.0)*x1674);
IkReal x1683=((1.0)*x1673);
evalcond[0]=(((x1673*x1679))+(((-1.0)*r22*x1682))+(((-1.0)*x1680*x1683)));
evalcond[1]=((((-1.0)*x1679*x1682))+(((-1.0)*r22*x1683))+((x1674*x1680)));
evalcond[2]=((((-1.0)*r12*x1682))+cj0+((x1673*x1677))+(((-1.0)*x1678*x1683)));
evalcond[3]=(((x1673*x1681))+(((-1.0)*x1676*x1683))+(((-1.0)*r02*x1682))+(((-1.0)*x1675)));
evalcond[4]=((((-1.0)*x1681*x1682))+((x1674*x1676))+(((-1.0)*r02*x1683))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1683))+(((-1.0)*x1677*x1682))+((x1674*x1678))+(((-1.0)*x1675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1684=((1.0)*cj5);
CheckValue<IkReal> x1685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1684))+(((-1.0)*r00*sj5)))),-1);
if(!x1685.valid){
continue;
}
CheckValue<IkReal> x1686 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1684)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1686.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1685.value)))+(x1686.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1687=IKsin(j4);
IkReal x1688=IKcos(j4);
IkReal x1689=((1.0)*sj0);
IkReal x1690=(cj5*r00);
IkReal x1691=(r11*sj5);
IkReal x1692=(cj5*r10);
IkReal x1693=(r21*sj5);
IkReal x1694=(cj5*r20);
IkReal x1695=(r01*sj5);
IkReal x1696=((1.0)*x1688);
IkReal x1697=((1.0)*x1687);
evalcond[0]=((((-1.0)*x1694*x1697))+(((-1.0)*r22*x1696))+((x1687*x1693)));
evalcond[1]=((((-1.0)*r22*x1697))+((x1688*x1694))+(((-1.0)*x1693*x1696)));
evalcond[2]=((((-1.0)*x1692*x1697))+cj0+(((-1.0)*r12*x1696))+((x1687*x1691)));
evalcond[3]=((((-1.0)*x1689))+(((-1.0)*x1690*x1697))+(((-1.0)*r02*x1696))+((x1687*x1695)));
evalcond[4]=((((-1.0)*r02*x1697))+((x1688*x1690))+(((-1.0)*x1695*x1696))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1689))+(((-1.0)*r12*x1697))+(((-1.0)*x1691*x1696))+((x1688*x1692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1698=((1.0)*cj5);
IkReal x1699=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1698)));
j4eval[0]=x1699;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1698))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1700=cj5*cj5;
IkReal x1701=((1.0)*r21);
IkReal x1702=(cj5*sj5);
IkReal x1703=((1.0)*r20);
IkReal x1704=((((-1.0)*r01*x1702*x1703))+((r01*r21))+(((-1.0)*r00*x1701*x1702))+((r00*r20*x1700))+((r02*r22))+(((-1.0)*r01*x1700*x1701)));
j4eval[0]=x1704;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1703)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1704);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1705=cj5*cj5;
IkReal x1706=(r21*sj5);
IkReal x1707=(r11*r21);
IkReal x1708=((1.0)*cj5*r20);
IkReal x1709=(x1707+((r12*r22))+(((-1.0)*r11*sj5*x1708))+((r10*r20*x1705))+(((-1.0)*x1705*x1707))+(((-1.0)*cj5*r10*x1706)));
j4eval[0]=x1709;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1708))+((sj0*x1706))))));
j4eval[2]=IKsign(x1709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1710=cj5*cj5;
IkReal x1711=(r21*sj5);
IkReal x1712=(r11*r21);
IkReal x1713=((1.0)*cj5*r20);
CheckValue<IkReal> x1714=IKPowWithIntegerCheck(IKsign((x1712+(((-1.0)*r11*sj5*x1713))+((r10*r20*x1710))+((r12*r22))+(((-1.0)*x1710*x1712))+(((-1.0)*cj5*r10*x1711)))),-1);
if(!x1714.valid){
continue;
}
CheckValue<IkReal> x1715 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1713))+((sj0*x1711)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1714.value)))+(x1715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1716=IKsin(j4);
IkReal x1717=IKcos(j4);
IkReal x1718=(r11*sj5);
IkReal x1719=(cj5*r00);
IkReal x1720=(cj5*r10);
IkReal x1721=(r21*sj5);
IkReal x1722=(cj5*r20);
IkReal x1723=(r01*sj5);
IkReal x1724=((1.0)*x1717);
IkReal x1725=((1.0)*x1716);
evalcond[0]=((((-1.0)*r22*x1724))+(((-1.0)*x1722*x1725))+((x1716*x1721)));
evalcond[1]=((((-1.0)*r22*x1725))+((x1717*x1722))+(((-1.0)*x1721*x1724)));
evalcond[2]=(cj0+(((-1.0)*r12*x1724))+((x1716*x1718))+(((-1.0)*x1720*x1725)));
evalcond[3]=(cj0+(((-1.0)*x1723*x1724))+(((-1.0)*r02*x1725))+((x1717*x1719)));
evalcond[4]=(sj0+(((-1.0)*r12*x1725))+((x1717*x1720))+(((-1.0)*x1718*x1724)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1719*x1725))+((x1716*x1723))+(((-1.0)*r02*x1724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1726=cj5*cj5;
IkReal x1727=((1.0)*r21);
IkReal x1728=(cj5*sj5);
IkReal x1729=((1.0)*r20);
CheckValue<IkReal> x1730=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1728*x1729))+((r01*r21))+(((-1.0)*r01*x1726*x1727))+((r02*r22))+((r00*r20*x1726))+(((-1.0)*r00*x1727*x1728)))),-1);
if(!x1730.valid){
continue;
}
CheckValue<IkReal> x1731 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1729)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1730.value)))+(x1731.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1732=IKsin(j4);
IkReal x1733=IKcos(j4);
IkReal x1734=(r11*sj5);
IkReal x1735=(cj5*r00);
IkReal x1736=(cj5*r10);
IkReal x1737=(r21*sj5);
IkReal x1738=(cj5*r20);
IkReal x1739=(r01*sj5);
IkReal x1740=((1.0)*x1733);
IkReal x1741=((1.0)*x1732);
evalcond[0]=((((-1.0)*x1738*x1741))+(((-1.0)*r22*x1740))+((x1732*x1737)));
evalcond[1]=((((-1.0)*r22*x1741))+(((-1.0)*x1737*x1740))+((x1733*x1738)));
evalcond[2]=((((-1.0)*r12*x1740))+cj0+(((-1.0)*x1736*x1741))+((x1732*x1734)));
evalcond[3]=(cj0+(((-1.0)*x1739*x1740))+((x1733*x1735))+(((-1.0)*r02*x1741)));
evalcond[4]=((((-1.0)*r12*x1741))+sj0+(((-1.0)*x1734*x1740))+((x1733*x1736)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1735*x1741))+((x1732*x1739))+(((-1.0)*r02*x1740)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1742=((1.0)*cj5);
CheckValue<IkReal> x1743 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1743.valid){
continue;
}
CheckValue<IkReal> x1744=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1742)))),-1);
if(!x1744.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1743.value)+(((1.5707963267949)*(x1744.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1745=IKsin(j4);
IkReal x1746=IKcos(j4);
IkReal x1747=(r11*sj5);
IkReal x1748=(cj5*r00);
IkReal x1749=(cj5*r10);
IkReal x1750=(r21*sj5);
IkReal x1751=(cj5*r20);
IkReal x1752=(r01*sj5);
IkReal x1753=((1.0)*x1746);
IkReal x1754=((1.0)*x1745);
evalcond[0]=((((-1.0)*r22*x1753))+((x1745*x1750))+(((-1.0)*x1751*x1754)));
evalcond[1]=((((-1.0)*r22*x1754))+((x1746*x1751))+(((-1.0)*x1750*x1753)));
evalcond[2]=((((-1.0)*r12*x1753))+cj0+((x1745*x1747))+(((-1.0)*x1749*x1754)));
evalcond[3]=(cj0+((x1746*x1748))+(((-1.0)*x1752*x1753))+(((-1.0)*r02*x1754)));
evalcond[4]=(sj0+(((-1.0)*r12*x1754))+((x1746*x1749))+(((-1.0)*x1747*x1753)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1748*x1754))+((x1745*x1752))+(((-1.0)*r02*x1753)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1755=((1.0)*cj5);
IkReal x1756=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1755)));
j4eval[0]=x1756;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1755)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1756);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1757=((1.0)*cj5);
IkReal x1758=((((-1.0)*r11*x1757))+(((-1.0)*r10*sj5)));
j4eval[0]=x1758;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1757))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1758);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1759=cj5*cj5;
IkReal x1760=((1.0)*sj5);
IkReal x1761=(cj5*r20);
IkReal x1762=(r11*r21);
IkReal x1763=((((-1.0)*x1759*x1762))+((r10*r20*x1759))+x1762+(((-1.0)*r11*x1760*x1761))+((r12*r22))+(((-1.0)*cj5*r10*r21*x1760)));
j4eval[0]=x1763;
j4eval[1]=IKsign(x1763);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1760))+((cj0*x1761)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1764=cj5*cj5;
IkReal x1765=((1.0)*sj5);
IkReal x1766=(cj5*r20);
IkReal x1767=(r11*r21);
CheckValue<IkReal> x1768=IKPowWithIntegerCheck(IKsign((x1767+((r12*r22))+(((-1.0)*cj5*r10*r21*x1765))+((r10*r20*x1764))+(((-1.0)*r11*x1765*x1766))+(((-1.0)*x1764*x1767)))),-1);
if(!x1768.valid){
continue;
}
CheckValue<IkReal> x1769 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1765))+((cj0*x1766)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1769.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1768.value)))+(x1769.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1770=IKsin(j4);
IkReal x1771=IKcos(j4);
IkReal x1772=((1.0)*sj0);
IkReal x1773=(cj5*r00);
IkReal x1774=(r11*sj5);
IkReal x1775=(cj5*r10);
IkReal x1776=(r21*sj5);
IkReal x1777=(cj5*r20);
IkReal x1778=(r01*sj5);
IkReal x1779=((1.0)*x1771);
IkReal x1780=((1.0)*x1770);
evalcond[0]=(((x1770*x1776))+(((-1.0)*x1777*x1780))+(((-1.0)*r22*x1779)));
evalcond[1]=((((-1.0)*r22*x1780))+((x1771*x1777))+(((-1.0)*x1776*x1779)));
evalcond[2]=(cj0+(((-1.0)*x1775*x1780))+((x1770*x1774))+(((-1.0)*r12*x1779)));
evalcond[3]=((((-1.0)*x1773*x1780))+((x1770*x1778))+(((-1.0)*r02*x1779))+(((-1.0)*x1772)));
evalcond[4]=((((-1.0)*x1778*x1779))+((x1771*x1773))+(((-1.0)*r02*x1780))+(((-1.0)*cj0)));
evalcond[5]=(((x1771*x1775))+(((-1.0)*r12*x1780))+(((-1.0)*x1772))+(((-1.0)*x1774*x1779)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1781=((1.0)*cj5);
CheckValue<IkReal> x1782 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1782.valid){
continue;
}
CheckValue<IkReal> x1783=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1781)))),-1);
if(!x1783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1782.value)+(((1.5707963267949)*(x1783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1784=IKsin(j4);
IkReal x1785=IKcos(j4);
IkReal x1786=((1.0)*sj0);
IkReal x1787=(cj5*r00);
IkReal x1788=(r11*sj5);
IkReal x1789=(cj5*r10);
IkReal x1790=(r21*sj5);
IkReal x1791=(cj5*r20);
IkReal x1792=(r01*sj5);
IkReal x1793=((1.0)*x1785);
IkReal x1794=((1.0)*x1784);
evalcond[0]=((((-1.0)*r22*x1793))+((x1784*x1790))+(((-1.0)*x1791*x1794)));
evalcond[1]=((((-1.0)*r22*x1794))+(((-1.0)*x1790*x1793))+((x1785*x1791)));
evalcond[2]=(cj0+(((-1.0)*r12*x1793))+(((-1.0)*x1789*x1794))+((x1784*x1788)));
evalcond[3]=((((-1.0)*x1787*x1794))+(((-1.0)*x1786))+((x1784*x1792))+(((-1.0)*r02*x1793)));
evalcond[4]=((((-1.0)*x1792*x1793))+((x1785*x1787))+(((-1.0)*r02*x1794))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1786))+(((-1.0)*r12*x1794))+(((-1.0)*x1788*x1793))+((x1785*x1789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1795=((1.0)*cj5);
CheckValue<IkReal> x1796=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1795))+(((-1.0)*r00*sj5)))),-1);
if(!x1796.valid){
continue;
}
CheckValue<IkReal> x1797 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1795))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1796.value)))+(x1797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1798=IKsin(j4);
IkReal x1799=IKcos(j4);
IkReal x1800=((1.0)*sj0);
IkReal x1801=(cj5*r00);
IkReal x1802=(r11*sj5);
IkReal x1803=(cj5*r10);
IkReal x1804=(r21*sj5);
IkReal x1805=(cj5*r20);
IkReal x1806=(r01*sj5);
IkReal x1807=((1.0)*x1799);
IkReal x1808=((1.0)*x1798);
evalcond[0]=(((x1798*x1804))+(((-1.0)*x1805*x1808))+(((-1.0)*r22*x1807)));
evalcond[1]=(((x1799*x1805))+(((-1.0)*x1804*x1807))+(((-1.0)*r22*x1808)));
evalcond[2]=(cj0+((x1798*x1802))+(((-1.0)*r12*x1807))+(((-1.0)*x1803*x1808)));
evalcond[3]=(((x1798*x1806))+(((-1.0)*x1801*x1808))+(((-1.0)*x1800))+(((-1.0)*r02*x1807)));
evalcond[4]=(((x1799*x1801))+(((-1.0)*r02*x1808))+(((-1.0)*x1806*x1807))+(((-1.0)*cj0)));
evalcond[5]=(((x1799*x1803))+(((-1.0)*x1802*x1807))+(((-1.0)*x1800))+(((-1.0)*r12*x1808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1809=(sj1*sj2);
IkReal x1810=(cj5*r01);
IkReal x1811=(cj1*cj2);
IkReal x1812=(r00*sj5);
IkReal x1813=((20000.0)*px);
IkReal x1814=((8500.0)*cj1);
CheckValue<IkReal> x1815=IKPowWithIntegerCheck(((((-2183.0)*x1811))+(((2183.0)*x1809))),-1);
if(!x1815.valid){
continue;
}
CheckValue<IkReal> x1816=IKPowWithIntegerCheck((x1809+(((-1.0)*x1811))),-1);
if(!x1816.valid){
continue;
}
if( IKabs(((x1815.value)*(((((-5952.0)*x1810*x1811))+(((5952.0)*x1809*x1812))+(((5952.0)*x1809*x1810))+(((-1.0)*x1812*x1814))+(((-1.0)*x1809*x1813))+(((-1.0)*x1810*x1814))+(((-5952.0)*x1811*x1812))+((x1811*x1813)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1816.value)*(((((-1.0)*x1810))+(((-1.0)*x1812)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1815.value)*(((((-5952.0)*x1810*x1811))+(((5952.0)*x1809*x1812))+(((5952.0)*x1809*x1810))+(((-1.0)*x1812*x1814))+(((-1.0)*x1809*x1813))+(((-1.0)*x1810*x1814))+(((-5952.0)*x1811*x1812))+((x1811*x1813))))))+IKsqr(((x1816.value)*(((((-1.0)*x1810))+(((-1.0)*x1812))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1815.value)*(((((-5952.0)*x1810*x1811))+(((5952.0)*x1809*x1812))+(((5952.0)*x1809*x1810))+(((-1.0)*x1812*x1814))+(((-1.0)*x1809*x1813))+(((-1.0)*x1810*x1814))+(((-5952.0)*x1811*x1812))+((x1811*x1813))))), ((x1816.value)*(((((-1.0)*x1810))+(((-1.0)*x1812))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1817=IKcos(j0);
IkReal x1818=IKsin(j0);
IkReal x1819=(cj5*r01);
IkReal x1820=(cj5*r11);
IkReal x1821=(r00*sj5);
IkReal x1822=(sj1*sj2);
IkReal x1823=((0.39225)*cj2);
IkReal x1824=((1.0)*cj2);
IkReal x1825=(r10*sj5);
IkReal x1826=((0.39225)*x1822);
IkReal x1827=(cj1*x1817);
IkReal x1828=(cj1*x1818);
evalcond[0]=(x1821+x1819+(((-1.0)*x1824*x1827))+((x1817*x1822)));
evalcond[1]=(((x1818*x1822))+x1825+x1820+(((-1.0)*x1824*x1828)));
evalcond[2]=((((-0.09465)*x1821))+(((-1.0)*x1817*x1826))+(((-1.0)*px))+((x1823*x1827))+(((-0.09465)*x1819))+(((-0.10915)*x1818))+(((0.425)*x1827)));
evalcond[3]=((((-0.09465)*x1825))+(((-0.09465)*x1820))+(((-1.0)*x1818*x1826))+(((-1.0)*py))+((x1823*x1828))+(((0.10915)*x1817))+(((0.425)*x1828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1829=((1.0)*cj5);
IkReal x1830=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1829)));
j4eval[0]=x1830;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1829))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1830);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1831=((1.0)*cj5);
IkReal x1832=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1831)));
j4eval[0]=x1832;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1831))))));
j4eval[2]=IKsign(x1832);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1833=((1.0)*sj0);
IkReal x1834=((1.0)*cj0);
IkReal x1835=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1835;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1833))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1834)))))+(IKabs(((((-1.0)*r02*x1834))+(((-1.0)*r12*x1833))))));
j4eval[2]=IKsign(x1835);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1836=((-1.0)*r20);
IkReal x1838 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1838)==0){
continue;
}
IkReal x1837=pow(x1838,-0.5);
CheckValue<IkReal> x1839 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1836),IKFAST_ATAN2_MAGTHRESH);
if(!x1839.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1839.value));
IkReal gconst79=(r21*x1837);
IkReal gconst80=(x1836*x1837);
CheckValue<IkReal> x1840 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1840.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1840.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1841=((-1.0)*r20);
IkReal x1842=x1837;
CheckValue<IkReal> x1844 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1841),IKFAST_ATAN2_MAGTHRESH);
if(!x1844.valid){
continue;
}
IkReal x1843=((-1.0)*(x1844.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1843;
IkReal gconst78=x1843;
IkReal gconst79=(r21*x1842);
IkReal gconst80=(x1841*x1842);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1845=((-1.0)*r20);
IkReal x1846=x1837;
CheckValue<IkReal> x1848 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1845),IKFAST_ATAN2_MAGTHRESH);
if(!x1848.valid){
continue;
}
IkReal x1847=((-1.0)*(x1848.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1847;
IkReal gconst78=x1847;
IkReal gconst79=(r21*x1846);
IkReal gconst80=(x1845*x1846);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1849=((-1.0)*r20);
IkReal x1850=x1837;
CheckValue<IkReal> x1852 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1849),IKFAST_ATAN2_MAGTHRESH);
if(!x1852.valid){
continue;
}
IkReal x1851=((-1.0)*(x1852.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1851;
IkReal gconst78=x1851;
IkReal gconst79=(r21*x1850);
IkReal gconst80=(x1849*x1850);
IkReal x1853=r22*r22;
CheckValue<IkReal> x1856=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1853))),-1);
if(!x1856.valid){
continue;
}
IkReal x1854=x1856.value;
IkReal x1855=(((x1854*(r21*r21*r21*r21)))+(((2.0)*x1854*(r20*r20)*(r21*r21)))+((x1854*(r20*r20*r20*r20)))+x1853);
j4eval[0]=x1855;
j4eval[1]=IKsign(x1855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1857=(sj1*sj2);
IkReal x1858=(gconst80*r20);
IkReal x1859=(gconst79*r21);
IkReal x1860=(cj1*cj2);
CheckValue<IkReal> x1861 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x1860))+((r22*x1857)))),IkReal(((((-1.0)*x1859*x1860))+((x1857*x1859))+(((-1.0)*x1857*x1858))+((x1858*x1860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1861.valid){
continue;
}
CheckValue<IkReal> x1862=IKPowWithIntegerCheck(IKsign(((x1859*x1859)+(r22*r22)+(((-2.0)*x1858*x1859))+(x1858*x1858))),-1);
if(!x1862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1861.value)+(((1.5707963267949)*(x1862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1863=IKsin(j4);
IkReal x1864=IKcos(j4);
IkReal x1865=(gconst79*r01);
IkReal x1866=(gconst79*r21);
IkReal x1867=((1.0)*cj2);
IkReal x1868=(gconst79*r11);
IkReal x1869=((1.0)*sj0);
IkReal x1870=(cj1*sj2);
IkReal x1871=((1.0)*x1864);
IkReal x1872=(gconst80*x1864);
IkReal x1873=((1.0)*x1863);
IkReal x1874=(gconst80*x1873);
evalcond[0]=((((-1.0)*r22*x1871))+((x1863*x1866))+(((-1.0)*r20*x1874)));
evalcond[1]=(cj0+(((-1.0)*r10*x1874))+((x1863*x1868))+(((-1.0)*r12*x1871)));
evalcond[2]=((((-1.0)*r02*x1871))+(((-1.0)*r00*x1874))+((x1863*x1865))+(((-1.0)*x1869)));
evalcond[3]=((((-1.0)*r22*x1873))+((sj1*sj2))+(((-1.0)*x1866*x1871))+((r20*x1872))+(((-1.0)*cj1*x1867)));
evalcond[4]=((((-1.0)*cj0*x1870))+(((-1.0)*r02*x1873))+(((-1.0)*cj0*sj1*x1867))+((r00*x1872))+(((-1.0)*x1865*x1871)));
evalcond[5]=((((-1.0)*x1869*x1870))+(((-1.0)*x1868*x1871))+(((-1.0)*r12*x1873))+((r10*x1872))+(((-1.0)*sj0*sj1*x1867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1875=((1.0)*gconst80);
CheckValue<IkReal> x1876=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x1875)))),-1);
if(!x1876.valid){
continue;
}
CheckValue<IkReal> x1877 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1875))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1877.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1876.value)))+(x1877.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1878=IKsin(j4);
IkReal x1879=IKcos(j4);
IkReal x1880=(gconst79*r01);
IkReal x1881=(gconst79*r21);
IkReal x1882=((1.0)*cj2);
IkReal x1883=(gconst79*r11);
IkReal x1884=((1.0)*sj0);
IkReal x1885=(cj1*sj2);
IkReal x1886=((1.0)*x1879);
IkReal x1887=(gconst80*x1879);
IkReal x1888=((1.0)*x1878);
IkReal x1889=(gconst80*x1888);
evalcond[0]=(((x1878*x1881))+(((-1.0)*r22*x1886))+(((-1.0)*r20*x1889)));
evalcond[1]=(cj0+((x1878*x1883))+(((-1.0)*r12*x1886))+(((-1.0)*r10*x1889)));
evalcond[2]=((((-1.0)*r02*x1886))+((x1878*x1880))+(((-1.0)*r00*x1889))+(((-1.0)*x1884)));
evalcond[3]=(((r20*x1887))+(((-1.0)*cj1*x1882))+(((-1.0)*r22*x1888))+((sj1*sj2))+(((-1.0)*x1881*x1886)));
evalcond[4]=((((-1.0)*cj0*sj1*x1882))+(((-1.0)*cj0*x1885))+(((-1.0)*x1880*x1886))+(((-1.0)*r02*x1888))+((r00*x1887)));
evalcond[5]=((((-1.0)*x1883*x1886))+(((-1.0)*sj0*sj1*x1882))+(((-1.0)*r12*x1888))+((r10*x1887))+(((-1.0)*x1884*x1885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1890=((1.0)*gconst80);
CheckValue<IkReal> x1891=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1890)))),-1);
if(!x1891.valid){
continue;
}
CheckValue<IkReal> x1892 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1890))+((cj0*gconst79*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1892.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1891.value)))+(x1892.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1893=IKsin(j4);
IkReal x1894=IKcos(j4);
IkReal x1895=(gconst79*r01);
IkReal x1896=(gconst79*r21);
IkReal x1897=((1.0)*cj2);
IkReal x1898=(gconst79*r11);
IkReal x1899=((1.0)*sj0);
IkReal x1900=(cj1*sj2);
IkReal x1901=((1.0)*x1894);
IkReal x1902=(gconst80*x1894);
IkReal x1903=((1.0)*x1893);
IkReal x1904=(gconst80*x1903);
evalcond[0]=(((x1893*x1896))+(((-1.0)*r22*x1901))+(((-1.0)*r20*x1904)));
evalcond[1]=(cj0+((x1893*x1898))+(((-1.0)*r10*x1904))+(((-1.0)*r12*x1901)));
evalcond[2]=(((x1893*x1895))+(((-1.0)*x1899))+(((-1.0)*r02*x1901))+(((-1.0)*r00*x1904)));
evalcond[3]=((((-1.0)*cj1*x1897))+(((-1.0)*r22*x1903))+((sj1*sj2))+(((-1.0)*x1896*x1901))+((r20*x1902)));
evalcond[4]=(((r00*x1902))+(((-1.0)*cj0*sj1*x1897))+(((-1.0)*cj0*x1900))+(((-1.0)*r02*x1903))+(((-1.0)*x1895*x1901)));
evalcond[5]=((((-1.0)*x1899*x1900))+(((-1.0)*sj0*sj1*x1897))+(((-1.0)*x1898*x1901))+(((-1.0)*r12*x1903))+((r10*x1902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1905=((-1.0)*r21);
IkReal x1907 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1907)==0){
continue;
}
IkReal x1906=pow(x1907,-0.5);
CheckValue<IkReal> x1908 = IKatan2WithCheck(IkReal(x1905),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1908.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1908.value))));
IkReal gconst82=(x1905*x1906);
IkReal gconst83=((1.0)*r20*x1906);
CheckValue<IkReal> x1909 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1909.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1909.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1910=((-1.0)*r21);
CheckValue<IkReal> x1913 = IKatan2WithCheck(IkReal(x1910),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1913.valid){
continue;
}
IkReal x1911=((1.0)*(x1913.value));
IkReal x1912=x1906;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1911)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1911)));
IkReal gconst82=(x1910*x1912);
IkReal gconst83=((1.0)*r20*x1912);
IkReal x1914=r22*r22;
IkReal x1915=((1.0)*x1914);
CheckValue<IkReal> x1919=IKPowWithIntegerCheck(((-1.0)+x1914),-1);
if(!x1919.valid){
continue;
}
IkReal x1916=x1919.value;
if((((1.0)+(((-1.0)*x1915)))) < -0.00001)
continue;
IkReal x1917=IKsqrt(((1.0)+(((-1.0)*x1915))));
IkReal x1918=(cj0*x1916*x1917);
j4eval[0]=((IKabs(((((-1.0)*x1915*x1918))+x1918)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1920=((-1.0)*r21);
CheckValue<IkReal> x1923 = IKatan2WithCheck(IkReal(x1920),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1923.valid){
continue;
}
IkReal x1921=((1.0)*(x1923.value));
IkReal x1922=x1906;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1921)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1921)));
IkReal gconst82=(x1920*x1922);
IkReal gconst83=((1.0)*r20*x1922);
IkReal x1924=r22*r22;
IkReal x1925=((1.0)*x1924);
CheckValue<IkReal> x1929=IKPowWithIntegerCheck(((-1.0)+x1924),-1);
if(!x1929.valid){
continue;
}
IkReal x1926=x1929.value;
if((((1.0)+(((-1.0)*x1925)))) < -0.00001)
continue;
IkReal x1927=IKsqrt(((1.0)+(((-1.0)*x1925))));
IkReal x1928=(sj0*x1926*x1927);
j4eval[0]=((IKabs((x1928+(((-1.0)*x1925*x1928)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1930=((-1.0)*r21);
CheckValue<IkReal> x1933 = IKatan2WithCheck(IkReal(x1930),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1933.valid){
continue;
}
IkReal x1931=((1.0)*(x1933.value));
IkReal x1932=x1906;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1931)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1931)));
IkReal gconst82=(x1930*x1932);
IkReal gconst83=((1.0)*r20*x1932);
IkReal x1934=r22*r22;
IkReal x1935=(r12*sj0);
IkReal x1936=(cj0*r02);
CheckValue<IkReal> x1940=IKPowWithIntegerCheck(((-1.0)+x1934),-1);
if(!x1940.valid){
continue;
}
IkReal x1937=x1940.value;
if((((1.0)+(((-1.0)*x1934)))) < -0.00001)
continue;
IkReal x1938=IKsqrt(((1.0)+(((-1.0)*x1934))));
IkReal x1939=(r22*x1937*x1938);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1936*x1939))+((x1935*x1939)))))+(IKabs(((((-1.0)*x1936))+(((-1.0)*x1935))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1941=((1.0)*sj0);
IkReal x1942=((1.0)*cj0);
CheckValue<IkReal> x1943=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1943.valid){
continue;
}
CheckValue<IkReal> x1944 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1942))+(((-1.0)*r12*x1941)))),IkReal(((((-1.0)*gconst82*r01*x1942))+(((-1.0)*gconst82*r11*x1941))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1943.value)))+(x1944.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1945=IKsin(j4);
IkReal x1946=IKcos(j4);
IkReal x1947=(gconst82*r11);
IkReal x1948=((1.0)*cj2);
IkReal x1949=((1.0)*sj0);
IkReal x1950=(cj1*sj2);
IkReal x1951=((1.0)*x1946);
IkReal x1952=(gconst83*x1946);
IkReal x1953=(gconst82*x1945);
IkReal x1954=((1.0)*x1945);
evalcond[0]=((((-1.0)*r22*x1951))+((r21*x1953))+(((-1.0)*gconst83*r20*x1954)));
evalcond[1]=(((x1945*x1947))+cj0+(((-1.0)*gconst83*r10*x1954))+(((-1.0)*r12*x1951)));
evalcond[2]=((((-1.0)*x1949))+(((-1.0)*r02*x1951))+((r01*x1953))+(((-1.0)*gconst83*r00*x1954)));
evalcond[3]=((((-1.0)*r22*x1954))+((r20*x1952))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1951))+(((-1.0)*cj1*x1948)));
evalcond[4]=((((-1.0)*cj0*x1950))+(((-1.0)*r02*x1954))+(((-1.0)*gconst82*r01*x1951))+((r00*x1952))+(((-1.0)*cj0*sj1*x1948)));
evalcond[5]=((((-1.0)*x1949*x1950))+(((-1.0)*sj0*sj1*x1948))+(((-1.0)*x1947*x1951))+((r10*x1952))+(((-1.0)*r12*x1954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1955=((1.0)*gconst83);
CheckValue<IkReal> x1956=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1955)))),-1);
if(!x1956.valid){
continue;
}
CheckValue<IkReal> x1957 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1956.value)))+(x1957.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1958=IKsin(j4);
IkReal x1959=IKcos(j4);
IkReal x1960=(gconst82*r11);
IkReal x1961=((1.0)*cj2);
IkReal x1962=((1.0)*sj0);
IkReal x1963=(cj1*sj2);
IkReal x1964=((1.0)*x1959);
IkReal x1965=(gconst83*x1959);
IkReal x1966=(gconst82*x1958);
IkReal x1967=((1.0)*x1958);
evalcond[0]=((((-1.0)*r22*x1964))+((r21*x1966))+(((-1.0)*gconst83*r20*x1967)));
evalcond[1]=(((x1958*x1960))+cj0+(((-1.0)*gconst83*r10*x1967))+(((-1.0)*r12*x1964)));
evalcond[2]=((((-1.0)*r02*x1964))+(((-1.0)*x1962))+((r01*x1966))+(((-1.0)*gconst83*r00*x1967)));
evalcond[3]=(((r20*x1965))+(((-1.0)*r22*x1967))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1964))+(((-1.0)*cj1*x1961)));
evalcond[4]=((((-1.0)*cj0*x1963))+(((-1.0)*cj0*sj1*x1961))+(((-1.0)*r02*x1967))+((r00*x1965))+(((-1.0)*gconst82*r01*x1964)));
evalcond[5]=((((-1.0)*sj0*sj1*x1961))+((r10*x1965))+(((-1.0)*x1960*x1964))+(((-1.0)*x1962*x1963))+(((-1.0)*r12*x1967)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1968=((1.0)*gconst83);
CheckValue<IkReal> x1969 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1968))+((cj0*gconst82*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1969.valid){
continue;
}
CheckValue<IkReal> x1970=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1968))+(((-1.0)*gconst82*r00)))),-1);
if(!x1970.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1969.value)+(((1.5707963267949)*(x1970.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1971=IKsin(j4);
IkReal x1972=IKcos(j4);
IkReal x1973=(gconst82*r11);
IkReal x1974=((1.0)*cj2);
IkReal x1975=((1.0)*sj0);
IkReal x1976=(cj1*sj2);
IkReal x1977=((1.0)*x1972);
IkReal x1978=(gconst83*x1972);
IkReal x1979=(gconst82*x1971);
IkReal x1980=((1.0)*x1971);
evalcond[0]=((((-1.0)*r22*x1977))+((r21*x1979))+(((-1.0)*gconst83*r20*x1980)));
evalcond[1]=(cj0+((x1971*x1973))+(((-1.0)*gconst83*r10*x1980))+(((-1.0)*r12*x1977)));
evalcond[2]=((((-1.0)*gconst83*r00*x1980))+(((-1.0)*r02*x1977))+(((-1.0)*x1975))+((r01*x1979)));
evalcond[3]=(((r20*x1978))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1977))+(((-1.0)*cj1*x1974))+(((-1.0)*r22*x1980)));
evalcond[4]=((((-1.0)*cj0*x1976))+(((-1.0)*cj0*sj1*x1974))+(((-1.0)*r02*x1980))+((r00*x1978))+(((-1.0)*gconst82*r01*x1977)));
evalcond[5]=((((-1.0)*x1975*x1976))+(((-1.0)*sj0*sj1*x1974))+((r10*x1978))+(((-1.0)*x1973*x1977))+(((-1.0)*r12*x1980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1981=((-1.0)*r10);
IkReal x1983 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x1983)==0){
continue;
}
IkReal x1982=pow(x1983,-0.5);
CheckValue<IkReal> x1984 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1981),IKFAST_ATAN2_MAGTHRESH);
if(!x1984.valid){
continue;
}
IkReal gconst84=((-1.0)*(x1984.value));
IkReal gconst85=(r11*x1982);
IkReal gconst86=(x1981*x1982);
CheckValue<IkReal> x1985 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1985.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1985.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x1986=((-1.0)*r10);
IkReal x1987=x1982;
CheckValue<IkReal> x1989 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1986),IKFAST_ATAN2_MAGTHRESH);
if(!x1989.valid){
continue;
}
IkReal x1988=((-1.0)*(x1989.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x1988;
IkReal gconst84=x1988;
IkReal gconst85=(r11*x1987);
IkReal gconst86=(x1986*x1987);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1990=((1.0)*sj0);
IkReal x1991=((1.0)*gconst85);
CheckValue<IkReal> x1992=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x1991)))),-1);
if(!x1992.valid){
continue;
}
CheckValue<IkReal> x1993 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x1990)))),IkReal((((cj0*gconst86*r00))+((gconst86*r10*sj0))+(((-1.0)*cj0*r01*x1991))+(((-1.0)*gconst85*r11*x1990)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1992.value)))+(x1993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1994=IKsin(j4);
IkReal x1995=IKcos(j4);
IkReal x1996=(gconst85*r21);
IkReal x1997=(gconst86*r00);
IkReal x1998=(gconst86*r10);
IkReal x1999=((1.0)*cj2);
IkReal x2000=(gconst85*r11);
IkReal x2001=(gconst85*r01);
IkReal x2002=((1.0)*sj0);
IkReal x2003=(gconst86*r20);
IkReal x2004=(cj1*sj2);
IkReal x2005=((1.0)*x1995);
IkReal x2006=((1.0)*x1994);
evalcond[0]=((((-1.0)*r22*x2005))+(((-1.0)*x2003*x2006))+((x1994*x1996)));
evalcond[1]=((((-1.0)*x1998*x2006))+cj0+(((-1.0)*r12*x2005))+((x1994*x2000)));
evalcond[2]=(((x1994*x2001))+(((-1.0)*r02*x2005))+(((-1.0)*x2002))+(((-1.0)*x1997*x2006)));
evalcond[3]=((((-1.0)*r22*x2006))+((sj1*sj2))+((x1995*x2003))+(((-1.0)*x1996*x2005))+(((-1.0)*cj1*x1999)));
evalcond[4]=((((-1.0)*cj0*sj1*x1999))+((x1995*x1997))+(((-1.0)*x2001*x2005))+(((-1.0)*r02*x2006))+(((-1.0)*cj0*x2004)));
evalcond[5]=((((-1.0)*sj0*sj1*x1999))+(((-1.0)*r12*x2006))+(((-1.0)*x2002*x2004))+((x1995*x1998))+(((-1.0)*x2000*x2005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2007=((1.0)*gconst86);
CheckValue<IkReal> x2008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2007))+(((-1.0)*gconst85*r00)))),-1);
if(!x2008.valid){
continue;
}
CheckValue<IkReal> x2009 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2007)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2009.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2008.value)))+(x2009.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2010=IKsin(j4);
IkReal x2011=IKcos(j4);
IkReal x2012=(gconst85*r21);
IkReal x2013=(gconst86*r00);
IkReal x2014=(gconst86*r10);
IkReal x2015=((1.0)*cj2);
IkReal x2016=(gconst85*r11);
IkReal x2017=(gconst85*r01);
IkReal x2018=((1.0)*sj0);
IkReal x2019=(gconst86*r20);
IkReal x2020=(cj1*sj2);
IkReal x2021=((1.0)*x2011);
IkReal x2022=((1.0)*x2010);
evalcond[0]=((((-1.0)*r22*x2021))+(((-1.0)*x2019*x2022))+((x2010*x2012)));
evalcond[1]=(cj0+(((-1.0)*r12*x2021))+((x2010*x2016))+(((-1.0)*x2014*x2022)));
evalcond[2]=((((-1.0)*x2018))+(((-1.0)*r02*x2021))+(((-1.0)*x2013*x2022))+((x2010*x2017)));
evalcond[3]=((((-1.0)*r22*x2022))+((sj1*sj2))+((x2011*x2019))+(((-1.0)*cj1*x2015))+(((-1.0)*x2012*x2021)));
evalcond[4]=((((-1.0)*cj0*sj1*x2015))+(((-1.0)*r02*x2022))+(((-1.0)*x2017*x2021))+((x2011*x2013))+(((-1.0)*cj0*x2020)));
evalcond[5]=((((-1.0)*x2016*x2021))+(((-1.0)*r12*x2022))+((x2011*x2014))+(((-1.0)*x2018*x2020))+(((-1.0)*sj0*sj1*x2015)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2023=((-1.0)*r11);
IkReal x2025 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2025)==0){
continue;
}
IkReal x2024=pow(x2025,-0.5);
CheckValue<IkReal> x2026 = IKatan2WithCheck(IkReal(x2023),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2026.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2026.value))));
IkReal gconst88=(x2023*x2024);
IkReal gconst89=((1.0)*r10*x2024);
CheckValue<IkReal> x2027 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2027.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2027.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2028=((-1.0)*r11);
CheckValue<IkReal> x2031 = IKatan2WithCheck(IkReal(x2028),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2031.valid){
continue;
}
IkReal x2029=((1.0)*(x2031.value));
IkReal x2030=x2024;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2029)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2029)));
IkReal gconst88=(x2028*x2030);
IkReal gconst89=((1.0)*r10*x2030);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2032=((-1.0)*r11);
CheckValue<IkReal> x2035 = IKatan2WithCheck(IkReal(x2032),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2035.valid){
continue;
}
IkReal x2033=((1.0)*(x2035.value));
IkReal x2034=x2024;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2033)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2033)));
IkReal gconst88=(x2032*x2034);
IkReal gconst89=((1.0)*r10*x2034);
IkReal x2036=r12*r12;
IkReal x2037=((1.0)*sj0);
IkReal x2038=(cj0*r02);
IkReal x2039=x2024;
j4eval[0]=((IKabs((((sj0*x2036*x2039))+((r12*x2038*x2039))+(((-1.0)*x2037*x2039)))))+(IKabs(((((-1.0)*r12*x2037))+(((-1.0)*x2038))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2040=((-1.0)*r11);
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(x2040),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
IkReal x2041=((1.0)*(x2043.value));
IkReal x2042=x2024;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2041)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2041)));
IkReal gconst88=(x2040*x2042);
IkReal gconst89=((1.0)*r10*x2042);
IkReal x2044=r12*r12;
IkReal x2045=(cj1*cj2*r22);
IkReal x2046=(r22*sj1*sj2);
CheckValue<IkReal> x2050=IKPowWithIntegerCheck(((-1.0)+x2044),-1);
if(!x2050.valid){
continue;
}
IkReal x2047=x2050.value;
if((((1.0)+(((-1.0)*x2044)))) < -0.00001)
continue;
IkReal x2048=IKsqrt(((1.0)+(((-1.0)*x2044))));
IkReal x2049=(r12*x2047*x2048);
j4eval[0]=((IKabs((x2046+(((-1.0)*x2045)))))+(IKabs((((x2045*x2049))+(((-1.0)*x2046*x2049))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2051=(cj1*cj2);
IkReal x2052=(gconst89*r20);
IkReal x2053=(gconst88*r21);
IkReal x2054=(sj1*sj2);
CheckValue<IkReal> x2055=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2052*x2053))+(x2052*x2052)+(r22*r22)+(x2053*x2053))),-1);
if(!x2055.valid){
continue;
}
CheckValue<IkReal> x2056 = IKatan2WithCheck(IkReal((((r22*x2054))+(((-1.0)*r22*x2051)))),IkReal((((x2053*x2054))+(((-1.0)*x2052*x2054))+(((-1.0)*x2051*x2053))+((x2051*x2052)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2055.value)))+(x2056.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2057=IKsin(j4);
IkReal x2058=IKcos(j4);
IkReal x2059=((1.0)*sj0);
IkReal x2060=((1.0)*cj2);
IkReal x2061=(gconst89*r20);
IkReal x2062=(gconst89*r10);
IkReal x2063=(gconst89*r00);
IkReal x2064=(cj1*sj2);
IkReal x2065=((1.0)*x2058);
IkReal x2066=((1.0)*x2057);
IkReal x2067=(gconst88*x2057);
evalcond[0]=(((r21*x2067))+(((-1.0)*r22*x2065))+(((-1.0)*x2061*x2066)));
evalcond[1]=((((-1.0)*r12*x2065))+cj0+((r11*x2067))+(((-1.0)*x2062*x2066)));
evalcond[2]=((((-1.0)*x2063*x2066))+(((-1.0)*r02*x2065))+((r01*x2067))+(((-1.0)*x2059)));
evalcond[3]=((((-1.0)*gconst88*r21*x2065))+(((-1.0)*r22*x2066))+((sj1*sj2))+((x2058*x2061))+(((-1.0)*cj1*x2060)));
evalcond[4]=((((-1.0)*cj0*x2064))+(((-1.0)*r02*x2066))+((x2058*x2063))+(((-1.0)*cj0*sj1*x2060))+(((-1.0)*gconst88*r01*x2065)));
evalcond[5]=((((-1.0)*r12*x2066))+(((-1.0)*cj2*sj1*x2059))+((x2058*x2062))+(((-1.0)*x2059*x2064))+(((-1.0)*gconst88*r11*x2065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2068=((1.0)*sj0);
IkReal x2069=((1.0)*cj0);
CheckValue<IkReal> x2070 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2068))+(((-1.0)*r02*x2069)))),IkReal((((cj0*gconst89*r00))+(((-1.0)*gconst88*r11*x2068))+(((-1.0)*gconst88*r01*x2069))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2070.valid){
continue;
}
CheckValue<IkReal> x2071=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2071.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2070.value)+(((1.5707963267949)*(x2071.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2072=IKsin(j4);
IkReal x2073=IKcos(j4);
IkReal x2074=((1.0)*sj0);
IkReal x2075=((1.0)*cj2);
IkReal x2076=(gconst89*r20);
IkReal x2077=(gconst89*r10);
IkReal x2078=(gconst89*r00);
IkReal x2079=(cj1*sj2);
IkReal x2080=((1.0)*x2073);
IkReal x2081=((1.0)*x2072);
IkReal x2082=(gconst88*x2072);
evalcond[0]=((((-1.0)*r22*x2080))+(((-1.0)*x2076*x2081))+((r21*x2082)));
evalcond[1]=(cj0+(((-1.0)*x2077*x2081))+(((-1.0)*r12*x2080))+((r11*x2082)));
evalcond[2]=((((-1.0)*r02*x2080))+(((-1.0)*x2078*x2081))+(((-1.0)*x2074))+((r01*x2082)));
evalcond[3]=((((-1.0)*r22*x2081))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2080))+(((-1.0)*cj1*x2075))+((x2073*x2076)));
evalcond[4]=((((-1.0)*r02*x2081))+(((-1.0)*gconst88*r01*x2080))+(((-1.0)*cj0*sj1*x2075))+((x2073*x2078))+(((-1.0)*cj0*x2079)));
evalcond[5]=((((-1.0)*gconst88*r11*x2080))+(((-1.0)*x2074*x2079))+(((-1.0)*r12*x2081))+((x2073*x2077))+(((-1.0)*cj2*sj1*x2074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2083=((1.0)*gconst89);
CheckValue<IkReal> x2084 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2083))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2084.valid){
continue;
}
CheckValue<IkReal> x2085=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2083))+(((-1.0)*gconst88*r00)))),-1);
if(!x2085.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2084.value)+(((1.5707963267949)*(x2085.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2086=IKsin(j4);
IkReal x2087=IKcos(j4);
IkReal x2088=((1.0)*sj0);
IkReal x2089=((1.0)*cj2);
IkReal x2090=(gconst89*r20);
IkReal x2091=(gconst89*r10);
IkReal x2092=(gconst89*r00);
IkReal x2093=(cj1*sj2);
IkReal x2094=((1.0)*x2087);
IkReal x2095=((1.0)*x2086);
IkReal x2096=(gconst88*x2086);
evalcond[0]=((((-1.0)*x2090*x2095))+((r21*x2096))+(((-1.0)*r22*x2094)));
evalcond[1]=(cj0+(((-1.0)*x2091*x2095))+(((-1.0)*r12*x2094))+((r11*x2096)));
evalcond[2]=((((-1.0)*x2088))+((r01*x2096))+(((-1.0)*x2092*x2095))+(((-1.0)*r02*x2094)));
evalcond[3]=((((-1.0)*cj1*x2089))+(((-1.0)*gconst88*r21*x2094))+((x2087*x2090))+((sj1*sj2))+(((-1.0)*r22*x2095)));
evalcond[4]=((((-1.0)*cj0*sj1*x2089))+(((-1.0)*gconst88*r01*x2094))+((x2087*x2092))+(((-1.0)*r02*x2095))+(((-1.0)*cj0*x2093)));
evalcond[5]=((((-1.0)*gconst88*r11*x2094))+((x2087*x2091))+(((-1.0)*cj2*sj1*x2088))+(((-1.0)*x2088*x2093))+(((-1.0)*r12*x2095)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2097=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2097;
j4eval[1]=IKsign(x2097);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2098=((1.0)*cj5);
IkReal x2099=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2098)));
j4eval[0]=x2099;
j4eval[1]=((IKabs(((((-1.0)*r20*x2098))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2099);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2100=cj5*cj5;
IkReal x2101=r11*r11;
IkReal x2102=(r11*sj5);
IkReal x2103=(cj5*r10);
IkReal x2104=((r12*r12)+x2101+(((-1.0)*x2100*x2101))+((x2100*(r10*r10)))+(((-2.0)*x2102*x2103)));
j4eval[0]=x2104;
j4eval[1]=IKsign(x2104);
j4eval[2]=((IKabs(r12))+(IKabs((x2103+(((-1.0)*x2102))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2105=cj5*cj5;
IkReal x2106=r11*r11;
IkReal x2107=(cj5*r10);
IkReal x2108=(r11*sj5);
CheckValue<IkReal> x2109 = IKatan2WithCheck(IkReal((x2107+(((-1.0)*x2108)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2109.valid){
continue;
}
CheckValue<IkReal> x2110=IKPowWithIntegerCheck(IKsign(((r12*r12)+x2106+(((-1.0)*x2105*x2106))+(((-2.0)*x2107*x2108))+((x2105*(r10*r10))))),-1);
if(!x2110.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2109.value)+(((1.5707963267949)*(x2110.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2111=IKsin(j4);
IkReal x2112=IKcos(j4);
IkReal x2113=(cj5*r10);
IkReal x2114=(r01*sj5);
IkReal x2115=((1.0)*cj2);
IkReal x2116=(cj5*r00);
IkReal x2117=(cj5*r20);
IkReal x2118=((1.0)*x2112);
IkReal x2119=((1.0)*x2111);
IkReal x2120=(sj5*x2111);
evalcond[0]=((((-1.0)*x2117*x2119))+((r21*x2120))+(((-1.0)*r22*x2118)));
evalcond[1]=((((-1.0)*x2116*x2119))+((x2111*x2114))+(((-1.0)*r02*x2118)));
evalcond[2]=((((-1.0)*r11*sj5*x2118))+(((-1.0)*r12*x2119))+((x2112*x2113)));
evalcond[3]=((1.0)+((r11*x2120))+(((-1.0)*r12*x2118))+(((-1.0)*x2113*x2119)));
evalcond[4]=((((-1.0)*r21*sj5*x2118))+((sj1*sj2))+(((-1.0)*r22*x2119))+(((-1.0)*cj1*x2115))+((x2112*x2117)));
evalcond[5]=((((-1.0)*x2114*x2118))+(((-1.0)*sj1*x2115))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2119))+((x2112*x2116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2121=((1.0)*cj5);
CheckValue<IkReal> x2122 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2121)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2122.valid){
continue;
}
CheckValue<IkReal> x2123=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2121))+(((-1.0)*r00*sj5)))),-1);
if(!x2123.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2122.value)+(((1.5707963267949)*(x2123.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2124=IKsin(j4);
IkReal x2125=IKcos(j4);
IkReal x2126=(cj5*r10);
IkReal x2127=(r01*sj5);
IkReal x2128=((1.0)*cj2);
IkReal x2129=(cj5*r00);
IkReal x2130=(cj5*r20);
IkReal x2131=((1.0)*x2125);
IkReal x2132=((1.0)*x2124);
IkReal x2133=(sj5*x2124);
evalcond[0]=((((-1.0)*r22*x2131))+((r21*x2133))+(((-1.0)*x2130*x2132)));
evalcond[1]=((((-1.0)*x2129*x2132))+((x2124*x2127))+(((-1.0)*r02*x2131)));
evalcond[2]=(((x2125*x2126))+(((-1.0)*r12*x2132))+(((-1.0)*r11*sj5*x2131)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2131))+((r11*x2133))+(((-1.0)*x2126*x2132)));
evalcond[4]=((((-1.0)*r22*x2132))+((sj1*sj2))+(((-1.0)*cj1*x2128))+(((-1.0)*r21*sj5*x2131))+((x2125*x2130)));
evalcond[5]=(((x2125*x2129))+(((-1.0)*cj1*sj2))+(((-1.0)*x2127*x2131))+(((-1.0)*sj1*x2128))+(((-1.0)*r02*x2132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2134=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2134.valid){
continue;
}
CheckValue<IkReal> x2135 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2135.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2134.value)))+(x2135.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2136=IKsin(j4);
IkReal x2137=IKcos(j4);
IkReal x2138=(cj5*r10);
IkReal x2139=(r01*sj5);
IkReal x2140=((1.0)*cj2);
IkReal x2141=(cj5*r00);
IkReal x2142=(cj5*r20);
IkReal x2143=((1.0)*x2137);
IkReal x2144=((1.0)*x2136);
IkReal x2145=(sj5*x2136);
evalcond[0]=((((-1.0)*x2142*x2144))+(((-1.0)*r22*x2143))+((r21*x2145)));
evalcond[1]=(((x2136*x2139))+(((-1.0)*r02*x2143))+(((-1.0)*x2141*x2144)));
evalcond[2]=((((-1.0)*r11*sj5*x2143))+(((-1.0)*r12*x2144))+((x2137*x2138)));
evalcond[3]=((1.0)+(((-1.0)*x2138*x2144))+((r11*x2145))+(((-1.0)*r12*x2143)));
evalcond[4]=(((sj1*sj2))+((x2137*x2142))+(((-1.0)*r22*x2144))+(((-1.0)*cj1*x2140))+(((-1.0)*r21*sj5*x2143)));
evalcond[5]=((((-1.0)*r02*x2144))+(((-1.0)*sj1*x2140))+(((-1.0)*cj1*sj2))+((x2137*x2141))+(((-1.0)*x2139*x2143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2146=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2146;
j4eval[1]=IKsign(x2146);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2147=((1.0)*cj5);
IkReal x2148=((((-1.0)*r21*x2147))+(((-1.0)*r20*sj5)));
j4eval[0]=x2148;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2147))))));
j4eval[2]=IKsign(x2148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2149=cj5*cj5;
IkReal x2150=r11*r11;
IkReal x2151=(cj5*r10);
IkReal x2152=(r11*sj5);
IkReal x2153=(((x2149*x2150))+(((2.0)*x2151*x2152))+(((-1.0)*(r12*r12)))+(((-1.0)*x2149*(r10*r10)))+(((-1.0)*x2150)));
j4eval[0]=x2153;
j4eval[1]=((IKabs(r12))+(IKabs((x2151+(((-1.0)*x2152))))));
j4eval[2]=IKsign(x2153);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2154=cj5*cj5;
IkReal x2155=r11*r11;
IkReal x2156=(cj5*r10);
IkReal x2157=(r11*sj5);
CheckValue<IkReal> x2158 = IKatan2WithCheck(IkReal((x2156+(((-1.0)*x2157)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2158.valid){
continue;
}
CheckValue<IkReal> x2159=IKPowWithIntegerCheck(IKsign(((((-1.0)*x2154*(r10*r10)))+((x2154*x2155))+(((-1.0)*(r12*r12)))+(((2.0)*x2156*x2157))+(((-1.0)*x2155)))),-1);
if(!x2159.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2158.value)+(((1.5707963267949)*(x2159.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2160=IKsin(j4);
IkReal x2161=IKcos(j4);
IkReal x2162=(cj5*r10);
IkReal x2163=(r01*sj5);
IkReal x2164=(cj5*r00);
IkReal x2165=(cj5*r20);
IkReal x2166=((1.0)*x2161);
IkReal x2167=((1.0)*x2160);
IkReal x2168=(sj5*x2160);
evalcond[0]=(((r21*x2168))+(((-1.0)*x2165*x2167))+(((-1.0)*r22*x2166)));
evalcond[1]=((((-1.0)*x2164*x2167))+((x2160*x2163))+(((-1.0)*r02*x2166)));
evalcond[2]=((((-1.0)*r11*sj5*x2166))+((x2161*x2162))+(((-1.0)*r12*x2167)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2166))+((r11*x2168))+(((-1.0)*x2162*x2167)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2163*x2166))+((cj1*sj2))+((x2161*x2164))+(((-1.0)*r02*x2167)));
evalcond[5]=((((-1.0)*r21*sj5*x2166))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2161*x2165))+(((-1.0)*r22*x2167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2169=((1.0)*cj5);
CheckValue<IkReal> x2170=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2169))+(((-1.0)*r20*sj5)))),-1);
if(!x2170.valid){
continue;
}
CheckValue<IkReal> x2171 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2169)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2170.value)))+(x2171.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2172=IKsin(j4);
IkReal x2173=IKcos(j4);
IkReal x2174=(cj5*r10);
IkReal x2175=(r01*sj5);
IkReal x2176=(cj5*r00);
IkReal x2177=(cj5*r20);
IkReal x2178=((1.0)*x2173);
IkReal x2179=((1.0)*x2172);
IkReal x2180=(sj5*x2172);
evalcond[0]=(((r21*x2180))+(((-1.0)*r22*x2178))+(((-1.0)*x2177*x2179)));
evalcond[1]=((((-1.0)*x2176*x2179))+((x2172*x2175))+(((-1.0)*r02*x2178)));
evalcond[2]=(((x2173*x2174))+(((-1.0)*r11*sj5*x2178))+(((-1.0)*r12*x2179)));
evalcond[3]=((-1.0)+(((-1.0)*x2174*x2179))+((r11*x2180))+(((-1.0)*r12*x2178)));
evalcond[4]=(((cj2*sj1))+((x2173*x2176))+((cj1*sj2))+(((-1.0)*r02*x2179))+(((-1.0)*x2175*x2178)));
evalcond[5]=(((x2173*x2177))+(((-1.0)*r21*sj5*x2178))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2179)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2181 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2181.valid){
continue;
}
CheckValue<IkReal> x2182=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2182.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2181.value)+(((1.5707963267949)*(x2182.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2183=IKsin(j4);
IkReal x2184=IKcos(j4);
IkReal x2185=(cj5*r10);
IkReal x2186=(r01*sj5);
IkReal x2187=(cj5*r00);
IkReal x2188=(cj5*r20);
IkReal x2189=((1.0)*x2184);
IkReal x2190=((1.0)*x2183);
IkReal x2191=(sj5*x2183);
evalcond[0]=((((-1.0)*x2188*x2190))+(((-1.0)*r22*x2189))+((r21*x2191)));
evalcond[1]=((((-1.0)*x2187*x2190))+((x2183*x2186))+(((-1.0)*r02*x2189)));
evalcond[2]=((((-1.0)*r11*sj5*x2189))+(((-1.0)*r12*x2190))+((x2184*x2185)));
evalcond[3]=((-1.0)+(((-1.0)*x2185*x2190))+((r11*x2191))+(((-1.0)*r12*x2189)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2186*x2189))+(((-1.0)*r02*x2190))+((x2184*x2187)));
evalcond[5]=((((-1.0)*r21*sj5*x2189))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2190))+((x2184*x2188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2192=((-1.0)*r00);
IkReal x2194 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2194)==0){
continue;
}
IkReal x2193=pow(x2194,-0.5);
CheckValue<IkReal> x2195 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2192),IKFAST_ATAN2_MAGTHRESH);
if(!x2195.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2195.value));
IkReal gconst91=(r01*x2193);
IkReal gconst92=(x2192*x2193);
CheckValue<IkReal> x2196 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2196.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2196.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2197=((-1.0)*r00);
IkReal x2198=x2193;
CheckValue<IkReal> x2200 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2197),IKFAST_ATAN2_MAGTHRESH);
if(!x2200.valid){
continue;
}
IkReal x2199=((-1.0)*(x2200.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2199;
IkReal gconst90=x2199;
IkReal gconst91=(r01*x2198);
IkReal gconst92=(x2197*x2198);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2201=((1.0)*sj0);
IkReal x2202=((1.0)*cj0);
CheckValue<IkReal> x2203 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2201))+(((-1.0)*r02*x2202)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2202))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2203.valid){
continue;
}
CheckValue<IkReal> x2204=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2203.value)+(((1.5707963267949)*(x2204.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2205=IKsin(j4);
IkReal x2206=IKcos(j4);
IkReal x2207=((1.0)*cj2);
IkReal x2208=(gconst92*r00);
IkReal x2209=(gconst92*r20);
IkReal x2210=((1.0)*sj0);
IkReal x2211=(gconst92*r10);
IkReal x2212=(cj1*sj2);
IkReal x2213=((1.0)*x2206);
IkReal x2214=(gconst91*x2205);
IkReal x2215=((1.0)*x2205);
evalcond[0]=((((-1.0)*r22*x2213))+(((-1.0)*x2209*x2215))+((r21*x2214)));
evalcond[1]=(cj0+(((-1.0)*r12*x2213))+((r11*x2214))+(((-1.0)*x2211*x2215)));
evalcond[2]=(((r01*x2214))+(((-1.0)*x2208*x2215))+(((-1.0)*x2210))+(((-1.0)*r02*x2213)));
evalcond[3]=((((-1.0)*cj1*x2207))+((x2206*x2209))+(((-1.0)*r22*x2215))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2213)));
evalcond[4]=(((x2206*x2208))+(((-1.0)*gconst91*r01*x2213))+(((-1.0)*cj0*sj1*x2207))+(((-1.0)*r02*x2215))+(((-1.0)*cj0*x2212)));
evalcond[5]=((((-1.0)*x2210*x2212))+((x2206*x2211))+(((-1.0)*r12*x2215))+(((-1.0)*gconst91*r11*x2213))+(((-1.0)*sj0*sj1*x2207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2216=((1.0)*gconst92);
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2216))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
CheckValue<IkReal> x2218=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2216)))),-1);
if(!x2218.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2217.value)+(((1.5707963267949)*(x2218.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2219=IKsin(j4);
IkReal x2220=IKcos(j4);
IkReal x2221=((1.0)*cj2);
IkReal x2222=(gconst92*r00);
IkReal x2223=(gconst92*r20);
IkReal x2224=((1.0)*sj0);
IkReal x2225=(gconst92*r10);
IkReal x2226=(cj1*sj2);
IkReal x2227=((1.0)*x2220);
IkReal x2228=(gconst91*x2219);
IkReal x2229=((1.0)*x2219);
evalcond[0]=(((r21*x2228))+(((-1.0)*x2223*x2229))+(((-1.0)*r22*x2227)));
evalcond[1]=((((-1.0)*x2225*x2229))+cj0+(((-1.0)*r12*x2227))+((r11*x2228)));
evalcond[2]=((((-1.0)*x2222*x2229))+(((-1.0)*r02*x2227))+(((-1.0)*x2224))+((r01*x2228)));
evalcond[3]=((((-1.0)*gconst91*r21*x2227))+((sj1*sj2))+(((-1.0)*r22*x2229))+((x2220*x2223))+(((-1.0)*cj1*x2221)));
evalcond[4]=((((-1.0)*r02*x2229))+(((-1.0)*gconst91*r01*x2227))+(((-1.0)*cj0*x2226))+(((-1.0)*cj0*sj1*x2221))+((x2220*x2222)));
evalcond[5]=((((-1.0)*sj0*sj1*x2221))+(((-1.0)*x2224*x2226))+(((-1.0)*r12*x2229))+(((-1.0)*gconst91*r11*x2227))+((x2220*x2225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2230=((-1.0)*r01);
IkReal x2232 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2232)==0){
continue;
}
IkReal x2231=pow(x2232,-0.5);
CheckValue<IkReal> x2233 = IKatan2WithCheck(IkReal(x2230),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2233.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2233.value))));
IkReal gconst94=(x2230*x2231);
IkReal gconst95=((1.0)*r00*x2231);
CheckValue<IkReal> x2234 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2234.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2234.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2235=((-1.0)*r01);
CheckValue<IkReal> x2238 = IKatan2WithCheck(IkReal(x2235),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2238.valid){
continue;
}
IkReal x2236=((1.0)*(x2238.value));
IkReal x2237=x2231;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2236)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2236)));
IkReal gconst94=(x2235*x2237);
IkReal gconst95=((1.0)*r00*x2237);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2239=((-1.0)*r01);
CheckValue<IkReal> x2242 = IKatan2WithCheck(IkReal(x2239),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2242.valid){
continue;
}
IkReal x2240=((1.0)*(x2242.value));
IkReal x2241=x2231;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2240)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2240)));
IkReal gconst94=(x2239*x2241);
IkReal gconst95=((1.0)*r00*x2241);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2243=((-1.0)*r01);
CheckValue<IkReal> x2246 = IKatan2WithCheck(IkReal(x2243),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2246.valid){
continue;
}
IkReal x2244=((1.0)*(x2246.value));
IkReal x2245=x2231;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2244)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2244)));
IkReal gconst94=(x2243*x2245);
IkReal gconst95=((1.0)*r00*x2245);
IkReal x2247=r02*r02;
IkReal x2248=(r12*sj0);
IkReal x2249=((1.0)*cj0);
IkReal x2250=x2231;
j4eval[0]=((IKabs(((((-1.0)*x2248))+(((-1.0)*r02*x2249)))))+(IKabs(((((-1.0)*x2249*x2250))+((cj0*x2247*x2250))+((r02*x2248*x2250))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2251=((1.0)*sj0);
IkReal x2252=((1.0)*cj0);
CheckValue<IkReal> x2253=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2253.valid){
continue;
}
CheckValue<IkReal> x2254 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2252))+(((-1.0)*r12*x2251)))),IkReal(((((-1.0)*gconst94*r11*x2251))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r01*x2252))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2254.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2253.value)))+(x2254.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2255=IKsin(j4);
IkReal x2256=IKcos(j4);
IkReal x2257=(gconst94*r11);
IkReal x2258=((1.0)*cj2);
IkReal x2259=(gconst94*r21);
IkReal x2260=((1.0)*sj0);
IkReal x2261=(gconst94*r01);
IkReal x2262=(cj1*sj2);
IkReal x2263=((1.0)*x2256);
IkReal x2264=(gconst95*x2256);
IkReal x2265=((1.0)*x2255);
IkReal x2266=(gconst95*x2265);
evalcond[0]=(((x2255*x2259))+(((-1.0)*r20*x2266))+(((-1.0)*r22*x2263)));
evalcond[1]=(((x2255*x2257))+cj0+(((-1.0)*r10*x2266))+(((-1.0)*r12*x2263)));
evalcond[2]=((((-1.0)*r00*x2266))+((x2255*x2261))+(((-1.0)*r02*x2263))+(((-1.0)*x2260)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2259*x2263))+(((-1.0)*r22*x2265))+((r20*x2264))+(((-1.0)*cj1*x2258)));
evalcond[4]=(((r00*x2264))+(((-1.0)*x2261*x2263))+(((-1.0)*cj0*sj1*x2258))+(((-1.0)*r02*x2265))+(((-1.0)*cj0*x2262)));
evalcond[5]=((((-1.0)*sj0*sj1*x2258))+(((-1.0)*x2260*x2262))+(((-1.0)*x2257*x2263))+((r10*x2264))+(((-1.0)*r12*x2265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2267=((1.0)*gconst95);
CheckValue<IkReal> x2268 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2268.valid){
continue;
}
CheckValue<IkReal> x2269=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2267)))),-1);
if(!x2269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2268.value)+(((1.5707963267949)*(x2269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2270=IKsin(j4);
IkReal x2271=IKcos(j4);
IkReal x2272=(gconst94*r11);
IkReal x2273=((1.0)*cj2);
IkReal x2274=(gconst94*r21);
IkReal x2275=((1.0)*sj0);
IkReal x2276=(gconst94*r01);
IkReal x2277=(cj1*sj2);
IkReal x2278=((1.0)*x2271);
IkReal x2279=(gconst95*x2271);
IkReal x2280=((1.0)*x2270);
IkReal x2281=(gconst95*x2280);
evalcond[0]=(((x2270*x2274))+(((-1.0)*r22*x2278))+(((-1.0)*r20*x2281)));
evalcond[1]=(cj0+((x2270*x2272))+(((-1.0)*r10*x2281))+(((-1.0)*r12*x2278)));
evalcond[2]=(((x2270*x2276))+(((-1.0)*r02*x2278))+(((-1.0)*x2275))+(((-1.0)*r00*x2281)));
evalcond[3]=((((-1.0)*x2274*x2278))+(((-1.0)*cj1*x2273))+((sj1*sj2))+((r20*x2279))+(((-1.0)*r22*x2280)));
evalcond[4]=(((r00*x2279))+(((-1.0)*r02*x2280))+(((-1.0)*cj0*sj1*x2273))+(((-1.0)*x2276*x2278))+(((-1.0)*cj0*x2277)));
evalcond[5]=((((-1.0)*x2275*x2277))+(((-1.0)*r12*x2280))+(((-1.0)*sj0*sj1*x2273))+((r10*x2279))+(((-1.0)*x2272*x2278)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2282=((1.0)*gconst95);
CheckValue<IkReal> x2283=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2282)))),-1);
if(!x2283.valid){
continue;
}
CheckValue<IkReal> x2284 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2283.value)))+(x2284.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2285=IKsin(j4);
IkReal x2286=IKcos(j4);
IkReal x2287=(gconst94*r11);
IkReal x2288=((1.0)*cj2);
IkReal x2289=(gconst94*r21);
IkReal x2290=((1.0)*sj0);
IkReal x2291=(gconst94*r01);
IkReal x2292=(cj1*sj2);
IkReal x2293=((1.0)*x2286);
IkReal x2294=(gconst95*x2286);
IkReal x2295=((1.0)*x2285);
IkReal x2296=(gconst95*x2295);
evalcond[0]=((((-1.0)*r22*x2293))+(((-1.0)*r20*x2296))+((x2285*x2289)));
evalcond[1]=(cj0+(((-1.0)*r12*x2293))+(((-1.0)*r10*x2296))+((x2285*x2287)));
evalcond[2]=((((-1.0)*r00*x2296))+(((-1.0)*r02*x2293))+((x2285*x2291))+(((-1.0)*x2290)));
evalcond[3]=((((-1.0)*x2289*x2293))+((sj1*sj2))+(((-1.0)*cj1*x2288))+((r20*x2294))+(((-1.0)*r22*x2295)));
evalcond[4]=((((-1.0)*r02*x2295))+(((-1.0)*cj0*sj1*x2288))+(((-1.0)*cj0*x2292))+((r00*x2294))+(((-1.0)*x2291*x2293)));
evalcond[5]=(((r10*x2294))+(((-1.0)*x2287*x2293))+(((-1.0)*r12*x2295))+(((-1.0)*x2290*x2292))+(((-1.0)*sj0*sj1*x2288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2297=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2297;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2297);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2298=((1.0)*cj5);
IkReal x2299=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2298)));
j4eval[0]=x2299;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2298))))));
j4eval[2]=IKsign(x2299);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2300=cj5*cj5;
IkReal x2301=r01*r01;
IkReal x2302=(r01*sj5);
IkReal x2303=(cj5*r00);
IkReal x2304=((((-1.0)*x2301))+((x2300*x2301))+(((-1.0)*(r02*r02)))+(((-1.0)*x2300*(r00*r00)))+(((2.0)*x2302*x2303)));
j4eval[0]=x2304;
j4eval[1]=IKsign(x2304);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x2302))+x2303))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2305=cj5*cj5;
IkReal x2306=r01*r01;
IkReal x2307=(r01*sj5);
IkReal x2308=(cj5*r00);
CheckValue<IkReal> x2309 = IKatan2WithCheck(IkReal(((((-1.0)*x2307))+x2308)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2309.valid){
continue;
}
CheckValue<IkReal> x2310=IKPowWithIntegerCheck(IKsign((((x2305*x2306))+(((-1.0)*x2306))+(((-1.0)*(r02*r02)))+(((2.0)*x2307*x2308))+(((-1.0)*x2305*(r00*r00))))),-1);
if(!x2310.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2309.value)+(((1.5707963267949)*(x2310.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2311=IKsin(j4);
IkReal x2312=IKcos(j4);
IkReal x2313=(cj5*r10);
IkReal x2314=(r01*sj5);
IkReal x2315=((1.0)*cj2);
IkReal x2316=(cj5*r00);
IkReal x2317=(cj5*r20);
IkReal x2318=((1.0)*x2312);
IkReal x2319=((1.0)*x2311);
IkReal x2320=(sj5*x2311);
evalcond[0]=((((-1.0)*r22*x2318))+((r21*x2320))+(((-1.0)*x2317*x2319)));
evalcond[1]=(((r11*x2320))+(((-1.0)*r12*x2318))+(((-1.0)*x2313*x2319)));
evalcond[2]=(((x2312*x2316))+(((-1.0)*r02*x2319))+(((-1.0)*x2314*x2318)));
evalcond[3]=((-1.0)+((x2311*x2314))+(((-1.0)*r02*x2318))+(((-1.0)*x2316*x2319)));
evalcond[4]=(((x2312*x2317))+(((-1.0)*r22*x2319))+((sj1*sj2))+(((-1.0)*cj1*x2315))+(((-1.0)*r21*sj5*x2318)));
evalcond[5]=(((x2312*x2313))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2318))+(((-1.0)*r12*x2319))+(((-1.0)*sj1*x2315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2321=((1.0)*cj5);
CheckValue<IkReal> x2322 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2322.valid){
continue;
}
CheckValue<IkReal> x2323=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2321)))),-1);
if(!x2323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2322.value)+(((1.5707963267949)*(x2323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2324=IKsin(j4);
IkReal x2325=IKcos(j4);
IkReal x2326=(cj5*r10);
IkReal x2327=(r01*sj5);
IkReal x2328=((1.0)*cj2);
IkReal x2329=(cj5*r00);
IkReal x2330=(cj5*r20);
IkReal x2331=((1.0)*x2325);
IkReal x2332=((1.0)*x2324);
IkReal x2333=(sj5*x2324);
evalcond[0]=(((r21*x2333))+(((-1.0)*r22*x2331))+(((-1.0)*x2330*x2332)));
evalcond[1]=(((r11*x2333))+(((-1.0)*x2326*x2332))+(((-1.0)*r12*x2331)));
evalcond[2]=((((-1.0)*r02*x2332))+((x2325*x2329))+(((-1.0)*x2327*x2331)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x2331))+(((-1.0)*x2329*x2332))+((x2324*x2327)));
evalcond[4]=((((-1.0)*r22*x2332))+((sj1*sj2))+(((-1.0)*cj1*x2328))+((x2325*x2330))+(((-1.0)*r21*sj5*x2331)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2331))+(((-1.0)*sj1*x2328))+((x2325*x2326))+(((-1.0)*r12*x2332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2334=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2334.valid){
continue;
}
CheckValue<IkReal> x2335 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2334.value)))+(x2335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2336=IKsin(j4);
IkReal x2337=IKcos(j4);
IkReal x2338=(cj5*r10);
IkReal x2339=(r01*sj5);
IkReal x2340=((1.0)*cj2);
IkReal x2341=(cj5*r00);
IkReal x2342=(cj5*r20);
IkReal x2343=((1.0)*x2337);
IkReal x2344=((1.0)*x2336);
IkReal x2345=(sj5*x2336);
evalcond[0]=((((-1.0)*r22*x2343))+((r21*x2345))+(((-1.0)*x2342*x2344)));
evalcond[1]=(((r11*x2345))+(((-1.0)*r12*x2343))+(((-1.0)*x2338*x2344)));
evalcond[2]=((((-1.0)*x2339*x2343))+(((-1.0)*r02*x2344))+((x2337*x2341)));
evalcond[3]=((-1.0)+(((-1.0)*x2341*x2344))+((x2336*x2339))+(((-1.0)*r02*x2343)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2340))+(((-1.0)*r22*x2344))+((x2337*x2342))+(((-1.0)*r21*sj5*x2343)));
evalcond[5]=(((x2337*x2338))+(((-1.0)*r11*sj5*x2343))+(((-1.0)*sj1*x2340))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x2344)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2346=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2346;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2346);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2347=((1.0)*cj5);
IkReal x2348=((((-1.0)*r21*x2347))+(((-1.0)*r20*sj5)));
j4eval[0]=x2348;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x2347))))));
j4eval[2]=IKsign(x2348);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2349=cj5*cj5;
IkReal x2350=r01*r01;
IkReal x2351=(cj5*r00);
IkReal x2352=(r01*sj5);
IkReal x2353=((((-1.0)*x2349*x2350))+(((-2.0)*x2351*x2352))+x2350+((x2349*(r00*r00)))+(r02*r02));
j4eval[0]=x2353;
j4eval[1]=((IKabs(r02))+(IKabs((x2351+(((-1.0)*x2352))))));
j4eval[2]=IKsign(x2353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2354=cj5*cj5;
IkReal x2355=r01*r01;
IkReal x2356=(r01*sj5);
IkReal x2357=(cj5*r00);
CheckValue<IkReal> x2358=IKPowWithIntegerCheck(IKsign((x2355+(((-1.0)*x2354*x2355))+((x2354*(r00*r00)))+(r02*r02)+(((-2.0)*x2356*x2357)))),-1);
if(!x2358.valid){
continue;
}
CheckValue<IkReal> x2359 = IKatan2WithCheck(IkReal((x2357+(((-1.0)*x2356)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2358.value)))+(x2359.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2360=IKsin(j4);
IkReal x2361=IKcos(j4);
IkReal x2362=(cj5*r10);
IkReal x2363=(r01*sj5);
IkReal x2364=(cj5*r00);
IkReal x2365=(cj5*r20);
IkReal x2366=((1.0)*x2361);
IkReal x2367=((1.0)*x2360);
IkReal x2368=(sj5*x2360);
evalcond[0]=((((-1.0)*x2365*x2367))+(((-1.0)*r22*x2366))+((r21*x2368)));
evalcond[1]=(((r11*x2368))+(((-1.0)*x2362*x2367))+(((-1.0)*r12*x2366)));
evalcond[2]=(((x2361*x2364))+(((-1.0)*x2363*x2366))+(((-1.0)*r02*x2367)));
evalcond[3]=((1.0)+((x2360*x2363))+(((-1.0)*x2364*x2367))+(((-1.0)*r02*x2366)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x2366))+((cj1*sj2))+((x2361*x2362))+(((-1.0)*r12*x2367)));
evalcond[5]=((((-1.0)*r21*sj5*x2366))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2361*x2365))+(((-1.0)*r22*x2367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2369=((1.0)*cj5);
CheckValue<IkReal> x2370 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2369))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2370.valid){
continue;
}
CheckValue<IkReal> x2371=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2369))+(((-1.0)*r20*sj5)))),-1);
if(!x2371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2370.value)+(((1.5707963267949)*(x2371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2372=IKsin(j4);
IkReal x2373=IKcos(j4);
IkReal x2374=(cj5*r10);
IkReal x2375=(r01*sj5);
IkReal x2376=(cj5*r00);
IkReal x2377=(cj5*r20);
IkReal x2378=((1.0)*x2373);
IkReal x2379=((1.0)*x2372);
IkReal x2380=(sj5*x2372);
evalcond[0]=((((-1.0)*x2377*x2379))+((r21*x2380))+(((-1.0)*r22*x2378)));
evalcond[1]=((((-1.0)*x2374*x2379))+(((-1.0)*r12*x2378))+((r11*x2380)));
evalcond[2]=(((x2373*x2376))+(((-1.0)*r02*x2379))+(((-1.0)*x2375*x2378)));
evalcond[3]=((1.0)+((x2372*x2375))+(((-1.0)*r02*x2378))+(((-1.0)*x2376*x2379)));
evalcond[4]=(((x2373*x2374))+(((-1.0)*r11*sj5*x2378))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x2379)));
evalcond[5]=(((x2373*x2377))+(((-1.0)*r21*sj5*x2378))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2381 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2381.valid){
continue;
}
CheckValue<IkReal> x2382=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2381.value)+(((1.5707963267949)*(x2382.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2383=IKsin(j4);
IkReal x2384=IKcos(j4);
IkReal x2385=(cj5*r10);
IkReal x2386=(r01*sj5);
IkReal x2387=(cj5*r00);
IkReal x2388=(cj5*r20);
IkReal x2389=((1.0)*x2384);
IkReal x2390=((1.0)*x2383);
IkReal x2391=(sj5*x2383);
evalcond[0]=((((-1.0)*r22*x2389))+(((-1.0)*x2388*x2390))+((r21*x2391)));
evalcond[1]=((((-1.0)*r12*x2389))+(((-1.0)*x2385*x2390))+((r11*x2391)));
evalcond[2]=(((x2384*x2387))+(((-1.0)*r02*x2390))+(((-1.0)*x2386*x2389)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2389))+((x2383*x2386))+(((-1.0)*x2387*x2390)));
evalcond[4]=((((-1.0)*r11*sj5*x2389))+((cj2*sj1))+((x2384*x2385))+((cj1*sj2))+(((-1.0)*r12*x2390)));
evalcond[5]=(((x2384*x2388))+(((-1.0)*r21*sj5*x2389))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2392=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2392);
rxp1_1=(px*r21);
rxp1_2=(r11*x2392);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2393=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2393);
rxp1_1=(px*r21);
rxp1_2=(r11*x2393);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2394=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2394);
rxp1_1=(px*r21);
rxp1_2=(r11*x2394);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2397=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2397.valid){
continue;
}
IkReal x2395=x2397.value;
IkReal x2396=(sj0*x2395);
cj4array[0]=(((cj2*sj1*x2396))+((cj1*sj2*x2396)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2398=IKsin(j4);
IkReal x2399=IKcos(j4);
IkReal x2400=(cj5*r20);
IkReal x2401=(r21*sj5);
IkReal x2402=((1.0)*x2398);
IkReal x2403=((1.0)*x2399);
evalcond[0]=((-1.0)*r02*x2398);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x2403)));
evalcond[2]=((((-1.0)*x2400*x2402))+((x2398*x2401)));
evalcond[3]=(((r11*sj5*x2398))+(((-1.0)*cj5*r10*x2402)));
evalcond[4]=((((-1.0)*x2401*x2403))+((x2399*x2400))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2405=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2405.valid){
continue;
}
IkReal x2404=x2405.value;
cj4array[0]=(((cj1*cj2*x2404))+(((-1.0)*sj1*sj2*x2404)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2406=IKsin(j4);
IkReal x2407=IKcos(j4);
IkReal x2408=(r11*sj5);
IkReal x2409=((1.0)*sj0);
IkReal x2410=((1.0)*x2407);
IkReal x2411=((1.0)*cj5*x2406);
evalcond[0]=((-1.0)*r02*x2406);
evalcond[1]=((((-1.0)*x2409))+(((-1.0)*r02*x2410)));
evalcond[2]=((((-1.0)*r20*x2411))+((r21*sj5*x2406)));
evalcond[3]=((((-1.0)*r10*x2411))+((x2406*x2408)));
evalcond[4]=((((-1.0)*cj2*sj1*x2409))+(((-1.0)*x2408*x2410))+(((-1.0)*cj1*sj2*x2409))+((cj5*r10*x2407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2412=IKPowWithIntegerCheck(r02,-1);
if(!x2412.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2412.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2413=IKsin(j4);
IkReal x2414=IKcos(j4);
IkReal x2415=((1.0)*sj0);
IkReal x2416=(cj5*x2414);
IkReal x2417=(sj5*x2413);
IkReal x2418=((1.0)*sj5*x2414);
IkReal x2419=((1.0)*cj5*x2413);
evalcond[0]=((-1.0)*r02*x2413);
evalcond[1]=((((-1.0)*r20*x2419))+((r21*x2417)));
evalcond[2]=(((r11*x2417))+(((-1.0)*r10*x2419)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x2416))+(((-1.0)*r21*x2418)));
evalcond[4]=((((-1.0)*cj1*sj2*x2415))+((r10*x2416))+(((-1.0)*r11*x2418))+(((-1.0)*cj2*sj1*x2415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2420=((1.0)*sj0);
IkReal x2421=((1.0)*cj0);
CheckValue<IkReal> x2422 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2421))+(((-1.0)*r12*x2420)))),IkReal(((((-1.0)*r11*sj5*x2420))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x2421))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2422.valid){
continue;
}
CheckValue<IkReal> x2423=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2423.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2422.value)+(((1.5707963267949)*(x2423.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2424=IKsin(j4);
IkReal x2425=IKcos(j4);
IkReal x2426=(cj5*r10);
IkReal x2427=(r01*sj5);
IkReal x2428=((1.0)*cj2);
IkReal x2429=(cj5*r00);
IkReal x2430=((1.0)*sj0);
IkReal x2431=(cj5*r20);
IkReal x2432=(cj1*sj2);
IkReal x2433=((1.0)*x2425);
IkReal x2434=((1.0)*x2424);
IkReal x2435=(sj5*x2424);
evalcond[0]=((((-1.0)*r22*x2433))+(((-1.0)*x2431*x2434))+((r21*x2435)));
evalcond[1]=(((r11*x2435))+cj0+(((-1.0)*x2426*x2434))+(((-1.0)*r12*x2433)));
evalcond[2]=((((-1.0)*x2430))+(((-1.0)*r02*x2433))+(((-1.0)*x2429*x2434))+((x2424*x2427)));
evalcond[3]=((((-1.0)*r22*x2434))+((x2425*x2431))+(((-1.0)*r21*sj5*x2433))+((sj1*sj2))+(((-1.0)*cj1*x2428)));
evalcond[4]=((((-1.0)*cj0*x2432))+(((-1.0)*cj0*sj1*x2428))+(((-1.0)*x2427*x2433))+(((-1.0)*r02*x2434))+((x2425*x2429)));
evalcond[5]=((((-1.0)*x2430*x2432))+((x2425*x2426))+(((-1.0)*r11*sj5*x2433))+(((-1.0)*sj0*sj1*x2428))+(((-1.0)*r12*x2434)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2436=((1.0)*cj5);
CheckValue<IkReal> x2437 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2436)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2437.valid){
continue;
}
CheckValue<IkReal> x2438=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2436)))),-1);
if(!x2438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2437.value)+(((1.5707963267949)*(x2438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2439=IKsin(j4);
IkReal x2440=IKcos(j4);
IkReal x2441=(cj5*r10);
IkReal x2442=(r01*sj5);
IkReal x2443=((1.0)*cj2);
IkReal x2444=(cj5*r00);
IkReal x2445=((1.0)*sj0);
IkReal x2446=(cj5*r20);
IkReal x2447=(cj1*sj2);
IkReal x2448=((1.0)*x2440);
IkReal x2449=((1.0)*x2439);
IkReal x2450=(sj5*x2439);
evalcond[0]=((((-1.0)*x2446*x2449))+(((-1.0)*r22*x2448))+((r21*x2450)));
evalcond[1]=(cj0+(((-1.0)*x2441*x2449))+(((-1.0)*r12*x2448))+((r11*x2450)));
evalcond[2]=((((-1.0)*x2444*x2449))+((x2439*x2442))+(((-1.0)*x2445))+(((-1.0)*r02*x2448)));
evalcond[3]=((((-1.0)*r21*sj5*x2448))+((x2440*x2446))+((sj1*sj2))+(((-1.0)*cj1*x2443))+(((-1.0)*r22*x2449)));
evalcond[4]=((((-1.0)*cj0*x2447))+((x2440*x2444))+(((-1.0)*cj0*sj1*x2443))+(((-1.0)*x2442*x2448))+(((-1.0)*r02*x2449)));
evalcond[5]=((((-1.0)*r11*sj5*x2448))+(((-1.0)*x2445*x2447))+((x2440*x2441))+(((-1.0)*r12*x2449))+(((-1.0)*sj0*sj1*x2443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2451=((1.0)*cj5);
CheckValue<IkReal> x2452=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2451)))),-1);
if(!x2452.valid){
continue;
}
CheckValue<IkReal> x2453 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2452.value)))+(x2453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2454=IKsin(j4);
IkReal x2455=IKcos(j4);
IkReal x2456=(cj5*r10);
IkReal x2457=(r01*sj5);
IkReal x2458=((1.0)*cj2);
IkReal x2459=(cj5*r00);
IkReal x2460=((1.0)*sj0);
IkReal x2461=(cj5*r20);
IkReal x2462=(cj1*sj2);
IkReal x2463=((1.0)*x2455);
IkReal x2464=((1.0)*x2454);
IkReal x2465=(sj5*x2454);
evalcond[0]=((((-1.0)*r22*x2463))+((r21*x2465))+(((-1.0)*x2461*x2464)));
evalcond[1]=(cj0+(((-1.0)*r12*x2463))+(((-1.0)*x2456*x2464))+((r11*x2465)));
evalcond[2]=(((x2454*x2457))+(((-1.0)*x2460))+(((-1.0)*r02*x2463))+(((-1.0)*x2459*x2464)));
evalcond[3]=((((-1.0)*r22*x2464))+((sj1*sj2))+(((-1.0)*r21*sj5*x2463))+(((-1.0)*cj1*x2458))+((x2455*x2461)));
evalcond[4]=((((-1.0)*x2457*x2463))+(((-1.0)*cj0*x2462))+(((-1.0)*cj0*sj1*x2458))+((x2455*x2459))+(((-1.0)*r02*x2464)));
evalcond[5]=((((-1.0)*r11*sj5*x2463))+(((-1.0)*r12*x2464))+(((-1.0)*x2460*x2462))+((x2455*x2456))+(((-1.0)*sj0*sj1*x2458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2466=cj5*cj5;
IkReal x2467=r21*r21;
IkReal x2468=(sj1*sj2);
IkReal x2469=(r21*sj5);
IkReal x2470=(cj1*cj2);
IkReal x2471=(cj5*r20);
CheckValue<IkReal> x2472 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2470))+((r22*x2468)))),IkReal(((((-1.0)*x2469*x2470))+((x2468*x2469))+(((-1.0)*x2468*x2471))+((x2470*x2471)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2472.valid){
continue;
}
CheckValue<IkReal> x2473=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2469*x2471))+x2467+(r22*r22)+(((-1.0)*x2466*x2467))+((x2466*(r20*r20))))),-1);
if(!x2473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2472.value)+(((1.5707963267949)*(x2473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2474=IKsin(j4);
IkReal x2475=IKcos(j4);
IkReal x2476=(r21*sj5);
IkReal x2477=(cj5*r20);
IkReal x2478=((1.0)*x2475);
IkReal x2479=((1.0)*x2474);
evalcond[0]=((((-1.0)*x2477*x2479))+(((-1.0)*r22*x2478))+((x2474*x2476)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2479))+(((-1.0)*x2476*x2478))+((x2475*x2477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2480=(cj5*sj4);
IkReal x2481=(sj4*sj5);
if( IKabs((((r01*x2481))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2480)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x2480))+((cj4*r12))+(((-1.0)*r11*x2481)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x2481))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2480))))+IKsqr((((r10*x2480))+((cj4*r12))+(((-1.0)*r11*x2481))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x2481))+(((-1.0)*cj4*r02))+(((-1.0)*r00*x2480))), (((r10*x2480))+((cj4*r12))+(((-1.0)*r11*x2481))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2482=IKcos(j0);
IkReal x2483=IKsin(j0);
IkReal x2484=(cj4*cj5);
IkReal x2485=(cj5*r01);
IkReal x2486=((1.0)*cj1);
IkReal x2487=((0.39225)*sj1);
IkReal x2488=(r11*sj5);
IkReal x2489=((1.0)*sj4);
IkReal x2490=((0.39225)*cj2);
IkReal x2491=((1.0)*sj1);
IkReal x2492=(r00*sj5);
IkReal x2493=(cj5*r11);
IkReal x2494=((1.0)*cj4);
IkReal x2495=(r01*sj5);
IkReal x2496=(r10*sj5);
IkReal x2497=(sj2*x2482);
IkReal x2498=(sj2*x2483);
IkReal x2499=(cj1*x2482);
IkReal x2500=(cj1*x2483);
IkReal x2501=(cj2*x2482);
IkReal x2502=(cj2*x2483);
evalcond[0]=(x2482+(((-1.0)*cj5*r10*x2489))+((sj4*x2488))+(((-1.0)*r12*x2494)));
evalcond[1]=((((-1.0)*x2483))+(((-1.0)*cj5*r00*x2489))+(((-1.0)*r02*x2494))+((sj4*x2495)));
evalcond[2]=(((sj1*x2497))+x2485+x2492+(((-1.0)*x2486*x2501)));
evalcond[3]=(((sj1*x2498))+x2493+x2496+(((-1.0)*x2486*x2502)));
evalcond[4]=((((-1.0)*x2494*x2495))+(((-1.0)*x2486*x2497))+(((-1.0)*r02*x2489))+(((-1.0)*x2491*x2501))+((r00*x2484)));
evalcond[5]=((((-1.0)*x2486*x2498))+(((-1.0)*x2488*x2494))+(((-1.0)*r12*x2489))+((r10*x2484))+(((-1.0)*x2491*x2502)));
evalcond[6]=(((x2490*x2499))+(((-0.10915)*x2483))+(((-0.09465)*x2485))+(((-1.0)*px))+(((-0.09465)*x2492))+(((0.425)*x2499))+(((-1.0)*x2487*x2497)));
evalcond[7]=((((0.425)*x2500))+((x2490*x2500))+(((-1.0)*py))+(((-0.09465)*x2493))+(((-0.09465)*x2496))+(((-1.0)*x2487*x2498))+(((0.10915)*x2482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2503=((1.0)*cj5);
IkReal x2504=((1.0)*sj5);
CheckValue<IkReal> x2505 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2503))+(((-1.0)*r10*x2504)))),IkReal(((((-1.0)*r00*x2504))+(((-1.0)*r01*x2503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2505.valid){
continue;
}
CheckValue<IkReal> x2506=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2506.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x2505.value)+(((1.5707963267949)*(x2506.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2507=IKcos(j0);
IkReal x2508=IKsin(j0);
IkReal x2509=(cj5*r01);
IkReal x2510=(cj5*r11);
IkReal x2511=(r00*sj5);
IkReal x2512=(sj1*sj2);
IkReal x2513=((0.39225)*cj2);
IkReal x2514=((1.0)*cj2);
IkReal x2515=(r10*sj5);
IkReal x2516=((0.39225)*x2512);
IkReal x2517=(cj1*x2507);
IkReal x2518=(cj1*x2508);
evalcond[0]=(x2511+x2509+(((-1.0)*x2514*x2517))+((x2507*x2512)));
evalcond[1]=(x2515+x2510+(((-1.0)*x2514*x2518))+((x2508*x2512)));
evalcond[2]=((((-0.10915)*x2508))+(((0.425)*x2517))+(((-1.0)*px))+(((-0.09465)*x2511))+(((-0.09465)*x2509))+((x2513*x2517))+(((-1.0)*x2507*x2516)));
evalcond[3]=((((-1.0)*x2508*x2516))+(((0.425)*x2518))+(((-1.0)*py))+(((-0.09465)*x2515))+(((-0.09465)*x2510))+((x2513*x2518))+(((0.10915)*x2507)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2519=((1.0)*cj5);
IkReal x2520=((((-1.0)*r01*x2519))+(((-1.0)*r00*sj5)));
j4eval[0]=x2520;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2519)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2520);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2521=((1.0)*cj5);
IkReal x2522=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2521)));
j4eval[0]=x2522;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2521))))));
j4eval[2]=IKsign(x2522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2523=((1.0)*sj0);
IkReal x2524=((1.0)*cj0);
IkReal x2525=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2525;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2524))+(((-1.0)*r11*sj5*x2523)))))+(IKabs(((((-1.0)*r12*x2523))+(((-1.0)*r02*x2524))))));
j4eval[2]=IKsign(x2525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2526=((-1.0)*r20);
IkReal x2528 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2528)==0){
continue;
}
IkReal x2527=pow(x2528,-0.5);
CheckValue<IkReal> x2529 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2526),IKFAST_ATAN2_MAGTHRESH);
if(!x2529.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2529.value));
IkReal gconst79=(r21*x2527);
IkReal gconst80=(x2526*x2527);
CheckValue<IkReal> x2530 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2530.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2530.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2531=((-1.0)*r20);
IkReal x2532=x2527;
CheckValue<IkReal> x2534 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2531),IKFAST_ATAN2_MAGTHRESH);
if(!x2534.valid){
continue;
}
IkReal x2533=((-1.0)*(x2534.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2533;
IkReal gconst78=x2533;
IkReal gconst79=(r21*x2532);
IkReal gconst80=(x2531*x2532);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2535=((-1.0)*r20);
IkReal x2536=x2527;
CheckValue<IkReal> x2538 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2535),IKFAST_ATAN2_MAGTHRESH);
if(!x2538.valid){
continue;
}
IkReal x2537=((-1.0)*(x2538.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2537;
IkReal gconst78=x2537;
IkReal gconst79=(r21*x2536);
IkReal gconst80=(x2535*x2536);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2539=((-1.0)*r20);
IkReal x2540=x2527;
CheckValue<IkReal> x2542 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2539),IKFAST_ATAN2_MAGTHRESH);
if(!x2542.valid){
continue;
}
IkReal x2541=((-1.0)*(x2542.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2541;
IkReal gconst78=x2541;
IkReal gconst79=(r21*x2540);
IkReal gconst80=(x2539*x2540);
IkReal x2543=r22*r22;
CheckValue<IkReal> x2546=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2543))),-1);
if(!x2546.valid){
continue;
}
IkReal x2544=x2546.value;
IkReal x2545=(x2543+((x2544*(r21*r21*r21*r21)))+(((2.0)*x2544*(r20*r20)*(r21*r21)))+((x2544*(r20*r20*r20*r20))));
j4eval[0]=x2545;
j4eval[1]=IKsign(x2545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2547=(sj1*sj2);
IkReal x2548=(gconst80*r20);
IkReal x2549=(gconst79*r21);
IkReal x2550=(cj1*cj2);
CheckValue<IkReal> x2551 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2550))+((r22*x2547)))),IkReal(((((-1.0)*x2547*x2548))+((x2547*x2549))+((x2548*x2550))+(((-1.0)*x2549*x2550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2551.valid){
continue;
}
CheckValue<IkReal> x2552=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2549*x2549)+(x2548*x2548)+(((-2.0)*x2548*x2549)))),-1);
if(!x2552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2551.value)+(((1.5707963267949)*(x2552.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2553=IKsin(j4);
IkReal x2554=IKcos(j4);
IkReal x2555=(gconst79*r01);
IkReal x2556=(gconst79*r21);
IkReal x2557=((1.0)*cj2);
IkReal x2558=(gconst79*r11);
IkReal x2559=((1.0)*sj0);
IkReal x2560=(cj1*sj2);
IkReal x2561=((1.0)*x2554);
IkReal x2562=(gconst80*x2554);
IkReal x2563=((1.0)*x2553);
IkReal x2564=(gconst80*x2563);
evalcond[0]=((((-1.0)*r22*x2561))+(((-1.0)*r20*x2564))+((x2553*x2556)));
evalcond[1]=(cj0+((x2553*x2558))+(((-1.0)*r12*x2561))+(((-1.0)*r10*x2564)));
evalcond[2]=((((-1.0)*r00*x2564))+(((-1.0)*r02*x2561))+((x2553*x2555))+(((-1.0)*x2559)));
evalcond[3]=((((-1.0)*r22*x2563))+(((-1.0)*x2556*x2561))+((sj1*sj2))+((r20*x2562))+(((-1.0)*cj1*x2557)));
evalcond[4]=((((-1.0)*cj0*x2560))+((r00*x2562))+(((-1.0)*cj0*sj1*x2557))+(((-1.0)*x2555*x2561))+(((-1.0)*r02*x2563)));
evalcond[5]=((((-1.0)*x2558*x2561))+((r10*x2562))+(((-1.0)*x2559*x2560))+(((-1.0)*sj0*sj1*x2557))+(((-1.0)*r12*x2563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2565=((1.0)*gconst80);
CheckValue<IkReal> x2566=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2565)))),-1);
if(!x2566.valid){
continue;
}
CheckValue<IkReal> x2567 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2565))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2567.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2566.value)))+(x2567.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2568=IKsin(j4);
IkReal x2569=IKcos(j4);
IkReal x2570=(gconst79*r01);
IkReal x2571=(gconst79*r21);
IkReal x2572=((1.0)*cj2);
IkReal x2573=(gconst79*r11);
IkReal x2574=((1.0)*sj0);
IkReal x2575=(cj1*sj2);
IkReal x2576=((1.0)*x2569);
IkReal x2577=(gconst80*x2569);
IkReal x2578=((1.0)*x2568);
IkReal x2579=(gconst80*x2578);
evalcond[0]=(((x2568*x2571))+(((-1.0)*r20*x2579))+(((-1.0)*r22*x2576)));
evalcond[1]=((((-1.0)*r10*x2579))+(((-1.0)*r12*x2576))+((x2568*x2573))+cj0);
evalcond[2]=(((x2568*x2570))+(((-1.0)*x2574))+(((-1.0)*r02*x2576))+(((-1.0)*r00*x2579)));
evalcond[3]=((((-1.0)*x2571*x2576))+((sj1*sj2))+((r20*x2577))+(((-1.0)*cj1*x2572))+(((-1.0)*r22*x2578)));
evalcond[4]=((((-1.0)*x2570*x2576))+(((-1.0)*cj0*x2575))+((r00*x2577))+(((-1.0)*r02*x2578))+(((-1.0)*cj0*sj1*x2572)));
evalcond[5]=(((r10*x2577))+(((-1.0)*r12*x2578))+(((-1.0)*sj0*sj1*x2572))+(((-1.0)*x2573*x2576))+(((-1.0)*x2574*x2575)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2580=((1.0)*gconst80);
CheckValue<IkReal> x2581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2580))+(((-1.0)*gconst79*r00)))),-1);
if(!x2581.valid){
continue;
}
CheckValue<IkReal> x2582 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2581.value)))+(x2582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2583=IKsin(j4);
IkReal x2584=IKcos(j4);
IkReal x2585=(gconst79*r01);
IkReal x2586=(gconst79*r21);
IkReal x2587=((1.0)*cj2);
IkReal x2588=(gconst79*r11);
IkReal x2589=((1.0)*sj0);
IkReal x2590=(cj1*sj2);
IkReal x2591=((1.0)*x2584);
IkReal x2592=(gconst80*x2584);
IkReal x2593=((1.0)*x2583);
IkReal x2594=(gconst80*x2593);
evalcond[0]=((((-1.0)*r22*x2591))+(((-1.0)*r20*x2594))+((x2583*x2586)));
evalcond[1]=(cj0+(((-1.0)*r12*x2591))+(((-1.0)*r10*x2594))+((x2583*x2588)));
evalcond[2]=((((-1.0)*r00*x2594))+(((-1.0)*r02*x2591))+(((-1.0)*x2589))+((x2583*x2585)));
evalcond[3]=((((-1.0)*cj1*x2587))+(((-1.0)*r22*x2593))+((sj1*sj2))+((r20*x2592))+(((-1.0)*x2586*x2591)));
evalcond[4]=(((r00*x2592))+(((-1.0)*cj0*x2590))+(((-1.0)*x2585*x2591))+(((-1.0)*r02*x2593))+(((-1.0)*cj0*sj1*x2587)));
evalcond[5]=((((-1.0)*sj0*sj1*x2587))+((r10*x2592))+(((-1.0)*x2589*x2590))+(((-1.0)*x2588*x2591))+(((-1.0)*r12*x2593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2595=((-1.0)*r21);
IkReal x2597 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2597)==0){
continue;
}
IkReal x2596=pow(x2597,-0.5);
CheckValue<IkReal> x2598 = IKatan2WithCheck(IkReal(x2595),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2598.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2598.value))));
IkReal gconst82=(x2595*x2596);
IkReal gconst83=((1.0)*r20*x2596);
CheckValue<IkReal> x2599 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2599.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2599.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2600=((-1.0)*r21);
CheckValue<IkReal> x2603 = IKatan2WithCheck(IkReal(x2600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2603.valid){
continue;
}
IkReal x2601=((1.0)*(x2603.value));
IkReal x2602=x2596;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2601)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2601)));
IkReal gconst82=(x2600*x2602);
IkReal gconst83=((1.0)*r20*x2602);
IkReal x2604=r22*r22;
IkReal x2605=((1.0)*x2604);
CheckValue<IkReal> x2609=IKPowWithIntegerCheck(((-1.0)+x2604),-1);
if(!x2609.valid){
continue;
}
IkReal x2606=x2609.value;
if((((1.0)+(((-1.0)*x2605)))) < -0.00001)
continue;
IkReal x2607=IKsqrt(((1.0)+(((-1.0)*x2605))));
IkReal x2608=(cj0*x2606*x2607);
j4eval[0]=((IKabs(((((-1.0)*x2605*x2608))+x2608)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2610=((-1.0)*r21);
CheckValue<IkReal> x2613 = IKatan2WithCheck(IkReal(x2610),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2613.valid){
continue;
}
IkReal x2611=((1.0)*(x2613.value));
IkReal x2612=x2596;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2611)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2611)));
IkReal gconst82=(x2610*x2612);
IkReal gconst83=((1.0)*r20*x2612);
IkReal x2614=r22*r22;
IkReal x2615=((1.0)*x2614);
CheckValue<IkReal> x2619=IKPowWithIntegerCheck(((-1.0)+x2614),-1);
if(!x2619.valid){
continue;
}
IkReal x2616=x2619.value;
if((((1.0)+(((-1.0)*x2615)))) < -0.00001)
continue;
IkReal x2617=IKsqrt(((1.0)+(((-1.0)*x2615))));
IkReal x2618=(sj0*x2616*x2617);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2615*x2618))+x2618))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2620=((-1.0)*r21);
CheckValue<IkReal> x2623 = IKatan2WithCheck(IkReal(x2620),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2623.valid){
continue;
}
IkReal x2621=((1.0)*(x2623.value));
IkReal x2622=x2596;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2621)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2621)));
IkReal gconst82=(x2620*x2622);
IkReal gconst83=((1.0)*r20*x2622);
IkReal x2624=r22*r22;
IkReal x2625=(r12*sj0);
IkReal x2626=(cj0*r02);
CheckValue<IkReal> x2630=IKPowWithIntegerCheck(((-1.0)+x2624),-1);
if(!x2630.valid){
continue;
}
IkReal x2627=x2630.value;
if((((1.0)+(((-1.0)*x2624)))) < -0.00001)
continue;
IkReal x2628=IKsqrt(((1.0)+(((-1.0)*x2624))));
IkReal x2629=(r22*x2627*x2628);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2626))+(((-1.0)*x2625)))))+(IKabs((((x2626*x2629))+((x2625*x2629))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2631=((1.0)*sj0);
IkReal x2632=((1.0)*cj0);
CheckValue<IkReal> x2633=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2633.valid){
continue;
}
CheckValue<IkReal> x2634 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2632))+(((-1.0)*r12*x2631)))),IkReal(((((-1.0)*gconst82*r11*x2631))+(((-1.0)*gconst82*r01*x2632))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2634.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2633.value)))+(x2634.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2635=IKsin(j4);
IkReal x2636=IKcos(j4);
IkReal x2637=(gconst82*r11);
IkReal x2638=((1.0)*cj2);
IkReal x2639=((1.0)*sj0);
IkReal x2640=(cj1*sj2);
IkReal x2641=((1.0)*x2636);
IkReal x2642=(gconst83*x2636);
IkReal x2643=(gconst82*x2635);
IkReal x2644=((1.0)*x2635);
evalcond[0]=((((-1.0)*gconst83*r20*x2644))+(((-1.0)*r22*x2641))+((r21*x2643)));
evalcond[1]=((((-1.0)*r12*x2641))+cj0+((x2635*x2637))+(((-1.0)*gconst83*r10*x2644)));
evalcond[2]=((((-1.0)*x2639))+(((-1.0)*r02*x2641))+((r01*x2643))+(((-1.0)*gconst83*r00*x2644)));
evalcond[3]=((((-1.0)*r22*x2644))+(((-1.0)*cj1*x2638))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2641))+((r20*x2642)));
evalcond[4]=((((-1.0)*cj0*sj1*x2638))+(((-1.0)*r02*x2644))+(((-1.0)*gconst82*r01*x2641))+((r00*x2642))+(((-1.0)*cj0*x2640)));
evalcond[5]=((((-1.0)*sj0*sj1*x2638))+(((-1.0)*r12*x2644))+(((-1.0)*x2637*x2641))+((r10*x2642))+(((-1.0)*x2639*x2640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2645=((1.0)*gconst83);
CheckValue<IkReal> x2646 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2646.valid){
continue;
}
CheckValue<IkReal> x2647=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2645))+(((-1.0)*gconst82*r10)))),-1);
if(!x2647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2646.value)+(((1.5707963267949)*(x2647.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2648=IKsin(j4);
IkReal x2649=IKcos(j4);
IkReal x2650=(gconst82*r11);
IkReal x2651=((1.0)*cj2);
IkReal x2652=((1.0)*sj0);
IkReal x2653=(cj1*sj2);
IkReal x2654=((1.0)*x2649);
IkReal x2655=(gconst83*x2649);
IkReal x2656=(gconst82*x2648);
IkReal x2657=((1.0)*x2648);
evalcond[0]=((((-1.0)*r22*x2654))+(((-1.0)*gconst83*r20*x2657))+((r21*x2656)));
evalcond[1]=(cj0+(((-1.0)*r12*x2654))+((x2648*x2650))+(((-1.0)*gconst83*r10*x2657)));
evalcond[2]=((((-1.0)*r02*x2654))+((r01*x2656))+(((-1.0)*x2652))+(((-1.0)*gconst83*r00*x2657)));
evalcond[3]=((((-1.0)*r22*x2657))+(((-1.0)*cj1*x2651))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2654))+((r20*x2655)));
evalcond[4]=((((-1.0)*r02*x2657))+(((-1.0)*cj0*sj1*x2651))+(((-1.0)*gconst82*r01*x2654))+((r00*x2655))+(((-1.0)*cj0*x2653)));
evalcond[5]=((((-1.0)*x2652*x2653))+(((-1.0)*x2650*x2654))+(((-1.0)*r12*x2657))+((r10*x2655))+(((-1.0)*sj0*sj1*x2651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2658=((1.0)*gconst83);
CheckValue<IkReal> x2659=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2658))+(((-1.0)*gconst82*r00)))),-1);
if(!x2659.valid){
continue;
}
CheckValue<IkReal> x2660 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2658)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2659.value)))+(x2660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2661=IKsin(j4);
IkReal x2662=IKcos(j4);
IkReal x2663=(gconst82*r11);
IkReal x2664=((1.0)*cj2);
IkReal x2665=((1.0)*sj0);
IkReal x2666=(cj1*sj2);
IkReal x2667=((1.0)*x2662);
IkReal x2668=(gconst83*x2662);
IkReal x2669=(gconst82*x2661);
IkReal x2670=((1.0)*x2661);
evalcond[0]=(((r21*x2669))+(((-1.0)*r22*x2667))+(((-1.0)*gconst83*r20*x2670)));
evalcond[1]=((((-1.0)*r12*x2667))+((x2661*x2663))+cj0+(((-1.0)*gconst83*r10*x2670)));
evalcond[2]=((((-1.0)*r02*x2667))+(((-1.0)*x2665))+((r01*x2669))+(((-1.0)*gconst83*r00*x2670)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2664))+(((-1.0)*gconst82*r21*x2667))+(((-1.0)*r22*x2670))+((r20*x2668)));
evalcond[4]=((((-1.0)*cj0*x2666))+(((-1.0)*cj0*sj1*x2664))+(((-1.0)*gconst82*r01*x2667))+(((-1.0)*r02*x2670))+((r00*x2668)));
evalcond[5]=((((-1.0)*r12*x2670))+(((-1.0)*sj0*sj1*x2664))+((r10*x2668))+(((-1.0)*x2663*x2667))+(((-1.0)*x2665*x2666)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2671=((-1.0)*r10);
IkReal x2673 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2673)==0){
continue;
}
IkReal x2672=pow(x2673,-0.5);
CheckValue<IkReal> x2674 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2671),IKFAST_ATAN2_MAGTHRESH);
if(!x2674.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2674.value));
IkReal gconst85=(r11*x2672);
IkReal gconst86=(x2671*x2672);
CheckValue<IkReal> x2675 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2675.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2675.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2676=((-1.0)*r10);
IkReal x2677=x2672;
CheckValue<IkReal> x2679 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2676),IKFAST_ATAN2_MAGTHRESH);
if(!x2679.valid){
continue;
}
IkReal x2678=((-1.0)*(x2679.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2678;
IkReal gconst84=x2678;
IkReal gconst85=(r11*x2677);
IkReal gconst86=(x2676*x2677);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2680=((1.0)*sj0);
IkReal x2681=((1.0)*gconst85);
CheckValue<IkReal> x2682 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2680))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst85*r11*x2680))+((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2681))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2682.valid){
continue;
}
CheckValue<IkReal> x2683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2681)))),-1);
if(!x2683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2682.value)+(((1.5707963267949)*(x2683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2684=IKsin(j4);
IkReal x2685=IKcos(j4);
IkReal x2686=(gconst85*r21);
IkReal x2687=(gconst86*r00);
IkReal x2688=(gconst86*r10);
IkReal x2689=((1.0)*cj2);
IkReal x2690=(gconst85*r11);
IkReal x2691=(gconst85*r01);
IkReal x2692=((1.0)*sj0);
IkReal x2693=(gconst86*r20);
IkReal x2694=(cj1*sj2);
IkReal x2695=((1.0)*x2685);
IkReal x2696=((1.0)*x2684);
evalcond[0]=(((x2684*x2686))+(((-1.0)*r22*x2695))+(((-1.0)*x2693*x2696)));
evalcond[1]=(cj0+((x2684*x2690))+(((-1.0)*x2688*x2696))+(((-1.0)*r12*x2695)));
evalcond[2]=((((-1.0)*r02*x2695))+((x2684*x2691))+(((-1.0)*x2692))+(((-1.0)*x2687*x2696)));
evalcond[3]=((((-1.0)*cj1*x2689))+((sj1*sj2))+(((-1.0)*r22*x2696))+((x2685*x2693))+(((-1.0)*x2686*x2695)));
evalcond[4]=((((-1.0)*x2691*x2695))+(((-1.0)*cj0*x2694))+(((-1.0)*r02*x2696))+((x2685*x2687))+(((-1.0)*cj0*sj1*x2689)));
evalcond[5]=((((-1.0)*x2692*x2694))+((x2685*x2688))+(((-1.0)*r12*x2696))+(((-1.0)*x2690*x2695))+(((-1.0)*sj0*sj1*x2689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2697=((1.0)*gconst86);
CheckValue<IkReal> x2698=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2697)))),-1);
if(!x2698.valid){
continue;
}
CheckValue<IkReal> x2699 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst85*r21))+(((-1.0)*cj0*r20*x2697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2698.value)))+(x2699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2700=IKsin(j4);
IkReal x2701=IKcos(j4);
IkReal x2702=(gconst85*r21);
IkReal x2703=(gconst86*r00);
IkReal x2704=(gconst86*r10);
IkReal x2705=((1.0)*cj2);
IkReal x2706=(gconst85*r11);
IkReal x2707=(gconst85*r01);
IkReal x2708=((1.0)*sj0);
IkReal x2709=(gconst86*r20);
IkReal x2710=(cj1*sj2);
IkReal x2711=((1.0)*x2701);
IkReal x2712=((1.0)*x2700);
evalcond[0]=((((-1.0)*x2709*x2712))+((x2700*x2702))+(((-1.0)*r22*x2711)));
evalcond[1]=((((-1.0)*x2704*x2712))+cj0+((x2700*x2706))+(((-1.0)*r12*x2711)));
evalcond[2]=((((-1.0)*r02*x2711))+(((-1.0)*x2703*x2712))+(((-1.0)*x2708))+((x2700*x2707)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2702*x2711))+(((-1.0)*cj1*x2705))+(((-1.0)*r22*x2712))+((x2701*x2709)));
evalcond[4]=((((-1.0)*r02*x2712))+(((-1.0)*cj0*sj1*x2705))+((x2701*x2703))+(((-1.0)*x2707*x2711))+(((-1.0)*cj0*x2710)));
evalcond[5]=((((-1.0)*x2708*x2710))+(((-1.0)*sj0*sj1*x2705))+(((-1.0)*x2706*x2711))+(((-1.0)*r12*x2712))+((x2701*x2704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2713=((-1.0)*r11);
IkReal x2715 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2715)==0){
continue;
}
IkReal x2714=pow(x2715,-0.5);
CheckValue<IkReal> x2716 = IKatan2WithCheck(IkReal(x2713),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2716.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2716.value))));
IkReal gconst88=(x2713*x2714);
IkReal gconst89=((1.0)*r10*x2714);
CheckValue<IkReal> x2717 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2717.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2717.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2718=((-1.0)*r11);
CheckValue<IkReal> x2721 = IKatan2WithCheck(IkReal(x2718),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2721.valid){
continue;
}
IkReal x2719=((1.0)*(x2721.value));
IkReal x2720=x2714;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2719)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2719)));
IkReal gconst88=(x2718*x2720);
IkReal gconst89=((1.0)*r10*x2720);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2722=((-1.0)*r11);
CheckValue<IkReal> x2725 = IKatan2WithCheck(IkReal(x2722),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2725.valid){
continue;
}
IkReal x2723=((1.0)*(x2725.value));
IkReal x2724=x2714;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2723)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2723)));
IkReal gconst88=(x2722*x2724);
IkReal gconst89=((1.0)*r10*x2724);
IkReal x2726=r12*r12;
IkReal x2727=((1.0)*sj0);
IkReal x2728=(cj0*r02);
IkReal x2729=x2714;
j4eval[0]=((IKabs(((((-1.0)*x2728))+(((-1.0)*r12*x2727)))))+(IKabs(((((-1.0)*x2727*x2729))+((r12*x2728*x2729))+((sj0*x2726*x2729))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2730=((-1.0)*r11);
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal(x2730),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
IkReal x2731=((1.0)*(x2733.value));
IkReal x2732=x2714;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2731)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2731)));
IkReal gconst88=(x2730*x2732);
IkReal gconst89=((1.0)*r10*x2732);
IkReal x2734=r12*r12;
IkReal x2735=(cj1*cj2*r22);
IkReal x2736=(r22*sj1*sj2);
CheckValue<IkReal> x2740=IKPowWithIntegerCheck(((-1.0)+x2734),-1);
if(!x2740.valid){
continue;
}
IkReal x2737=x2740.value;
if((((1.0)+(((-1.0)*x2734)))) < -0.00001)
continue;
IkReal x2738=IKsqrt(((1.0)+(((-1.0)*x2734))));
IkReal x2739=(r12*x2737*x2738);
j4eval[0]=((IKabs((((x2735*x2739))+(((-1.0)*x2736*x2739)))))+(IKabs((x2736+(((-1.0)*x2735))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2741=(cj1*cj2);
IkReal x2742=(gconst89*r20);
IkReal x2743=(gconst88*r21);
IkReal x2744=(sj1*sj2);
CheckValue<IkReal> x2745 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2741))+((r22*x2744)))),IkReal(((((-1.0)*x2742*x2744))+((x2743*x2744))+(((-1.0)*x2741*x2743))+((x2741*x2742)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2745.valid){
continue;
}
CheckValue<IkReal> x2746=IKPowWithIntegerCheck(IKsign(((((-2.0)*x2742*x2743))+(r22*r22)+(x2742*x2742)+(x2743*x2743))),-1);
if(!x2746.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2745.value)+(((1.5707963267949)*(x2746.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2747=IKsin(j4);
IkReal x2748=IKcos(j4);
IkReal x2749=((1.0)*sj0);
IkReal x2750=((1.0)*cj2);
IkReal x2751=(gconst89*r20);
IkReal x2752=(gconst89*r10);
IkReal x2753=(gconst89*r00);
IkReal x2754=(cj1*sj2);
IkReal x2755=((1.0)*x2748);
IkReal x2756=((1.0)*x2747);
IkReal x2757=(gconst88*x2747);
evalcond[0]=((((-1.0)*r22*x2755))+((r21*x2757))+(((-1.0)*x2751*x2756)));
evalcond[1]=(((r11*x2757))+(((-1.0)*x2752*x2756))+cj0+(((-1.0)*r12*x2755)));
evalcond[2]=((((-1.0)*x2753*x2756))+((r01*x2757))+(((-1.0)*x2749))+(((-1.0)*r02*x2755)));
evalcond[3]=((((-1.0)*r22*x2756))+(((-1.0)*gconst88*r21*x2755))+((sj1*sj2))+(((-1.0)*cj1*x2750))+((x2748*x2751)));
evalcond[4]=((((-1.0)*gconst88*r01*x2755))+(((-1.0)*cj0*x2754))+((x2748*x2753))+(((-1.0)*cj0*sj1*x2750))+(((-1.0)*r02*x2756)));
evalcond[5]=((((-1.0)*gconst88*r11*x2755))+(((-1.0)*cj2*sj1*x2749))+(((-1.0)*r12*x2756))+((x2748*x2752))+(((-1.0)*x2749*x2754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2758=((1.0)*sj0);
IkReal x2759=((1.0)*cj0);
CheckValue<IkReal> x2760 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2758))+(((-1.0)*r02*x2759)))),IkReal(((((-1.0)*gconst88*r01*x2759))+(((-1.0)*gconst88*r11*x2758))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2760.valid){
continue;
}
CheckValue<IkReal> x2761=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2760.value)+(((1.5707963267949)*(x2761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2762=IKsin(j4);
IkReal x2763=IKcos(j4);
IkReal x2764=((1.0)*sj0);
IkReal x2765=((1.0)*cj2);
IkReal x2766=(gconst89*r20);
IkReal x2767=(gconst89*r10);
IkReal x2768=(gconst89*r00);
IkReal x2769=(cj1*sj2);
IkReal x2770=((1.0)*x2763);
IkReal x2771=((1.0)*x2762);
IkReal x2772=(gconst88*x2762);
evalcond[0]=((((-1.0)*x2766*x2771))+((r21*x2772))+(((-1.0)*r22*x2770)));
evalcond[1]=(((r11*x2772))+cj0+(((-1.0)*r12*x2770))+(((-1.0)*x2767*x2771)));
evalcond[2]=(((r01*x2772))+(((-1.0)*x2768*x2771))+(((-1.0)*r02*x2770))+(((-1.0)*x2764)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst88*r21*x2770))+(((-1.0)*cj1*x2765))+((x2763*x2766))+(((-1.0)*r22*x2771)));
evalcond[4]=((((-1.0)*r02*x2771))+(((-1.0)*cj0*x2769))+(((-1.0)*gconst88*r01*x2770))+(((-1.0)*cj0*sj1*x2765))+((x2763*x2768)));
evalcond[5]=((((-1.0)*x2764*x2769))+(((-1.0)*gconst88*r11*x2770))+(((-1.0)*r12*x2771))+(((-1.0)*cj2*sj1*x2764))+((x2763*x2767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2773=((1.0)*gconst89);
CheckValue<IkReal> x2774=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2773))+(((-1.0)*gconst88*r00)))),-1);
if(!x2774.valid){
continue;
}
CheckValue<IkReal> x2775 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2773))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2774.value)))+(x2775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2776=IKsin(j4);
IkReal x2777=IKcos(j4);
IkReal x2778=((1.0)*sj0);
IkReal x2779=((1.0)*cj2);
IkReal x2780=(gconst89*r20);
IkReal x2781=(gconst89*r10);
IkReal x2782=(gconst89*r00);
IkReal x2783=(cj1*sj2);
IkReal x2784=((1.0)*x2777);
IkReal x2785=((1.0)*x2776);
IkReal x2786=(gconst88*x2776);
evalcond[0]=(((r21*x2786))+(((-1.0)*x2780*x2785))+(((-1.0)*r22*x2784)));
evalcond[1]=((((-1.0)*r12*x2784))+(((-1.0)*x2781*x2785))+cj0+((r11*x2786)));
evalcond[2]=((((-1.0)*x2782*x2785))+(((-1.0)*x2778))+((r01*x2786))+(((-1.0)*r02*x2784)));
evalcond[3]=((((-1.0)*gconst88*r21*x2784))+((x2777*x2780))+((sj1*sj2))+(((-1.0)*r22*x2785))+(((-1.0)*cj1*x2779)));
evalcond[4]=(((x2777*x2782))+(((-1.0)*cj0*x2783))+(((-1.0)*cj0*sj1*x2779))+(((-1.0)*gconst88*r01*x2784))+(((-1.0)*r02*x2785)));
evalcond[5]=((((-1.0)*r12*x2785))+((x2777*x2781))+(((-1.0)*cj2*sj1*x2778))+(((-1.0)*x2778*x2783))+(((-1.0)*gconst88*r11*x2784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2787=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2787;
j4eval[1]=IKsign(x2787);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2788=((1.0)*cj5);
IkReal x2789=((((-1.0)*r00*sj5))+(((-1.0)*r01*x2788)));
j4eval[0]=x2789;
j4eval[1]=((IKabs(((((-1.0)*r20*x2788))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2789);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2790=cj5*cj5;
IkReal x2791=r11*r11;
IkReal x2792=(r11*sj5);
IkReal x2793=(cj5*r10);
IkReal x2794=(x2791+(r12*r12)+(((-1.0)*x2790*x2791))+(((-2.0)*x2792*x2793))+((x2790*(r10*r10))));
j4eval[0]=x2794;
j4eval[1]=IKsign(x2794);
j4eval[2]=((IKabs(r12))+(IKabs((x2793+(((-1.0)*x2792))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2795=cj5*cj5;
IkReal x2796=r11*r11;
IkReal x2797=(cj5*r10);
IkReal x2798=(r11*sj5);
CheckValue<IkReal> x2799=IKPowWithIntegerCheck(IKsign((x2796+(r12*r12)+((x2795*(r10*r10)))+(((-2.0)*x2797*x2798))+(((-1.0)*x2795*x2796)))),-1);
if(!x2799.valid){
continue;
}
CheckValue<IkReal> x2800 = IKatan2WithCheck(IkReal((x2797+(((-1.0)*x2798)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2799.value)))+(x2800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2801=IKsin(j4);
IkReal x2802=IKcos(j4);
IkReal x2803=(cj5*r10);
IkReal x2804=(r01*sj5);
IkReal x2805=((1.0)*cj2);
IkReal x2806=(cj5*r00);
IkReal x2807=(cj5*r20);
IkReal x2808=((1.0)*x2802);
IkReal x2809=((1.0)*x2801);
IkReal x2810=(sj5*x2801);
evalcond[0]=((((-1.0)*x2807*x2809))+((r21*x2810))+(((-1.0)*r22*x2808)));
evalcond[1]=((((-1.0)*x2806*x2809))+((x2801*x2804))+(((-1.0)*r02*x2808)));
evalcond[2]=((((-1.0)*r12*x2809))+((x2802*x2803))+(((-1.0)*r11*sj5*x2808)));
evalcond[3]=((1.0)+(((-1.0)*x2803*x2809))+(((-1.0)*r12*x2808))+((r11*x2810)));
evalcond[4]=((((-1.0)*r21*sj5*x2808))+(((-1.0)*cj1*x2805))+((sj1*sj2))+(((-1.0)*r22*x2809))+((x2802*x2807)));
evalcond[5]=((((-1.0)*sj1*x2805))+(((-1.0)*cj1*sj2))+((x2802*x2806))+(((-1.0)*x2804*x2808))+(((-1.0)*r02*x2809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2811=((1.0)*cj5);
CheckValue<IkReal> x2812 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2811)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2812.valid){
continue;
}
CheckValue<IkReal> x2813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2811)))),-1);
if(!x2813.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2812.value)+(((1.5707963267949)*(x2813.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2814=IKsin(j4);
IkReal x2815=IKcos(j4);
IkReal x2816=(cj5*r10);
IkReal x2817=(r01*sj5);
IkReal x2818=((1.0)*cj2);
IkReal x2819=(cj5*r00);
IkReal x2820=(cj5*r20);
IkReal x2821=((1.0)*x2815);
IkReal x2822=((1.0)*x2814);
IkReal x2823=(sj5*x2814);
evalcond[0]=((((-1.0)*x2820*x2822))+((r21*x2823))+(((-1.0)*r22*x2821)));
evalcond[1]=((((-1.0)*r02*x2821))+((x2814*x2817))+(((-1.0)*x2819*x2822)));
evalcond[2]=((((-1.0)*r12*x2822))+(((-1.0)*r11*sj5*x2821))+((x2815*x2816)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2821))+(((-1.0)*x2816*x2822))+((r11*x2823)));
evalcond[4]=((((-1.0)*cj1*x2818))+((x2815*x2820))+((sj1*sj2))+(((-1.0)*r22*x2822))+(((-1.0)*r21*sj5*x2821)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x2817*x2821))+(((-1.0)*r02*x2822))+((x2815*x2819))+(((-1.0)*sj1*x2818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2824=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2824.valid){
continue;
}
CheckValue<IkReal> x2825 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2824.value)))+(x2825.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2826=IKsin(j4);
IkReal x2827=IKcos(j4);
IkReal x2828=(cj5*r10);
IkReal x2829=(r01*sj5);
IkReal x2830=((1.0)*cj2);
IkReal x2831=(cj5*r00);
IkReal x2832=(cj5*r20);
IkReal x2833=((1.0)*x2827);
IkReal x2834=((1.0)*x2826);
IkReal x2835=(sj5*x2826);
evalcond[0]=((((-1.0)*r22*x2833))+(((-1.0)*x2832*x2834))+((r21*x2835)));
evalcond[1]=((((-1.0)*x2831*x2834))+(((-1.0)*r02*x2833))+((x2826*x2829)));
evalcond[2]=((((-1.0)*r12*x2834))+(((-1.0)*r11*sj5*x2833))+((x2827*x2828)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2833))+(((-1.0)*x2828*x2834))+((r11*x2835)));
evalcond[4]=((((-1.0)*cj1*x2830))+(((-1.0)*r21*sj5*x2833))+((sj1*sj2))+((x2827*x2832))+(((-1.0)*r22*x2834)));
evalcond[5]=((((-1.0)*sj1*x2830))+(((-1.0)*cj1*sj2))+((x2827*x2831))+(((-1.0)*x2829*x2833))+(((-1.0)*r02*x2834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2836=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2836;
j4eval[1]=IKsign(x2836);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2837=((1.0)*cj5);
IkReal x2838=((((-1.0)*r21*x2837))+(((-1.0)*r20*sj5)));
j4eval[0]=x2838;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x2837))+((r01*sj5))))));
j4eval[2]=IKsign(x2838);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2839=cj5*cj5;
IkReal x2840=r11*r11;
IkReal x2841=(cj5*r10);
IkReal x2842=(r11*sj5);
IkReal x2843=((((-1.0)*x2839*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x2840))+(((2.0)*x2841*x2842))+((x2839*x2840)));
j4eval[0]=x2843;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x2842))+x2841))));
j4eval[2]=IKsign(x2843);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2844=cj5*cj5;
IkReal x2845=r11*r11;
IkReal x2846=(cj5*r10);
IkReal x2847=(r11*sj5);
CheckValue<IkReal> x2848=IKPowWithIntegerCheck(IKsign((((x2844*x2845))+(((-1.0)*x2844*(r10*r10)))+(((2.0)*x2846*x2847))+(((-1.0)*(r12*r12)))+(((-1.0)*x2845)))),-1);
if(!x2848.valid){
continue;
}
CheckValue<IkReal> x2849 = IKatan2WithCheck(IkReal(((((-1.0)*x2847))+x2846)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2848.value)))+(x2849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2850=IKsin(j4);
IkReal x2851=IKcos(j4);
IkReal x2852=(cj5*r10);
IkReal x2853=(r01*sj5);
IkReal x2854=(cj5*r00);
IkReal x2855=(cj5*r20);
IkReal x2856=((1.0)*x2851);
IkReal x2857=((1.0)*x2850);
IkReal x2858=(sj5*x2850);
evalcond[0]=(((r21*x2858))+(((-1.0)*r22*x2856))+(((-1.0)*x2855*x2857)));
evalcond[1]=(((x2850*x2853))+(((-1.0)*r02*x2856))+(((-1.0)*x2854*x2857)));
evalcond[2]=((((-1.0)*r11*sj5*x2856))+(((-1.0)*r12*x2857))+((x2851*x2852)));
evalcond[3]=((-1.0)+((r11*x2858))+(((-1.0)*r12*x2856))+(((-1.0)*x2852*x2857)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x2857))+((x2851*x2854))+(((-1.0)*x2853*x2856)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2851*x2855))+(((-1.0)*r22*x2857))+(((-1.0)*r21*sj5*x2856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2859=((1.0)*cj5);
CheckValue<IkReal> x2860=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2859))+(((-1.0)*r20*sj5)))),-1);
if(!x2860.valid){
continue;
}
CheckValue<IkReal> x2861 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2859)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2860.value)))+(x2861.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2862=IKsin(j4);
IkReal x2863=IKcos(j4);
IkReal x2864=(cj5*r10);
IkReal x2865=(r01*sj5);
IkReal x2866=(cj5*r00);
IkReal x2867=(cj5*r20);
IkReal x2868=((1.0)*x2863);
IkReal x2869=((1.0)*x2862);
IkReal x2870=(sj5*x2862);
evalcond[0]=((((-1.0)*r22*x2868))+((r21*x2870))+(((-1.0)*x2867*x2869)));
evalcond[1]=((((-1.0)*r02*x2868))+((x2862*x2865))+(((-1.0)*x2866*x2869)));
evalcond[2]=((((-1.0)*r12*x2869))+((x2863*x2864))+(((-1.0)*r11*sj5*x2868)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2868))+(((-1.0)*x2864*x2869))+((r11*x2870)));
evalcond[4]=((((-1.0)*r02*x2869))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x2865*x2868))+((x2863*x2866)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2869))+((x2863*x2867))+(((-1.0)*r21*sj5*x2868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2871 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2871.valid){
continue;
}
CheckValue<IkReal> x2872=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2871.value)+(((1.5707963267949)*(x2872.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2873=IKsin(j4);
IkReal x2874=IKcos(j4);
IkReal x2875=(cj5*r10);
IkReal x2876=(r01*sj5);
IkReal x2877=(cj5*r00);
IkReal x2878=(cj5*r20);
IkReal x2879=((1.0)*x2874);
IkReal x2880=((1.0)*x2873);
IkReal x2881=(sj5*x2873);
evalcond[0]=(((r21*x2881))+(((-1.0)*r22*x2879))+(((-1.0)*x2878*x2880)));
evalcond[1]=((((-1.0)*r02*x2879))+((x2873*x2876))+(((-1.0)*x2877*x2880)));
evalcond[2]=((((-1.0)*r11*sj5*x2879))+((x2874*x2875))+(((-1.0)*r12*x2880)));
evalcond[3]=((-1.0)+((r11*x2881))+(((-1.0)*r12*x2879))+(((-1.0)*x2875*x2880)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2876*x2879))+(((-1.0)*r02*x2880))+((cj1*sj2))+((x2874*x2877)));
evalcond[5]=((((-1.0)*r22*x2880))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2874*x2878))+(((-1.0)*r21*sj5*x2879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2882=((-1.0)*r00);
IkReal x2884 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2884)==0){
continue;
}
IkReal x2883=pow(x2884,-0.5);
CheckValue<IkReal> x2885 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2882),IKFAST_ATAN2_MAGTHRESH);
if(!x2885.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2885.value));
IkReal gconst91=(r01*x2883);
IkReal gconst92=(x2882*x2883);
CheckValue<IkReal> x2886 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2886.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2886.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2887=((-1.0)*r00);
IkReal x2888=x2883;
CheckValue<IkReal> x2890 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2887),IKFAST_ATAN2_MAGTHRESH);
if(!x2890.valid){
continue;
}
IkReal x2889=((-1.0)*(x2890.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2889;
IkReal gconst90=x2889;
IkReal gconst91=(r01*x2888);
IkReal gconst92=(x2887*x2888);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2891=((1.0)*sj0);
IkReal x2892=((1.0)*cj0);
CheckValue<IkReal> x2893=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2893.valid){
continue;
}
CheckValue<IkReal> x2894 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2892))+(((-1.0)*r12*x2891)))),IkReal(((((-1.0)*gconst91*r11*x2891))+((cj0*gconst92*r00))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2893.value)))+(x2894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2895=IKsin(j4);
IkReal x2896=IKcos(j4);
IkReal x2897=((1.0)*cj2);
IkReal x2898=(gconst92*r00);
IkReal x2899=(gconst92*r20);
IkReal x2900=((1.0)*sj0);
IkReal x2901=(gconst92*r10);
IkReal x2902=(cj1*sj2);
IkReal x2903=((1.0)*x2896);
IkReal x2904=(gconst91*x2895);
IkReal x2905=((1.0)*x2895);
evalcond[0]=(((r21*x2904))+(((-1.0)*x2899*x2905))+(((-1.0)*r22*x2903)));
evalcond[1]=((((-1.0)*x2901*x2905))+cj0+(((-1.0)*r12*x2903))+((r11*x2904)));
evalcond[2]=((((-1.0)*r02*x2903))+(((-1.0)*x2898*x2905))+((r01*x2904))+(((-1.0)*x2900)));
evalcond[3]=(((sj1*sj2))+((x2896*x2899))+(((-1.0)*cj1*x2897))+(((-1.0)*gconst91*r21*x2903))+(((-1.0)*r22*x2905)));
evalcond[4]=((((-1.0)*r02*x2905))+(((-1.0)*cj0*x2902))+(((-1.0)*cj0*sj1*x2897))+((x2896*x2898))+(((-1.0)*gconst91*r01*x2903)));
evalcond[5]=((((-1.0)*sj0*sj1*x2897))+(((-1.0)*x2900*x2902))+(((-1.0)*gconst91*r11*x2903))+((x2896*x2901))+(((-1.0)*r12*x2905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2906=((1.0)*gconst92);
CheckValue<IkReal> x2907 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst91*r21*sj0))+(((-1.0)*r20*sj0*x2906)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2907.valid){
continue;
}
CheckValue<IkReal> x2908=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2906)))),-1);
if(!x2908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2907.value)+(((1.5707963267949)*(x2908.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2909=IKsin(j4);
IkReal x2910=IKcos(j4);
IkReal x2911=((1.0)*cj2);
IkReal x2912=(gconst92*r00);
IkReal x2913=(gconst92*r20);
IkReal x2914=((1.0)*sj0);
IkReal x2915=(gconst92*r10);
IkReal x2916=(cj1*sj2);
IkReal x2917=((1.0)*x2910);
IkReal x2918=(gconst91*x2909);
IkReal x2919=((1.0)*x2909);
evalcond[0]=((((-1.0)*x2913*x2919))+((r21*x2918))+(((-1.0)*r22*x2917)));
evalcond[1]=((((-1.0)*x2915*x2919))+((r11*x2918))+cj0+(((-1.0)*r12*x2917)));
evalcond[2]=(((r01*x2918))+(((-1.0)*x2912*x2919))+(((-1.0)*r02*x2917))+(((-1.0)*x2914)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2911))+(((-1.0)*gconst91*r21*x2917))+((x2910*x2913))+(((-1.0)*r22*x2919)));
evalcond[4]=((((-1.0)*cj0*sj1*x2911))+(((-1.0)*gconst91*r01*x2917))+(((-1.0)*r02*x2919))+((x2910*x2912))+(((-1.0)*cj0*x2916)));
evalcond[5]=((((-1.0)*gconst91*r11*x2917))+(((-1.0)*r12*x2919))+(((-1.0)*x2914*x2916))+((x2910*x2915))+(((-1.0)*sj0*sj1*x2911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2920=((-1.0)*r01);
IkReal x2922 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2922)==0){
continue;
}
IkReal x2921=pow(x2922,-0.5);
CheckValue<IkReal> x2923 = IKatan2WithCheck(IkReal(x2920),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2923.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2923.value))));
IkReal gconst94=(x2920*x2921);
IkReal gconst95=((1.0)*r00*x2921);
CheckValue<IkReal> x2924 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2924.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2924.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2925=((-1.0)*r01);
CheckValue<IkReal> x2928 = IKatan2WithCheck(IkReal(x2925),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2928.valid){
continue;
}
IkReal x2926=((1.0)*(x2928.value));
IkReal x2927=x2921;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2926)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2926)));
IkReal gconst94=(x2925*x2927);
IkReal gconst95=((1.0)*r00*x2927);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2929=((-1.0)*r01);
CheckValue<IkReal> x2932 = IKatan2WithCheck(IkReal(x2929),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2932.valid){
continue;
}
IkReal x2930=((1.0)*(x2932.value));
IkReal x2931=x2921;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2930)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2930)));
IkReal gconst94=(x2929*x2931);
IkReal gconst95=((1.0)*r00*x2931);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2933=((-1.0)*r01);
CheckValue<IkReal> x2936 = IKatan2WithCheck(IkReal(x2933),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2936.valid){
continue;
}
IkReal x2934=((1.0)*(x2936.value));
IkReal x2935=x2921;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2934)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2934)));
IkReal gconst94=(x2933*x2935);
IkReal gconst95=((1.0)*r00*x2935);
IkReal x2937=r02*r02;
IkReal x2938=(r12*sj0);
IkReal x2939=((1.0)*cj0);
IkReal x2940=x2921;
j4eval[0]=((IKabs(((((-1.0)*x2939*x2940))+((cj0*x2937*x2940))+((r02*x2938*x2940)))))+(IKabs(((((-1.0)*x2938))+(((-1.0)*r02*x2939))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2941=((1.0)*sj0);
IkReal x2942=((1.0)*cj0);
CheckValue<IkReal> x2943=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2943.valid){
continue;
}
CheckValue<IkReal> x2944 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2941))+(((-1.0)*r02*x2942)))),IkReal(((((-1.0)*gconst94*r01*x2942))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2941))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2943.value)))+(x2944.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2945=IKsin(j4);
IkReal x2946=IKcos(j4);
IkReal x2947=(gconst94*r11);
IkReal x2948=((1.0)*cj2);
IkReal x2949=(gconst94*r21);
IkReal x2950=((1.0)*sj0);
IkReal x2951=(gconst94*r01);
IkReal x2952=(cj1*sj2);
IkReal x2953=((1.0)*x2946);
IkReal x2954=(gconst95*x2946);
IkReal x2955=((1.0)*x2945);
IkReal x2956=(gconst95*x2955);
evalcond[0]=((((-1.0)*r20*x2956))+((x2945*x2949))+(((-1.0)*r22*x2953)));
evalcond[1]=((((-1.0)*r10*x2956))+cj0+((x2945*x2947))+(((-1.0)*r12*x2953)));
evalcond[2]=((((-1.0)*r02*x2953))+((x2945*x2951))+(((-1.0)*x2950))+(((-1.0)*r00*x2956)));
evalcond[3]=(((sj1*sj2))+((r20*x2954))+(((-1.0)*x2949*x2953))+(((-1.0)*cj1*x2948))+(((-1.0)*r22*x2955)));
evalcond[4]=((((-1.0)*r02*x2955))+(((-1.0)*cj0*x2952))+((r00*x2954))+(((-1.0)*x2951*x2953))+(((-1.0)*cj0*sj1*x2948)));
evalcond[5]=((((-1.0)*x2947*x2953))+((r10*x2954))+(((-1.0)*r12*x2955))+(((-1.0)*x2950*x2952))+(((-1.0)*sj0*sj1*x2948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2957=((1.0)*gconst95);
CheckValue<IkReal> x2958=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2957)))),-1);
if(!x2958.valid){
continue;
}
CheckValue<IkReal> x2959 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2958.value)))+(x2959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2960=IKsin(j4);
IkReal x2961=IKcos(j4);
IkReal x2962=(gconst94*r11);
IkReal x2963=((1.0)*cj2);
IkReal x2964=(gconst94*r21);
IkReal x2965=((1.0)*sj0);
IkReal x2966=(gconst94*r01);
IkReal x2967=(cj1*sj2);
IkReal x2968=((1.0)*x2961);
IkReal x2969=(gconst95*x2961);
IkReal x2970=((1.0)*x2960);
IkReal x2971=(gconst95*x2970);
evalcond[0]=((((-1.0)*r20*x2971))+((x2960*x2964))+(((-1.0)*r22*x2968)));
evalcond[1]=(cj0+((x2960*x2962))+(((-1.0)*r10*x2971))+(((-1.0)*r12*x2968)));
evalcond[2]=((((-1.0)*r00*x2971))+(((-1.0)*r02*x2968))+((x2960*x2966))+(((-1.0)*x2965)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2970))+(((-1.0)*x2964*x2968))+((r20*x2969))+(((-1.0)*cj1*x2963)));
evalcond[4]=((((-1.0)*r02*x2970))+(((-1.0)*cj0*x2967))+(((-1.0)*cj0*sj1*x2963))+((r00*x2969))+(((-1.0)*x2966*x2968)));
evalcond[5]=((((-1.0)*r12*x2970))+(((-1.0)*x2965*x2967))+((r10*x2969))+(((-1.0)*x2962*x2968))+(((-1.0)*sj0*sj1*x2963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2972=((1.0)*gconst95);
CheckValue<IkReal> x2973=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2972)))),-1);
if(!x2973.valid){
continue;
}
CheckValue<IkReal> x2974 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst94*r21))+(((-1.0)*cj0*r20*x2972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2973.value)))+(x2974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2975=IKsin(j4);
IkReal x2976=IKcos(j4);
IkReal x2977=(gconst94*r11);
IkReal x2978=((1.0)*cj2);
IkReal x2979=(gconst94*r21);
IkReal x2980=((1.0)*sj0);
IkReal x2981=(gconst94*r01);
IkReal x2982=(cj1*sj2);
IkReal x2983=((1.0)*x2976);
IkReal x2984=(gconst95*x2976);
IkReal x2985=((1.0)*x2975);
IkReal x2986=(gconst95*x2985);
evalcond[0]=((((-1.0)*r20*x2986))+((x2975*x2979))+(((-1.0)*r22*x2983)));
evalcond[1]=(cj0+(((-1.0)*r10*x2986))+(((-1.0)*r12*x2983))+((x2975*x2977)));
evalcond[2]=((((-1.0)*r00*x2986))+(((-1.0)*x2980))+(((-1.0)*r02*x2983))+((x2975*x2981)));
evalcond[3]=((((-1.0)*x2979*x2983))+((sj1*sj2))+((r20*x2984))+(((-1.0)*r22*x2985))+(((-1.0)*cj1*x2978)));
evalcond[4]=((((-1.0)*x2981*x2983))+(((-1.0)*cj0*x2982))+((r00*x2984))+(((-1.0)*r02*x2985))+(((-1.0)*cj0*sj1*x2978)));
evalcond[5]=((((-1.0)*x2977*x2983))+(((-1.0)*r12*x2985))+(((-1.0)*x2980*x2982))+(((-1.0)*sj0*sj1*x2978))+((r10*x2984)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2987=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2987;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2988=((1.0)*cj5);
IkReal x2989=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2988)));
j4eval[0]=x2989;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x2988)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2989);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2990=cj5*cj5;
IkReal x2991=r01*r01;
IkReal x2992=(r01*sj5);
IkReal x2993=(cj5*r00);
IkReal x2994=(((x2990*x2991))+(((-1.0)*x2990*(r00*r00)))+(((2.0)*x2992*x2993))+(((-1.0)*(r02*r02)))+(((-1.0)*x2991)));
j4eval[0]=x2994;
j4eval[1]=IKsign(x2994);
j4eval[2]=((IKabs(((((-1.0)*x2992))+x2993)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2995=cj5*cj5;
IkReal x2996=r01*r01;
IkReal x2997=(r01*sj5);
IkReal x2998=(cj5*r00);
CheckValue<IkReal> x2999=IKPowWithIntegerCheck(IKsign((((x2995*x2996))+(((-1.0)*(r02*r02)))+(((2.0)*x2997*x2998))+(((-1.0)*x2996))+(((-1.0)*x2995*(r00*r00))))),-1);
if(!x2999.valid){
continue;
}
CheckValue<IkReal> x3000 = IKatan2WithCheck(IkReal(((((-1.0)*x2997))+x2998)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2999.value)))+(x3000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3001=IKsin(j4);
IkReal x3002=IKcos(j4);
IkReal x3003=(cj5*r10);
IkReal x3004=(r01*sj5);
IkReal x3005=((1.0)*cj2);
IkReal x3006=(cj5*r00);
IkReal x3007=(cj5*r20);
IkReal x3008=((1.0)*x3002);
IkReal x3009=((1.0)*x3001);
IkReal x3010=(sj5*x3001);
evalcond[0]=((((-1.0)*r22*x3008))+(((-1.0)*x3007*x3009))+((r21*x3010)));
evalcond[1]=((((-1.0)*x3003*x3009))+(((-1.0)*r12*x3008))+((r11*x3010)));
evalcond[2]=((((-1.0)*r02*x3009))+((x3002*x3006))+(((-1.0)*x3004*x3008)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3008))+((x3001*x3004))+(((-1.0)*x3006*x3009)));
evalcond[4]=((((-1.0)*r22*x3009))+(((-1.0)*r21*sj5*x3008))+((sj1*sj2))+(((-1.0)*cj1*x3005))+((x3002*x3007)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x3008))+(((-1.0)*r12*x3009))+((x3002*x3003))+(((-1.0)*sj1*x3005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3011=((1.0)*cj5);
CheckValue<IkReal> x3012=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3011)))),-1);
if(!x3012.valid){
continue;
}
CheckValue<IkReal> x3013 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3011)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3012.value)))+(x3013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3014=IKsin(j4);
IkReal x3015=IKcos(j4);
IkReal x3016=(cj5*r10);
IkReal x3017=(r01*sj5);
IkReal x3018=((1.0)*cj2);
IkReal x3019=(cj5*r00);
IkReal x3020=(cj5*r20);
IkReal x3021=((1.0)*x3015);
IkReal x3022=((1.0)*x3014);
IkReal x3023=(sj5*x3014);
evalcond[0]=((((-1.0)*x3020*x3022))+((r21*x3023))+(((-1.0)*r22*x3021)));
evalcond[1]=((((-1.0)*r12*x3021))+((r11*x3023))+(((-1.0)*x3016*x3022)));
evalcond[2]=(((x3015*x3019))+(((-1.0)*r02*x3022))+(((-1.0)*x3017*x3021)));
evalcond[3]=((-1.0)+(((-1.0)*x3019*x3022))+(((-1.0)*r02*x3021))+((x3014*x3017)));
evalcond[4]=(((x3015*x3020))+((sj1*sj2))+(((-1.0)*cj1*x3018))+(((-1.0)*r22*x3022))+(((-1.0)*r21*sj5*x3021)));
evalcond[5]=(((x3015*x3016))+(((-1.0)*r12*x3022))+(((-1.0)*r11*sj5*x3021))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3024=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3024.valid){
continue;
}
CheckValue<IkReal> x3025 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3024.value)))+(x3025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3026=IKsin(j4);
IkReal x3027=IKcos(j4);
IkReal x3028=(cj5*r10);
IkReal x3029=(r01*sj5);
IkReal x3030=((1.0)*cj2);
IkReal x3031=(cj5*r00);
IkReal x3032=(cj5*r20);
IkReal x3033=((1.0)*x3027);
IkReal x3034=((1.0)*x3026);
IkReal x3035=(sj5*x3026);
evalcond[0]=(((r21*x3035))+(((-1.0)*r22*x3033))+(((-1.0)*x3032*x3034)));
evalcond[1]=(((r11*x3035))+(((-1.0)*x3028*x3034))+(((-1.0)*r12*x3033)));
evalcond[2]=((((-1.0)*x3029*x3033))+(((-1.0)*r02*x3034))+((x3027*x3031)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x3033))+(((-1.0)*x3031*x3034))+((x3026*x3029)));
evalcond[4]=((((-1.0)*cj1*x3030))+(((-1.0)*r21*sj5*x3033))+((sj1*sj2))+(((-1.0)*r22*x3034))+((x3027*x3032)));
evalcond[5]=(((x3027*x3028))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x3034))+(((-1.0)*r11*sj5*x3033))+(((-1.0)*sj1*x3030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3036=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3036;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3037=((1.0)*cj5);
IkReal x3038=((((-1.0)*r21*x3037))+(((-1.0)*r20*sj5)));
j4eval[0]=x3038;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x3037))))));
j4eval[2]=IKsign(x3038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3039=cj5*cj5;
IkReal x3040=r01*r01;
IkReal x3041=(cj5*r00);
IkReal x3042=(r01*sj5);
IkReal x3043=((((-2.0)*x3041*x3042))+x3040+(r02*r02)+(((-1.0)*x3039*x3040))+((x3039*(r00*r00))));
j4eval[0]=x3043;
j4eval[1]=((IKabs(r02))+(IKabs((x3041+(((-1.0)*x3042))))));
j4eval[2]=IKsign(x3043);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3044=cj5*cj5;
IkReal x3045=r01*r01;
IkReal x3046=(r01*sj5);
IkReal x3047=(cj5*r00);
CheckValue<IkReal> x3048 = IKatan2WithCheck(IkReal((x3047+(((-1.0)*x3046)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3048.valid){
continue;
}
CheckValue<IkReal> x3049=IKPowWithIntegerCheck(IKsign(((((-2.0)*x3046*x3047))+x3045+(((-1.0)*x3044*x3045))+((x3044*(r00*r00)))+(r02*r02))),-1);
if(!x3049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3048.value)+(((1.5707963267949)*(x3049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3050=IKsin(j4);
IkReal x3051=IKcos(j4);
IkReal x3052=(cj5*r10);
IkReal x3053=(r01*sj5);
IkReal x3054=(cj5*r00);
IkReal x3055=(cj5*r20);
IkReal x3056=((1.0)*x3051);
IkReal x3057=((1.0)*x3050);
IkReal x3058=(sj5*x3050);
evalcond[0]=((((-1.0)*x3055*x3057))+((r21*x3058))+(((-1.0)*r22*x3056)));
evalcond[1]=((((-1.0)*x3052*x3057))+((r11*x3058))+(((-1.0)*r12*x3056)));
evalcond[2]=((((-1.0)*x3053*x3056))+((x3051*x3054))+(((-1.0)*r02*x3057)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3056))+(((-1.0)*x3054*x3057))+((x3050*x3053)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x3051*x3052))+(((-1.0)*r12*x3057))+(((-1.0)*r11*sj5*x3056)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x3051*x3055))+(((-1.0)*r21*sj5*x3056))+(((-1.0)*r22*x3057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3059=((1.0)*cj5);
CheckValue<IkReal> x3060 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x3059)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3060.valid){
continue;
}
CheckValue<IkReal> x3061=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3059))+(((-1.0)*r20*sj5)))),-1);
if(!x3061.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3060.value)+(((1.5707963267949)*(x3061.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3062=IKsin(j4);
IkReal x3063=IKcos(j4);
IkReal x3064=(cj5*r10);
IkReal x3065=(r01*sj5);
IkReal x3066=(cj5*r00);
IkReal x3067=(cj5*r20);
IkReal x3068=((1.0)*x3063);
IkReal x3069=((1.0)*x3062);
IkReal x3070=(sj5*x3062);
evalcond[0]=((((-1.0)*r22*x3068))+(((-1.0)*x3067*x3069))+((r21*x3070)));
evalcond[1]=((((-1.0)*r12*x3068))+((r11*x3070))+(((-1.0)*x3064*x3069)));
evalcond[2]=((((-1.0)*r02*x3069))+(((-1.0)*x3065*x3068))+((x3063*x3066)));
evalcond[3]=((1.0)+(((-1.0)*x3066*x3069))+(((-1.0)*r02*x3068))+((x3062*x3065)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x3068))+((cj1*sj2))+(((-1.0)*r12*x3069))+((x3063*x3064)));
evalcond[5]=((((-1.0)*r21*sj5*x3068))+(((-1.0)*r22*x3069))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3063*x3067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3071 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3071.valid){
continue;
}
CheckValue<IkReal> x3072=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3071.value)+(((1.5707963267949)*(x3072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3073=IKsin(j4);
IkReal x3074=IKcos(j4);
IkReal x3075=(cj5*r10);
IkReal x3076=(r01*sj5);
IkReal x3077=(cj5*r00);
IkReal x3078=(cj5*r20);
IkReal x3079=((1.0)*x3074);
IkReal x3080=((1.0)*x3073);
IkReal x3081=(sj5*x3073);
evalcond[0]=((((-1.0)*r22*x3079))+((r21*x3081))+(((-1.0)*x3078*x3080)));
evalcond[1]=(((r11*x3081))+(((-1.0)*x3075*x3080))+(((-1.0)*r12*x3079)));
evalcond[2]=((((-1.0)*r02*x3080))+(((-1.0)*x3076*x3079))+((x3074*x3077)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3079))+(((-1.0)*x3077*x3080))+((x3073*x3076)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3079))+(((-1.0)*r12*x3080))+((x3074*x3075)));
evalcond[5]=((((-1.0)*r21*sj5*x3079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x3080))+((x3074*x3078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3082=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3082);
rxp1_1=(px*r21);
rxp1_2=(r11*x3082);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3083=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3083);
rxp1_1=(px*r21);
rxp1_2=(r11*x3083);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3084=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3084);
rxp1_1=(px*r21);
rxp1_2=(r11*x3084);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3087=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3087.valid){
continue;
}
IkReal x3085=x3087.value;
IkReal x3086=(sj0*x3085);
cj4array[0]=(((cj2*sj1*x3086))+((cj1*sj2*x3086)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3088=IKsin(j4);
IkReal x3089=IKcos(j4);
IkReal x3090=(cj5*r20);
IkReal x3091=(r21*sj5);
IkReal x3092=((1.0)*x3088);
IkReal x3093=((1.0)*x3089);
evalcond[0]=((-1.0)*r02*x3088);
evalcond[1]=((((-1.0)*r02*x3093))+(((-1.0)*sj0)));
evalcond[2]=(((x3088*x3091))+(((-1.0)*x3090*x3092)));
evalcond[3]=(((r11*sj5*x3088))+(((-1.0)*cj5*r10*x3092)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3091*x3093))+((x3089*x3090)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3095=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3095.valid){
continue;
}
IkReal x3094=x3095.value;
cj4array[0]=(((cj1*cj2*x3094))+(((-1.0)*sj1*sj2*x3094)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3096=IKsin(j4);
IkReal x3097=IKcos(j4);
IkReal x3098=(r11*sj5);
IkReal x3099=((1.0)*sj0);
IkReal x3100=((1.0)*x3097);
IkReal x3101=((1.0)*cj5*x3096);
evalcond[0]=((-1.0)*r02*x3096);
evalcond[1]=((((-1.0)*x3099))+(((-1.0)*r02*x3100)));
evalcond[2]=((((-1.0)*r20*x3101))+((r21*sj5*x3096)));
evalcond[3]=((((-1.0)*r10*x3101))+((x3096*x3098)));
evalcond[4]=(((cj5*r10*x3097))+(((-1.0)*x3098*x3100))+(((-1.0)*cj1*sj2*x3099))+(((-1.0)*cj2*sj1*x3099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3102=IKPowWithIntegerCheck(r02,-1);
if(!x3102.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3102.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3103=IKsin(j4);
IkReal x3104=IKcos(j4);
IkReal x3105=((1.0)*sj0);
IkReal x3106=(cj5*x3104);
IkReal x3107=(sj5*x3103);
IkReal x3108=((1.0)*sj5*x3104);
IkReal x3109=((1.0)*cj5*x3103);
evalcond[0]=((-1.0)*r02*x3103);
evalcond[1]=((((-1.0)*r20*x3109))+((r21*x3107)));
evalcond[2]=(((r11*x3107))+(((-1.0)*r10*x3109)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x3106))+(((-1.0)*r21*x3108)));
evalcond[4]=((((-1.0)*cj1*sj2*x3105))+(((-1.0)*cj2*sj1*x3105))+(((-1.0)*r11*x3108))+((r10*x3106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3110=((1.0)*sj0);
IkReal x3111=((1.0)*cj0);
CheckValue<IkReal> x3112 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3111))+(((-1.0)*r12*x3110)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3110))+(((-1.0)*r01*sj5*x3111)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3112.valid){
continue;
}
CheckValue<IkReal> x3113=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3112.value)+(((1.5707963267949)*(x3113.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3114=IKsin(j4);
IkReal x3115=IKcos(j4);
IkReal x3116=(cj5*r10);
IkReal x3117=(r01*sj5);
IkReal x3118=((1.0)*cj2);
IkReal x3119=(cj5*r00);
IkReal x3120=((1.0)*sj0);
IkReal x3121=(cj5*r20);
IkReal x3122=(cj1*sj2);
IkReal x3123=((1.0)*x3115);
IkReal x3124=((1.0)*x3114);
IkReal x3125=(sj5*x3114);
evalcond[0]=(((r21*x3125))+(((-1.0)*x3121*x3124))+(((-1.0)*r22*x3123)));
evalcond[1]=(cj0+(((-1.0)*x3116*x3124))+(((-1.0)*r12*x3123))+((r11*x3125)));
evalcond[2]=((((-1.0)*r02*x3123))+((x3114*x3117))+(((-1.0)*x3119*x3124))+(((-1.0)*x3120)));
evalcond[3]=(((x3115*x3121))+(((-1.0)*r21*sj5*x3123))+(((-1.0)*cj1*x3118))+((sj1*sj2))+(((-1.0)*r22*x3124)));
evalcond[4]=((((-1.0)*r02*x3124))+(((-1.0)*x3117*x3123))+(((-1.0)*cj0*x3122))+(((-1.0)*cj0*sj1*x3118))+((x3115*x3119)));
evalcond[5]=((((-1.0)*sj0*sj1*x3118))+(((-1.0)*r12*x3124))+(((-1.0)*x3120*x3122))+(((-1.0)*r11*sj5*x3123))+((x3115*x3116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3126=((1.0)*cj5);
CheckValue<IkReal> x3127=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3126)))),-1);
if(!x3127.valid){
continue;
}
CheckValue<IkReal> x3128 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3126))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3127.value)))+(x3128.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3129=IKsin(j4);
IkReal x3130=IKcos(j4);
IkReal x3131=(cj5*r10);
IkReal x3132=(r01*sj5);
IkReal x3133=((1.0)*cj2);
IkReal x3134=(cj5*r00);
IkReal x3135=((1.0)*sj0);
IkReal x3136=(cj5*r20);
IkReal x3137=(cj1*sj2);
IkReal x3138=((1.0)*x3130);
IkReal x3139=((1.0)*x3129);
IkReal x3140=(sj5*x3129);
evalcond[0]=((((-1.0)*x3136*x3139))+((r21*x3140))+(((-1.0)*r22*x3138)));
evalcond[1]=((((-1.0)*x3131*x3139))+cj0+((r11*x3140))+(((-1.0)*r12*x3138)));
evalcond[2]=((((-1.0)*r02*x3138))+(((-1.0)*x3134*x3139))+(((-1.0)*x3135))+((x3129*x3132)));
evalcond[3]=(((x3130*x3136))+(((-1.0)*r21*sj5*x3138))+((sj1*sj2))+(((-1.0)*cj1*x3133))+(((-1.0)*r22*x3139)));
evalcond[4]=((((-1.0)*cj0*sj1*x3133))+(((-1.0)*r02*x3139))+((x3130*x3134))+(((-1.0)*x3132*x3138))+(((-1.0)*cj0*x3137)));
evalcond[5]=(((x3130*x3131))+(((-1.0)*x3135*x3137))+(((-1.0)*r12*x3139))+(((-1.0)*r11*sj5*x3138))+(((-1.0)*sj0*sj1*x3133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3141=((1.0)*cj5);
CheckValue<IkReal> x3142 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3142.valid){
continue;
}
CheckValue<IkReal> x3143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3141)))),-1);
if(!x3143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3142.value)+(((1.5707963267949)*(x3143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3144=IKsin(j4);
IkReal x3145=IKcos(j4);
IkReal x3146=(cj5*r10);
IkReal x3147=(r01*sj5);
IkReal x3148=((1.0)*cj2);
IkReal x3149=(cj5*r00);
IkReal x3150=((1.0)*sj0);
IkReal x3151=(cj5*r20);
IkReal x3152=(cj1*sj2);
IkReal x3153=((1.0)*x3145);
IkReal x3154=((1.0)*x3144);
IkReal x3155=(sj5*x3144);
evalcond[0]=((((-1.0)*r22*x3153))+((r21*x3155))+(((-1.0)*x3151*x3154)));
evalcond[1]=((((-1.0)*x3146*x3154))+cj0+((r11*x3155))+(((-1.0)*r12*x3153)));
evalcond[2]=((((-1.0)*x3150))+((x3144*x3147))+(((-1.0)*x3149*x3154))+(((-1.0)*r02*x3153)));
evalcond[3]=((((-1.0)*cj1*x3148))+(((-1.0)*r22*x3154))+((sj1*sj2))+((x3145*x3151))+(((-1.0)*r21*sj5*x3153)));
evalcond[4]=(((x3145*x3149))+(((-1.0)*cj0*sj1*x3148))+(((-1.0)*r02*x3154))+(((-1.0)*cj0*x3152))+(((-1.0)*x3147*x3153)));
evalcond[5]=((((-1.0)*x3150*x3152))+(((-1.0)*sj0*sj1*x3148))+((x3145*x3146))+(((-1.0)*r11*sj5*x3153))+(((-1.0)*r12*x3154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3156=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3156;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3156);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3157=r21*r21;
IkReal x3158=cj5*cj5;
IkReal x3159=(sj1*sj2);
IkReal x3160=(r21*sj5);
IkReal x3161=(cj5*r20);
IkReal x3162=(cj1*cj2);
IkReal x3163=((((-1.0)*x3157))+(((2.0)*x3160*x3161))+(((-1.0)*(r22*r22)))+((x3157*x3158))+(((-1.0)*x3158*(r20*r20))));
j4eval[0]=x3163;
j4eval[1]=((IKabs((((r22*x3159))+(((-1.0)*r22*x3162)))))+(IKabs(((((-1.0)*x3160*x3162))+((x3159*x3160))+((x3161*x3162))+(((-1.0)*x3159*x3161))))));
j4eval[2]=IKsign(x3163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3164=IKsin(j0);
IkReal x3165=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3164))+(((0.425)*x3165)));
evalcond[1]=((((0.10915)*x3165))+(((-1.0)*py))+(((0.425)*x3164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3166=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3166;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3167=((1.0)*cj5);
IkReal x3168=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3167)));
j4eval[0]=x3168;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3167)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3169=((1.0)*cj5);
IkReal x3170=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3169)));
j4eval[0]=x3170;
j4eval[1]=IKsign(x3170);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3169)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3171=((1.0)*cj5);
CheckValue<IkReal> x3172=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3171)))),-1);
if(!x3172.valid){
continue;
}
CheckValue<IkReal> x3173 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3171))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3173.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3172.value)))+(x3173.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3174=IKcos(j4);
IkReal x3175=IKsin(j4);
IkReal x3176=((1.0)*sj0);
IkReal x3177=(cj5*r00);
IkReal x3178=(cj5*r10);
IkReal x3179=(cj5*r20);
IkReal x3180=((1.0)*x3174);
IkReal x3181=((1.0)*x3175);
IkReal x3182=(sj5*x3174);
IkReal x3183=(sj5*x3175);
evalcond[0]=((((-1.0)*x3179*x3180))+((r22*x3175))+((r21*x3182)));
evalcond[1]=((((-1.0)*r22*x3180))+(((-1.0)*x3179*x3181))+((r21*x3183)));
evalcond[2]=(cj0+(((-1.0)*x3178*x3181))+((r11*x3183))+(((-1.0)*r12*x3180)));
evalcond[3]=(((r01*x3182))+(((-1.0)*x3177*x3180))+((r02*x3175))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3176))+(((-1.0)*x3178*x3180))+((r11*x3182))+((r12*x3175)));
evalcond[5]=((((-1.0)*r02*x3180))+((r01*x3183))+(((-1.0)*x3177*x3181))+(((-1.0)*x3176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3184=((1.0)*cj5);
CheckValue<IkReal> x3185 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3184))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3185.valid){
continue;
}
CheckValue<IkReal> x3186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3184)))),-1);
if(!x3186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3185.value)+(((1.5707963267949)*(x3186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3187=IKcos(j4);
IkReal x3188=IKsin(j4);
IkReal x3189=((1.0)*sj0);
IkReal x3190=(cj5*r00);
IkReal x3191=(cj5*r10);
IkReal x3192=(cj5*r20);
IkReal x3193=((1.0)*x3187);
IkReal x3194=((1.0)*x3188);
IkReal x3195=(sj5*x3187);
IkReal x3196=(sj5*x3188);
evalcond[0]=(((r22*x3188))+((r21*x3195))+(((-1.0)*x3192*x3193)));
evalcond[1]=((((-1.0)*r22*x3193))+((r21*x3196))+(((-1.0)*x3192*x3194)));
evalcond[2]=(cj0+(((-1.0)*x3191*x3194))+((r11*x3196))+(((-1.0)*r12*x3193)));
evalcond[3]=((((-1.0)*x3190*x3193))+((r01*x3195))+(((-1.0)*cj0))+((r02*x3188)));
evalcond[4]=((((-1.0)*x3191*x3193))+((r12*x3188))+((r11*x3195))+(((-1.0)*x3189)));
evalcond[5]=((((-1.0)*x3190*x3194))+((r01*x3196))+(((-1.0)*r02*x3193))+(((-1.0)*x3189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3197 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3197.valid){
continue;
}
CheckValue<IkReal> x3198=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3197.value)+(((1.5707963267949)*(x3198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3199=IKcos(j4);
IkReal x3200=IKsin(j4);
IkReal x3201=((1.0)*sj0);
IkReal x3202=(cj5*r00);
IkReal x3203=(cj5*r10);
IkReal x3204=(cj5*r20);
IkReal x3205=((1.0)*x3199);
IkReal x3206=((1.0)*x3200);
IkReal x3207=(sj5*x3199);
IkReal x3208=(sj5*x3200);
evalcond[0]=(((r22*x3200))+(((-1.0)*x3204*x3205))+((r21*x3207)));
evalcond[1]=((((-1.0)*x3204*x3206))+(((-1.0)*r22*x3205))+((r21*x3208)));
evalcond[2]=(cj0+((r11*x3208))+(((-1.0)*r12*x3205))+(((-1.0)*x3203*x3206)));
evalcond[3]=(((r01*x3207))+(((-1.0)*x3202*x3205))+((r02*x3200))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3207))+((r12*x3200))+(((-1.0)*x3203*x3205))+(((-1.0)*x3201)));
evalcond[5]=((((-1.0)*r02*x3205))+((r01*x3208))+(((-1.0)*x3202*x3206))+(((-1.0)*x3201)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3209=IKsin(j0);
IkReal x3210=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x3209))+(((0.425)*x3210)));
evalcond[1]=((((0.10915)*x3210))+(((-1.0)*py))+(((0.425)*x3209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3211=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3211;
j4eval[1]=IKsign(x3211);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3212=((1.0)*cj5);
IkReal x3213=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3212)));
j4eval[0]=x3213;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3212)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3213);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3214=cj5*cj5;
IkReal x3215=((1.0)*r20);
IkReal x3216=(r01*r21);
IkReal x3217=(r21*sj5);
IkReal x3218=(((cj5*r01*r20*sj5))+((cj5*r00*x3217))+(((-1.0)*r02*r22))+(((-1.0)*x3216))+((x3214*x3216))+(((-1.0)*r00*x3214*x3215)));
j4eval[0]=x3218;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3215))+((cj0*x3217)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3218);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3219=cj5*cj5;
IkReal x3220=((1.0)*r20);
IkReal x3221=(r01*r21);
IkReal x3222=(r21*sj5);
CheckValue<IkReal> x3223=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3222))+(((-1.0)*r00*x3219*x3220))+(((-1.0)*x3221))+((x3219*x3221)))),-1);
if(!x3223.valid){
continue;
}
CheckValue<IkReal> x3224 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3222))+(((-1.0)*cj0*cj5*x3220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3223.value)))+(x3224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3225=IKcos(j4);
IkReal x3226=IKsin(j4);
IkReal x3227=(cj5*r00);
IkReal x3228=(cj5*r10);
IkReal x3229=(cj5*r20);
IkReal x3230=((1.0)*x3225);
IkReal x3231=((1.0)*x3226);
IkReal x3232=(sj5*x3225);
IkReal x3233=(sj5*x3226);
evalcond[0]=((((-1.0)*x3229*x3230))+((r22*x3226))+((r21*x3232)));
evalcond[1]=((((-1.0)*x3229*x3231))+(((-1.0)*r22*x3230))+((r21*x3233)));
evalcond[2]=(cj0+((r02*x3226))+((r01*x3232))+(((-1.0)*x3227*x3230)));
evalcond[3]=(((r12*x3226))+sj0+(((-1.0)*x3228*x3230))+((r11*x3232)));
evalcond[4]=(cj0+(((-1.0)*x3228*x3231))+((r11*x3233))+(((-1.0)*r12*x3230)));
evalcond[5]=((((-1.0)*r02*x3230))+(((-1.0)*sj0))+((r01*x3233))+(((-1.0)*x3227*x3231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3234=((1.0)*cj5);
CheckValue<IkReal> x3235=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3234)))),-1);
if(!x3235.valid){
continue;
}
CheckValue<IkReal> x3236 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3234)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3235.value)))+(x3236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3237=IKcos(j4);
IkReal x3238=IKsin(j4);
IkReal x3239=(cj5*r00);
IkReal x3240=(cj5*r10);
IkReal x3241=(cj5*r20);
IkReal x3242=((1.0)*x3237);
IkReal x3243=((1.0)*x3238);
IkReal x3244=(sj5*x3237);
IkReal x3245=(sj5*x3238);
evalcond[0]=(((r21*x3244))+((r22*x3238))+(((-1.0)*x3241*x3242)));
evalcond[1]=(((r21*x3245))+(((-1.0)*x3241*x3243))+(((-1.0)*r22*x3242)));
evalcond[2]=(((r01*x3244))+(((-1.0)*x3239*x3242))+cj0+((r02*x3238)));
evalcond[3]=(sj0+(((-1.0)*x3240*x3242))+((r12*x3238))+((r11*x3244)));
evalcond[4]=(cj0+(((-1.0)*x3240*x3243))+(((-1.0)*r12*x3242))+((r11*x3245)));
evalcond[5]=(((r01*x3245))+(((-1.0)*x3239*x3243))+(((-1.0)*sj0))+(((-1.0)*r02*x3242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3246 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3246.valid){
continue;
}
CheckValue<IkReal> x3247=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3247.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3246.value)+(((1.5707963267949)*(x3247.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3248=IKcos(j4);
IkReal x3249=IKsin(j4);
IkReal x3250=(cj5*r00);
IkReal x3251=(cj5*r10);
IkReal x3252=(cj5*r20);
IkReal x3253=((1.0)*x3248);
IkReal x3254=((1.0)*x3249);
IkReal x3255=(sj5*x3248);
IkReal x3256=(sj5*x3249);
evalcond[0]=(((r22*x3249))+((r21*x3255))+(((-1.0)*x3252*x3253)));
evalcond[1]=(((r21*x3256))+(((-1.0)*r22*x3253))+(((-1.0)*x3252*x3254)));
evalcond[2]=(cj0+((r01*x3255))+(((-1.0)*x3250*x3253))+((r02*x3249)));
evalcond[3]=(sj0+((r11*x3255))+((r12*x3249))+(((-1.0)*x3251*x3253)));
evalcond[4]=(cj0+((r11*x3256))+(((-1.0)*x3251*x3254))+(((-1.0)*r12*x3253)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3253))+((r01*x3256))+(((-1.0)*x3250*x3254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3257=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3257;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3258=((1.0)*cj5);
IkReal x3259=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3258)));
j4eval[0]=x3259;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3258)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3260=((1.0)*cj5);
IkReal x3261=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3260)));
j4eval[0]=x3261;
j4eval[1]=IKsign(x3261);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3260))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3262=((1.0)*cj5);
CheckValue<IkReal> x3263=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3262)))),-1);
if(!x3263.valid){
continue;
}
CheckValue<IkReal> x3264 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3262)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3263.value)))+(x3264.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3265=IKcos(j4);
IkReal x3266=IKsin(j4);
IkReal x3267=((1.0)*sj0);
IkReal x3268=(cj5*r00);
IkReal x3269=(cj5*r10);
IkReal x3270=(cj5*r20);
IkReal x3271=((1.0)*x3265);
IkReal x3272=((1.0)*x3266);
IkReal x3273=(sj5*x3265);
IkReal x3274=(sj5*x3266);
evalcond[0]=(((r21*x3273))+(((-1.0)*x3270*x3271))+((r22*x3266)));
evalcond[1]=(((r21*x3274))+(((-1.0)*x3270*x3272))+(((-1.0)*r22*x3271)));
evalcond[2]=((((-1.0)*r12*x3271))+cj0+((r11*x3274))+(((-1.0)*x3269*x3272)));
evalcond[3]=((((-1.0)*x3268*x3271))+((r01*x3273))+((r02*x3266))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3267))+((r11*x3273))+(((-1.0)*x3269*x3271))+((r12*x3266)));
evalcond[5]=((((-1.0)*x3268*x3272))+((r01*x3274))+(((-1.0)*x3267))+(((-1.0)*r02*x3271)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3275=((1.0)*cj5);
CheckValue<IkReal> x3276 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3276.valid){
continue;
}
CheckValue<IkReal> x3277=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3275)))),-1);
if(!x3277.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3276.value)+(((1.5707963267949)*(x3277.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3278=IKcos(j4);
IkReal x3279=IKsin(j4);
IkReal x3280=((1.0)*sj0);
IkReal x3281=(cj5*r00);
IkReal x3282=(cj5*r10);
IkReal x3283=(cj5*r20);
IkReal x3284=((1.0)*x3278);
IkReal x3285=((1.0)*x3279);
IkReal x3286=(sj5*x3278);
IkReal x3287=(sj5*x3279);
evalcond[0]=((((-1.0)*x3283*x3284))+((r21*x3286))+((r22*x3279)));
evalcond[1]=((((-1.0)*r22*x3284))+(((-1.0)*x3283*x3285))+((r21*x3287)));
evalcond[2]=((((-1.0)*r12*x3284))+cj0+(((-1.0)*x3282*x3285))+((r11*x3287)));
evalcond[3]=((((-1.0)*x3281*x3284))+((r02*x3279))+(((-1.0)*cj0))+((r01*x3286)));
evalcond[4]=((((-1.0)*x3280))+(((-1.0)*x3282*x3284))+((r12*x3279))+((r11*x3286)));
evalcond[5]=((((-1.0)*x3280))+(((-1.0)*x3281*x3285))+(((-1.0)*r02*x3284))+((r01*x3287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3288 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3288.valid){
continue;
}
CheckValue<IkReal> x3289=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3288.value)+(((1.5707963267949)*(x3289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3290=IKcos(j4);
IkReal x3291=IKsin(j4);
IkReal x3292=((1.0)*sj0);
IkReal x3293=(cj5*r00);
IkReal x3294=(cj5*r10);
IkReal x3295=(cj5*r20);
IkReal x3296=((1.0)*x3290);
IkReal x3297=((1.0)*x3291);
IkReal x3298=(sj5*x3290);
IkReal x3299=(sj5*x3291);
evalcond[0]=(((r21*x3298))+((r22*x3291))+(((-1.0)*x3295*x3296)));
evalcond[1]=((((-1.0)*r22*x3296))+((r21*x3299))+(((-1.0)*x3295*x3297)));
evalcond[2]=((((-1.0)*r12*x3296))+cj0+(((-1.0)*x3294*x3297))+((r11*x3299)));
evalcond[3]=(((r01*x3298))+((r02*x3291))+(((-1.0)*x3293*x3296))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3292))+(((-1.0)*x3294*x3296))+((r11*x3298))+((r12*x3291)));
evalcond[5]=(((r01*x3299))+(((-1.0)*x3292))+(((-1.0)*x3293*x3297))+(((-1.0)*r02*x3296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3300=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3300;
j4eval[1]=IKsign(x3300);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3301=((1.0)*cj5);
IkReal x3302=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3301)));
j4eval[0]=x3302;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3301)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3303=cj5*cj5;
IkReal x3304=((1.0)*r20);
IkReal x3305=(r01*r21);
IkReal x3306=(r21*sj5);
IkReal x3307=(((cj5*r01*r20*sj5))+((x3303*x3305))+(((-1.0)*r00*x3303*x3304))+((cj5*r00*x3306))+(((-1.0)*r02*r22))+(((-1.0)*x3305)));
j4eval[0]=x3307;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3306))+(((-1.0)*cj0*cj5*x3304))))));
j4eval[2]=IKsign(x3307);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3308=cj5*cj5;
IkReal x3309=((1.0)*r20);
IkReal x3310=(r01*r21);
IkReal x3311=(r21*sj5);
CheckValue<IkReal> x3312 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3311))+(((-1.0)*cj0*cj5*x3309)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3312.valid){
continue;
}
CheckValue<IkReal> x3313=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3311))+(((-1.0)*r00*x3308*x3309))+(((-1.0)*x3310))+((x3308*x3310)))),-1);
if(!x3313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3312.value)+(((1.5707963267949)*(x3313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3314=IKcos(j4);
IkReal x3315=IKsin(j4);
IkReal x3316=(cj5*r00);
IkReal x3317=(cj5*r10);
IkReal x3318=(cj5*r20);
IkReal x3319=((1.0)*x3314);
IkReal x3320=((1.0)*x3315);
IkReal x3321=(sj5*x3314);
IkReal x3322=(sj5*x3315);
evalcond[0]=((((-1.0)*x3318*x3319))+((r22*x3315))+((r21*x3321)));
evalcond[1]=((((-1.0)*r22*x3319))+((r21*x3322))+(((-1.0)*x3318*x3320)));
evalcond[2]=(cj0+((r01*x3321))+((r02*x3315))+(((-1.0)*x3316*x3319)));
evalcond[3]=(sj0+((r11*x3321))+(((-1.0)*x3317*x3319))+((r12*x3315)));
evalcond[4]=(cj0+((r11*x3322))+(((-1.0)*x3317*x3320))+(((-1.0)*r12*x3319)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3322))+(((-1.0)*r02*x3319))+(((-1.0)*x3316*x3320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3323=((1.0)*cj5);
CheckValue<IkReal> x3324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3323)))),-1);
if(!x3324.valid){
continue;
}
CheckValue<IkReal> x3325 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3323)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3324.value)))+(x3325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3326=IKcos(j4);
IkReal x3327=IKsin(j4);
IkReal x3328=(cj5*r00);
IkReal x3329=(cj5*r10);
IkReal x3330=(cj5*r20);
IkReal x3331=((1.0)*x3326);
IkReal x3332=((1.0)*x3327);
IkReal x3333=(sj5*x3326);
IkReal x3334=(sj5*x3327);
evalcond[0]=(((r22*x3327))+((r21*x3333))+(((-1.0)*x3330*x3331)));
evalcond[1]=(((r21*x3334))+(((-1.0)*x3330*x3332))+(((-1.0)*r22*x3331)));
evalcond[2]=(cj0+((r01*x3333))+((r02*x3327))+(((-1.0)*x3328*x3331)));
evalcond[3]=(((r12*x3327))+sj0+((r11*x3333))+(((-1.0)*x3329*x3331)));
evalcond[4]=(cj0+((r11*x3334))+(((-1.0)*x3329*x3332))+(((-1.0)*r12*x3331)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3331))+((r01*x3334))+(((-1.0)*x3328*x3332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3335 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3335.valid){
continue;
}
CheckValue<IkReal> x3336=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3336.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3335.value)+(((1.5707963267949)*(x3336.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3337=IKcos(j4);
IkReal x3338=IKsin(j4);
IkReal x3339=(cj5*r00);
IkReal x3340=(cj5*r10);
IkReal x3341=(cj5*r20);
IkReal x3342=((1.0)*x3337);
IkReal x3343=((1.0)*x3338);
IkReal x3344=(sj5*x3337);
IkReal x3345=(sj5*x3338);
evalcond[0]=((((-1.0)*x3341*x3342))+((r21*x3344))+((r22*x3338)));
evalcond[1]=((((-1.0)*x3341*x3343))+((r21*x3345))+(((-1.0)*r22*x3342)));
evalcond[2]=(cj0+((r02*x3338))+(((-1.0)*x3339*x3342))+((r01*x3344)));
evalcond[3]=((((-1.0)*x3340*x3342))+sj0+((r12*x3338))+((r11*x3344)));
evalcond[4]=((((-1.0)*x3340*x3343))+cj0+(((-1.0)*r12*x3342))+((r11*x3345)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3342))+(((-1.0)*x3339*x3343))+((r01*x3345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3346=IKcos(j0);
IkReal x3347=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.425)*x3346))+(((-0.10915)*x3347)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3347))+(((0.10915)*x3346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3348=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3348;
j4eval[1]=IKsign(x3348);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3349=((1.0)*cj5);
IkReal x3350=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3349)));
j4eval[0]=x3350;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3349))))));
j4eval[2]=IKsign(x3350);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3351=cj5*cj5;
IkReal x3352=((1.0)*r20);
IkReal x3353=(r01*r21);
IkReal x3354=(r21*sj5);
IkReal x3355=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3354))+((x3351*x3353))+(((-1.0)*x3353))+(((-1.0)*r00*x3351*x3352)));
j4eval[0]=x3355;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x3352))+((cj0*x3354)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3355);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3356=cj5*cj5;
IkReal x3357=((1.0)*r20);
IkReal x3358=(r01*r21);
IkReal x3359=(r21*sj5);
CheckValue<IkReal> x3360 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3357))+((cj0*x3359)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3360.valid){
continue;
}
CheckValue<IkReal> x3361=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x3359))+((x3356*x3358))+(((-1.0)*r00*x3356*x3357))+(((-1.0)*x3358)))),-1);
if(!x3361.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3360.value)+(((1.5707963267949)*(x3361.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3362=IKcos(j4);
IkReal x3363=IKsin(j4);
IkReal x3364=(cj5*r00);
IkReal x3365=(cj5*r10);
IkReal x3366=(cj5*r20);
IkReal x3367=((1.0)*x3362);
IkReal x3368=((1.0)*x3363);
IkReal x3369=(sj5*x3362);
IkReal x3370=(sj5*x3363);
evalcond[0]=(((r22*x3363))+((r21*x3369))+(((-1.0)*x3366*x3367)));
evalcond[1]=((((-1.0)*r22*x3367))+((r21*x3370))+(((-1.0)*x3366*x3368)));
evalcond[2]=(((r02*x3363))+cj0+((r01*x3369))+(((-1.0)*x3364*x3367)));
evalcond[3]=(sj0+(((-1.0)*x3365*x3367))+((r12*x3363))+((r11*x3369)));
evalcond[4]=((((-1.0)*r12*x3367))+cj0+(((-1.0)*x3365*x3368))+((r11*x3370)));
evalcond[5]=(((r01*x3370))+(((-1.0)*sj0))+(((-1.0)*r02*x3367))+(((-1.0)*x3364*x3368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3371=((1.0)*cj5);
CheckValue<IkReal> x3372 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3371)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3372.valid){
continue;
}
CheckValue<IkReal> x3373=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3371)))),-1);
if(!x3373.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3372.value)+(((1.5707963267949)*(x3373.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3374=IKcos(j4);
IkReal x3375=IKsin(j4);
IkReal x3376=(cj5*r00);
IkReal x3377=(cj5*r10);
IkReal x3378=(cj5*r20);
IkReal x3379=((1.0)*x3374);
IkReal x3380=((1.0)*x3375);
IkReal x3381=(sj5*x3374);
IkReal x3382=(sj5*x3375);
evalcond[0]=(((r22*x3375))+((r21*x3381))+(((-1.0)*x3378*x3379)));
evalcond[1]=((((-1.0)*r22*x3379))+(((-1.0)*x3378*x3380))+((r21*x3382)));
evalcond[2]=(((r01*x3381))+cj0+((r02*x3375))+(((-1.0)*x3376*x3379)));
evalcond[3]=(((r12*x3375))+sj0+(((-1.0)*x3377*x3379))+((r11*x3381)));
evalcond[4]=(cj0+(((-1.0)*x3377*x3380))+(((-1.0)*r12*x3379))+((r11*x3382)));
evalcond[5]=(((r01*x3382))+(((-1.0)*sj0))+(((-1.0)*x3376*x3380))+(((-1.0)*r02*x3379)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3383 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3383.valid){
continue;
}
CheckValue<IkReal> x3384=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3384.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3383.value)+(((1.5707963267949)*(x3384.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3385=IKcos(j4);
IkReal x3386=IKsin(j4);
IkReal x3387=(cj5*r00);
IkReal x3388=(cj5*r10);
IkReal x3389=(cj5*r20);
IkReal x3390=((1.0)*x3385);
IkReal x3391=((1.0)*x3386);
IkReal x3392=(sj5*x3385);
IkReal x3393=(sj5*x3386);
evalcond[0]=((((-1.0)*x3389*x3390))+((r21*x3392))+((r22*x3386)));
evalcond[1]=((((-1.0)*r22*x3390))+(((-1.0)*x3389*x3391))+((r21*x3393)));
evalcond[2]=((((-1.0)*x3387*x3390))+cj0+((r01*x3392))+((r02*x3386)));
evalcond[3]=(sj0+((r11*x3392))+((r12*x3386))+(((-1.0)*x3388*x3390)));
evalcond[4]=(cj0+((r11*x3393))+(((-1.0)*r12*x3390))+(((-1.0)*x3388*x3391)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3387*x3391))+((r01*x3393))+(((-1.0)*r02*x3390)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3394=IKcos(j0);
IkReal x3395=IKsin(j0);
evalcond[0]=((((-0.10915)*x3395))+(((-1.0)*px))+(((-0.425)*x3394)));
evalcond[1]=((((-1.0)*py))+(((-0.425)*x3395))+(((0.10915)*x3394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3396=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3396;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3396);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3397=((1.0)*cj5);
IkReal x3398=((((-1.0)*r01*x3397))+(((-1.0)*r00*sj5)));
j4eval[0]=x3398;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3397))))));
j4eval[2]=IKsign(x3398);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3399=((1.0)*cj5);
IkReal x3400=((((-1.0)*r01*x3399))+(((-1.0)*r00*sj5)));
j4eval[0]=x3400;
j4eval[1]=IKsign(x3400);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3399))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3401=((1.0)*cj5);
CheckValue<IkReal> x3402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3401))+(((-1.0)*r00*sj5)))),-1);
if(!x3402.valid){
continue;
}
CheckValue<IkReal> x3403 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3401))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3402.value)))+(x3403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3404=IKcos(j4);
IkReal x3405=IKsin(j4);
IkReal x3406=((1.0)*sj0);
IkReal x3407=(cj5*r00);
IkReal x3408=(cj5*r10);
IkReal x3409=(cj5*r20);
IkReal x3410=((1.0)*x3404);
IkReal x3411=((1.0)*x3405);
IkReal x3412=(sj5*x3404);
IkReal x3413=(sj5*x3405);
evalcond[0]=(((r22*x3405))+((r21*x3412))+(((-1.0)*x3409*x3410)));
evalcond[1]=((((-1.0)*r22*x3410))+((r21*x3413))+(((-1.0)*x3409*x3411)));
evalcond[2]=(cj0+(((-1.0)*x3408*x3411))+((r11*x3413))+(((-1.0)*r12*x3410)));
evalcond[3]=((((-1.0)*x3407*x3410))+((r02*x3405))+((r01*x3412))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3408*x3410))+((r11*x3412))+((r12*x3405))+(((-1.0)*x3406)));
evalcond[5]=((((-1.0)*x3407*x3411))+(((-1.0)*r02*x3410))+((r01*x3413))+(((-1.0)*x3406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3414=((1.0)*cj5);
CheckValue<IkReal> x3415 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3414)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3415.valid){
continue;
}
CheckValue<IkReal> x3416=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3414)))),-1);
if(!x3416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3415.value)+(((1.5707963267949)*(x3416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3417=IKcos(j4);
IkReal x3418=IKsin(j4);
IkReal x3419=((1.0)*sj0);
IkReal x3420=(cj5*r00);
IkReal x3421=(cj5*r10);
IkReal x3422=(cj5*r20);
IkReal x3423=((1.0)*x3417);
IkReal x3424=((1.0)*x3418);
IkReal x3425=(sj5*x3417);
IkReal x3426=(sj5*x3418);
evalcond[0]=(((r22*x3418))+((r21*x3425))+(((-1.0)*x3422*x3423)));
evalcond[1]=((((-1.0)*r22*x3423))+((r21*x3426))+(((-1.0)*x3422*x3424)));
evalcond[2]=((((-1.0)*r12*x3423))+cj0+(((-1.0)*x3421*x3424))+((r11*x3426)));
evalcond[3]=((((-1.0)*x3420*x3423))+((r02*x3418))+(((-1.0)*cj0))+((r01*x3425)));
evalcond[4]=(((r12*x3418))+(((-1.0)*x3421*x3423))+((r11*x3425))+(((-1.0)*x3419)));
evalcond[5]=((((-1.0)*x3420*x3424))+(((-1.0)*r02*x3423))+((r01*x3426))+(((-1.0)*x3419)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3427 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3427.valid){
continue;
}
CheckValue<IkReal> x3428=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3427.value)+(((1.5707963267949)*(x3428.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3429=IKcos(j4);
IkReal x3430=IKsin(j4);
IkReal x3431=((1.0)*sj0);
IkReal x3432=(cj5*r00);
IkReal x3433=(cj5*r10);
IkReal x3434=(cj5*r20);
IkReal x3435=((1.0)*x3429);
IkReal x3436=((1.0)*x3430);
IkReal x3437=(sj5*x3429);
IkReal x3438=(sj5*x3430);
evalcond[0]=((((-1.0)*x3434*x3435))+((r21*x3437))+((r22*x3430)));
evalcond[1]=((((-1.0)*x3434*x3436))+(((-1.0)*r22*x3435))+((r21*x3438)));
evalcond[2]=((((-1.0)*r12*x3435))+cj0+(((-1.0)*x3433*x3436))+((r11*x3438)));
evalcond[3]=(((r01*x3437))+(((-1.0)*x3432*x3435))+((r02*x3430))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3433*x3435))+(((-1.0)*x3431))+((r12*x3430))+((r11*x3437)));
evalcond[5]=(((r01*x3438))+(((-1.0)*x3432*x3436))+(((-1.0)*x3431))+(((-1.0)*r02*x3435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3439=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3439;
j4eval[1]=IKsign(x3439);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3440=((1.0)*cj5);
IkReal x3441=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3440)));
j4eval[0]=x3441;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3440))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3441);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3442=cj5*cj5;
IkReal x3443=((1.0)*r20);
IkReal x3444=(r01*r21);
IkReal x3445=(r21*sj5);
IkReal x3446=(((cj5*r01*r20*sj5))+((x3442*x3444))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3442*x3443))+(((-1.0)*x3444))+((cj5*r00*x3445)));
j4eval[0]=x3446;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3445))+(((-1.0)*cj0*cj5*x3443))))));
j4eval[2]=IKsign(x3446);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3447=cj5*cj5;
IkReal x3448=((1.0)*r20);
IkReal x3449=(r01*r21);
IkReal x3450=(r21*sj5);
CheckValue<IkReal> x3451 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3448))+((cj0*x3450)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3451.valid){
continue;
}
CheckValue<IkReal> x3452=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3447*x3449))+(((-1.0)*r02*r22))+(((-1.0)*x3449))+(((-1.0)*r00*x3447*x3448))+((cj5*r00*x3450)))),-1);
if(!x3452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3451.value)+(((1.5707963267949)*(x3452.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3453=IKcos(j4);
IkReal x3454=IKsin(j4);
IkReal x3455=(cj5*r00);
IkReal x3456=(cj5*r10);
IkReal x3457=(cj5*r20);
IkReal x3458=((1.0)*x3453);
IkReal x3459=((1.0)*x3454);
IkReal x3460=(sj5*x3453);
IkReal x3461=(sj5*x3454);
evalcond[0]=((((-1.0)*x3457*x3458))+((r22*x3454))+((r21*x3460)));
evalcond[1]=((((-1.0)*x3457*x3459))+((r21*x3461))+(((-1.0)*r22*x3458)));
evalcond[2]=(cj0+((r01*x3460))+((r02*x3454))+(((-1.0)*x3455*x3458)));
evalcond[3]=(sj0+((r12*x3454))+((r11*x3460))+(((-1.0)*x3456*x3458)));
evalcond[4]=(cj0+((r11*x3461))+(((-1.0)*r12*x3458))+(((-1.0)*x3456*x3459)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3461))+(((-1.0)*x3455*x3459))+(((-1.0)*r02*x3458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3462=((1.0)*cj5);
CheckValue<IkReal> x3463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3462)))),-1);
if(!x3463.valid){
continue;
}
CheckValue<IkReal> x3464 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3462)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3463.value)))+(x3464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3465=IKcos(j4);
IkReal x3466=IKsin(j4);
IkReal x3467=(cj5*r00);
IkReal x3468=(cj5*r10);
IkReal x3469=(cj5*r20);
IkReal x3470=((1.0)*x3465);
IkReal x3471=((1.0)*x3466);
IkReal x3472=(sj5*x3465);
IkReal x3473=(sj5*x3466);
evalcond[0]=((((-1.0)*x3469*x3470))+((r21*x3472))+((r22*x3466)));
evalcond[1]=((((-1.0)*x3469*x3471))+(((-1.0)*r22*x3470))+((r21*x3473)));
evalcond[2]=((((-1.0)*x3467*x3470))+cj0+((r01*x3472))+((r02*x3466)));
evalcond[3]=(sj0+((r12*x3466))+((r11*x3472))+(((-1.0)*x3468*x3470)));
evalcond[4]=(cj0+(((-1.0)*r12*x3470))+((r11*x3473))+(((-1.0)*x3468*x3471)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3467*x3471))+(((-1.0)*r02*x3470))+((r01*x3473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3474 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3474.valid){
continue;
}
CheckValue<IkReal> x3475=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3474.value)+(((1.5707963267949)*(x3475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3476=IKcos(j4);
IkReal x3477=IKsin(j4);
IkReal x3478=(cj5*r00);
IkReal x3479=(cj5*r10);
IkReal x3480=(cj5*r20);
IkReal x3481=((1.0)*x3476);
IkReal x3482=((1.0)*x3477);
IkReal x3483=(sj5*x3476);
IkReal x3484=(sj5*x3477);
evalcond[0]=(((r21*x3483))+((r22*x3477))+(((-1.0)*x3480*x3481)));
evalcond[1]=((((-1.0)*r22*x3481))+((r21*x3484))+(((-1.0)*x3480*x3482)));
evalcond[2]=(cj0+((r01*x3483))+((r02*x3477))+(((-1.0)*x3478*x3481)));
evalcond[3]=(sj0+(((-1.0)*x3479*x3481))+((r12*x3477))+((r11*x3483)));
evalcond[4]=(cj0+(((-1.0)*r12*x3481))+(((-1.0)*x3479*x3482))+((r11*x3484)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3481))+((r01*x3484))+(((-1.0)*x3478*x3482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3485=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3485;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3486=((1.0)*cj5);
IkReal x3487=((((-1.0)*r01*x3486))+(((-1.0)*r00*sj5)));
j4eval[0]=x3487;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3486))))));
j4eval[2]=IKsign(x3487);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3488=((1.0)*cj5);
IkReal x3489=((((-1.0)*r01*x3488))+(((-1.0)*r00*sj5)));
j4eval[0]=x3489;
j4eval[1]=IKsign(x3489);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3488))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3490=((1.0)*cj5);
CheckValue<IkReal> x3491=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3490)))),-1);
if(!x3491.valid){
continue;
}
CheckValue<IkReal> x3492 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3490))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3491.value)))+(x3492.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3493=IKcos(j4);
IkReal x3494=IKsin(j4);
IkReal x3495=((1.0)*sj0);
IkReal x3496=(cj5*r00);
IkReal x3497=(cj5*r10);
IkReal x3498=(cj5*r20);
IkReal x3499=((1.0)*x3493);
IkReal x3500=((1.0)*x3494);
IkReal x3501=(sj5*x3493);
IkReal x3502=(sj5*x3494);
evalcond[0]=((((-1.0)*x3498*x3499))+((r22*x3494))+((r21*x3501)));
evalcond[1]=((((-1.0)*r22*x3499))+(((-1.0)*x3498*x3500))+((r21*x3502)));
evalcond[2]=((((-1.0)*r12*x3499))+cj0+((r11*x3502))+(((-1.0)*x3497*x3500)));
evalcond[3]=(((r01*x3501))+(((-1.0)*x3496*x3499))+((r02*x3494))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3497*x3499))+(((-1.0)*x3495))+((r11*x3501))+((r12*x3494)));
evalcond[5]=(((r01*x3502))+(((-1.0)*r02*x3499))+(((-1.0)*x3495))+(((-1.0)*x3496*x3500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3503=((1.0)*cj5);
CheckValue<IkReal> x3504=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3503)))),-1);
if(!x3504.valid){
continue;
}
CheckValue<IkReal> x3505 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3503)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3505.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3504.value)))+(x3505.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3506=IKcos(j4);
IkReal x3507=IKsin(j4);
IkReal x3508=((1.0)*sj0);
IkReal x3509=(cj5*r00);
IkReal x3510=(cj5*r10);
IkReal x3511=(cj5*r20);
IkReal x3512=((1.0)*x3506);
IkReal x3513=((1.0)*x3507);
IkReal x3514=(sj5*x3506);
IkReal x3515=(sj5*x3507);
evalcond[0]=(((r21*x3514))+(((-1.0)*x3511*x3512))+((r22*x3507)));
evalcond[1]=(((r21*x3515))+(((-1.0)*x3511*x3513))+(((-1.0)*r22*x3512)));
evalcond[2]=(cj0+(((-1.0)*x3510*x3513))+((r11*x3515))+(((-1.0)*r12*x3512)));
evalcond[3]=((((-1.0)*x3509*x3512))+((r01*x3514))+((r02*x3507))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3508))+(((-1.0)*x3510*x3512))+((r12*x3507))+((r11*x3514)));
evalcond[5]=((((-1.0)*r02*x3512))+(((-1.0)*x3509*x3513))+((r01*x3515))+(((-1.0)*x3508)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3516 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3516.valid){
continue;
}
CheckValue<IkReal> x3517=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3516.value)+(((1.5707963267949)*(x3517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3518=IKcos(j4);
IkReal x3519=IKsin(j4);
IkReal x3520=((1.0)*sj0);
IkReal x3521=(cj5*r00);
IkReal x3522=(cj5*r10);
IkReal x3523=(cj5*r20);
IkReal x3524=((1.0)*x3518);
IkReal x3525=((1.0)*x3519);
IkReal x3526=(sj5*x3518);
IkReal x3527=(sj5*x3519);
evalcond[0]=(((r21*x3526))+((r22*x3519))+(((-1.0)*x3523*x3524)));
evalcond[1]=(((r21*x3527))+(((-1.0)*r22*x3524))+(((-1.0)*x3523*x3525)));
evalcond[2]=((((-1.0)*x3522*x3525))+cj0+((r11*x3527))+(((-1.0)*r12*x3524)));
evalcond[3]=(((r01*x3526))+((r02*x3519))+(((-1.0)*x3521*x3524))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3522*x3524))+(((-1.0)*x3520))+((r11*x3526))+((r12*x3519)));
evalcond[5]=((((-1.0)*r02*x3524))+((r01*x3527))+(((-1.0)*x3520))+(((-1.0)*x3521*x3525)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3528=(r00*sj5);
IkReal x3529=(cj5*r01);
IkReal x3530=(sj1*sj2);
IkReal x3531=(cj1*cj2);
IkReal x3532=((20000.0)*px);
IkReal x3533=((8500.0)*cj1);
IkReal x3534=((9738.0)*x3531);
CheckValue<IkReal> x3535=IKPowWithIntegerCheck(((((-2183.0)*x3531))+(((2183.0)*x3530))),-1);
if(!x3535.valid){
continue;
}
CheckValue<IkReal> x3536=IKPowWithIntegerCheck((x3530+(((-1.0)*x3531))),-1);
if(!x3536.valid){
continue;
}
if( IKabs(((x3535.value)*(((((-9738.0)*x3528*x3530))+((x3531*x3532))+(((-9738.0)*x3529*x3530))+(((-1.0)*x3530*x3532))+((x3529*x3533))+((x3529*x3534))+((x3528*x3534))+((x3528*x3533)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3536.value)*((x3528+x3529)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3535.value)*(((((-9738.0)*x3528*x3530))+((x3531*x3532))+(((-9738.0)*x3529*x3530))+(((-1.0)*x3530*x3532))+((x3529*x3533))+((x3529*x3534))+((x3528*x3534))+((x3528*x3533))))))+IKsqr(((x3536.value)*((x3528+x3529))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3535.value)*(((((-9738.0)*x3528*x3530))+((x3531*x3532))+(((-9738.0)*x3529*x3530))+(((-1.0)*x3530*x3532))+((x3529*x3533))+((x3529*x3534))+((x3528*x3534))+((x3528*x3533))))), ((x3536.value)*((x3528+x3529))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3537=IKcos(j0);
IkReal x3538=IKsin(j0);
IkReal x3539=(cj5*r11);
IkReal x3540=(cj5*r01);
IkReal x3541=((1.0)*sj5);
IkReal x3542=((0.09465)*sj5);
IkReal x3543=(sj1*sj2);
IkReal x3544=((0.39225)*cj2);
IkReal x3545=((1.0)*cj2);
IkReal x3546=((0.39225)*x3543);
IkReal x3547=(cj1*x3537);
IkReal x3548=(cj1*x3538);
evalcond[0]=((((-1.0)*x3545*x3547))+(((-1.0)*r00*x3541))+(((-1.0)*x3540))+((x3537*x3543)));
evalcond[1]=((((-1.0)*x3545*x3548))+(((-1.0)*r10*x3541))+((x3538*x3543))+(((-1.0)*x3539)));
evalcond[2]=((((-0.09465)*x3540))+(((0.425)*x3547))+(((-1.0)*r00*x3542))+(((-1.0)*px))+(((-0.10915)*x3538))+((x3544*x3547))+(((-1.0)*x3537*x3546)));
evalcond[3]=((((0.425)*x3548))+(((-0.09465)*x3539))+(((-1.0)*x3538*x3546))+(((-1.0)*r10*x3542))+(((-1.0)*py))+((x3544*x3548))+(((0.10915)*x3537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3549=((1.0)*cj5);
IkReal x3550=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3549)));
j4eval[0]=x3550;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3549))))));
j4eval[2]=IKsign(x3550);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3551=((1.0)*cj5);
IkReal x3552=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3551)));
j4eval[0]=x3552;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x3551))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x3552);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3553=((1.0)*sj0);
IkReal x3554=((1.0)*cj0);
IkReal x3555=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3555;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x3554))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3553)))))+(IKabs(((((-1.0)*r12*x3553))+(((-1.0)*r02*x3554))))));
j4eval[2]=IKsign(x3555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3556=((-1.0)*r20);
IkReal x3558 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3558)==0){
continue;
}
IkReal x3557=pow(x3558,-0.5);
CheckValue<IkReal> x3559 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3556),IKFAST_ATAN2_MAGTHRESH);
if(!x3559.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3559.value));
IkReal gconst97=(r21*x3557);
IkReal gconst98=(x3556*x3557);
CheckValue<IkReal> x3560 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3560.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3560.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3561=((-1.0)*r20);
IkReal x3562=x3557;
CheckValue<IkReal> x3564 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3561),IKFAST_ATAN2_MAGTHRESH);
if(!x3564.valid){
continue;
}
IkReal x3563=((-1.0)*(x3564.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3563;
IkReal gconst96=x3563;
IkReal gconst97=(r21*x3562);
IkReal gconst98=(x3561*x3562);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3565=((-1.0)*r20);
IkReal x3566=x3557;
CheckValue<IkReal> x3568 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3565),IKFAST_ATAN2_MAGTHRESH);
if(!x3568.valid){
continue;
}
IkReal x3567=((-1.0)*(x3568.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3567;
IkReal gconst96=x3567;
IkReal gconst97=(r21*x3566);
IkReal gconst98=(x3565*x3566);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3569=((-1.0)*r20);
IkReal x3570=x3557;
CheckValue<IkReal> x3572 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3569),IKFAST_ATAN2_MAGTHRESH);
if(!x3572.valid){
continue;
}
IkReal x3571=((-1.0)*(x3572.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3571;
IkReal gconst96=x3571;
IkReal gconst97=(r21*x3570);
IkReal gconst98=(x3569*x3570);
IkReal x3573=((1.0)*(r22*r22));
CheckValue<IkReal> x3577=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3573))),-1);
if(!x3577.valid){
continue;
}
IkReal x3574=x3577.value;
IkReal x3575=((1.0)*x3574);
IkReal x3576=((((-2.0)*x3574*(r20*r20)*(r21*r21)))+(((-1.0)*x3573))+(((-1.0)*x3575*(r20*r20*r20*r20)))+(((-1.0)*x3575*(r21*r21*r21*r21))));
j4eval[0]=x3576;
j4eval[1]=IKsign(x3576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3578=(cj1*cj2);
IkReal x3579=(gconst98*r20);
IkReal x3580=(sj1*sj2);
IkReal x3581=(gconst97*r21);
CheckValue<IkReal> x3582 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3578))+((r22*x3580)))),IkReal((((x3578*x3579))+(((-1.0)*x3578*x3581))+((x3580*x3581))+(((-1.0)*x3579*x3580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3582.valid){
continue;
}
CheckValue<IkReal> x3583=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3579*x3579)))+(((2.0)*x3579*x3581))+(((-1.0)*(r22*r22)))+(((-1.0)*(x3581*x3581))))),-1);
if(!x3583.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3582.value)+(((1.5707963267949)*(x3583.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3584=IKsin(j4);
IkReal x3585=IKcos(j4);
IkReal x3586=(gconst98*r10);
IkReal x3587=(gconst97*r21);
IkReal x3588=(gconst98*r20);
IkReal x3589=((1.0)*cj2);
IkReal x3590=((1.0)*sj0);
IkReal x3591=(gconst98*r00);
IkReal x3592=(cj1*sj2);
IkReal x3593=((1.0)*x3585);
IkReal x3594=((1.0)*x3584);
IkReal x3595=(gconst97*x3584);
IkReal x3596=(gconst97*x3585);
evalcond[0]=(((x3584*x3587))+(((-1.0)*r22*x3593))+(((-1.0)*x3588*x3594)));
evalcond[1]=(cj0+((r11*x3595))+(((-1.0)*x3586*x3594))+(((-1.0)*r12*x3593)));
evalcond[2]=((((-1.0)*r02*x3593))+(((-1.0)*x3591*x3594))+((r01*x3595))+(((-1.0)*x3590)));
evalcond[3]=(((x3585*x3587))+((sj1*sj2))+(((-1.0)*cj1*x3589))+(((-1.0)*x3588*x3593))+((r22*x3584)));
evalcond[4]=((((-1.0)*cj0*sj1*x3589))+((r02*x3584))+(((-1.0)*cj0*x3592))+(((-1.0)*x3591*x3593))+((r01*x3596)));
evalcond[5]=(((r12*x3584))+((r11*x3596))+(((-1.0)*x3590*x3592))+(((-1.0)*x3586*x3593))+(((-1.0)*sj0*sj1*x3589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3597=((1.0)*gconst98);
CheckValue<IkReal> x3598 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3598.valid){
continue;
}
CheckValue<IkReal> x3599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3597))+(((-1.0)*gconst97*r10)))),-1);
if(!x3599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3598.value)+(((1.5707963267949)*(x3599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3600=IKsin(j4);
IkReal x3601=IKcos(j4);
IkReal x3602=(gconst98*r10);
IkReal x3603=(gconst97*r21);
IkReal x3604=(gconst98*r20);
IkReal x3605=((1.0)*cj2);
IkReal x3606=((1.0)*sj0);
IkReal x3607=(gconst98*r00);
IkReal x3608=(cj1*sj2);
IkReal x3609=((1.0)*x3601);
IkReal x3610=((1.0)*x3600);
IkReal x3611=(gconst97*x3600);
IkReal x3612=(gconst97*x3601);
evalcond[0]=(((x3600*x3603))+(((-1.0)*r22*x3609))+(((-1.0)*x3604*x3610)));
evalcond[1]=(((r11*x3611))+cj0+(((-1.0)*r12*x3609))+(((-1.0)*x3602*x3610)));
evalcond[2]=((((-1.0)*r02*x3609))+(((-1.0)*x3607*x3610))+((r01*x3611))+(((-1.0)*x3606)));
evalcond[3]=(((r22*x3600))+((sj1*sj2))+((x3601*x3603))+(((-1.0)*cj1*x3605))+(((-1.0)*x3604*x3609)));
evalcond[4]=(((r02*x3600))+(((-1.0)*x3607*x3609))+((r01*x3612))+(((-1.0)*cj0*x3608))+(((-1.0)*cj0*sj1*x3605)));
evalcond[5]=(((r11*x3612))+(((-1.0)*x3606*x3608))+(((-1.0)*x3602*x3609))+(((-1.0)*sj0*sj1*x3605))+((r12*x3600)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3613=((1.0)*gconst98);
CheckValue<IkReal> x3614 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst97*r21))+(((-1.0)*cj0*r20*x3613)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3614.valid){
continue;
}
CheckValue<IkReal> x3615=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3613))+(((-1.0)*gconst97*r00)))),-1);
if(!x3615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3614.value)+(((1.5707963267949)*(x3615.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3616=IKsin(j4);
IkReal x3617=IKcos(j4);
IkReal x3618=(gconst98*r10);
IkReal x3619=(gconst97*r21);
IkReal x3620=(gconst98*r20);
IkReal x3621=((1.0)*cj2);
IkReal x3622=((1.0)*sj0);
IkReal x3623=(gconst98*r00);
IkReal x3624=(cj1*sj2);
IkReal x3625=((1.0)*x3617);
IkReal x3626=((1.0)*x3616);
IkReal x3627=(gconst97*x3616);
IkReal x3628=(gconst97*x3617);
evalcond[0]=(((x3616*x3619))+(((-1.0)*r22*x3625))+(((-1.0)*x3620*x3626)));
evalcond[1]=(cj0+(((-1.0)*r12*x3625))+((r11*x3627))+(((-1.0)*x3618*x3626)));
evalcond[2]=((((-1.0)*x3622))+((r01*x3627))+(((-1.0)*x3623*x3626))+(((-1.0)*r02*x3625)));
evalcond[3]=(((r22*x3616))+((sj1*sj2))+((x3617*x3619))+(((-1.0)*cj1*x3621))+(((-1.0)*x3620*x3625)));
evalcond[4]=(((r02*x3616))+((r01*x3628))+(((-1.0)*cj0*x3624))+(((-1.0)*x3623*x3625))+(((-1.0)*cj0*sj1*x3621)));
evalcond[5]=((((-1.0)*x3622*x3624))+((r11*x3628))+(((-1.0)*x3618*x3625))+(((-1.0)*sj0*sj1*x3621))+((r12*x3616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3629=((-1.0)*r21);
IkReal x3631 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3631)==0){
continue;
}
IkReal x3630=pow(x3631,-0.5);
CheckValue<IkReal> x3632 = IKatan2WithCheck(IkReal(x3629),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3632.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3632.value))));
IkReal gconst100=(x3629*x3630);
IkReal gconst101=((1.0)*r20*x3630);
CheckValue<IkReal> x3633 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3633.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3633.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3634=((-1.0)*r21);
CheckValue<IkReal> x3637 = IKatan2WithCheck(IkReal(x3634),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3637.valid){
continue;
}
IkReal x3635=((1.0)*(x3637.value));
IkReal x3636=x3630;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3635)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3635)));
IkReal gconst100=(x3634*x3636);
IkReal gconst101=((1.0)*r20*x3636);
IkReal x3638=r22*r22;
IkReal x3639=((1.0)*x3638);
CheckValue<IkReal> x3643=IKPowWithIntegerCheck(((-1.0)+x3638),-1);
if(!x3643.valid){
continue;
}
IkReal x3640=x3643.value;
if((((1.0)+(((-1.0)*x3639)))) < -0.00001)
continue;
IkReal x3641=IKsqrt(((1.0)+(((-1.0)*x3639))));
IkReal x3642=(cj0*x3640*x3641);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x3639*x3642))+x3642))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3644=((-1.0)*r21);
CheckValue<IkReal> x3647 = IKatan2WithCheck(IkReal(x3644),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3647.valid){
continue;
}
IkReal x3645=((1.0)*(x3647.value));
IkReal x3646=x3630;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3645)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3645)));
IkReal gconst100=(x3644*x3646);
IkReal gconst101=((1.0)*r20*x3646);
IkReal x3648=r22*r22;
IkReal x3649=((1.0)*x3648);
CheckValue<IkReal> x3653=IKPowWithIntegerCheck(((-1.0)+x3648),-1);
if(!x3653.valid){
continue;
}
IkReal x3650=x3653.value;
if((((1.0)+(((-1.0)*x3649)))) < -0.00001)
continue;
IkReal x3651=IKsqrt(((1.0)+(((-1.0)*x3649))));
IkReal x3652=(sj0*x3650*x3651);
j4eval[0]=((IKabs((x3652+(((-1.0)*x3649*x3652)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3654=((-1.0)*r21);
CheckValue<IkReal> x3657 = IKatan2WithCheck(IkReal(x3654),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3657.valid){
continue;
}
IkReal x3655=((1.0)*(x3657.value));
IkReal x3656=x3630;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3655)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3655)));
IkReal gconst100=(x3654*x3656);
IkReal gconst101=((1.0)*r20*x3656);
IkReal x3658=r22*r22;
IkReal x3659=(r12*sj0);
IkReal x3660=(cj0*r02);
CheckValue<IkReal> x3664=IKPowWithIntegerCheck(((-1.0)+x3658),-1);
if(!x3664.valid){
continue;
}
IkReal x3661=x3664.value;
if((((1.0)+(((-1.0)*x3658)))) < -0.00001)
continue;
IkReal x3662=IKsqrt(((1.0)+(((-1.0)*x3658))));
IkReal x3663=(r22*x3661*x3662);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3659*x3663))+((x3660*x3663)))))+(IKabs(((((-1.0)*x3660))+(((-1.0)*x3659))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3665=((1.0)*sj0);
IkReal x3666=((1.0)*gconst100);
CheckValue<IkReal> x3667 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3665)))),IkReal(((((-1.0)*gconst100*r11*x3665))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x3666)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3667.valid){
continue;
}
CheckValue<IkReal> x3668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3666))+(((-1.0)*gconst101*r21)))),-1);
if(!x3668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3667.value)+(((1.5707963267949)*(x3668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3669=IKsin(j4);
IkReal x3670=IKcos(j4);
IkReal x3671=(gconst101*r20);
IkReal x3672=(gconst101*r10);
IkReal x3673=((1.0)*cj2);
IkReal x3674=(gconst101*r00);
IkReal x3675=((1.0)*sj0);
IkReal x3676=(cj1*sj2);
IkReal x3677=((1.0)*x3670);
IkReal x3678=((1.0)*x3669);
IkReal x3679=(gconst100*x3669);
IkReal x3680=(gconst100*x3670);
evalcond[0]=((((-1.0)*x3671*x3678))+((r21*x3679))+(((-1.0)*r22*x3677)));
evalcond[1]=(cj0+((r11*x3679))+(((-1.0)*x3672*x3678))+(((-1.0)*r12*x3677)));
evalcond[2]=(((r01*x3679))+(((-1.0)*r02*x3677))+(((-1.0)*x3675))+(((-1.0)*x3674*x3678)));
evalcond[3]=(((r22*x3669))+((r21*x3680))+(((-1.0)*x3671*x3677))+((sj1*sj2))+(((-1.0)*cj1*x3673)));
evalcond[4]=(((r01*x3680))+(((-1.0)*cj0*x3676))+((r02*x3669))+(((-1.0)*cj0*sj1*x3673))+(((-1.0)*x3674*x3677)));
evalcond[5]=(((r12*x3669))+(((-1.0)*x3672*x3677))+((r11*x3680))+(((-1.0)*x3675*x3676))+(((-1.0)*sj0*sj1*x3673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3681=((1.0)*gconst101);
CheckValue<IkReal> x3682 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3681))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3682.valid){
continue;
}
CheckValue<IkReal> x3683=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3681)))),-1);
if(!x3683.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3682.value)+(((1.5707963267949)*(x3683.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3684=IKsin(j4);
IkReal x3685=IKcos(j4);
IkReal x3686=(gconst101*r20);
IkReal x3687=(gconst101*r10);
IkReal x3688=((1.0)*cj2);
IkReal x3689=(gconst101*r00);
IkReal x3690=((1.0)*sj0);
IkReal x3691=(cj1*sj2);
IkReal x3692=((1.0)*x3685);
IkReal x3693=((1.0)*x3684);
IkReal x3694=(gconst100*x3684);
IkReal x3695=(gconst100*x3685);
evalcond[0]=((((-1.0)*x3686*x3693))+(((-1.0)*r22*x3692))+((r21*x3694)));
evalcond[1]=(cj0+(((-1.0)*r12*x3692))+(((-1.0)*x3687*x3693))+((r11*x3694)));
evalcond[2]=(((r01*x3694))+(((-1.0)*x3689*x3693))+(((-1.0)*r02*x3692))+(((-1.0)*x3690)));
evalcond[3]=((((-1.0)*x3686*x3692))+((sj1*sj2))+((r21*x3695))+(((-1.0)*cj1*x3688))+((r22*x3684)));
evalcond[4]=(((r01*x3695))+(((-1.0)*cj0*x3691))+(((-1.0)*x3689*x3692))+((r02*x3684))+(((-1.0)*cj0*sj1*x3688)));
evalcond[5]=((((-1.0)*sj0*sj1*x3688))+(((-1.0)*x3687*x3692))+((r12*x3684))+((r11*x3695))+(((-1.0)*x3690*x3691)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3696=((1.0)*gconst101);
CheckValue<IkReal> x3697=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3696)))),-1);
if(!x3697.valid){
continue;
}
CheckValue<IkReal> x3698 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3698.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3697.value)))+(x3698.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3699=IKsin(j4);
IkReal x3700=IKcos(j4);
IkReal x3701=(gconst101*r20);
IkReal x3702=(gconst101*r10);
IkReal x3703=((1.0)*cj2);
IkReal x3704=(gconst101*r00);
IkReal x3705=((1.0)*sj0);
IkReal x3706=(cj1*sj2);
IkReal x3707=((1.0)*x3700);
IkReal x3708=((1.0)*x3699);
IkReal x3709=(gconst100*x3699);
IkReal x3710=(gconst100*x3700);
evalcond[0]=((((-1.0)*x3701*x3708))+((r21*x3709))+(((-1.0)*r22*x3707)));
evalcond[1]=(cj0+((r11*x3709))+(((-1.0)*r12*x3707))+(((-1.0)*x3702*x3708)));
evalcond[2]=((((-1.0)*r02*x3707))+((r01*x3709))+(((-1.0)*x3704*x3708))+(((-1.0)*x3705)));
evalcond[3]=((((-1.0)*cj1*x3703))+(((-1.0)*x3701*x3707))+((sj1*sj2))+((r22*x3699))+((r21*x3710)));
evalcond[4]=((((-1.0)*cj0*x3706))+(((-1.0)*cj0*sj1*x3703))+((r02*x3699))+(((-1.0)*x3704*x3707))+((r01*x3710)));
evalcond[5]=(((r11*x3710))+(((-1.0)*x3705*x3706))+(((-1.0)*sj0*sj1*x3703))+(((-1.0)*x3702*x3707))+((r12*x3699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3711=((-1.0)*r10);
IkReal x3713 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3713)==0){
continue;
}
IkReal x3712=pow(x3713,-0.5);
CheckValue<IkReal> x3714 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3711),IKFAST_ATAN2_MAGTHRESH);
if(!x3714.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3714.value));
IkReal gconst103=(r11*x3712);
IkReal gconst104=(x3711*x3712);
CheckValue<IkReal> x3715 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3715.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3715.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3716=((-1.0)*r10);
IkReal x3717=x3712;
CheckValue<IkReal> x3719 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3716),IKFAST_ATAN2_MAGTHRESH);
if(!x3719.valid){
continue;
}
IkReal x3718=((-1.0)*(x3719.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3718;
IkReal gconst102=x3718;
IkReal gconst103=(r11*x3717);
IkReal gconst104=(x3716*x3717);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3720=((1.0)*sj0);
IkReal x3721=((1.0)*gconst103);
CheckValue<IkReal> x3722=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3721)))),-1);
if(!x3722.valid){
continue;
}
CheckValue<IkReal> x3723 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3720))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3721))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3720))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3723.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3722.value)))+(x3723.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3724=IKsin(j4);
IkReal x3725=IKcos(j4);
IkReal x3726=(gconst103*r11);
IkReal x3727=((1.0)*cj2);
IkReal x3728=((1.0)*sj0);
IkReal x3729=(cj1*sj2);
IkReal x3730=((1.0)*x3725);
IkReal x3731=(gconst103*x3725);
IkReal x3732=(gconst103*x3724);
IkReal x3733=((1.0)*gconst104*x3724);
evalcond[0]=((((-1.0)*r20*x3733))+(((-1.0)*r22*x3730))+((r21*x3732)));
evalcond[1]=(cj0+(((-1.0)*r12*x3730))+((x3724*x3726))+(((-1.0)*r10*x3733)));
evalcond[2]=(((r01*x3732))+(((-1.0)*x3728))+(((-1.0)*r00*x3733))+(((-1.0)*r02*x3730)));
evalcond[3]=((((-1.0)*cj1*x3727))+((r22*x3724))+((sj1*sj2))+(((-1.0)*gconst104*r20*x3730))+((r21*x3731)));
evalcond[4]=((((-1.0)*gconst104*r00*x3730))+((r01*x3731))+(((-1.0)*cj0*x3729))+((r02*x3724))+(((-1.0)*cj0*sj1*x3727)));
evalcond[5]=((((-1.0)*sj0*sj1*x3727))+((x3725*x3726))+((r12*x3724))+(((-1.0)*x3728*x3729))+(((-1.0)*gconst104*r10*x3730)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3734=((1.0)*gconst104);
CheckValue<IkReal> x3735=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3734)))),-1);
if(!x3735.valid){
continue;
}
CheckValue<IkReal> x3736 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3734))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3736.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3735.value)))+(x3736.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3737=IKsin(j4);
IkReal x3738=IKcos(j4);
IkReal x3739=(gconst103*r11);
IkReal x3740=((1.0)*cj2);
IkReal x3741=((1.0)*sj0);
IkReal x3742=(cj1*sj2);
IkReal x3743=((1.0)*x3738);
IkReal x3744=(gconst103*x3738);
IkReal x3745=(gconst103*x3737);
IkReal x3746=((1.0)*gconst104*x3737);
evalcond[0]=((((-1.0)*r22*x3743))+(((-1.0)*r20*x3746))+((r21*x3745)));
evalcond[1]=(cj0+(((-1.0)*r12*x3743))+(((-1.0)*r10*x3746))+((x3737*x3739)));
evalcond[2]=(((r01*x3745))+(((-1.0)*r00*x3746))+(((-1.0)*x3741))+(((-1.0)*r02*x3743)));
evalcond[3]=((((-1.0)*gconst104*r20*x3743))+((sj1*sj2))+((r22*x3737))+((r21*x3744))+(((-1.0)*cj1*x3740)));
evalcond[4]=((((-1.0)*gconst104*r00*x3743))+((r01*x3744))+(((-1.0)*cj0*x3742))+((r02*x3737))+(((-1.0)*cj0*sj1*x3740)));
evalcond[5]=(((x3738*x3739))+(((-1.0)*sj0*sj1*x3740))+((r12*x3737))+(((-1.0)*x3741*x3742))+(((-1.0)*gconst104*r10*x3743)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3747=((-1.0)*r11);
IkReal x3749 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3749)==0){
continue;
}
IkReal x3748=pow(x3749,-0.5);
CheckValue<IkReal> x3750 = IKatan2WithCheck(IkReal(x3747),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3750.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3750.value))));
IkReal gconst106=(x3747*x3748);
IkReal gconst107=((1.0)*r10*x3748);
CheckValue<IkReal> x3751 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3751.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3751.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3752=((-1.0)*r11);
CheckValue<IkReal> x3755 = IKatan2WithCheck(IkReal(x3752),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3755.valid){
continue;
}
IkReal x3753=((1.0)*(x3755.value));
IkReal x3754=x3748;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3753)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3753)));
IkReal gconst106=(x3752*x3754);
IkReal gconst107=((1.0)*r10*x3754);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3756=((-1.0)*r11);
CheckValue<IkReal> x3759 = IKatan2WithCheck(IkReal(x3756),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3759.valid){
continue;
}
IkReal x3757=((1.0)*(x3759.value));
IkReal x3758=x3748;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3757)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3757)));
IkReal gconst106=(x3756*x3758);
IkReal gconst107=((1.0)*r10*x3758);
IkReal x3760=r12*r12;
IkReal x3761=((1.0)*sj0);
IkReal x3762=(cj0*r02);
IkReal x3763=x3748;
j4eval[0]=((IKabs(((((-1.0)*x3762))+(((-1.0)*r12*x3761)))))+(IKabs(((((-1.0)*x3761*x3763))+((r12*x3762*x3763))+((sj0*x3760*x3763))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3764=((-1.0)*r11);
CheckValue<IkReal> x3767 = IKatan2WithCheck(IkReal(x3764),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3767.valid){
continue;
}
IkReal x3765=((1.0)*(x3767.value));
IkReal x3766=x3748;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3765)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3765)));
IkReal gconst106=(x3764*x3766);
IkReal gconst107=((1.0)*r10*x3766);
IkReal x3768=r12*r12;
IkReal x3769=((1.0)+(((-1.0)*x3768)));
IkReal x3770=(r22*sj1*sj2);
IkReal x3771=(cj1*cj2*r22);
CheckValue<IkReal> x3778=IKPowWithIntegerCheck(x3769,-1);
if(!x3778.valid){
continue;
}
IkReal x3772=x3778.value;
CheckValue<IkReal> x3779=IKPowWithIntegerCheck(((-1.0)+x3768),-1);
if(!x3779.valid){
continue;
}
IkReal x3773=x3779.value;
IkReal x3774=((1.0)*x3772);
if((x3769) < -0.00001)
continue;
IkReal x3775=IKsqrt(x3769);
IkReal x3776=(r12*x3773*x3775);
IkReal x3777=((((-2.0)*r10*r11*r20*r21*x3772))+(((-1.0)*x3774*(r10*r10)*(r20*r20)))+(((-1.0)*x3774*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22))));
j4eval[0]=x3777;
j4eval[1]=((IKabs(((((-1.0)*x3771))+x3770)))+(IKabs(((((-1.0)*x3770*x3776))+((x3771*x3776))))));
j4eval[2]=IKsign(x3777);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3780=(sj1*sj2);
IkReal x3781=(gconst106*r21);
IkReal x3782=(gconst107*r20);
IkReal x3783=(cj1*cj2);
CheckValue<IkReal> x3784=IKPowWithIntegerCheck(IKsign(((((2.0)*x3781*x3782))+(((-1.0)*(x3782*x3782)))+(((-1.0)*(x3781*x3781)))+(((-1.0)*(r22*r22))))),-1);
if(!x3784.valid){
continue;
}
CheckValue<IkReal> x3785 = IKatan2WithCheck(IkReal((((r22*x3780))+(((-1.0)*r22*x3783)))),IkReal((((x3782*x3783))+(((-1.0)*x3780*x3782))+(((-1.0)*x3781*x3783))+((x3780*x3781)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3784.value)))+(x3785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3786=IKsin(j4);
IkReal x3787=IKcos(j4);
IkReal x3788=(gconst107*r10);
IkReal x3789=(gconst107*r00);
IkReal x3790=((1.0)*cj2);
IkReal x3791=(gconst107*r20);
IkReal x3792=((1.0)*sj0);
IkReal x3793=(cj1*sj2);
IkReal x3794=((1.0)*x3787);
IkReal x3795=(gconst106*x3787);
IkReal x3796=(gconst106*x3786);
IkReal x3797=((1.0)*x3786);
evalcond[0]=(((r21*x3796))+(((-1.0)*x3791*x3797))+(((-1.0)*r22*x3794)));
evalcond[1]=((((-1.0)*r12*x3794))+cj0+((r11*x3796))+(((-1.0)*x3788*x3797)));
evalcond[2]=((((-1.0)*x3792))+(((-1.0)*r02*x3794))+(((-1.0)*x3789*x3797))+((r01*x3796)));
evalcond[3]=(((r21*x3795))+((r22*x3786))+(((-1.0)*x3791*x3794))+((sj1*sj2))+(((-1.0)*cj1*x3790)));
evalcond[4]=(((r02*x3786))+(((-1.0)*cj0*sj1*x3790))+(((-1.0)*x3789*x3794))+(((-1.0)*cj0*x3793))+((r01*x3795)));
evalcond[5]=((((-1.0)*sj0*sj1*x3790))+((r12*x3786))+((r11*x3795))+(((-1.0)*x3792*x3793))+(((-1.0)*x3788*x3794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3798=((1.0)*sj0);
IkReal x3799=((1.0)*gconst106);
CheckValue<IkReal> x3800=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3799)))),-1);
if(!x3800.valid){
continue;
}
CheckValue<IkReal> x3801 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3798))+(((-1.0)*cj0*r02)))),IkReal((((gconst107*r10*sj0))+(((-1.0)*gconst106*r11*x3798))+(((-1.0)*cj0*r01*x3799))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3801.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3800.value)))+(x3801.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3802=IKsin(j4);
IkReal x3803=IKcos(j4);
IkReal x3804=(gconst107*r10);
IkReal x3805=(gconst107*r00);
IkReal x3806=((1.0)*cj2);
IkReal x3807=(gconst107*r20);
IkReal x3808=((1.0)*sj0);
IkReal x3809=(cj1*sj2);
IkReal x3810=((1.0)*x3803);
IkReal x3811=(gconst106*x3803);
IkReal x3812=(gconst106*x3802);
IkReal x3813=((1.0)*x3802);
evalcond[0]=((((-1.0)*r22*x3810))+(((-1.0)*x3807*x3813))+((r21*x3812)));
evalcond[1]=((((-1.0)*r12*x3810))+(((-1.0)*x3804*x3813))+cj0+((r11*x3812)));
evalcond[2]=((((-1.0)*r02*x3810))+(((-1.0)*x3808))+((r01*x3812))+(((-1.0)*x3805*x3813)));
evalcond[3]=((((-1.0)*x3807*x3810))+((r21*x3811))+((r22*x3802))+((sj1*sj2))+(((-1.0)*cj1*x3806)));
evalcond[4]=(((r02*x3802))+(((-1.0)*cj0*x3809))+(((-1.0)*cj0*sj1*x3806))+((r01*x3811))+(((-1.0)*x3805*x3810)));
evalcond[5]=((((-1.0)*sj0*sj1*x3806))+(((-1.0)*x3804*x3810))+((r11*x3811))+((r12*x3802))+(((-1.0)*x3808*x3809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3814=((1.0)*gconst107);
CheckValue<IkReal> x3815 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x3814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3815.valid){
continue;
}
CheckValue<IkReal> x3816=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3814))+(((-1.0)*gconst106*r00)))),-1);
if(!x3816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3815.value)+(((1.5707963267949)*(x3816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3817=IKsin(j4);
IkReal x3818=IKcos(j4);
IkReal x3819=(gconst107*r10);
IkReal x3820=(gconst107*r00);
IkReal x3821=((1.0)*cj2);
IkReal x3822=(gconst107*r20);
IkReal x3823=((1.0)*sj0);
IkReal x3824=(cj1*sj2);
IkReal x3825=((1.0)*x3818);
IkReal x3826=(gconst106*x3818);
IkReal x3827=(gconst106*x3817);
IkReal x3828=((1.0)*x3817);
evalcond[0]=((((-1.0)*r22*x3825))+(((-1.0)*x3822*x3828))+((r21*x3827)));
evalcond[1]=((((-1.0)*r12*x3825))+cj0+((r11*x3827))+(((-1.0)*x3819*x3828)));
evalcond[2]=((((-1.0)*r02*x3825))+(((-1.0)*x3823))+((r01*x3827))+(((-1.0)*x3820*x3828)));
evalcond[3]=((((-1.0)*x3822*x3825))+((sj1*sj2))+(((-1.0)*cj1*x3821))+((r22*x3817))+((r21*x3826)));
evalcond[4]=((((-1.0)*cj0*x3824))+((r02*x3817))+(((-1.0)*cj0*sj1*x3821))+((r01*x3826))+(((-1.0)*x3820*x3825)));
evalcond[5]=(((r12*x3817))+(((-1.0)*sj0*sj1*x3821))+((r11*x3826))+(((-1.0)*x3823*x3824))+(((-1.0)*x3819*x3825)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3829=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3829;
j4eval[1]=IKsign(x3829);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3830=((1.0)*cj5);
IkReal x3831=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3830)));
j4eval[0]=x3831;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x3830))+((r21*sj5))))));
j4eval[2]=IKsign(x3831);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3832=(sj1*sj2);
IkReal x3833=(cj5*r10);
IkReal x3834=(r11*sj5);
IkReal x3835=(cj1*cj2);
IkReal x3836=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3836;
j4eval[1]=((IKabs(((((-1.0)*x3832*x3833))+((x3832*x3834))+((x3833*x3835))+(((-1.0)*x3834*x3835)))))+(IKabs(((((-1.0)*r12*x3832))+((r12*x3835))))));
j4eval[2]=IKsign(x3836);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3837=(sj1*sj2);
IkReal x3838=(cj5*r10);
IkReal x3839=(r11*sj5);
IkReal x3840=(cj1*cj2);
CheckValue<IkReal> x3841 = IKatan2WithCheck(IkReal(((((-1.0)*x3837*x3838))+(((-1.0)*x3839*x3840))+((x3838*x3840))+((x3837*x3839)))),IkReal((((r12*x3840))+(((-1.0)*r12*x3837)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3841.valid){
continue;
}
CheckValue<IkReal> x3842=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3841.value)+(((1.5707963267949)*(x3842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3843=IKcos(j4);
IkReal x3844=IKsin(j4);
IkReal x3845=(cj5*r00);
IkReal x3846=(cj5*r10);
IkReal x3847=(r21*sj5);
IkReal x3848=((1.0)*cj2);
IkReal x3849=(cj5*r20);
IkReal x3850=((1.0)*x3843);
IkReal x3851=((1.0)*x3844);
IkReal x3852=(sj5*x3844);
IkReal x3853=(sj5*x3843);
evalcond[0]=(((r12*x3844))+((r11*x3853))+(((-1.0)*x3846*x3850)));
evalcond[1]=(((x3844*x3847))+(((-1.0)*r22*x3850))+(((-1.0)*x3849*x3851)));
evalcond[2]=(((r01*x3852))+(((-1.0)*x3845*x3851))+(((-1.0)*r02*x3850)));
evalcond[3]=((1.0)+((r11*x3852))+(((-1.0)*r12*x3850))+(((-1.0)*x3846*x3851)));
evalcond[4]=(((sj1*sj2))+((x3843*x3847))+(((-1.0)*cj1*x3848))+((r22*x3844))+(((-1.0)*x3849*x3850)));
evalcond[5]=((((-1.0)*sj1*x3848))+(((-1.0)*cj1*sj2))+((r01*x3853))+(((-1.0)*x3845*x3850))+((r02*x3844)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3854=((1.0)*cj5);
CheckValue<IkReal> x3855 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x3854))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3855.valid){
continue;
}
CheckValue<IkReal> x3856=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3854)))),-1);
if(!x3856.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3855.value)+(((1.5707963267949)*(x3856.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3857=IKcos(j4);
IkReal x3858=IKsin(j4);
IkReal x3859=(cj5*r00);
IkReal x3860=(cj5*r10);
IkReal x3861=(r21*sj5);
IkReal x3862=((1.0)*cj2);
IkReal x3863=(cj5*r20);
IkReal x3864=((1.0)*x3857);
IkReal x3865=((1.0)*x3858);
IkReal x3866=(sj5*x3858);
IkReal x3867=(sj5*x3857);
evalcond[0]=(((r11*x3867))+(((-1.0)*x3860*x3864))+((r12*x3858)));
evalcond[1]=((((-1.0)*x3863*x3865))+((x3858*x3861))+(((-1.0)*r22*x3864)));
evalcond[2]=((((-1.0)*r02*x3864))+(((-1.0)*x3859*x3865))+((r01*x3866)));
evalcond[3]=((1.0)+((r11*x3866))+(((-1.0)*x3860*x3865))+(((-1.0)*r12*x3864)));
evalcond[4]=((((-1.0)*x3863*x3864))+((sj1*sj2))+((x3857*x3861))+(((-1.0)*cj1*x3862))+((r22*x3858)));
evalcond[5]=(((r02*x3858))+(((-1.0)*x3859*x3864))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3862))+((r01*x3867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3868=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3868.valid){
continue;
}
CheckValue<IkReal> x3869 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3869.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3868.value)))+(x3869.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3870=IKcos(j4);
IkReal x3871=IKsin(j4);
IkReal x3872=(cj5*r00);
IkReal x3873=(cj5*r10);
IkReal x3874=(r21*sj5);
IkReal x3875=((1.0)*cj2);
IkReal x3876=(cj5*r20);
IkReal x3877=((1.0)*x3870);
IkReal x3878=((1.0)*x3871);
IkReal x3879=(sj5*x3871);
IkReal x3880=(sj5*x3870);
evalcond[0]=((((-1.0)*x3873*x3877))+((r11*x3880))+((r12*x3871)));
evalcond[1]=(((x3871*x3874))+(((-1.0)*x3876*x3878))+(((-1.0)*r22*x3877)));
evalcond[2]=(((r01*x3879))+(((-1.0)*r02*x3877))+(((-1.0)*x3872*x3878)));
evalcond[3]=((1.0)+(((-1.0)*x3873*x3878))+(((-1.0)*r12*x3877))+((r11*x3879)));
evalcond[4]=(((x3870*x3874))+(((-1.0)*x3876*x3877))+((sj1*sj2))+(((-1.0)*cj1*x3875))+((r22*x3871)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3880))+(((-1.0)*sj1*x3875))+((r02*x3871))+(((-1.0)*x3872*x3877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3881=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3881;
j4eval[1]=IKsign(x3881);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3882=((1.0)*cj5);
IkReal x3883=((((-1.0)*r21*x3882))+(((-1.0)*r20*sj5)));
j4eval[0]=x3883;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3882))))));
j4eval[2]=IKsign(x3883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3884=cj5*cj5;
IkReal x3885=r11*r11;
IkReal x3886=(r11*sj5);
IkReal x3887=(cj5*r10);
IkReal x3888=((((-2.0)*x3886*x3887))+(r12*r12)+(((-1.0)*x3884*x3885))+((x3884*(r10*r10)))+x3885);
j4eval[0]=x3888;
j4eval[1]=IKsign(x3888);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3887))+x3886))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3889=cj5*cj5;
IkReal x3890=r11*r11;
IkReal x3891=(cj5*r10);
IkReal x3892=(r11*sj5);
CheckValue<IkReal> x3893 = IKatan2WithCheck(IkReal(((((-1.0)*x3891))+x3892)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3893.valid){
continue;
}
CheckValue<IkReal> x3894=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x3889*(r10*r10)))+(((-1.0)*x3889*x3890))+x3890+(((-2.0)*x3891*x3892)))),-1);
if(!x3894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3893.value)+(((1.5707963267949)*(x3894.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3895=IKcos(j4);
IkReal x3896=IKsin(j4);
IkReal x3897=(cj5*r00);
IkReal x3898=(cj5*r10);
IkReal x3899=(r21*sj5);
IkReal x3900=(cj5*r20);
IkReal x3901=((1.0)*x3895);
IkReal x3902=((1.0)*x3896);
IkReal x3903=(sj5*x3896);
IkReal x3904=(sj5*x3895);
evalcond[0]=(((r12*x3896))+(((-1.0)*x3898*x3901))+((r11*x3904)));
evalcond[1]=((((-1.0)*x3900*x3902))+(((-1.0)*r22*x3901))+((x3896*x3899)));
evalcond[2]=((((-1.0)*x3897*x3902))+((r01*x3903))+(((-1.0)*r02*x3901)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3901))+(((-1.0)*x3898*x3902))+((r11*x3903)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3897*x3901))+((cj1*sj2))+((r01*x3904))+((r02*x3896)));
evalcond[5]=((((-1.0)*x3900*x3901))+((x3895*x3899))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3905=((1.0)*cj5);
CheckValue<IkReal> x3906=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3905))+(((-1.0)*r20*sj5)))),-1);
if(!x3906.valid){
continue;
}
CheckValue<IkReal> x3907 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3905)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3906.value)))+(x3907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3908=IKcos(j4);
IkReal x3909=IKsin(j4);
IkReal x3910=(cj5*r00);
IkReal x3911=(cj5*r10);
IkReal x3912=(r21*sj5);
IkReal x3913=(cj5*r20);
IkReal x3914=((1.0)*x3908);
IkReal x3915=((1.0)*x3909);
IkReal x3916=(sj5*x3909);
IkReal x3917=(sj5*x3908);
evalcond[0]=((((-1.0)*x3911*x3914))+((r12*x3909))+((r11*x3917)));
evalcond[1]=((((-1.0)*r22*x3914))+((x3909*x3912))+(((-1.0)*x3913*x3915)));
evalcond[2]=((((-1.0)*r02*x3914))+(((-1.0)*x3910*x3915))+((r01*x3916)));
evalcond[3]=((-1.0)+(((-1.0)*x3911*x3915))+((r11*x3916))+(((-1.0)*r12*x3914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x3910*x3914))+((r01*x3917))+((r02*x3909)));
evalcond[5]=(((r22*x3909))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3908*x3912))+(((-1.0)*x3913*x3914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3918 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3918.valid){
continue;
}
CheckValue<IkReal> x3919=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3918.value)+(((1.5707963267949)*(x3919.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3920=IKcos(j4);
IkReal x3921=IKsin(j4);
IkReal x3922=(cj5*r00);
IkReal x3923=(cj5*r10);
IkReal x3924=(r21*sj5);
IkReal x3925=(cj5*r20);
IkReal x3926=((1.0)*x3920);
IkReal x3927=((1.0)*x3921);
IkReal x3928=(sj5*x3921);
IkReal x3929=(sj5*x3920);
evalcond[0]=(((r11*x3929))+((r12*x3921))+(((-1.0)*x3923*x3926)));
evalcond[1]=(((x3921*x3924))+(((-1.0)*x3925*x3927))+(((-1.0)*r22*x3926)));
evalcond[2]=((((-1.0)*x3922*x3927))+(((-1.0)*r02*x3926))+((r01*x3928)));
evalcond[3]=((-1.0)+((r11*x3928))+(((-1.0)*r12*x3926))+(((-1.0)*x3923*x3927)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3922*x3926))+((cj1*sj2))+((r02*x3921))+((r01*x3929)));
evalcond[5]=((((-1.0)*x3925*x3926))+((x3920*x3924))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x3921)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3930=((-1.0)*r00);
IkReal x3932 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3932)==0){
continue;
}
IkReal x3931=pow(x3932,-0.5);
CheckValue<IkReal> x3933 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3930),IKFAST_ATAN2_MAGTHRESH);
if(!x3933.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3933.value));
IkReal gconst109=(r01*x3931);
IkReal gconst110=(x3930*x3931);
CheckValue<IkReal> x3934 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3934.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3934.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3935=((-1.0)*r00);
IkReal x3936=x3931;
CheckValue<IkReal> x3938 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3935),IKFAST_ATAN2_MAGTHRESH);
if(!x3938.valid){
continue;
}
IkReal x3937=((-1.0)*(x3938.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3937;
IkReal gconst108=x3937;
IkReal gconst109=(r01*x3936);
IkReal gconst110=(x3935*x3936);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3939=((1.0)*sj0);
IkReal x3940=((1.0)*gconst109);
CheckValue<IkReal> x3941 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3939)))),IkReal(((((-1.0)*gconst109*r11*x3939))+(((-1.0)*cj0*r01*x3940))+((cj0*gconst110*r00))+((gconst110*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3941.valid){
continue;
}
CheckValue<IkReal> x3942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3940))+(((-1.0)*gconst110*r21)))),-1);
if(!x3942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3941.value)+(((1.5707963267949)*(x3942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3943=IKsin(j4);
IkReal x3944=IKcos(j4);
IkReal x3945=(gconst109*r21);
IkReal x3946=((1.0)*cj2);
IkReal x3947=((1.0)*sj0);
IkReal x3948=(cj1*sj2);
IkReal x3949=((1.0)*x3944);
IkReal x3950=(gconst109*x3943);
IkReal x3951=(gconst109*x3944);
IkReal x3952=((1.0)*gconst110*x3943);
evalcond[0]=((((-1.0)*r22*x3949))+((x3943*x3945))+(((-1.0)*r20*x3952)));
evalcond[1]=(cj0+(((-1.0)*r12*x3949))+((r11*x3950))+(((-1.0)*r10*x3952)));
evalcond[2]=(((r01*x3950))+(((-1.0)*r00*x3952))+(((-1.0)*r02*x3949))+(((-1.0)*x3947)));
evalcond[3]=(((r22*x3943))+(((-1.0)*cj1*x3946))+((sj1*sj2))+(((-1.0)*gconst110*r20*x3949))+((x3944*x3945)));
evalcond[4]=((((-1.0)*cj0*x3948))+((r01*x3951))+(((-1.0)*cj0*sj1*x3946))+(((-1.0)*gconst110*r00*x3949))+((r02*x3943)));
evalcond[5]=(((r11*x3951))+((r12*x3943))+(((-1.0)*sj0*sj1*x3946))+(((-1.0)*gconst110*r10*x3949))+(((-1.0)*x3947*x3948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3953=((1.0)*gconst110);
CheckValue<IkReal> x3954 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3953))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3954.valid){
continue;
}
CheckValue<IkReal> x3955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3953))+(((-1.0)*gconst109*r10)))),-1);
if(!x3955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3954.value)+(((1.5707963267949)*(x3955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3956=IKsin(j4);
IkReal x3957=IKcos(j4);
IkReal x3958=(gconst109*r21);
IkReal x3959=((1.0)*cj2);
IkReal x3960=((1.0)*sj0);
IkReal x3961=(cj1*sj2);
IkReal x3962=((1.0)*x3957);
IkReal x3963=(gconst109*x3956);
IkReal x3964=(gconst109*x3957);
IkReal x3965=((1.0)*gconst110*x3956);
evalcond[0]=(((x3956*x3958))+(((-1.0)*r20*x3965))+(((-1.0)*r22*x3962)));
evalcond[1]=(cj0+((r11*x3963))+(((-1.0)*r10*x3965))+(((-1.0)*r12*x3962)));
evalcond[2]=((((-1.0)*x3960))+(((-1.0)*r02*x3962))+((r01*x3963))+(((-1.0)*r00*x3965)));
evalcond[3]=((((-1.0)*gconst110*r20*x3962))+((sj1*sj2))+(((-1.0)*cj1*x3959))+((x3957*x3958))+((r22*x3956)));
evalcond[4]=((((-1.0)*cj0*x3961))+(((-1.0)*cj0*sj1*x3959))+(((-1.0)*gconst110*r00*x3962))+((r02*x3956))+((r01*x3964)));
evalcond[5]=((((-1.0)*gconst110*r10*x3962))+((r11*x3964))+(((-1.0)*x3960*x3961))+(((-1.0)*sj0*sj1*x3959))+((r12*x3956)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3966=((-1.0)*r01);
IkReal x3968 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3968)==0){
continue;
}
IkReal x3967=pow(x3968,-0.5);
CheckValue<IkReal> x3969 = IKatan2WithCheck(IkReal(x3966),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3969.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3969.value))));
IkReal gconst112=(x3966*x3967);
IkReal gconst113=((1.0)*r00*x3967);
CheckValue<IkReal> x3970 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3970.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3970.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3971=((-1.0)*r01);
CheckValue<IkReal> x3974 = IKatan2WithCheck(IkReal(x3971),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3974.valid){
continue;
}
IkReal x3972=((1.0)*(x3974.value));
IkReal x3973=x3967;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3972)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3972)));
IkReal gconst112=(x3971*x3973);
IkReal gconst113=((1.0)*r00*x3973);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3975=((-1.0)*r01);
CheckValue<IkReal> x3978 = IKatan2WithCheck(IkReal(x3975),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3978.valid){
continue;
}
IkReal x3976=((1.0)*(x3978.value));
IkReal x3977=x3967;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3976)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3976)));
IkReal gconst112=(x3975*x3977);
IkReal gconst113=((1.0)*r00*x3977);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3979=((-1.0)*r01);
CheckValue<IkReal> x3982 = IKatan2WithCheck(IkReal(x3979),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3982.valid){
continue;
}
IkReal x3980=((1.0)*(x3982.value));
IkReal x3981=x3967;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3980)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3980)));
IkReal gconst112=(x3979*x3981);
IkReal gconst113=((1.0)*r00*x3981);
IkReal x3983=r02*r02;
IkReal x3984=(r12*sj0);
IkReal x3985=((1.0)*cj0);
IkReal x3986=x3967;
j4eval[0]=((IKabs(((((-1.0)*r02*x3985))+(((-1.0)*x3984)))))+(IKabs((((r02*x3984*x3986))+(((-1.0)*x3985*x3986))+((cj0*x3983*x3986))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3987=((1.0)*sj0);
IkReal x3988=((1.0)*gconst112);
CheckValue<IkReal> x3989 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3987))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x3988))+(((-1.0)*gconst112*r11*x3987)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3989.valid){
continue;
}
CheckValue<IkReal> x3990=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3988))+(((-1.0)*gconst113*r21)))),-1);
if(!x3990.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3989.value)+(((1.5707963267949)*(x3990.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3991=IKsin(j4);
IkReal x3992=IKcos(j4);
IkReal x3993=(gconst113*r20);
IkReal x3994=(gconst112*r21);
IkReal x3995=((1.0)*cj2);
IkReal x3996=(gconst113*r00);
IkReal x3997=(gconst113*r10);
IkReal x3998=((1.0)*sj0);
IkReal x3999=(cj1*sj2);
IkReal x4000=((1.0)*x3992);
IkReal x4001=((1.0)*x3991);
IkReal x4002=(gconst112*x3992);
IkReal x4003=(gconst112*x3991);
evalcond[0]=((((-1.0)*r22*x4000))+(((-1.0)*x3993*x4001))+((x3991*x3994)));
evalcond[1]=(cj0+(((-1.0)*x3997*x4001))+(((-1.0)*r12*x4000))+((r11*x4003)));
evalcond[2]=((((-1.0)*r02*x4000))+(((-1.0)*x3998))+((r01*x4003))+(((-1.0)*x3996*x4001)));
evalcond[3]=((((-1.0)*x3993*x4000))+((sj1*sj2))+((r22*x3991))+((x3992*x3994))+(((-1.0)*cj1*x3995)));
evalcond[4]=(((r01*x4002))+(((-1.0)*cj0*sj1*x3995))+((r02*x3991))+(((-1.0)*x3996*x4000))+(((-1.0)*cj0*x3999)));
evalcond[5]=((((-1.0)*x3998*x3999))+((r12*x3991))+(((-1.0)*x3997*x4000))+(((-1.0)*sj0*sj1*x3995))+((r11*x4002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4004=((1.0)*gconst113);
CheckValue<IkReal> x4005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4004))+(((-1.0)*gconst112*r10)))),-1);
if(!x4005.valid){
continue;
}
CheckValue<IkReal> x4006 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4005.value)))+(x4006.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4007=IKsin(j4);
IkReal x4008=IKcos(j4);
IkReal x4009=(gconst113*r20);
IkReal x4010=(gconst112*r21);
IkReal x4011=((1.0)*cj2);
IkReal x4012=(gconst113*r00);
IkReal x4013=(gconst113*r10);
IkReal x4014=((1.0)*sj0);
IkReal x4015=(cj1*sj2);
IkReal x4016=((1.0)*x4008);
IkReal x4017=((1.0)*x4007);
IkReal x4018=(gconst112*x4008);
IkReal x4019=(gconst112*x4007);
evalcond[0]=((((-1.0)*r22*x4016))+(((-1.0)*x4009*x4017))+((x4007*x4010)));
evalcond[1]=((((-1.0)*r12*x4016))+cj0+(((-1.0)*x4013*x4017))+((r11*x4019)));
evalcond[2]=((((-1.0)*x4012*x4017))+(((-1.0)*r02*x4016))+((r01*x4019))+(((-1.0)*x4014)));
evalcond[3]=((((-1.0)*cj1*x4011))+((sj1*sj2))+((r22*x4007))+(((-1.0)*x4009*x4016))+((x4008*x4010)));
evalcond[4]=((((-1.0)*x4012*x4016))+(((-1.0)*cj0*x4015))+(((-1.0)*cj0*sj1*x4011))+((r01*x4018))+((r02*x4007)));
evalcond[5]=(((r12*x4007))+(((-1.0)*sj0*sj1*x4011))+(((-1.0)*x4013*x4016))+(((-1.0)*x4014*x4015))+((r11*x4018)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4020=((1.0)*gconst113);
CheckValue<IkReal> x4021 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4020)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4021.valid){
continue;
}
CheckValue<IkReal> x4022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4020))+(((-1.0)*gconst112*r00)))),-1);
if(!x4022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4021.value)+(((1.5707963267949)*(x4022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4023=IKsin(j4);
IkReal x4024=IKcos(j4);
IkReal x4025=(gconst113*r20);
IkReal x4026=(gconst112*r21);
IkReal x4027=((1.0)*cj2);
IkReal x4028=(gconst113*r00);
IkReal x4029=(gconst113*r10);
IkReal x4030=((1.0)*sj0);
IkReal x4031=(cj1*sj2);
IkReal x4032=((1.0)*x4024);
IkReal x4033=((1.0)*x4023);
IkReal x4034=(gconst112*x4024);
IkReal x4035=(gconst112*x4023);
evalcond[0]=((((-1.0)*r22*x4032))+((x4023*x4026))+(((-1.0)*x4025*x4033)));
evalcond[1]=(cj0+(((-1.0)*r12*x4032))+(((-1.0)*x4029*x4033))+((r11*x4035)));
evalcond[2]=((((-1.0)*x4028*x4033))+((r01*x4035))+(((-1.0)*x4030))+(((-1.0)*r02*x4032)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x4027))+((x4024*x4026))+(((-1.0)*x4025*x4032))+((r22*x4023)));
evalcond[4]=((((-1.0)*cj0*x4031))+(((-1.0)*cj0*sj1*x4027))+(((-1.0)*x4028*x4032))+((r01*x4034))+((r02*x4023)));
evalcond[5]=((((-1.0)*sj0*sj1*x4027))+(((-1.0)*x4030*x4031))+((r12*x4023))+(((-1.0)*x4029*x4032))+((r11*x4034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4036=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4036;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4036);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4037=((1.0)*cj5);
IkReal x4038=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4037)));
j4eval[0]=x4038;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4037))))));
j4eval[2]=IKsign(x4038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4039=cj5*cj5;
IkReal x4040=r01*r01;
IkReal x4041=(cj5*r00);
IkReal x4042=(r01*sj5);
IkReal x4043=(x4040+((x4039*(r00*r00)))+(r02*r02)+(((-1.0)*x4039*x4040))+(((-2.0)*x4041*x4042)));
j4eval[0]=x4043;
j4eval[1]=IKsign(x4043);
j4eval[2]=((IKabs(r02))+(IKabs((x4042+(((-1.0)*x4041))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4044=cj5*cj5;
IkReal x4045=r01*r01;
IkReal x4046=(r01*sj5);
IkReal x4047=(cj5*r00);
CheckValue<IkReal> x4048 = IKatan2WithCheck(IkReal((x4046+(((-1.0)*x4047)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4048.valid){
continue;
}
CheckValue<IkReal> x4049=IKPowWithIntegerCheck(IKsign((((x4044*(r00*r00)))+x4045+(((-2.0)*x4046*x4047))+(((-1.0)*x4044*x4045))+(r02*r02))),-1);
if(!x4049.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4048.value)+(((1.5707963267949)*(x4049.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4050=IKcos(j4);
IkReal x4051=IKsin(j4);
IkReal x4052=(cj5*r00);
IkReal x4053=(cj5*r10);
IkReal x4054=(r21*sj5);
IkReal x4055=((1.0)*cj2);
IkReal x4056=(cj5*r20);
IkReal x4057=((1.0)*x4050);
IkReal x4058=((1.0)*x4051);
IkReal x4059=(sj5*x4051);
IkReal x4060=(sj5*x4050);
evalcond[0]=(((r02*x4051))+(((-1.0)*x4052*x4057))+((r01*x4060)));
evalcond[1]=(((x4051*x4054))+(((-1.0)*r22*x4057))+(((-1.0)*x4056*x4058)));
evalcond[2]=((((-1.0)*r12*x4057))+(((-1.0)*x4053*x4058))+((r11*x4059)));
evalcond[3]=((-1.0)+(((-1.0)*x4052*x4058))+(((-1.0)*r02*x4057))+((r01*x4059)));
evalcond[4]=(((sj1*sj2))+((x4050*x4054))+(((-1.0)*cj1*x4055))+((r22*x4051))+(((-1.0)*x4056*x4057)));
evalcond[5]=((((-1.0)*x4053*x4057))+(((-1.0)*cj1*sj2))+((r11*x4060))+((r12*x4051))+(((-1.0)*sj1*x4055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4061=((1.0)*cj5);
CheckValue<IkReal> x4062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4061)))),-1);
if(!x4062.valid){
continue;
}
CheckValue<IkReal> x4063 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4061))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4062.value)))+(x4063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4064=IKcos(j4);
IkReal x4065=IKsin(j4);
IkReal x4066=(cj5*r00);
IkReal x4067=(cj5*r10);
IkReal x4068=(r21*sj5);
IkReal x4069=((1.0)*cj2);
IkReal x4070=(cj5*r20);
IkReal x4071=((1.0)*x4064);
IkReal x4072=((1.0)*x4065);
IkReal x4073=(sj5*x4065);
IkReal x4074=(sj5*x4064);
evalcond[0]=(((r02*x4065))+((r01*x4074))+(((-1.0)*x4066*x4071)));
evalcond[1]=((((-1.0)*x4070*x4072))+(((-1.0)*r22*x4071))+((x4065*x4068)));
evalcond[2]=((((-1.0)*x4067*x4072))+(((-1.0)*r12*x4071))+((r11*x4073)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4071))+((r01*x4073))+(((-1.0)*x4066*x4072)));
evalcond[4]=((((-1.0)*x4070*x4071))+((x4064*x4068))+((sj1*sj2))+(((-1.0)*cj1*x4069))+((r22*x4065)));
evalcond[5]=((((-1.0)*x4067*x4071))+(((-1.0)*cj1*sj2))+((r12*x4065))+((r11*x4074))+(((-1.0)*sj1*x4069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4075=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4075.valid){
continue;
}
CheckValue<IkReal> x4076 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4075.value)))+(x4076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4077=IKcos(j4);
IkReal x4078=IKsin(j4);
IkReal x4079=(cj5*r00);
IkReal x4080=(cj5*r10);
IkReal x4081=(r21*sj5);
IkReal x4082=((1.0)*cj2);
IkReal x4083=(cj5*r20);
IkReal x4084=((1.0)*x4077);
IkReal x4085=((1.0)*x4078);
IkReal x4086=(sj5*x4078);
IkReal x4087=(sj5*x4077);
evalcond[0]=(((r01*x4087))+((r02*x4078))+(((-1.0)*x4079*x4084)));
evalcond[1]=((((-1.0)*x4083*x4085))+(((-1.0)*r22*x4084))+((x4078*x4081)));
evalcond[2]=((((-1.0)*r12*x4084))+((r11*x4086))+(((-1.0)*x4080*x4085)));
evalcond[3]=((-1.0)+((r01*x4086))+(((-1.0)*r02*x4084))+(((-1.0)*x4079*x4085)));
evalcond[4]=(((r22*x4078))+((sj1*sj2))+(((-1.0)*x4083*x4084))+(((-1.0)*cj1*x4082))+((x4077*x4081)));
evalcond[5]=(((r12*x4078))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4082))+((r11*x4087))+(((-1.0)*x4080*x4084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4088=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4088;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4088);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4089=((1.0)*cj5);
IkReal x4090=((((-1.0)*r21*x4089))+(((-1.0)*r20*sj5)));
j4eval[0]=x4090;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4089))))));
j4eval[2]=IKsign(x4090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4091=cj5*cj5;
IkReal x4092=r01*r01;
IkReal x4093=(r01*sj5);
IkReal x4094=(cj5*r00);
IkReal x4095=((((-1.0)*x4091*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4093*x4094))+((x4091*x4092))+(((-1.0)*x4092)));
j4eval[0]=x4095;
j4eval[1]=IKsign(x4095);
j4eval[2]=((IKabs(r02))+(IKabs((x4093+(((-1.0)*x4094))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4096=cj5*cj5;
IkReal x4097=r01*r01;
IkReal x4098=(r01*sj5);
IkReal x4099=(cj5*r00);
CheckValue<IkReal> x4100=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4096*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4098*x4099))+(((-1.0)*x4097))+((x4096*x4097)))),-1);
if(!x4100.valid){
continue;
}
CheckValue<IkReal> x4101 = IKatan2WithCheck(IkReal((x4098+(((-1.0)*x4099)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4100.value)))+(x4101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4102=IKcos(j4);
IkReal x4103=IKsin(j4);
IkReal x4104=(cj5*r00);
IkReal x4105=(cj5*r10);
IkReal x4106=(r21*sj5);
IkReal x4107=(cj5*r20);
IkReal x4108=((1.0)*x4102);
IkReal x4109=((1.0)*x4103);
IkReal x4110=(sj5*x4103);
IkReal x4111=(sj5*x4102);
evalcond[0]=((((-1.0)*x4104*x4108))+((r02*x4103))+((r01*x4111)));
evalcond[1]=((((-1.0)*r22*x4108))+((x4103*x4106))+(((-1.0)*x4107*x4109)));
evalcond[2]=((((-1.0)*x4105*x4109))+(((-1.0)*r12*x4108))+((r11*x4110)));
evalcond[3]=((1.0)+(((-1.0)*x4104*x4109))+((r01*x4110))+(((-1.0)*r02*x4108)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4105*x4108))+((cj1*sj2))+((r12*x4103))+((r11*x4111)));
evalcond[5]=(((r22*x4103))+(((-1.0)*x4107*x4108))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4102*x4106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4112=((1.0)*cj5);
CheckValue<IkReal> x4113=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4112))+(((-1.0)*r20*sj5)))),-1);
if(!x4113.valid){
continue;
}
CheckValue<IkReal> x4114 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4112)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4114.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4113.value)))+(x4114.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4115=IKcos(j4);
IkReal x4116=IKsin(j4);
IkReal x4117=(cj5*r00);
IkReal x4118=(cj5*r10);
IkReal x4119=(r21*sj5);
IkReal x4120=(cj5*r20);
IkReal x4121=((1.0)*x4115);
IkReal x4122=((1.0)*x4116);
IkReal x4123=(sj5*x4116);
IkReal x4124=(sj5*x4115);
evalcond[0]=(((r02*x4116))+((r01*x4124))+(((-1.0)*x4117*x4121)));
evalcond[1]=((((-1.0)*r22*x4121))+((x4116*x4119))+(((-1.0)*x4120*x4122)));
evalcond[2]=((((-1.0)*r12*x4121))+((r11*x4123))+(((-1.0)*x4118*x4122)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4121))+((r01*x4123))+(((-1.0)*x4117*x4122)));
evalcond[4]=(((r12*x4116))+((cj2*sj1))+((cj1*sj2))+((r11*x4124))+(((-1.0)*x4118*x4121)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4115*x4119))+((r22*x4116))+(((-1.0)*x4120*x4121)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4125 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4125.valid){
continue;
}
CheckValue<IkReal> x4126=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4125.value)+(((1.5707963267949)*(x4126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4127=IKcos(j4);
IkReal x4128=IKsin(j4);
IkReal x4129=(cj5*r00);
IkReal x4130=(cj5*r10);
IkReal x4131=(r21*sj5);
IkReal x4132=(cj5*r20);
IkReal x4133=((1.0)*x4127);
IkReal x4134=((1.0)*x4128);
IkReal x4135=(sj5*x4128);
IkReal x4136=(sj5*x4127);
evalcond[0]=(((r02*x4128))+((r01*x4136))+(((-1.0)*x4129*x4133)));
evalcond[1]=(((x4128*x4131))+(((-1.0)*r22*x4133))+(((-1.0)*x4132*x4134)));
evalcond[2]=((((-1.0)*x4130*x4134))+((r11*x4135))+(((-1.0)*r12*x4133)));
evalcond[3]=((1.0)+((r01*x4135))+(((-1.0)*r02*x4133))+(((-1.0)*x4129*x4134)));
evalcond[4]=(((r12*x4128))+((cj2*sj1))+(((-1.0)*x4130*x4133))+((cj1*sj2))+((r11*x4136)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4127*x4131))+((r22*x4128))+(((-1.0)*x4132*x4133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4137=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4137);
rxp1_1=(px*r21);
rxp1_2=(r11*x4137);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4138=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4138);
rxp1_1=(px*r21);
rxp1_2=(r11*x4138);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4139=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4139);
rxp1_1=(px*r21);
rxp1_2=(r11*x4139);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4142=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4142.valid){
continue;
}
IkReal x4140=x4142.value;
IkReal x4141=(sj0*x4140);
cj4array[0]=(((cj1*sj2*x4141))+((cj2*sj1*x4141)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4143=IKsin(j4);
IkReal x4144=IKcos(j4);
IkReal x4145=(r21*sj5);
IkReal x4146=((1.0)*cj5*r20);
evalcond[0]=(r02*x4143);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4144)));
evalcond[2]=(((x4143*x4145))+(((-1.0)*x4143*x4146)));
evalcond[3]=((((-1.0)*cj5*r10*x4143))+((r11*sj5*x4143)));
evalcond[4]=((((-1.0)*x4144*x4146))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4144*x4145)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4148=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4148.valid){
continue;
}
IkReal x4147=x4148.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4147))+((cj1*cj2*x4147)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4149=IKsin(j4);
IkReal x4150=IKcos(j4);
IkReal x4151=((1.0)*sj0);
IkReal x4152=((1.0)*cj5);
IkReal x4153=(sj5*x4149);
evalcond[0]=(r02*x4149);
evalcond[1]=((((-1.0)*x4151))+(((-1.0)*r02*x4150)));
evalcond[2]=(((r21*x4153))+(((-1.0)*r20*x4149*x4152)));
evalcond[3]=(((r11*x4153))+(((-1.0)*r10*x4149*x4152)));
evalcond[4]=((((-1.0)*r10*x4150*x4152))+((r11*sj5*x4150))+(((-1.0)*cj1*sj2*x4151))+(((-1.0)*cj2*sj1*x4151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4154=IKPowWithIntegerCheck(r02,-1);
if(!x4154.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4154.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4155=IKsin(j4);
IkReal x4156=IKcos(j4);
IkReal x4157=((1.0)*cj1);
IkReal x4158=(r21*sj5);
IkReal x4159=((1.0)*cj5);
IkReal x4160=(r11*sj5);
evalcond[0]=(r02*x4155);
evalcond[1]=(((x4155*x4158))+(((-1.0)*r20*x4155*x4159)));
evalcond[2]=((((-1.0)*r10*x4155*x4159))+((x4155*x4160)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x4156*x4159))+((x4156*x4158))+(((-1.0)*cj2*x4157)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4157))+(((-1.0)*r10*x4156*x4159))+((x4156*x4160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4161=((1.0)*sj0);
IkReal x4162=((1.0)*cj0);
CheckValue<IkReal> x4163 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4162))+(((-1.0)*r12*x4161)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4162))+(((-1.0)*r11*sj5*x4161)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4163.valid){
continue;
}
CheckValue<IkReal> x4164=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4163.value)+(((1.5707963267949)*(x4164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4165=IKsin(j4);
IkReal x4166=IKcos(j4);
IkReal x4167=(cj5*r00);
IkReal x4168=(cj5*r10);
IkReal x4169=(r21*sj5);
IkReal x4170=((1.0)*cj2);
IkReal x4171=((1.0)*sj0);
IkReal x4172=(cj1*sj2);
IkReal x4173=(cj5*r20);
IkReal x4174=((1.0)*x4166);
IkReal x4175=((1.0)*x4165);
IkReal x4176=(sj5*x4165);
IkReal x4177=(sj5*x4166);
evalcond[0]=(((x4165*x4169))+(((-1.0)*r22*x4174))+(((-1.0)*x4173*x4175)));
evalcond[1]=(((r11*x4176))+cj0+(((-1.0)*x4168*x4175))+(((-1.0)*r12*x4174)));
evalcond[2]=((((-1.0)*x4171))+(((-1.0)*x4167*x4175))+((r01*x4176))+(((-1.0)*r02*x4174)));
evalcond[3]=(((r22*x4165))+(((-1.0)*cj1*x4170))+((x4166*x4169))+((sj1*sj2))+(((-1.0)*x4173*x4174)));
evalcond[4]=((((-1.0)*cj0*x4172))+(((-1.0)*x4167*x4174))+((r02*x4165))+((r01*x4177))+(((-1.0)*cj0*sj1*x4170)));
evalcond[5]=(((r11*x4177))+(((-1.0)*x4171*x4172))+(((-1.0)*x4168*x4174))+(((-1.0)*sj0*sj1*x4170))+((r12*x4165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4178=((1.0)*cj5);
CheckValue<IkReal> x4179 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4179.valid){
continue;
}
CheckValue<IkReal> x4180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4178)))),-1);
if(!x4180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4179.value)+(((1.5707963267949)*(x4180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4181=IKsin(j4);
IkReal x4182=IKcos(j4);
IkReal x4183=(cj5*r00);
IkReal x4184=(cj5*r10);
IkReal x4185=(r21*sj5);
IkReal x4186=((1.0)*cj2);
IkReal x4187=((1.0)*sj0);
IkReal x4188=(cj1*sj2);
IkReal x4189=(cj5*r20);
IkReal x4190=((1.0)*x4182);
IkReal x4191=((1.0)*x4181);
IkReal x4192=(sj5*x4181);
IkReal x4193=(sj5*x4182);
evalcond[0]=((((-1.0)*x4189*x4191))+(((-1.0)*r22*x4190))+((x4181*x4185)));
evalcond[1]=((((-1.0)*r12*x4190))+((r11*x4192))+cj0+(((-1.0)*x4184*x4191)));
evalcond[2]=((((-1.0)*x4187))+(((-1.0)*r02*x4190))+((r01*x4192))+(((-1.0)*x4183*x4191)));
evalcond[3]=((((-1.0)*cj1*x4186))+((sj1*sj2))+((r22*x4181))+(((-1.0)*x4189*x4190))+((x4182*x4185)));
evalcond[4]=(((r02*x4181))+(((-1.0)*cj0*sj1*x4186))+(((-1.0)*cj0*x4188))+((r01*x4193))+(((-1.0)*x4183*x4190)));
evalcond[5]=(((r12*x4181))+((r11*x4193))+(((-1.0)*x4187*x4188))+(((-1.0)*x4184*x4190))+(((-1.0)*sj0*sj1*x4186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4194=((1.0)*cj5);
CheckValue<IkReal> x4195=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4194))+(((-1.0)*r00*sj5)))),-1);
if(!x4195.valid){
continue;
}
CheckValue<IkReal> x4196 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4194))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4196.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4195.value)))+(x4196.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4197=IKsin(j4);
IkReal x4198=IKcos(j4);
IkReal x4199=(cj5*r00);
IkReal x4200=(cj5*r10);
IkReal x4201=(r21*sj5);
IkReal x4202=((1.0)*cj2);
IkReal x4203=((1.0)*sj0);
IkReal x4204=(cj1*sj2);
IkReal x4205=(cj5*r20);
IkReal x4206=((1.0)*x4198);
IkReal x4207=((1.0)*x4197);
IkReal x4208=(sj5*x4197);
IkReal x4209=(sj5*x4198);
evalcond[0]=((((-1.0)*r22*x4206))+((x4197*x4201))+(((-1.0)*x4205*x4207)));
evalcond[1]=(((r11*x4208))+(((-1.0)*r12*x4206))+cj0+(((-1.0)*x4200*x4207)));
evalcond[2]=((((-1.0)*r02*x4206))+(((-1.0)*x4203))+((r01*x4208))+(((-1.0)*x4199*x4207)));
evalcond[3]=(((x4198*x4201))+((sj1*sj2))+((r22*x4197))+(((-1.0)*cj1*x4202))+(((-1.0)*x4205*x4206)));
evalcond[4]=(((r02*x4197))+(((-1.0)*cj0*x4204))+((r01*x4209))+(((-1.0)*cj0*sj1*x4202))+(((-1.0)*x4199*x4206)));
evalcond[5]=(((r11*x4209))+((r12*x4197))+(((-1.0)*sj0*sj1*x4202))+(((-1.0)*x4203*x4204))+(((-1.0)*x4200*x4206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4210=r21*r21;
IkReal x4211=cj5*cj5;
IkReal x4212=(sj1*sj2);
IkReal x4213=(r21*sj5);
IkReal x4214=(cj1*cj2);
IkReal x4215=(cj5*r20);
CheckValue<IkReal> x4216=IKPowWithIntegerCheck(IKsign((((x4210*x4211))+(((-1.0)*(r22*r22)))+(((-1.0)*x4211*(r20*r20)))+(((-1.0)*x4210))+(((2.0)*x4213*x4215)))),-1);
if(!x4216.valid){
continue;
}
CheckValue<IkReal> x4217 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4214))+((r22*x4212)))),IkReal((((x4214*x4215))+(((-1.0)*x4212*x4215))+((x4212*x4213))+(((-1.0)*x4213*x4214)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4216.value)))+(x4217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4218=IKsin(j4);
IkReal x4219=IKcos(j4);
IkReal x4220=(r21*sj5);
IkReal x4221=(cj5*r20);
IkReal x4222=((1.0)*x4219);
evalcond[0]=(((x4218*x4220))+(((-1.0)*r22*x4222))+(((-1.0)*x4218*x4221)));
evalcond[1]=(((r22*x4218))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4221*x4222))+((x4219*x4220)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4223=(cj5*sj4);
IkReal x4224=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4224))+(((-1.0)*r00*x4223)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4223))+(((-1.0)*r11*x4224))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4224))+(((-1.0)*r00*x4223))))+IKsqr((((r10*x4223))+(((-1.0)*r11*x4224))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4224))+(((-1.0)*r00*x4223))), (((r10*x4223))+(((-1.0)*r11*x4224))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4225=IKcos(j0);
IkReal x4226=IKsin(j0);
IkReal x4227=((1.0)*cj1);
IkReal x4228=((0.39225)*sj1);
IkReal x4229=(r11*sj5);
IkReal x4230=(cj5*r11);
IkReal x4231=((1.0)*sj5);
IkReal x4232=((1.0)*sj1);
IkReal x4233=((0.09465)*sj5);
IkReal x4234=((1.0)*cj5);
IkReal x4235=((0.425)*cj1);
IkReal x4236=((1.0)*cj4);
IkReal x4237=(r01*sj5);
IkReal x4238=(sj2*x4225);
IkReal x4239=(sj2*x4226);
IkReal x4240=(cj4*x4234);
IkReal x4241=((0.39225)*cj1*cj2);
IkReal x4242=(cj2*x4225);
IkReal x4243=(cj2*x4226);
evalcond[0]=(((sj4*x4229))+(((-1.0)*r12*x4236))+(((-1.0)*r10*sj4*x4234))+x4225);
evalcond[1]=(((sj4*x4237))+(((-1.0)*x4226))+(((-1.0)*r00*sj4*x4234))+(((-1.0)*r02*x4236)));
evalcond[2]=((((-1.0)*x4227*x4242))+(((-1.0)*r01*x4234))+((sj1*x4238))+(((-1.0)*r00*x4231)));
evalcond[3]=((((-1.0)*x4227*x4243))+(((-1.0)*x4230))+(((-1.0)*r10*x4231))+((sj1*x4239)));
evalcond[4]=(((cj4*x4237))+(((-1.0)*x4227*x4238))+((r02*sj4))+(((-1.0)*x4232*x4242))+(((-1.0)*r00*x4240)));
evalcond[5]=((((-1.0)*x4227*x4239))+(((-1.0)*x4232*x4243))+((r12*sj4))+(((-1.0)*r10*x4240))+((cj4*x4229)));
evalcond[6]=((((-0.09465)*cj5*r01))+(((-0.10915)*x4226))+(((-1.0)*px))+((x4225*x4241))+(((-1.0)*r00*x4233))+(((-1.0)*x4228*x4238))+((x4225*x4235)));
evalcond[7]=((((-0.09465)*x4230))+(((0.10915)*x4225))+((x4226*x4241))+(((-1.0)*r10*x4233))+((x4226*x4235))+(((-1.0)*py))+(((-1.0)*x4228*x4239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4244 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4244.valid){
continue;
}
CheckValue<IkReal> x4245=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4245.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4244.value)+(((1.5707963267949)*(x4245.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4246=IKcos(j0);
IkReal x4247=IKsin(j0);
IkReal x4248=(cj5*r11);
IkReal x4249=(cj5*r01);
IkReal x4250=((1.0)*sj5);
IkReal x4251=((0.09465)*sj5);
IkReal x4252=(sj1*sj2);
IkReal x4253=((0.39225)*cj2);
IkReal x4254=((1.0)*cj2);
IkReal x4255=((0.39225)*x4252);
IkReal x4256=(cj1*x4246);
IkReal x4257=(cj1*x4247);
evalcond[0]=((((-1.0)*x4254*x4256))+((x4246*x4252))+(((-1.0)*r00*x4250))+(((-1.0)*x4249)));
evalcond[1]=(((x4247*x4252))+(((-1.0)*x4254*x4257))+(((-1.0)*r10*x4250))+(((-1.0)*x4248)));
evalcond[2]=(((x4253*x4256))+(((0.425)*x4256))+(((-0.10915)*x4247))+(((-1.0)*x4246*x4255))+(((-1.0)*px))+(((-1.0)*r00*x4251))+(((-0.09465)*x4249)));
evalcond[3]=((((0.10915)*x4246))+((x4253*x4257))+(((0.425)*x4257))+(((-1.0)*py))+(((-1.0)*x4247*x4255))+(((-1.0)*r10*x4251))+(((-0.09465)*x4248)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4258=((1.0)*cj5);
IkReal x4259=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4258)));
j4eval[0]=x4259;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4258)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4259);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4260=((1.0)*cj5);
IkReal x4261=((((-1.0)*r11*x4260))+(((-1.0)*r10*sj5)));
j4eval[0]=x4261;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4260))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x4261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4262=((1.0)*sj0);
IkReal x4263=((1.0)*cj0);
IkReal x4264=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4264;
j4eval[1]=((IKabs(((((-1.0)*r12*x4262))+(((-1.0)*r02*x4263)))))+(IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x4263))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4262))))));
j4eval[2]=IKsign(x4264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4265=((-1.0)*r20);
IkReal x4267 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4267)==0){
continue;
}
IkReal x4266=pow(x4267,-0.5);
CheckValue<IkReal> x4268 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4265),IKFAST_ATAN2_MAGTHRESH);
if(!x4268.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4268.value));
IkReal gconst97=(r21*x4266);
IkReal gconst98=(x4265*x4266);
CheckValue<IkReal> x4269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4269.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4269.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4270=((-1.0)*r20);
IkReal x4271=x4266;
CheckValue<IkReal> x4273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4270),IKFAST_ATAN2_MAGTHRESH);
if(!x4273.valid){
continue;
}
IkReal x4272=((-1.0)*(x4273.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4272;
IkReal gconst96=x4272;
IkReal gconst97=(r21*x4271);
IkReal gconst98=(x4270*x4271);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4274=((-1.0)*r20);
IkReal x4275=x4266;
CheckValue<IkReal> x4277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4274),IKFAST_ATAN2_MAGTHRESH);
if(!x4277.valid){
continue;
}
IkReal x4276=((-1.0)*(x4277.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4276;
IkReal gconst96=x4276;
IkReal gconst97=(r21*x4275);
IkReal gconst98=(x4274*x4275);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4278=((-1.0)*r20);
IkReal x4279=x4266;
CheckValue<IkReal> x4281 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4278),IKFAST_ATAN2_MAGTHRESH);
if(!x4281.valid){
continue;
}
IkReal x4280=((-1.0)*(x4281.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4280;
IkReal gconst96=x4280;
IkReal gconst97=(r21*x4279);
IkReal gconst98=(x4278*x4279);
IkReal x4282=((1.0)*(r22*r22));
CheckValue<IkReal> x4286=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4282))),-1);
if(!x4286.valid){
continue;
}
IkReal x4283=x4286.value;
IkReal x4284=((1.0)*x4283);
IkReal x4285=((((-1.0)*x4282))+(((-1.0)*x4284*(r21*r21*r21*r21)))+(((-1.0)*x4284*(r20*r20*r20*r20)))+(((-2.0)*x4283*(r20*r20)*(r21*r21))));
j4eval[0]=x4285;
j4eval[1]=IKsign(x4285);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4287=(cj1*cj2);
IkReal x4288=(gconst98*r20);
IkReal x4289=(sj1*sj2);
IkReal x4290=(gconst97*r21);
CheckValue<IkReal> x4291 = IKatan2WithCheck(IkReal((((r22*x4289))+(((-1.0)*r22*x4287)))),IkReal((((x4289*x4290))+((x4287*x4288))+(((-1.0)*x4287*x4290))+(((-1.0)*x4288*x4289)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4291.valid){
continue;
}
CheckValue<IkReal> x4292=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4290*x4290)))+(((-1.0)*(x4288*x4288)))+(((-1.0)*(r22*r22)))+(((2.0)*x4288*x4290)))),-1);
if(!x4292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4291.value)+(((1.5707963267949)*(x4292.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4293=IKsin(j4);
IkReal x4294=IKcos(j4);
IkReal x4295=(gconst98*r10);
IkReal x4296=(gconst97*r21);
IkReal x4297=(gconst98*r20);
IkReal x4298=((1.0)*cj2);
IkReal x4299=((1.0)*sj0);
IkReal x4300=(gconst98*r00);
IkReal x4301=(cj1*sj2);
IkReal x4302=((1.0)*x4294);
IkReal x4303=((1.0)*x4293);
IkReal x4304=(gconst97*x4293);
IkReal x4305=(gconst97*x4294);
evalcond[0]=(((x4293*x4296))+(((-1.0)*r22*x4302))+(((-1.0)*x4297*x4303)));
evalcond[1]=((((-1.0)*r12*x4302))+((r11*x4304))+cj0+(((-1.0)*x4295*x4303)));
evalcond[2]=((((-1.0)*x4299))+((r01*x4304))+(((-1.0)*r02*x4302))+(((-1.0)*x4300*x4303)));
evalcond[3]=((((-1.0)*x4297*x4302))+((sj1*sj2))+((r22*x4293))+((x4294*x4296))+(((-1.0)*cj1*x4298)));
evalcond[4]=((((-1.0)*cj0*sj1*x4298))+(((-1.0)*cj0*x4301))+((r01*x4305))+(((-1.0)*x4300*x4302))+((r02*x4293)));
evalcond[5]=(((r11*x4305))+(((-1.0)*x4295*x4302))+((r12*x4293))+(((-1.0)*x4299*x4301))+(((-1.0)*sj0*sj1*x4298)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4306=((1.0)*gconst98);
CheckValue<IkReal> x4307=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4306))+(((-1.0)*gconst97*r10)))),-1);
if(!x4307.valid){
continue;
}
CheckValue<IkReal> x4308 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4308.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4307.value)))+(x4308.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4309=IKsin(j4);
IkReal x4310=IKcos(j4);
IkReal x4311=(gconst98*r10);
IkReal x4312=(gconst97*r21);
IkReal x4313=(gconst98*r20);
IkReal x4314=((1.0)*cj2);
IkReal x4315=((1.0)*sj0);
IkReal x4316=(gconst98*r00);
IkReal x4317=(cj1*sj2);
IkReal x4318=((1.0)*x4310);
IkReal x4319=((1.0)*x4309);
IkReal x4320=(gconst97*x4309);
IkReal x4321=(gconst97*x4310);
evalcond[0]=((((-1.0)*r22*x4318))+((x4309*x4312))+(((-1.0)*x4313*x4319)));
evalcond[1]=(cj0+(((-1.0)*x4311*x4319))+((r11*x4320))+(((-1.0)*r12*x4318)));
evalcond[2]=((((-1.0)*x4316*x4319))+(((-1.0)*x4315))+(((-1.0)*r02*x4318))+((r01*x4320)));
evalcond[3]=(((x4310*x4312))+((r22*x4309))+(((-1.0)*cj1*x4314))+((sj1*sj2))+(((-1.0)*x4313*x4318)));
evalcond[4]=(((r02*x4309))+(((-1.0)*cj0*x4317))+(((-1.0)*x4316*x4318))+(((-1.0)*cj0*sj1*x4314))+((r01*x4321)));
evalcond[5]=(((r12*x4309))+(((-1.0)*x4311*x4318))+(((-1.0)*x4315*x4317))+(((-1.0)*sj0*sj1*x4314))+((r11*x4321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4322=((1.0)*gconst98);
CheckValue<IkReal> x4323 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4322))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4323.valid){
continue;
}
CheckValue<IkReal> x4324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4322))+(((-1.0)*gconst97*r00)))),-1);
if(!x4324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4323.value)+(((1.5707963267949)*(x4324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4325=IKsin(j4);
IkReal x4326=IKcos(j4);
IkReal x4327=(gconst98*r10);
IkReal x4328=(gconst97*r21);
IkReal x4329=(gconst98*r20);
IkReal x4330=((1.0)*cj2);
IkReal x4331=((1.0)*sj0);
IkReal x4332=(gconst98*r00);
IkReal x4333=(cj1*sj2);
IkReal x4334=((1.0)*x4326);
IkReal x4335=((1.0)*x4325);
IkReal x4336=(gconst97*x4325);
IkReal x4337=(gconst97*x4326);
evalcond[0]=(((x4325*x4328))+(((-1.0)*r22*x4334))+(((-1.0)*x4329*x4335)));
evalcond[1]=(cj0+(((-1.0)*x4327*x4335))+(((-1.0)*r12*x4334))+((r11*x4336)));
evalcond[2]=((((-1.0)*x4332*x4335))+((r01*x4336))+(((-1.0)*r02*x4334))+(((-1.0)*x4331)));
evalcond[3]=(((x4326*x4328))+((sj1*sj2))+(((-1.0)*cj1*x4330))+((r22*x4325))+(((-1.0)*x4329*x4334)));
evalcond[4]=((((-1.0)*x4332*x4334))+((r01*x4337))+(((-1.0)*cj0*sj1*x4330))+((r02*x4325))+(((-1.0)*cj0*x4333)));
evalcond[5]=((((-1.0)*x4331*x4333))+(((-1.0)*x4327*x4334))+(((-1.0)*sj0*sj1*x4330))+((r12*x4325))+((r11*x4337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4338=((-1.0)*r21);
IkReal x4340 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4340)==0){
continue;
}
IkReal x4339=pow(x4340,-0.5);
CheckValue<IkReal> x4341 = IKatan2WithCheck(IkReal(x4338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4341.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4341.value))));
IkReal gconst100=(x4338*x4339);
IkReal gconst101=((1.0)*r20*x4339);
CheckValue<IkReal> x4342 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4342.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4342.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4343=((-1.0)*r21);
CheckValue<IkReal> x4346 = IKatan2WithCheck(IkReal(x4343),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4346.valid){
continue;
}
IkReal x4344=((1.0)*(x4346.value));
IkReal x4345=x4339;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4344)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4344)));
IkReal gconst100=(x4343*x4345);
IkReal gconst101=((1.0)*r20*x4345);
IkReal x4347=r22*r22;
IkReal x4348=((1.0)*x4347);
CheckValue<IkReal> x4352=IKPowWithIntegerCheck(((-1.0)+x4347),-1);
if(!x4352.valid){
continue;
}
IkReal x4349=x4352.value;
if((((1.0)+(((-1.0)*x4348)))) < -0.00001)
continue;
IkReal x4350=IKsqrt(((1.0)+(((-1.0)*x4348))));
IkReal x4351=(cj0*x4349*x4350);
j4eval[0]=((IKabs((x4351+(((-1.0)*x4348*x4351)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4353=((-1.0)*r21);
CheckValue<IkReal> x4356 = IKatan2WithCheck(IkReal(x4353),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4356.valid){
continue;
}
IkReal x4354=((1.0)*(x4356.value));
IkReal x4355=x4339;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4354)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4354)));
IkReal gconst100=(x4353*x4355);
IkReal gconst101=((1.0)*r20*x4355);
IkReal x4357=r22*r22;
IkReal x4358=((1.0)*x4357);
CheckValue<IkReal> x4362=IKPowWithIntegerCheck(((-1.0)+x4357),-1);
if(!x4362.valid){
continue;
}
IkReal x4359=x4362.value;
if((((1.0)+(((-1.0)*x4358)))) < -0.00001)
continue;
IkReal x4360=IKsqrt(((1.0)+(((-1.0)*x4358))));
IkReal x4361=(sj0*x4359*x4360);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x4358*x4361))+x4361))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4363=((-1.0)*r21);
CheckValue<IkReal> x4366 = IKatan2WithCheck(IkReal(x4363),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4366.valid){
continue;
}
IkReal x4364=((1.0)*(x4366.value));
IkReal x4365=x4339;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4364)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4364)));
IkReal gconst100=(x4363*x4365);
IkReal gconst101=((1.0)*r20*x4365);
IkReal x4367=r22*r22;
IkReal x4368=(r12*sj0);
IkReal x4369=(cj0*r02);
CheckValue<IkReal> x4373=IKPowWithIntegerCheck(((-1.0)+x4367),-1);
if(!x4373.valid){
continue;
}
IkReal x4370=x4373.value;
if((((1.0)+(((-1.0)*x4367)))) < -0.00001)
continue;
IkReal x4371=IKsqrt(((1.0)+(((-1.0)*x4367))));
IkReal x4372=(r22*x4370*x4371);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4368*x4372))+((x4369*x4372)))))+(IKabs(((((-1.0)*x4369))+(((-1.0)*x4368))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4374=((1.0)*sj0);
IkReal x4375=((1.0)*gconst100);
CheckValue<IkReal> x4376 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4374)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*cj0*r01*x4375))+(((-1.0)*gconst100*r11*x4374)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4376.valid){
continue;
}
CheckValue<IkReal> x4377=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4375))+(((-1.0)*gconst101*r21)))),-1);
if(!x4377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4376.value)+(((1.5707963267949)*(x4377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4378=IKsin(j4);
IkReal x4379=IKcos(j4);
IkReal x4380=(gconst101*r20);
IkReal x4381=(gconst101*r10);
IkReal x4382=((1.0)*cj2);
IkReal x4383=(gconst101*r00);
IkReal x4384=((1.0)*sj0);
IkReal x4385=(cj1*sj2);
IkReal x4386=((1.0)*x4379);
IkReal x4387=((1.0)*x4378);
IkReal x4388=(gconst100*x4378);
IkReal x4389=(gconst100*x4379);
evalcond[0]=((((-1.0)*x4380*x4387))+(((-1.0)*r22*x4386))+((r21*x4388)));
evalcond[1]=((((-1.0)*r12*x4386))+(((-1.0)*x4381*x4387))+cj0+((r11*x4388)));
evalcond[2]=((((-1.0)*r02*x4386))+(((-1.0)*x4383*x4387))+(((-1.0)*x4384))+((r01*x4388)));
evalcond[3]=(((r22*x4378))+(((-1.0)*x4380*x4386))+((sj1*sj2))+((r21*x4389))+(((-1.0)*cj1*x4382)));
evalcond[4]=(((r02*x4378))+(((-1.0)*cj0*sj1*x4382))+(((-1.0)*cj0*x4385))+(((-1.0)*x4383*x4386))+((r01*x4389)));
evalcond[5]=((((-1.0)*x4381*x4386))+((r12*x4378))+(((-1.0)*x4384*x4385))+((r11*x4389))+(((-1.0)*sj0*sj1*x4382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4390=((1.0)*gconst101);
CheckValue<IkReal> x4391=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4390))+(((-1.0)*gconst100*r10)))),-1);
if(!x4391.valid){
continue;
}
CheckValue<IkReal> x4392 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4390))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4391.value)))+(x4392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4393=IKsin(j4);
IkReal x4394=IKcos(j4);
IkReal x4395=(gconst101*r20);
IkReal x4396=(gconst101*r10);
IkReal x4397=((1.0)*cj2);
IkReal x4398=(gconst101*r00);
IkReal x4399=((1.0)*sj0);
IkReal x4400=(cj1*sj2);
IkReal x4401=((1.0)*x4394);
IkReal x4402=((1.0)*x4393);
IkReal x4403=(gconst100*x4393);
IkReal x4404=(gconst100*x4394);
evalcond[0]=(((r21*x4403))+(((-1.0)*x4395*x4402))+(((-1.0)*r22*x4401)));
evalcond[1]=(((r11*x4403))+cj0+(((-1.0)*x4396*x4402))+(((-1.0)*r12*x4401)));
evalcond[2]=((((-1.0)*x4399))+(((-1.0)*x4398*x4402))+((r01*x4403))+(((-1.0)*r02*x4401)));
evalcond[3]=(((r21*x4404))+((r22*x4393))+((sj1*sj2))+(((-1.0)*x4395*x4401))+(((-1.0)*cj1*x4397)));
evalcond[4]=((((-1.0)*cj0*sj1*x4397))+(((-1.0)*cj0*x4400))+((r02*x4393))+(((-1.0)*x4398*x4401))+((r01*x4404)));
evalcond[5]=((((-1.0)*sj0*sj1*x4397))+((r11*x4404))+(((-1.0)*x4396*x4401))+(((-1.0)*x4399*x4400))+((r12*x4393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4405=((1.0)*gconst101);
CheckValue<IkReal> x4406=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x4405)))),-1);
if(!x4406.valid){
continue;
}
CheckValue<IkReal> x4407 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4405))+((cj0*gconst100*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4406.value)))+(x4407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4408=IKsin(j4);
IkReal x4409=IKcos(j4);
IkReal x4410=(gconst101*r20);
IkReal x4411=(gconst101*r10);
IkReal x4412=((1.0)*cj2);
IkReal x4413=(gconst101*r00);
IkReal x4414=((1.0)*sj0);
IkReal x4415=(cj1*sj2);
IkReal x4416=((1.0)*x4409);
IkReal x4417=((1.0)*x4408);
IkReal x4418=(gconst100*x4408);
IkReal x4419=(gconst100*x4409);
evalcond[0]=(((r21*x4418))+(((-1.0)*x4410*x4417))+(((-1.0)*r22*x4416)));
evalcond[1]=(((r11*x4418))+cj0+(((-1.0)*x4411*x4417))+(((-1.0)*r12*x4416)));
evalcond[2]=(((r01*x4418))+(((-1.0)*r02*x4416))+(((-1.0)*x4414))+(((-1.0)*x4413*x4417)));
evalcond[3]=(((r21*x4419))+((r22*x4408))+(((-1.0)*x4410*x4416))+((sj1*sj2))+(((-1.0)*cj1*x4412)));
evalcond[4]=((((-1.0)*cj0*sj1*x4412))+(((-1.0)*cj0*x4415))+((r01*x4419))+(((-1.0)*x4413*x4416))+((r02*x4408)));
evalcond[5]=(((r11*x4419))+((r12*x4408))+(((-1.0)*x4411*x4416))+(((-1.0)*x4414*x4415))+(((-1.0)*sj0*sj1*x4412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4420=((-1.0)*r10);
IkReal x4422 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4422)==0){
continue;
}
IkReal x4421=pow(x4422,-0.5);
CheckValue<IkReal> x4423 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4420),IKFAST_ATAN2_MAGTHRESH);
if(!x4423.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4423.value));
IkReal gconst103=(r11*x4421);
IkReal gconst104=(x4420*x4421);
CheckValue<IkReal> x4424 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4424.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4424.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4425=((-1.0)*r10);
IkReal x4426=x4421;
CheckValue<IkReal> x4428 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4425),IKFAST_ATAN2_MAGTHRESH);
if(!x4428.valid){
continue;
}
IkReal x4427=((-1.0)*(x4428.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4427;
IkReal gconst102=x4427;
IkReal gconst103=(r11*x4426);
IkReal gconst104=(x4425*x4426);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4429=((1.0)*sj0);
IkReal x4430=((1.0)*gconst103);
CheckValue<IkReal> x4431 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4429)))),IkReal(((((-1.0)*gconst103*r11*x4429))+(((-1.0)*cj0*r01*x4430))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4431.valid){
continue;
}
CheckValue<IkReal> x4432=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4430)))),-1);
if(!x4432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4431.value)+(((1.5707963267949)*(x4432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4433=IKsin(j4);
IkReal x4434=IKcos(j4);
IkReal x4435=(gconst103*r11);
IkReal x4436=((1.0)*cj2);
IkReal x4437=((1.0)*sj0);
IkReal x4438=(cj1*sj2);
IkReal x4439=((1.0)*x4434);
IkReal x4440=(gconst103*x4434);
IkReal x4441=(gconst103*x4433);
IkReal x4442=((1.0)*gconst104*x4433);
evalcond[0]=(((r21*x4441))+(((-1.0)*r22*x4439))+(((-1.0)*r20*x4442)));
evalcond[1]=(cj0+(((-1.0)*r12*x4439))+(((-1.0)*r10*x4442))+((x4433*x4435)));
evalcond[2]=((((-1.0)*r02*x4439))+((r01*x4441))+(((-1.0)*x4437))+(((-1.0)*r00*x4442)));
evalcond[3]=(((r22*x4433))+((r21*x4440))+((sj1*sj2))+(((-1.0)*cj1*x4436))+(((-1.0)*gconst104*r20*x4439)));
evalcond[4]=(((r01*x4440))+(((-1.0)*cj0*x4438))+(((-1.0)*cj0*sj1*x4436))+(((-1.0)*gconst104*r00*x4439))+((r02*x4433)));
evalcond[5]=((((-1.0)*gconst104*r10*x4439))+((x4434*x4435))+((r12*x4433))+(((-1.0)*x4437*x4438))+(((-1.0)*sj0*sj1*x4436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4443=((1.0)*gconst104);
CheckValue<IkReal> x4444 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4443))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4444.valid){
continue;
}
CheckValue<IkReal> x4445=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x4443)))),-1);
if(!x4445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4444.value)+(((1.5707963267949)*(x4445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4446=IKsin(j4);
IkReal x4447=IKcos(j4);
IkReal x4448=(gconst103*r11);
IkReal x4449=((1.0)*cj2);
IkReal x4450=((1.0)*sj0);
IkReal x4451=(cj1*sj2);
IkReal x4452=((1.0)*x4447);
IkReal x4453=(gconst103*x4447);
IkReal x4454=(gconst103*x4446);
IkReal x4455=((1.0)*gconst104*x4446);
evalcond[0]=(((r21*x4454))+(((-1.0)*r22*x4452))+(((-1.0)*r20*x4455)));
evalcond[1]=(((x4446*x4448))+cj0+(((-1.0)*r12*x4452))+(((-1.0)*r10*x4455)));
evalcond[2]=((((-1.0)*x4450))+((r01*x4454))+(((-1.0)*r02*x4452))+(((-1.0)*r00*x4455)));
evalcond[3]=((((-1.0)*gconst104*r20*x4452))+((r21*x4453))+((sj1*sj2))+(((-1.0)*cj1*x4449))+((r22*x4446)));
evalcond[4]=((((-1.0)*gconst104*r00*x4452))+((r01*x4453))+(((-1.0)*cj0*sj1*x4449))+(((-1.0)*cj0*x4451))+((r02*x4446)));
evalcond[5]=((((-1.0)*gconst104*r10*x4452))+((r12*x4446))+((x4447*x4448))+(((-1.0)*x4450*x4451))+(((-1.0)*sj0*sj1*x4449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4456=((-1.0)*r11);
IkReal x4458 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4458)==0){
continue;
}
IkReal x4457=pow(x4458,-0.5);
CheckValue<IkReal> x4459 = IKatan2WithCheck(IkReal(x4456),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4459.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4459.value))));
IkReal gconst106=(x4456*x4457);
IkReal gconst107=((1.0)*r10*x4457);
CheckValue<IkReal> x4460 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4460.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4460.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4461=((-1.0)*r11);
CheckValue<IkReal> x4464 = IKatan2WithCheck(IkReal(x4461),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4464.valid){
continue;
}
IkReal x4462=((1.0)*(x4464.value));
IkReal x4463=x4457;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4462)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4462)));
IkReal gconst106=(x4461*x4463);
IkReal gconst107=((1.0)*r10*x4463);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4465=((-1.0)*r11);
CheckValue<IkReal> x4468 = IKatan2WithCheck(IkReal(x4465),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4468.valid){
continue;
}
IkReal x4466=((1.0)*(x4468.value));
IkReal x4467=x4457;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4466)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4466)));
IkReal gconst106=(x4465*x4467);
IkReal gconst107=((1.0)*r10*x4467);
IkReal x4469=r12*r12;
IkReal x4470=((1.0)*sj0);
IkReal x4471=(cj0*r02);
IkReal x4472=x4457;
j4eval[0]=((IKabs(((((-1.0)*r12*x4470))+(((-1.0)*x4471)))))+(IKabs(((((-1.0)*x4470*x4472))+((sj0*x4469*x4472))+((r12*x4471*x4472))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4473=((-1.0)*r11);
CheckValue<IkReal> x4476 = IKatan2WithCheck(IkReal(x4473),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4476.valid){
continue;
}
IkReal x4474=((1.0)*(x4476.value));
IkReal x4475=x4457;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4474)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4474)));
IkReal gconst106=(x4473*x4475);
IkReal gconst107=((1.0)*r10*x4475);
IkReal x4477=r12*r12;
IkReal x4478=((1.0)+(((-1.0)*x4477)));
IkReal x4479=(r22*sj1*sj2);
IkReal x4480=(cj1*cj2*r22);
CheckValue<IkReal> x4487=IKPowWithIntegerCheck(x4478,-1);
if(!x4487.valid){
continue;
}
IkReal x4481=x4487.value;
CheckValue<IkReal> x4488=IKPowWithIntegerCheck(((-1.0)+x4477),-1);
if(!x4488.valid){
continue;
}
IkReal x4482=x4488.value;
IkReal x4483=((1.0)*x4481);
if((x4478) < -0.00001)
continue;
IkReal x4484=IKsqrt(x4478);
IkReal x4485=(r12*x4482*x4484);
IkReal x4486=((((-1.0)*x4483*(r10*r10)*(r20*r20)))+(((-1.0)*x4483*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x4481))+(((-1.0)*(r22*r22))));
j4eval[0]=x4486;
j4eval[1]=((IKabs(((((-1.0)*x4480))+x4479)))+(IKabs(((((-1.0)*x4479*x4485))+((x4480*x4485))))));
j4eval[2]=IKsign(x4486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4489=(sj1*sj2);
IkReal x4490=(gconst106*r21);
IkReal x4491=(gconst107*r20);
IkReal x4492=(cj1*cj2);
CheckValue<IkReal> x4493=IKPowWithIntegerCheck(IKsign(((((2.0)*x4490*x4491))+(((-1.0)*(x4491*x4491)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x4490*x4490))))),-1);
if(!x4493.valid){
continue;
}
CheckValue<IkReal> x4494 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4492))+((r22*x4489)))),IkReal(((((-1.0)*x4489*x4491))+((x4491*x4492))+(((-1.0)*x4490*x4492))+((x4489*x4490)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4493.value)))+(x4494.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4495=IKsin(j4);
IkReal x4496=IKcos(j4);
IkReal x4497=(gconst107*r10);
IkReal x4498=(gconst107*r00);
IkReal x4499=((1.0)*cj2);
IkReal x4500=(gconst107*r20);
IkReal x4501=((1.0)*sj0);
IkReal x4502=(cj1*sj2);
IkReal x4503=((1.0)*x4496);
IkReal x4504=(gconst106*x4496);
IkReal x4505=(gconst106*x4495);
IkReal x4506=((1.0)*x4495);
evalcond[0]=(((r21*x4505))+(((-1.0)*x4500*x4506))+(((-1.0)*r22*x4503)));
evalcond[1]=(cj0+((r11*x4505))+(((-1.0)*x4497*x4506))+(((-1.0)*r12*x4503)));
evalcond[2]=((((-1.0)*x4501))+(((-1.0)*r02*x4503))+(((-1.0)*x4498*x4506))+((r01*x4505)));
evalcond[3]=((((-1.0)*cj1*x4499))+((r21*x4504))+((sj1*sj2))+((r22*x4495))+(((-1.0)*x4500*x4503)));
evalcond[4]=(((r02*x4495))+(((-1.0)*x4498*x4503))+(((-1.0)*cj0*x4502))+((r01*x4504))+(((-1.0)*cj0*sj1*x4499)));
evalcond[5]=(((r12*x4495))+((r11*x4504))+(((-1.0)*x4497*x4503))+(((-1.0)*sj0*sj1*x4499))+(((-1.0)*x4501*x4502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4507=((1.0)*sj0);
IkReal x4508=((1.0)*gconst106);
CheckValue<IkReal> x4509 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4507)))),IkReal(((((-1.0)*gconst106*r11*x4507))+(((-1.0)*cj0*r01*x4508))+((gconst107*r10*sj0))+((cj0*gconst107*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4509.valid){
continue;
}
CheckValue<IkReal> x4510=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x4508)))),-1);
if(!x4510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4509.value)+(((1.5707963267949)*(x4510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4511=IKsin(j4);
IkReal x4512=IKcos(j4);
IkReal x4513=(gconst107*r10);
IkReal x4514=(gconst107*r00);
IkReal x4515=((1.0)*cj2);
IkReal x4516=(gconst107*r20);
IkReal x4517=((1.0)*sj0);
IkReal x4518=(cj1*sj2);
IkReal x4519=((1.0)*x4512);
IkReal x4520=(gconst106*x4512);
IkReal x4521=(gconst106*x4511);
IkReal x4522=((1.0)*x4511);
evalcond[0]=(((r21*x4521))+(((-1.0)*x4516*x4522))+(((-1.0)*r22*x4519)));
evalcond[1]=(((r11*x4521))+cj0+(((-1.0)*r12*x4519))+(((-1.0)*x4513*x4522)));
evalcond[2]=(((r01*x4521))+(((-1.0)*r02*x4519))+(((-1.0)*x4514*x4522))+(((-1.0)*x4517)));
evalcond[3]=((((-1.0)*cj1*x4515))+(((-1.0)*x4516*x4519))+((r21*x4520))+((sj1*sj2))+((r22*x4511)));
evalcond[4]=(((r02*x4511))+((r01*x4520))+(((-1.0)*cj0*x4518))+(((-1.0)*cj0*sj1*x4515))+(((-1.0)*x4514*x4519)));
evalcond[5]=(((r11*x4520))+(((-1.0)*x4513*x4519))+(((-1.0)*sj0*sj1*x4515))+((r12*x4511))+(((-1.0)*x4517*x4518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4523=((1.0)*gconst107);
CheckValue<IkReal> x4524=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4523)))),-1);
if(!x4524.valid){
continue;
}
CheckValue<IkReal> x4525 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4523))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4524.value)))+(x4525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4526=IKsin(j4);
IkReal x4527=IKcos(j4);
IkReal x4528=(gconst107*r10);
IkReal x4529=(gconst107*r00);
IkReal x4530=((1.0)*cj2);
IkReal x4531=(gconst107*r20);
IkReal x4532=((1.0)*sj0);
IkReal x4533=(cj1*sj2);
IkReal x4534=((1.0)*x4527);
IkReal x4535=(gconst106*x4527);
IkReal x4536=(gconst106*x4526);
IkReal x4537=((1.0)*x4526);
evalcond[0]=(((r21*x4536))+(((-1.0)*x4531*x4537))+(((-1.0)*r22*x4534)));
evalcond[1]=(cj0+(((-1.0)*x4528*x4537))+(((-1.0)*r12*x4534))+((r11*x4536)));
evalcond[2]=(((r01*x4536))+(((-1.0)*x4532))+(((-1.0)*x4529*x4537))+(((-1.0)*r02*x4534)));
evalcond[3]=(((r21*x4535))+(((-1.0)*x4531*x4534))+(((-1.0)*cj1*x4530))+((sj1*sj2))+((r22*x4526)));
evalcond[4]=(((r01*x4535))+((r02*x4526))+(((-1.0)*cj0*x4533))+(((-1.0)*x4529*x4534))+(((-1.0)*cj0*sj1*x4530)));
evalcond[5]=(((r12*x4526))+(((-1.0)*x4528*x4534))+(((-1.0)*x4532*x4533))+((r11*x4535))+(((-1.0)*sj0*sj1*x4530)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4538=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4538;
j4eval[1]=IKsign(x4538);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4539=((1.0)*cj5);
IkReal x4540=((((-1.0)*r01*x4539))+(((-1.0)*r00*sj5)));
j4eval[0]=x4540;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4539))))));
j4eval[2]=IKsign(x4540);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4541=(sj1*sj2);
IkReal x4542=(cj5*r10);
IkReal x4543=(r11*sj5);
IkReal x4544=(cj1*cj2);
IkReal x4545=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4545;
j4eval[1]=((IKabs(((((-1.0)*x4543*x4544))+(((-1.0)*x4541*x4542))+((x4542*x4544))+((x4541*x4543)))))+(IKabs((((r12*x4544))+(((-1.0)*r12*x4541))))));
j4eval[2]=IKsign(x4545);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4546=(sj1*sj2);
IkReal x4547=(cj5*r10);
IkReal x4548=(r11*sj5);
IkReal x4549=(cj1*cj2);
CheckValue<IkReal> x4550=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4550.valid){
continue;
}
CheckValue<IkReal> x4551 = IKatan2WithCheck(IkReal((((x4547*x4549))+((x4546*x4548))+(((-1.0)*x4548*x4549))+(((-1.0)*x4546*x4547)))),IkReal((((r12*x4549))+(((-1.0)*r12*x4546)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4551.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4550.value)))+(x4551.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4552=IKcos(j4);
IkReal x4553=IKsin(j4);
IkReal x4554=(cj5*r00);
IkReal x4555=(cj5*r10);
IkReal x4556=(r21*sj5);
IkReal x4557=((1.0)*cj2);
IkReal x4558=(cj5*r20);
IkReal x4559=((1.0)*x4552);
IkReal x4560=((1.0)*x4553);
IkReal x4561=(sj5*x4553);
IkReal x4562=(sj5*x4552);
evalcond[0]=(((r11*x4562))+(((-1.0)*x4555*x4559))+((r12*x4553)));
evalcond[1]=(((x4553*x4556))+(((-1.0)*x4558*x4560))+(((-1.0)*r22*x4559)));
evalcond[2]=((((-1.0)*r02*x4559))+((r01*x4561))+(((-1.0)*x4554*x4560)));
evalcond[3]=((1.0)+(((-1.0)*r12*x4559))+((r11*x4561))+(((-1.0)*x4555*x4560)));
evalcond[4]=(((x4552*x4556))+(((-1.0)*cj1*x4557))+((sj1*sj2))+((r22*x4553))+(((-1.0)*x4558*x4559)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r02*x4553))+(((-1.0)*x4554*x4559))+((r01*x4562))+(((-1.0)*sj1*x4557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4563=((1.0)*cj5);
CheckValue<IkReal> x4564 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4563))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4564.valid){
continue;
}
CheckValue<IkReal> x4565=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4563))+(((-1.0)*r00*sj5)))),-1);
if(!x4565.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4564.value)+(((1.5707963267949)*(x4565.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4566=IKcos(j4);
IkReal x4567=IKsin(j4);
IkReal x4568=(cj5*r00);
IkReal x4569=(cj5*r10);
IkReal x4570=(r21*sj5);
IkReal x4571=((1.0)*cj2);
IkReal x4572=(cj5*r20);
IkReal x4573=((1.0)*x4566);
IkReal x4574=((1.0)*x4567);
IkReal x4575=(sj5*x4567);
IkReal x4576=(sj5*x4566);
evalcond[0]=((((-1.0)*x4569*x4573))+((r12*x4567))+((r11*x4576)));
evalcond[1]=(((x4567*x4570))+(((-1.0)*x4572*x4574))+(((-1.0)*r22*x4573)));
evalcond[2]=((((-1.0)*r02*x4573))+(((-1.0)*x4568*x4574))+((r01*x4575)));
evalcond[3]=((1.0)+(((-1.0)*x4569*x4574))+((r11*x4575))+(((-1.0)*r12*x4573)));
evalcond[4]=((((-1.0)*cj1*x4571))+((r22*x4567))+((sj1*sj2))+(((-1.0)*x4572*x4573))+((x4566*x4570)));
evalcond[5]=((((-1.0)*sj1*x4571))+((r02*x4567))+(((-1.0)*cj1*sj2))+(((-1.0)*x4568*x4573))+((r01*x4576)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4577=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4577.valid){
continue;
}
CheckValue<IkReal> x4578 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4577.value)))+(x4578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4579=IKcos(j4);
IkReal x4580=IKsin(j4);
IkReal x4581=(cj5*r00);
IkReal x4582=(cj5*r10);
IkReal x4583=(r21*sj5);
IkReal x4584=((1.0)*cj2);
IkReal x4585=(cj5*r20);
IkReal x4586=((1.0)*x4579);
IkReal x4587=((1.0)*x4580);
IkReal x4588=(sj5*x4580);
IkReal x4589=(sj5*x4579);
evalcond[0]=(((r11*x4589))+((r12*x4580))+(((-1.0)*x4582*x4586)));
evalcond[1]=((((-1.0)*r22*x4586))+(((-1.0)*x4585*x4587))+((x4580*x4583)));
evalcond[2]=((((-1.0)*r02*x4586))+(((-1.0)*x4581*x4587))+((r01*x4588)));
evalcond[3]=((1.0)+((r11*x4588))+(((-1.0)*r12*x4586))+(((-1.0)*x4582*x4587)));
evalcond[4]=(((r22*x4580))+((sj1*sj2))+((x4579*x4583))+(((-1.0)*x4585*x4586))+(((-1.0)*cj1*x4584)));
evalcond[5]=(((r02*x4580))+(((-1.0)*cj1*sj2))+(((-1.0)*x4581*x4586))+(((-1.0)*sj1*x4584))+((r01*x4589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4590=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4590;
j4eval[1]=IKsign(x4590);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4591=((1.0)*cj5);
IkReal x4592=((((-1.0)*r21*x4591))+(((-1.0)*r20*sj5)));
j4eval[0]=x4592;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4591))))));
j4eval[2]=IKsign(x4592);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4593=cj5*cj5;
IkReal x4594=r11*r11;
IkReal x4595=(r11*sj5);
IkReal x4596=(cj5*r10);
IkReal x4597=((r12*r12)+x4594+(((-1.0)*x4593*x4594))+(((-2.0)*x4595*x4596))+((x4593*(r10*r10))));
j4eval[0]=x4597;
j4eval[1]=IKsign(x4597);
j4eval[2]=((IKabs((x4595+(((-1.0)*x4596)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4598=cj5*cj5;
IkReal x4599=r11*r11;
IkReal x4600=(cj5*r10);
IkReal x4601=(r11*sj5);
CheckValue<IkReal> x4602=IKPowWithIntegerCheck(IKsign(((r12*r12)+x4599+(((-2.0)*x4600*x4601))+((x4598*(r10*r10)))+(((-1.0)*x4598*x4599)))),-1);
if(!x4602.valid){
continue;
}
CheckValue<IkReal> x4603 = IKatan2WithCheck(IkReal(((((-1.0)*x4600))+x4601)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4603.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4602.value)))+(x4603.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4604=IKcos(j4);
IkReal x4605=IKsin(j4);
IkReal x4606=(cj5*r00);
IkReal x4607=(cj5*r10);
IkReal x4608=(r21*sj5);
IkReal x4609=(cj5*r20);
IkReal x4610=((1.0)*x4604);
IkReal x4611=((1.0)*x4605);
IkReal x4612=(sj5*x4605);
IkReal x4613=(sj5*x4604);
evalcond[0]=(((r12*x4605))+(((-1.0)*x4607*x4610))+((r11*x4613)));
evalcond[1]=(((x4605*x4608))+(((-1.0)*x4609*x4611))+(((-1.0)*r22*x4610)));
evalcond[2]=((((-1.0)*r02*x4610))+(((-1.0)*x4606*x4611))+((r01*x4612)));
evalcond[3]=((-1.0)+(((-1.0)*x4607*x4611))+((r11*x4612))+(((-1.0)*r12*x4610)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4606*x4610))+((r01*x4613))+((r02*x4605)));
evalcond[5]=(((x4604*x4608))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4609*x4610))+((r22*x4605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4614=((1.0)*cj5);
CheckValue<IkReal> x4615 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4615.valid){
continue;
}
CheckValue<IkReal> x4616=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4614))+(((-1.0)*r20*sj5)))),-1);
if(!x4616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4615.value)+(((1.5707963267949)*(x4616.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4617=IKcos(j4);
IkReal x4618=IKsin(j4);
IkReal x4619=(cj5*r00);
IkReal x4620=(cj5*r10);
IkReal x4621=(r21*sj5);
IkReal x4622=(cj5*r20);
IkReal x4623=((1.0)*x4617);
IkReal x4624=((1.0)*x4618);
IkReal x4625=(sj5*x4618);
IkReal x4626=(sj5*x4617);
evalcond[0]=(((r11*x4626))+((r12*x4618))+(((-1.0)*x4620*x4623)));
evalcond[1]=((((-1.0)*r22*x4623))+((x4618*x4621))+(((-1.0)*x4622*x4624)));
evalcond[2]=((((-1.0)*r02*x4623))+(((-1.0)*x4619*x4624))+((r01*x4625)));
evalcond[3]=((-1.0)+((r11*x4625))+(((-1.0)*x4620*x4624))+(((-1.0)*r12*x4623)));
evalcond[4]=(((cj2*sj1))+((r02*x4618))+((cj1*sj2))+(((-1.0)*x4619*x4623))+((r01*x4626)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4618))+((x4617*x4621))+(((-1.0)*x4622*x4623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4627 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4627.valid){
continue;
}
CheckValue<IkReal> x4628=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4628.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4627.value)+(((1.5707963267949)*(x4628.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4629=IKcos(j4);
IkReal x4630=IKsin(j4);
IkReal x4631=(cj5*r00);
IkReal x4632=(cj5*r10);
IkReal x4633=(r21*sj5);
IkReal x4634=(cj5*r20);
IkReal x4635=((1.0)*x4629);
IkReal x4636=((1.0)*x4630);
IkReal x4637=(sj5*x4630);
IkReal x4638=(sj5*x4629);
evalcond[0]=(((r12*x4630))+((r11*x4638))+(((-1.0)*x4632*x4635)));
evalcond[1]=((((-1.0)*x4634*x4636))+((x4630*x4633))+(((-1.0)*r22*x4635)));
evalcond[2]=(((r01*x4637))+(((-1.0)*r02*x4635))+(((-1.0)*x4631*x4636)));
evalcond[3]=((-1.0)+((r11*x4637))+(((-1.0)*r12*x4635))+(((-1.0)*x4632*x4636)));
evalcond[4]=(((cj2*sj1))+((r01*x4638))+((cj1*sj2))+(((-1.0)*x4631*x4635))+((r02*x4630)));
evalcond[5]=((((-1.0)*x4634*x4635))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4629*x4633))+((r22*x4630)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4639=((-1.0)*r00);
IkReal x4641 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4641)==0){
continue;
}
IkReal x4640=pow(x4641,-0.5);
CheckValue<IkReal> x4642 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4639),IKFAST_ATAN2_MAGTHRESH);
if(!x4642.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4642.value));
IkReal gconst109=(r01*x4640);
IkReal gconst110=(x4639*x4640);
CheckValue<IkReal> x4643 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4643.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4643.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4644=((-1.0)*r00);
IkReal x4645=x4640;
CheckValue<IkReal> x4647 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4644),IKFAST_ATAN2_MAGTHRESH);
if(!x4647.valid){
continue;
}
IkReal x4646=((-1.0)*(x4647.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4646;
IkReal gconst108=x4646;
IkReal gconst109=(r01*x4645);
IkReal gconst110=(x4644*x4645);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4648=((1.0)*sj0);
IkReal x4649=((1.0)*gconst109);
CheckValue<IkReal> x4650=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4649))+(((-1.0)*gconst110*r21)))),-1);
if(!x4650.valid){
continue;
}
CheckValue<IkReal> x4651 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4648))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x4649))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4650.value)))+(x4651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4652=IKsin(j4);
IkReal x4653=IKcos(j4);
IkReal x4654=(gconst109*r21);
IkReal x4655=((1.0)*cj2);
IkReal x4656=((1.0)*sj0);
IkReal x4657=(cj1*sj2);
IkReal x4658=((1.0)*x4653);
IkReal x4659=(gconst109*x4652);
IkReal x4660=(gconst109*x4653);
IkReal x4661=((1.0)*gconst110*x4652);
evalcond[0]=((((-1.0)*r20*x4661))+(((-1.0)*r22*x4658))+((x4652*x4654)));
evalcond[1]=(((r11*x4659))+cj0+(((-1.0)*r10*x4661))+(((-1.0)*r12*x4658)));
evalcond[2]=((((-1.0)*x4656))+(((-1.0)*r02*x4658))+(((-1.0)*r00*x4661))+((r01*x4659)));
evalcond[3]=((((-1.0)*cj1*x4655))+((x4653*x4654))+((sj1*sj2))+((r22*x4652))+(((-1.0)*gconst110*r20*x4658)));
evalcond[4]=((((-1.0)*gconst110*r00*x4658))+(((-1.0)*cj0*x4657))+((r01*x4660))+((r02*x4652))+(((-1.0)*cj0*sj1*x4655)));
evalcond[5]=(((r12*x4652))+((r11*x4660))+(((-1.0)*gconst110*r10*x4658))+(((-1.0)*x4656*x4657))+(((-1.0)*sj0*sj1*x4655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4662=((1.0)*gconst110);
CheckValue<IkReal> x4663 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4662))+((gconst109*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4663.valid){
continue;
}
CheckValue<IkReal> x4664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4662))+(((-1.0)*gconst109*r10)))),-1);
if(!x4664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4663.value)+(((1.5707963267949)*(x4664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4665=IKsin(j4);
IkReal x4666=IKcos(j4);
IkReal x4667=(gconst109*r21);
IkReal x4668=((1.0)*cj2);
IkReal x4669=((1.0)*sj0);
IkReal x4670=(cj1*sj2);
IkReal x4671=((1.0)*x4666);
IkReal x4672=(gconst109*x4665);
IkReal x4673=(gconst109*x4666);
IkReal x4674=((1.0)*gconst110*x4665);
evalcond[0]=(((x4665*x4667))+(((-1.0)*r20*x4674))+(((-1.0)*r22*x4671)));
evalcond[1]=(cj0+((r11*x4672))+(((-1.0)*r12*x4671))+(((-1.0)*r10*x4674)));
evalcond[2]=((((-1.0)*r02*x4671))+((r01*x4672))+(((-1.0)*x4669))+(((-1.0)*r00*x4674)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst110*r20*x4671))+((r22*x4665))+((x4666*x4667))+(((-1.0)*cj1*x4668)));
evalcond[4]=((((-1.0)*cj0*x4670))+((r02*x4665))+(((-1.0)*cj0*sj1*x4668))+((r01*x4673))+(((-1.0)*gconst110*r00*x4671)));
evalcond[5]=((((-1.0)*gconst110*r10*x4671))+((r12*x4665))+((r11*x4673))+(((-1.0)*sj0*sj1*x4668))+(((-1.0)*x4669*x4670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4675=((-1.0)*r01);
IkReal x4677 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4677)==0){
continue;
}
IkReal x4676=pow(x4677,-0.5);
CheckValue<IkReal> x4678 = IKatan2WithCheck(IkReal(x4675),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4678.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4678.value))));
IkReal gconst112=(x4675*x4676);
IkReal gconst113=((1.0)*r00*x4676);
CheckValue<IkReal> x4679 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4679.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4679.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4680=((-1.0)*r01);
CheckValue<IkReal> x4683 = IKatan2WithCheck(IkReal(x4680),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4683.valid){
continue;
}
IkReal x4681=((1.0)*(x4683.value));
IkReal x4682=x4676;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4681)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4681)));
IkReal gconst112=(x4680*x4682);
IkReal gconst113=((1.0)*r00*x4682);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4684=((-1.0)*r01);
CheckValue<IkReal> x4687 = IKatan2WithCheck(IkReal(x4684),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4687.valid){
continue;
}
IkReal x4685=((1.0)*(x4687.value));
IkReal x4686=x4676;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4685)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4685)));
IkReal gconst112=(x4684*x4686);
IkReal gconst113=((1.0)*r00*x4686);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4688=((-1.0)*r01);
CheckValue<IkReal> x4691 = IKatan2WithCheck(IkReal(x4688),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4691.valid){
continue;
}
IkReal x4689=((1.0)*(x4691.value));
IkReal x4690=x4676;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4689)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4689)));
IkReal gconst112=(x4688*x4690);
IkReal gconst113=((1.0)*r00*x4690);
IkReal x4692=r02*r02;
IkReal x4693=(r12*sj0);
IkReal x4694=((1.0)*cj0);
IkReal x4695=x4676;
j4eval[0]=((IKabs(((((-1.0)*r02*x4694))+(((-1.0)*x4693)))))+(IKabs(((((-1.0)*x4694*x4695))+((r02*x4693*x4695))+((cj0*x4692*x4695))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4696=((1.0)*sj0);
IkReal x4697=((1.0)*gconst112);
CheckValue<IkReal> x4698 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4696))+(((-1.0)*cj0*r02)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4697))+(((-1.0)*gconst112*r11*x4696)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4698.valid){
continue;
}
CheckValue<IkReal> x4699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4697))+(((-1.0)*gconst113*r21)))),-1);
if(!x4699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4698.value)+(((1.5707963267949)*(x4699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4700=IKsin(j4);
IkReal x4701=IKcos(j4);
IkReal x4702=(gconst113*r20);
IkReal x4703=(gconst112*r21);
IkReal x4704=((1.0)*cj2);
IkReal x4705=(gconst113*r00);
IkReal x4706=(gconst113*r10);
IkReal x4707=((1.0)*sj0);
IkReal x4708=(cj1*sj2);
IkReal x4709=((1.0)*x4701);
IkReal x4710=((1.0)*x4700);
IkReal x4711=(gconst112*x4701);
IkReal x4712=(gconst112*x4700);
evalcond[0]=((((-1.0)*r22*x4709))+((x4700*x4703))+(((-1.0)*x4702*x4710)));
evalcond[1]=(cj0+(((-1.0)*r12*x4709))+(((-1.0)*x4706*x4710))+((r11*x4712)));
evalcond[2]=((((-1.0)*r02*x4709))+((r01*x4712))+(((-1.0)*x4705*x4710))+(((-1.0)*x4707)));
evalcond[3]=((((-1.0)*x4702*x4709))+((sj1*sj2))+(((-1.0)*cj1*x4704))+((x4701*x4703))+((r22*x4700)));
evalcond[4]=((((-1.0)*cj0*sj1*x4704))+((r01*x4711))+(((-1.0)*cj0*x4708))+(((-1.0)*x4705*x4709))+((r02*x4700)));
evalcond[5]=((((-1.0)*sj0*sj1*x4704))+(((-1.0)*x4706*x4709))+(((-1.0)*x4707*x4708))+((r11*x4711))+((r12*x4700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4713=((1.0)*gconst113);
CheckValue<IkReal> x4714=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4713))+(((-1.0)*gconst112*r10)))),-1);
if(!x4714.valid){
continue;
}
CheckValue<IkReal> x4715 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4714.value)))+(x4715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4716=IKsin(j4);
IkReal x4717=IKcos(j4);
IkReal x4718=(gconst113*r20);
IkReal x4719=(gconst112*r21);
IkReal x4720=((1.0)*cj2);
IkReal x4721=(gconst113*r00);
IkReal x4722=(gconst113*r10);
IkReal x4723=((1.0)*sj0);
IkReal x4724=(cj1*sj2);
IkReal x4725=((1.0)*x4717);
IkReal x4726=((1.0)*x4716);
IkReal x4727=(gconst112*x4717);
IkReal x4728=(gconst112*x4716);
evalcond[0]=(((x4716*x4719))+(((-1.0)*x4718*x4726))+(((-1.0)*r22*x4725)));
evalcond[1]=(((r11*x4728))+(((-1.0)*x4722*x4726))+cj0+(((-1.0)*r12*x4725)));
evalcond[2]=((((-1.0)*x4723))+((r01*x4728))+(((-1.0)*r02*x4725))+(((-1.0)*x4721*x4726)));
evalcond[3]=(((x4717*x4719))+((r22*x4716))+(((-1.0)*cj1*x4720))+((sj1*sj2))+(((-1.0)*x4718*x4725)));
evalcond[4]=((((-1.0)*cj0*sj1*x4720))+(((-1.0)*cj0*x4724))+((r01*x4727))+(((-1.0)*x4721*x4725))+((r02*x4716)));
evalcond[5]=(((r11*x4727))+(((-1.0)*x4722*x4725))+(((-1.0)*x4723*x4724))+(((-1.0)*sj0*sj1*x4720))+((r12*x4716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4729=((1.0)*gconst113);
CheckValue<IkReal> x4730 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4729))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4730.valid){
continue;
}
CheckValue<IkReal> x4731=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst112*r00))+(((-1.0)*r01*x4729)))),-1);
if(!x4731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4730.value)+(((1.5707963267949)*(x4731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4732=IKsin(j4);
IkReal x4733=IKcos(j4);
IkReal x4734=(gconst113*r20);
IkReal x4735=(gconst112*r21);
IkReal x4736=((1.0)*cj2);
IkReal x4737=(gconst113*r00);
IkReal x4738=(gconst113*r10);
IkReal x4739=((1.0)*sj0);
IkReal x4740=(cj1*sj2);
IkReal x4741=((1.0)*x4733);
IkReal x4742=((1.0)*x4732);
IkReal x4743=(gconst112*x4733);
IkReal x4744=(gconst112*x4732);
evalcond[0]=((((-1.0)*r22*x4741))+((x4732*x4735))+(((-1.0)*x4734*x4742)));
evalcond[1]=(((r11*x4744))+(((-1.0)*r12*x4741))+cj0+(((-1.0)*x4738*x4742)));
evalcond[2]=(((r01*x4744))+(((-1.0)*x4737*x4742))+(((-1.0)*x4739))+(((-1.0)*r02*x4741)));
evalcond[3]=((((-1.0)*cj1*x4736))+((sj1*sj2))+((x4733*x4735))+((r22*x4732))+(((-1.0)*x4734*x4741)));
evalcond[4]=((((-1.0)*cj0*x4740))+((r01*x4743))+(((-1.0)*x4737*x4741))+(((-1.0)*cj0*sj1*x4736))+((r02*x4732)));
evalcond[5]=(((r11*x4743))+(((-1.0)*sj0*sj1*x4736))+(((-1.0)*x4738*x4741))+(((-1.0)*x4739*x4740))+((r12*x4732)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4745=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4745;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4745);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4746=((1.0)*cj5);
IkReal x4747=((((-1.0)*r11*x4746))+(((-1.0)*r10*sj5)));
j4eval[0]=x4747;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4746)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4747);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4748=cj5*cj5;
IkReal x4749=r01*r01;
IkReal x4750=(cj5*r00);
IkReal x4751=(r01*sj5);
IkReal x4752=(x4749+((x4748*(r00*r00)))+(r02*r02)+(((-2.0)*x4750*x4751))+(((-1.0)*x4748*x4749)));
j4eval[0]=x4752;
j4eval[1]=IKsign(x4752);
j4eval[2]=((IKabs(r02))+(IKabs((x4751+(((-1.0)*x4750))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4753=cj5*cj5;
IkReal x4754=r01*r01;
IkReal x4755=(r01*sj5);
IkReal x4756=(cj5*r00);
CheckValue<IkReal> x4757=IKPowWithIntegerCheck(IKsign((x4754+(((-1.0)*x4753*x4754))+((x4753*(r00*r00)))+(((-2.0)*x4755*x4756))+(r02*r02))),-1);
if(!x4757.valid){
continue;
}
CheckValue<IkReal> x4758 = IKatan2WithCheck(IkReal((x4755+(((-1.0)*x4756)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4757.value)))+(x4758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4759=IKcos(j4);
IkReal x4760=IKsin(j4);
IkReal x4761=(cj5*r00);
IkReal x4762=(cj5*r10);
IkReal x4763=(r21*sj5);
IkReal x4764=((1.0)*cj2);
IkReal x4765=(cj5*r20);
IkReal x4766=((1.0)*x4759);
IkReal x4767=((1.0)*x4760);
IkReal x4768=(sj5*x4760);
IkReal x4769=(sj5*x4759);
evalcond[0]=(((r02*x4760))+(((-1.0)*x4761*x4766))+((r01*x4769)));
evalcond[1]=((((-1.0)*r22*x4766))+(((-1.0)*x4765*x4767))+((x4760*x4763)));
evalcond[2]=((((-1.0)*x4762*x4767))+(((-1.0)*r12*x4766))+((r11*x4768)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4766))+(((-1.0)*x4761*x4767))+((r01*x4768)));
evalcond[4]=(((r22*x4760))+((x4759*x4763))+(((-1.0)*x4765*x4766))+((sj1*sj2))+(((-1.0)*cj1*x4764)));
evalcond[5]=((((-1.0)*x4762*x4766))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4764))+((r12*x4760))+((r11*x4769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4770=((1.0)*cj5);
CheckValue<IkReal> x4771=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4770))+(((-1.0)*r10*sj5)))),-1);
if(!x4771.valid){
continue;
}
CheckValue<IkReal> x4772 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4770)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4771.value)))+(x4772.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4773=IKcos(j4);
IkReal x4774=IKsin(j4);
IkReal x4775=(cj5*r00);
IkReal x4776=(cj5*r10);
IkReal x4777=(r21*sj5);
IkReal x4778=((1.0)*cj2);
IkReal x4779=(cj5*r20);
IkReal x4780=((1.0)*x4773);
IkReal x4781=((1.0)*x4774);
IkReal x4782=(sj5*x4774);
IkReal x4783=(sj5*x4773);
evalcond[0]=(((r01*x4783))+((r02*x4774))+(((-1.0)*x4775*x4780)));
evalcond[1]=((((-1.0)*x4779*x4781))+(((-1.0)*r22*x4780))+((x4774*x4777)));
evalcond[2]=((((-1.0)*x4776*x4781))+((r11*x4782))+(((-1.0)*r12*x4780)));
evalcond[3]=((-1.0)+((r01*x4782))+(((-1.0)*r02*x4780))+(((-1.0)*x4775*x4781)));
evalcond[4]=((((-1.0)*x4779*x4780))+(((-1.0)*cj1*x4778))+((sj1*sj2))+((x4773*x4777))+((r22*x4774)));
evalcond[5]=((((-1.0)*sj1*x4778))+((r12*x4774))+(((-1.0)*x4776*x4780))+(((-1.0)*cj1*sj2))+((r11*x4783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4784=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4784.valid){
continue;
}
CheckValue<IkReal> x4785 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4785.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4784.value)))+(x4785.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4786=IKcos(j4);
IkReal x4787=IKsin(j4);
IkReal x4788=(cj5*r00);
IkReal x4789=(cj5*r10);
IkReal x4790=(r21*sj5);
IkReal x4791=((1.0)*cj2);
IkReal x4792=(cj5*r20);
IkReal x4793=((1.0)*x4786);
IkReal x4794=((1.0)*x4787);
IkReal x4795=(sj5*x4787);
IkReal x4796=(sj5*x4786);
evalcond[0]=((((-1.0)*x4788*x4793))+((r02*x4787))+((r01*x4796)));
evalcond[1]=((((-1.0)*r22*x4793))+((x4787*x4790))+(((-1.0)*x4792*x4794)));
evalcond[2]=((((-1.0)*x4789*x4794))+(((-1.0)*r12*x4793))+((r11*x4795)));
evalcond[3]=((-1.0)+(((-1.0)*x4788*x4794))+((r01*x4795))+(((-1.0)*r02*x4793)));
evalcond[4]=(((x4786*x4790))+((r22*x4787))+((sj1*sj2))+(((-1.0)*cj1*x4791))+(((-1.0)*x4792*x4793)));
evalcond[5]=((((-1.0)*sj1*x4791))+(((-1.0)*x4789*x4793))+((r12*x4787))+(((-1.0)*cj1*sj2))+((r11*x4796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4797=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4797;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4797);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4798=((1.0)*cj5);
IkReal x4799=((((-1.0)*r21*x4798))+(((-1.0)*r20*sj5)));
j4eval[0]=x4799;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4798))))));
j4eval[2]=IKsign(x4799);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4800=cj5*cj5;
IkReal x4801=r01*r01;
IkReal x4802=(r01*sj5);
IkReal x4803=(cj5*r00);
IkReal x4804=((((-1.0)*x4800*(r00*r00)))+(((-1.0)*(r02*r02)))+((x4800*x4801))+(((-1.0)*x4801))+(((2.0)*x4802*x4803)));
j4eval[0]=x4804;
j4eval[1]=IKsign(x4804);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4803))+x4802))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4805=cj5*cj5;
IkReal x4806=r01*r01;
IkReal x4807=(r01*sj5);
IkReal x4808=(cj5*r00);
CheckValue<IkReal> x4809=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4805*(r00*r00)))+((x4805*x4806))+(((-1.0)*(r02*r02)))+(((2.0)*x4807*x4808))+(((-1.0)*x4806)))),-1);
if(!x4809.valid){
continue;
}
CheckValue<IkReal> x4810 = IKatan2WithCheck(IkReal(((((-1.0)*x4808))+x4807)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4809.value)))+(x4810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4811=IKcos(j4);
IkReal x4812=IKsin(j4);
IkReal x4813=(cj5*r00);
IkReal x4814=(cj5*r10);
IkReal x4815=(r21*sj5);
IkReal x4816=(cj5*r20);
IkReal x4817=((1.0)*x4811);
IkReal x4818=((1.0)*x4812);
IkReal x4819=(sj5*x4812);
IkReal x4820=(sj5*x4811);
evalcond[0]=(((r02*x4812))+(((-1.0)*x4813*x4817))+((r01*x4820)));
evalcond[1]=(((x4812*x4815))+(((-1.0)*x4816*x4818))+(((-1.0)*r22*x4817)));
evalcond[2]=((((-1.0)*x4814*x4818))+((r11*x4819))+(((-1.0)*r12*x4817)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4817))+(((-1.0)*x4813*x4818))+((r01*x4819)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4814*x4817))+((cj1*sj2))+((r11*x4820))+((r12*x4812)));
evalcond[5]=(((x4811*x4815))+(((-1.0)*x4816*x4817))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4821=((1.0)*cj5);
CheckValue<IkReal> x4822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4821))+(((-1.0)*r20*sj5)))),-1);
if(!x4822.valid){
continue;
}
CheckValue<IkReal> x4823 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4821))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4822.value)))+(x4823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4824=IKcos(j4);
IkReal x4825=IKsin(j4);
IkReal x4826=(cj5*r00);
IkReal x4827=(cj5*r10);
IkReal x4828=(r21*sj5);
IkReal x4829=(cj5*r20);
IkReal x4830=((1.0)*x4824);
IkReal x4831=((1.0)*x4825);
IkReal x4832=(sj5*x4825);
IkReal x4833=(sj5*x4824);
evalcond[0]=(((r01*x4833))+((r02*x4825))+(((-1.0)*x4826*x4830)));
evalcond[1]=((((-1.0)*x4829*x4831))+((x4825*x4828))+(((-1.0)*r22*x4830)));
evalcond[2]=(((r11*x4832))+(((-1.0)*r12*x4830))+(((-1.0)*x4827*x4831)));
evalcond[3]=((1.0)+((r01*x4832))+(((-1.0)*x4826*x4831))+(((-1.0)*r02*x4830)));
evalcond[4]=(((cj2*sj1))+((r11*x4833))+((cj1*sj2))+((r12*x4825))+(((-1.0)*x4827*x4830)));
evalcond[5]=(((r22*x4825))+(((-1.0)*x4829*x4830))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4824*x4828)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4834 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4834.valid){
continue;
}
CheckValue<IkReal> x4835=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4835.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4834.value)+(((1.5707963267949)*(x4835.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4836=IKcos(j4);
IkReal x4837=IKsin(j4);
IkReal x4838=(cj5*r00);
IkReal x4839=(cj5*r10);
IkReal x4840=(r21*sj5);
IkReal x4841=(cj5*r20);
IkReal x4842=((1.0)*x4836);
IkReal x4843=((1.0)*x4837);
IkReal x4844=(sj5*x4837);
IkReal x4845=(sj5*x4836);
evalcond[0]=((((-1.0)*x4838*x4842))+((r01*x4845))+((r02*x4837)));
evalcond[1]=((((-1.0)*x4841*x4843))+(((-1.0)*r22*x4842))+((x4837*x4840)));
evalcond[2]=((((-1.0)*x4839*x4843))+((r11*x4844))+(((-1.0)*r12*x4842)));
evalcond[3]=((1.0)+(((-1.0)*x4838*x4843))+(((-1.0)*r02*x4842))+((r01*x4844)));
evalcond[4]=(((r12*x4837))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4839*x4842))+((r11*x4845)));
evalcond[5]=((((-1.0)*x4841*x4842))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4837))+((x4836*x4840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4846=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4846);
rxp1_1=(px*r21);
rxp1_2=(r11*x4846);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4847=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4847);
rxp1_1=(px*r21);
rxp1_2=(r11*x4847);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4848=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4848);
rxp1_1=(px*r21);
rxp1_2=(r11*x4848);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4851=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4851.valid){
continue;
}
IkReal x4849=x4851.value;
IkReal x4850=(sj0*x4849);
cj4array[0]=(((cj1*sj2*x4850))+((cj2*sj1*x4850)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4852=IKsin(j4);
IkReal x4853=IKcos(j4);
IkReal x4854=(r21*sj5);
IkReal x4855=((1.0)*cj5*r20);
evalcond[0]=(r02*x4852);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4853)));
evalcond[2]=((((-1.0)*x4852*x4855))+((x4852*x4854)));
evalcond[3]=(((r11*sj5*x4852))+(((-1.0)*cj5*r10*x4852)));
evalcond[4]=((((-1.0)*x4853*x4855))+((x4853*x4854))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4857=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4857.valid){
continue;
}
IkReal x4856=x4857.value;
cj4array[0]=(((cj1*cj2*x4856))+(((-1.0)*sj1*sj2*x4856)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4858=IKsin(j4);
IkReal x4859=IKcos(j4);
IkReal x4860=((1.0)*sj0);
IkReal x4861=((1.0)*cj5);
IkReal x4862=(sj5*x4858);
evalcond[0]=(r02*x4858);
evalcond[1]=((((-1.0)*x4860))+(((-1.0)*r02*x4859)));
evalcond[2]=((((-1.0)*r20*x4858*x4861))+((r21*x4862)));
evalcond[3]=(((r11*x4862))+(((-1.0)*r10*x4858*x4861)));
evalcond[4]=((((-1.0)*r10*x4859*x4861))+((r11*sj5*x4859))+(((-1.0)*cj2*sj1*x4860))+(((-1.0)*cj1*sj2*x4860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4863=IKPowWithIntegerCheck(r02,-1);
if(!x4863.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4863.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4864=IKsin(j4);
IkReal x4865=IKcos(j4);
IkReal x4866=((1.0)*cj1);
IkReal x4867=(r21*sj5);
IkReal x4868=((1.0)*cj5);
IkReal x4869=(r11*sj5);
evalcond[0]=(r02*x4864);
evalcond[1]=((((-1.0)*r20*x4864*x4868))+((x4864*x4867)));
evalcond[2]=((((-1.0)*r10*x4864*x4868))+((x4864*x4869)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x4866))+(((-1.0)*r20*x4865*x4868))+((x4865*x4867)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4866))+(((-1.0)*r10*x4865*x4868))+((x4865*x4869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4870=((1.0)*sj0);
IkReal x4871=((1.0)*cj0);
CheckValue<IkReal> x4872 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4870))+(((-1.0)*r02*x4871)))),IkReal(((((-1.0)*r01*sj5*x4871))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4872.valid){
continue;
}
CheckValue<IkReal> x4873=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4872.value)+(((1.5707963267949)*(x4873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4874=IKsin(j4);
IkReal x4875=IKcos(j4);
IkReal x4876=(cj5*r00);
IkReal x4877=(cj5*r10);
IkReal x4878=(r21*sj5);
IkReal x4879=((1.0)*cj2);
IkReal x4880=((1.0)*sj0);
IkReal x4881=(cj1*sj2);
IkReal x4882=(cj5*r20);
IkReal x4883=((1.0)*x4875);
IkReal x4884=((1.0)*x4874);
IkReal x4885=(sj5*x4874);
IkReal x4886=(sj5*x4875);
evalcond[0]=(((x4874*x4878))+(((-1.0)*x4882*x4884))+(((-1.0)*r22*x4883)));
evalcond[1]=((((-1.0)*x4877*x4884))+((r11*x4885))+cj0+(((-1.0)*r12*x4883)));
evalcond[2]=((((-1.0)*x4876*x4884))+(((-1.0)*x4880))+(((-1.0)*r02*x4883))+((r01*x4885)));
evalcond[3]=((((-1.0)*x4882*x4883))+((sj1*sj2))+((r22*x4874))+(((-1.0)*cj1*x4879))+((x4875*x4878)));
evalcond[4]=((((-1.0)*cj0*x4881))+((r02*x4874))+(((-1.0)*x4876*x4883))+(((-1.0)*cj0*sj1*x4879))+((r01*x4886)));
evalcond[5]=((((-1.0)*x4877*x4883))+((r11*x4886))+(((-1.0)*x4880*x4881))+(((-1.0)*sj0*sj1*x4879))+((r12*x4874)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4887=((1.0)*cj5);
CheckValue<IkReal> x4888=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4887)))),-1);
if(!x4888.valid){
continue;
}
CheckValue<IkReal> x4889 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4888.value)))+(x4889.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4890=IKsin(j4);
IkReal x4891=IKcos(j4);
IkReal x4892=(cj5*r00);
IkReal x4893=(cj5*r10);
IkReal x4894=(r21*sj5);
IkReal x4895=((1.0)*cj2);
IkReal x4896=((1.0)*sj0);
IkReal x4897=(cj1*sj2);
IkReal x4898=(cj5*r20);
IkReal x4899=((1.0)*x4891);
IkReal x4900=((1.0)*x4890);
IkReal x4901=(sj5*x4890);
IkReal x4902=(sj5*x4891);
evalcond[0]=((((-1.0)*x4898*x4900))+((x4890*x4894))+(((-1.0)*r22*x4899)));
evalcond[1]=((((-1.0)*r12*x4899))+cj0+(((-1.0)*x4893*x4900))+((r11*x4901)));
evalcond[2]=((((-1.0)*x4896))+(((-1.0)*r02*x4899))+(((-1.0)*x4892*x4900))+((r01*x4901)));
evalcond[3]=((((-1.0)*x4898*x4899))+(((-1.0)*cj1*x4895))+((x4891*x4894))+((sj1*sj2))+((r22*x4890)));
evalcond[4]=((((-1.0)*cj0*x4897))+((r02*x4890))+(((-1.0)*cj0*sj1*x4895))+(((-1.0)*x4892*x4899))+((r01*x4902)));
evalcond[5]=(((r12*x4890))+(((-1.0)*x4893*x4899))+(((-1.0)*sj0*sj1*x4895))+((r11*x4902))+(((-1.0)*x4896*x4897)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4903=((1.0)*cj5);
CheckValue<IkReal> x4904 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4904.valid){
continue;
}
CheckValue<IkReal> x4905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4903))+(((-1.0)*r00*sj5)))),-1);
if(!x4905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4904.value)+(((1.5707963267949)*(x4905.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4906=IKsin(j4);
IkReal x4907=IKcos(j4);
IkReal x4908=(cj5*r00);
IkReal x4909=(cj5*r10);
IkReal x4910=(r21*sj5);
IkReal x4911=((1.0)*cj2);
IkReal x4912=((1.0)*sj0);
IkReal x4913=(cj1*sj2);
IkReal x4914=(cj5*r20);
IkReal x4915=((1.0)*x4907);
IkReal x4916=((1.0)*x4906);
IkReal x4917=(sj5*x4906);
IkReal x4918=(sj5*x4907);
evalcond[0]=(((x4906*x4910))+(((-1.0)*r22*x4915))+(((-1.0)*x4914*x4916)));
evalcond[1]=((((-1.0)*x4909*x4916))+cj0+(((-1.0)*r12*x4915))+((r11*x4917)));
evalcond[2]=((((-1.0)*r02*x4915))+(((-1.0)*x4908*x4916))+(((-1.0)*x4912))+((r01*x4917)));
evalcond[3]=(((sj1*sj2))+((x4907*x4910))+((r22*x4906))+(((-1.0)*cj1*x4911))+(((-1.0)*x4914*x4915)));
evalcond[4]=((((-1.0)*cj0*sj1*x4911))+((r02*x4906))+(((-1.0)*x4908*x4915))+((r01*x4918))+(((-1.0)*cj0*x4913)));
evalcond[5]=((((-1.0)*x4912*x4913))+(((-1.0)*x4909*x4915))+(((-1.0)*sj0*sj1*x4911))+((r11*x4918))+((r12*x4906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4919=((1.0)*cj5);
IkReal x4920=((1.0)*sj5);
IkReal x4921=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4921;
j0eval[1]=((IKabs(((((-1.0)*r11*x4919))+(((-1.0)*r10*x4920)))))+(IKabs(((((-1.0)*r00*x4920))+(((-1.0)*r01*x4919))))));
j0eval[2]=IKsign(x4921);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4922=r21*r21;
IkReal x4923=cj5*cj5;
IkReal x4924=(cj2*sj1);
IkReal x4925=(cj1*sj2);
IkReal x4926=(r21*sj5);
IkReal x4927=((1.0)*cj5*r20);
IkReal x4928=((((-1.0)*x4922))+(((2.0)*cj5*r20*x4926))+(((-1.0)*x4923*(r20*r20)))+((x4922*x4923))+(((-1.0)*(r22*r22))));
j4eval[0]=x4928;
j4eval[1]=((IKabs((((r22*x4925))+((r22*x4924)))))+(IKabs((((x4924*x4926))+(((-1.0)*x4924*x4927))+((x4925*x4926))+(((-1.0)*x4925*x4927))))));
j4eval[2]=IKsign(x4928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4929=cj1*cj1;
IkReal x4930=(cj2*sj2);
IkReal x4931=(cj2*sj1);
IkReal x4932=(cj1*sj1);
j0eval[0]=(x4930+x4932+(((-2.0)*x4929*x4930))+(((-1.08349267049076)*cj1*x4931))+(((-2.0)*cj1*cj2*x4931))+(((-1.08349267049076)*sj2*x4929)));
j0eval[1]=((((-1.0)*x4931))+(((-1.0)*cj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4933=IKsin(j0);
IkReal x4934=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.81725)*x4934))+(((-0.10915)*x4933)));
evalcond[1]=((((0.10915)*x4934))+(((-1.0)*py))+(((0.81725)*x4933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4935=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4935;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4935);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4936=((1.0)*cj5);
IkReal x4937=((((-1.0)*r01*x4936))+(((-1.0)*r00*sj5)));
j4eval[0]=x4937;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4936)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4938=((1.0)*cj5);
IkReal x4939=((((-1.0)*r01*x4938))+(((-1.0)*r00*sj5)));
j4eval[0]=x4939;
j4eval[1]=IKsign(x4939);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4938)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4940=((1.0)*cj5);
CheckValue<IkReal> x4941 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4940))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4941.valid){
continue;
}
CheckValue<IkReal> x4942=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4940)))),-1);
if(!x4942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4941.value)+(((1.5707963267949)*(x4942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4943=IKcos(j4);
IkReal x4944=IKsin(j4);
IkReal x4945=((1.0)*sj0);
IkReal x4946=(cj5*r00);
IkReal x4947=(cj5*r10);
IkReal x4948=(cj5*r20);
IkReal x4949=((1.0)*x4943);
IkReal x4950=((1.0)*x4944);
IkReal x4951=(sj5*x4943);
IkReal x4952=(sj5*x4944);
evalcond[0]=((((-1.0)*x4948*x4949))+((r21*x4951))+((r22*x4944)));
evalcond[1]=((((-1.0)*r22*x4949))+(((-1.0)*x4948*x4950))+((r21*x4952)));
evalcond[2]=((((-1.0)*x4947*x4950))+cj0+(((-1.0)*r12*x4949))+((r11*x4952)));
evalcond[3]=((((-1.0)*x4946*x4949))+((r02*x4944))+((r01*x4951))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4947*x4949))+(((-1.0)*x4945))+((r12*x4944))+((r11*x4951)));
evalcond[5]=((((-1.0)*x4946*x4950))+(((-1.0)*x4945))+(((-1.0)*r02*x4949))+((r01*x4952)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4953=((1.0)*cj5);
CheckValue<IkReal> x4954 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4953)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4954.valid){
continue;
}
CheckValue<IkReal> x4955=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4953)))),-1);
if(!x4955.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4954.value)+(((1.5707963267949)*(x4955.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4956=IKcos(j4);
IkReal x4957=IKsin(j4);
IkReal x4958=((1.0)*sj0);
IkReal x4959=(cj5*r00);
IkReal x4960=(cj5*r10);
IkReal x4961=(cj5*r20);
IkReal x4962=((1.0)*x4956);
IkReal x4963=((1.0)*x4957);
IkReal x4964=(sj5*x4956);
IkReal x4965=(sj5*x4957);
evalcond[0]=(((r22*x4957))+(((-1.0)*x4961*x4962))+((r21*x4964)));
evalcond[1]=((((-1.0)*x4961*x4963))+(((-1.0)*r22*x4962))+((r21*x4965)));
evalcond[2]=((((-1.0)*x4960*x4963))+cj0+((r11*x4965))+(((-1.0)*r12*x4962)));
evalcond[3]=((((-1.0)*x4959*x4962))+((r02*x4957))+((r01*x4964))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x4960*x4962))+((r12*x4957))+(((-1.0)*x4958))+((r11*x4964)));
evalcond[5]=((((-1.0)*x4959*x4963))+(((-1.0)*x4958))+(((-1.0)*r02*x4962))+((r01*x4965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4966 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4966.valid){
continue;
}
CheckValue<IkReal> x4967=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4966.value)+(((1.5707963267949)*(x4967.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4968=IKcos(j4);
IkReal x4969=IKsin(j4);
IkReal x4970=((1.0)*sj0);
IkReal x4971=(cj5*r00);
IkReal x4972=(cj5*r10);
IkReal x4973=(cj5*r20);
IkReal x4974=((1.0)*x4968);
IkReal x4975=((1.0)*x4969);
IkReal x4976=(sj5*x4968);
IkReal x4977=(sj5*x4969);
evalcond[0]=(((r22*x4969))+(((-1.0)*x4973*x4974))+((r21*x4976)));
evalcond[1]=((((-1.0)*r22*x4974))+(((-1.0)*x4973*x4975))+((r21*x4977)));
evalcond[2]=(cj0+((r11*x4977))+(((-1.0)*r12*x4974))+(((-1.0)*x4972*x4975)));
evalcond[3]=(((r02*x4969))+(((-1.0)*x4971*x4974))+(((-1.0)*cj0))+((r01*x4976)));
evalcond[4]=(((r12*x4969))+((r11*x4976))+(((-1.0)*x4970))+(((-1.0)*x4972*x4974)));
evalcond[5]=((((-1.0)*x4970))+(((-1.0)*r02*x4974))+(((-1.0)*x4971*x4975))+((r01*x4977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4978=IKsin(j0);
IkReal x4979=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x4978))+(((0.03275)*x4979)));
evalcond[1]=((((0.10915)*x4979))+(((-1.0)*py))+(((0.03275)*x4978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4980=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4980;
j4eval[1]=IKsign(x4980);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4981=((1.0)*cj5);
IkReal x4982=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4981)));
j4eval[0]=x4982;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4981)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4983=cj5*cj5;
IkReal x4984=((1.0)*r20);
IkReal x4985=(r01*r21);
IkReal x4986=(r21*sj5);
IkReal x4987=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x4986))+(((-1.0)*r00*x4983*x4984))+(((-1.0)*x4985))+((x4983*x4985)));
j4eval[0]=x4987;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x4986))+(((-1.0)*cj0*cj5*x4984))))));
j4eval[2]=IKsign(x4987);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4988=cj5*cj5;
IkReal x4989=((1.0)*r20);
IkReal x4990=(r01*r21);
IkReal x4991=(r21*sj5);
CheckValue<IkReal> x4992=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x4988*x4989))+((x4988*x4990))+(((-1.0)*x4990))+((cj5*r00*x4991)))),-1);
if(!x4992.valid){
continue;
}
CheckValue<IkReal> x4993 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x4989))+((cj0*x4991)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4993.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4992.value)))+(x4993.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4994=IKcos(j4);
IkReal x4995=IKsin(j4);
IkReal x4996=(cj5*r00);
IkReal x4997=(cj5*r10);
IkReal x4998=(cj5*r20);
IkReal x4999=((1.0)*x4994);
IkReal x5000=((1.0)*x4995);
IkReal x5001=(sj5*x4994);
IkReal x5002=(sj5*x4995);
evalcond[0]=(((r22*x4995))+((r21*x5001))+(((-1.0)*x4998*x4999)));
evalcond[1]=((((-1.0)*r22*x4999))+(((-1.0)*x4998*x5000))+((r21*x5002)));
evalcond[2]=(cj0+((r02*x4995))+((r01*x5001))+(((-1.0)*x4996*x4999)));
evalcond[3]=(sj0+((r11*x5001))+(((-1.0)*x4997*x4999))+((r12*x4995)));
evalcond[4]=(((r11*x5002))+cj0+(((-1.0)*r12*x4999))+(((-1.0)*x4997*x5000)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x4999))+((r01*x5002))+(((-1.0)*x4996*x5000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5003=((1.0)*cj5);
CheckValue<IkReal> x5004 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5003)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5004.valid){
continue;
}
CheckValue<IkReal> x5005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5003)))),-1);
if(!x5005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5004.value)+(((1.5707963267949)*(x5005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5006=IKcos(j4);
IkReal x5007=IKsin(j4);
IkReal x5008=(cj5*r00);
IkReal x5009=(cj5*r10);
IkReal x5010=(cj5*r20);
IkReal x5011=((1.0)*x5006);
IkReal x5012=((1.0)*x5007);
IkReal x5013=(sj5*x5006);
IkReal x5014=(sj5*x5007);
evalcond[0]=(((r21*x5013))+(((-1.0)*x5010*x5011))+((r22*x5007)));
evalcond[1]=((((-1.0)*r22*x5011))+((r21*x5014))+(((-1.0)*x5010*x5012)));
evalcond[2]=((((-1.0)*x5008*x5011))+cj0+((r02*x5007))+((r01*x5013)));
evalcond[3]=(((r12*x5007))+sj0+(((-1.0)*x5009*x5011))+((r11*x5013)));
evalcond[4]=((((-1.0)*x5009*x5012))+cj0+(((-1.0)*r12*x5011))+((r11*x5014)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5008*x5012))+(((-1.0)*r02*x5011))+((r01*x5014)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5015 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5015.valid){
continue;
}
CheckValue<IkReal> x5016=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5016.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5015.value)+(((1.5707963267949)*(x5016.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5017=IKcos(j4);
IkReal x5018=IKsin(j4);
IkReal x5019=(cj5*r00);
IkReal x5020=(cj5*r10);
IkReal x5021=(cj5*r20);
IkReal x5022=((1.0)*x5017);
IkReal x5023=((1.0)*x5018);
IkReal x5024=(sj5*x5017);
IkReal x5025=(sj5*x5018);
evalcond[0]=((((-1.0)*x5021*x5022))+((r22*x5018))+((r21*x5024)));
evalcond[1]=((((-1.0)*x5021*x5023))+(((-1.0)*r22*x5022))+((r21*x5025)));
evalcond[2]=((((-1.0)*x5019*x5022))+cj0+((r02*x5018))+((r01*x5024)));
evalcond[3]=(((r11*x5024))+sj0+(((-1.0)*x5020*x5022))+((r12*x5018)));
evalcond[4]=(((r11*x5025))+cj0+(((-1.0)*r12*x5022))+(((-1.0)*x5020*x5023)));
evalcond[5]=((((-1.0)*x5019*x5023))+(((-1.0)*r02*x5022))+(((-1.0)*sj0))+((r01*x5025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5026=IKsin(j0);
IkReal x5027=IKcos(j0);
IkReal x5028=(r00*sj5);
IkReal x5029=(r10*sj5);
IkReal x5030=(cj5*r11);
IkReal x5031=(cj5*r01);
evalcond[0]=((((-1.0)*x5027))+x5031+x5028);
evalcond[1]=((((-1.0)*x5026))+x5030+x5029);
evalcond[2]=((((-0.09465)*x5031))+(((-0.09465)*x5028))+(((-1.0)*px))+(((-0.10915)*x5026)));
evalcond[3]=((((-0.09465)*x5030))+(((-0.09465)*x5029))+(((0.10915)*x5027))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5032=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5032;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5032);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5033=((1.0)*cj5);
IkReal x5034=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5033)));
j4eval[0]=x5034;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5033))))));
j4eval[2]=IKsign(x5034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5035=cj5*cj5;
IkReal x5036=(r01*r11);
IkReal x5037=((1.0)*r00);
IkReal x5038=(r01*sj5);
IkReal x5039=(((cj5*r10*x5038))+(((-1.0)*r02*r12))+(((-1.0)*x5036))+((x5035*x5036))+(((-1.0)*r10*x5035*x5037))+((cj5*r00*r11*sj5)));
j4eval[0]=x5039;
j4eval[1]=IKsign(x5039);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5037))+((cj0*x5038))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5040=cj5*cj5;
IkReal x5041=(r01*r11);
IkReal x5042=(cj5*r00);
IkReal x5043=(r01*sj5);
CheckValue<IkReal> x5044 = IKatan2WithCheck(IkReal((((cj0*x5043))+(((-1.0)*cj0*x5042)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5044.valid){
continue;
}
CheckValue<IkReal> x5045=IKPowWithIntegerCheck(IKsign((((x5040*x5041))+(((-1.0)*r02*r12))+(((-1.0)*x5041))+(((-1.0)*r00*r10*x5040))+((cj5*r10*x5043))+((r11*sj5*x5042)))),-1);
if(!x5045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5044.value)+(((1.5707963267949)*(x5045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5046=IKcos(j4);
IkReal x5047=IKsin(j4);
IkReal x5048=(cj5*r00);
IkReal x5049=(r01*sj5);
IkReal x5050=(cj5*r10);
IkReal x5051=(cj5*r20);
IkReal x5052=((1.0)*x5046);
IkReal x5053=((1.0)*x5047);
IkReal x5054=(sj5*x5047);
IkReal x5055=(sj5*x5046);
evalcond[0]=(((r02*x5047))+((x5046*x5049))+(((-1.0)*x5048*x5052)));
evalcond[1]=(((r11*x5055))+((r12*x5047))+(((-1.0)*x5050*x5052)));
evalcond[2]=(((r21*x5054))+(((-1.0)*r22*x5052))+(((-1.0)*x5051*x5053)));
evalcond[3]=((1.0)+((r21*x5055))+((r22*x5047))+(((-1.0)*x5051*x5052)));
evalcond[4]=(cj0+(((-1.0)*r12*x5052))+((r11*x5054))+(((-1.0)*x5050*x5053)));
evalcond[5]=((((-1.0)*sj0))+((x5047*x5049))+(((-1.0)*r02*x5052))+(((-1.0)*x5048*x5053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5056=((1.0)*cj5);
CheckValue<IkReal> x5057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5056))+(((-1.0)*r00*sj5)))),-1);
if(!x5057.valid){
continue;
}
CheckValue<IkReal> x5058 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5056))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5057.value)))+(x5058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5059=IKcos(j4);
IkReal x5060=IKsin(j4);
IkReal x5061=(cj5*r00);
IkReal x5062=(r01*sj5);
IkReal x5063=(cj5*r10);
IkReal x5064=(cj5*r20);
IkReal x5065=((1.0)*x5059);
IkReal x5066=((1.0)*x5060);
IkReal x5067=(sj5*x5060);
IkReal x5068=(sj5*x5059);
evalcond[0]=((((-1.0)*x5061*x5065))+((r02*x5060))+((x5059*x5062)));
evalcond[1]=(((r11*x5068))+(((-1.0)*x5063*x5065))+((r12*x5060)));
evalcond[2]=((((-1.0)*r22*x5065))+((r21*x5067))+(((-1.0)*x5064*x5066)));
evalcond[3]=((1.0)+((r21*x5068))+((r22*x5060))+(((-1.0)*x5064*x5065)));
evalcond[4]=(cj0+(((-1.0)*r12*x5065))+((r11*x5067))+(((-1.0)*x5063*x5066)));
evalcond[5]=((((-1.0)*sj0))+((x5060*x5062))+(((-1.0)*x5061*x5066))+(((-1.0)*r02*x5065)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5069 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5069.valid){
continue;
}
CheckValue<IkReal> x5070=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5069.value)+(((1.5707963267949)*(x5070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5071=IKcos(j4);
IkReal x5072=IKsin(j4);
IkReal x5073=(cj5*r00);
IkReal x5074=(r01*sj5);
IkReal x5075=(cj5*r10);
IkReal x5076=(cj5*r20);
IkReal x5077=((1.0)*x5071);
IkReal x5078=((1.0)*x5072);
IkReal x5079=(sj5*x5072);
IkReal x5080=(sj5*x5071);
evalcond[0]=(((r02*x5072))+((x5071*x5074))+(((-1.0)*x5073*x5077)));
evalcond[1]=(((r11*x5080))+((r12*x5072))+(((-1.0)*x5075*x5077)));
evalcond[2]=(((r21*x5079))+(((-1.0)*x5076*x5078))+(((-1.0)*r22*x5077)));
evalcond[3]=((1.0)+((r21*x5080))+(((-1.0)*x5076*x5077))+((r22*x5072)));
evalcond[4]=(cj0+(((-1.0)*r12*x5077))+(((-1.0)*x5075*x5078))+((r11*x5079)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5077))+(((-1.0)*x5073*x5078))+((x5072*x5074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5081=IKcos(j0);
IkReal x5082=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x5081))+(((-0.10915)*x5082)));
evalcond[1]=((((0.10915)*x5081))+(((-1.0)*py))+(((-0.39225)*x5082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5083=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5083;
j4eval[1]=IKsign(x5083);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5084=((1.0)*cj5);
IkReal x5085=((((-1.0)*r11*x5084))+(((-1.0)*r10*sj5)));
j4eval[0]=x5085;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5084)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5085);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5086=cj5*cj5;
IkReal x5087=((1.0)*r20);
IkReal x5088=(r01*r21);
IkReal x5089=(r21*sj5);
IkReal x5090=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5086*x5088))+(((-1.0)*x5088))+(((-1.0)*r00*x5086*x5087))+((cj5*r00*x5089)));
j4eval[0]=x5090;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x5089))+(((-1.0)*cj0*cj5*x5087))))));
j4eval[2]=IKsign(x5090);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5091=cj5*cj5;
IkReal x5092=((1.0)*r20);
IkReal x5093=(r01*r21);
IkReal x5094=(r21*sj5);
CheckValue<IkReal> x5095=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5093))+((x5091*x5093))+((cj5*r00*x5094))+(((-1.0)*r00*x5091*x5092)))),-1);
if(!x5095.valid){
continue;
}
CheckValue<IkReal> x5096 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5094))+(((-1.0)*cj0*cj5*x5092)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5096.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5095.value)))+(x5096.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5097=IKcos(j4);
IkReal x5098=IKsin(j4);
IkReal x5099=(cj5*r00);
IkReal x5100=(cj5*r10);
IkReal x5101=(cj5*r20);
IkReal x5102=((1.0)*x5097);
IkReal x5103=((1.0)*x5098);
IkReal x5104=(sj5*x5097);
IkReal x5105=(sj5*x5098);
evalcond[0]=((((-1.0)*x5101*x5102))+((r22*x5098))+((r21*x5104)));
evalcond[1]=((((-1.0)*x5101*x5103))+(((-1.0)*r22*x5102))+((r21*x5105)));
evalcond[2]=(((r01*x5104))+cj0+(((-1.0)*x5099*x5102))+((r02*x5098)));
evalcond[3]=(sj0+(((-1.0)*x5100*x5102))+((r12*x5098))+((r11*x5104)));
evalcond[4]=(cj0+(((-1.0)*x5100*x5103))+((r11*x5105))+(((-1.0)*r12*x5102)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5105))+(((-1.0)*r02*x5102))+(((-1.0)*x5099*x5103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5106=((1.0)*cj5);
CheckValue<IkReal> x5107 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5106)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5107.valid){
continue;
}
CheckValue<IkReal> x5108=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5106)))),-1);
if(!x5108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5107.value)+(((1.5707963267949)*(x5108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5109=IKcos(j4);
IkReal x5110=IKsin(j4);
IkReal x5111=(cj5*r00);
IkReal x5112=(cj5*r10);
IkReal x5113=(cj5*r20);
IkReal x5114=((1.0)*x5109);
IkReal x5115=((1.0)*x5110);
IkReal x5116=(sj5*x5109);
IkReal x5117=(sj5*x5110);
evalcond[0]=(((r21*x5116))+((r22*x5110))+(((-1.0)*x5113*x5114)));
evalcond[1]=((((-1.0)*r22*x5114))+((r21*x5117))+(((-1.0)*x5113*x5115)));
evalcond[2]=(((r01*x5116))+cj0+(((-1.0)*x5111*x5114))+((r02*x5110)));
evalcond[3]=((((-1.0)*x5112*x5114))+sj0+((r11*x5116))+((r12*x5110)));
evalcond[4]=((((-1.0)*x5112*x5115))+cj0+((r11*x5117))+(((-1.0)*r12*x5114)));
evalcond[5]=(((r01*x5117))+(((-1.0)*sj0))+(((-1.0)*r02*x5114))+(((-1.0)*x5111*x5115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5118 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5118.valid){
continue;
}
CheckValue<IkReal> x5119=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5119.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5118.value)+(((1.5707963267949)*(x5119.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5120=IKcos(j4);
IkReal x5121=IKsin(j4);
IkReal x5122=(cj5*r00);
IkReal x5123=(cj5*r10);
IkReal x5124=(cj5*r20);
IkReal x5125=((1.0)*x5120);
IkReal x5126=((1.0)*x5121);
IkReal x5127=(sj5*x5120);
IkReal x5128=(sj5*x5121);
evalcond[0]=(((r22*x5121))+(((-1.0)*x5124*x5125))+((r21*x5127)));
evalcond[1]=((((-1.0)*x5124*x5126))+((r21*x5128))+(((-1.0)*r22*x5125)));
evalcond[2]=(cj0+((r01*x5127))+(((-1.0)*x5122*x5125))+((r02*x5121)));
evalcond[3]=(sj0+((r12*x5121))+((r11*x5127))+(((-1.0)*x5123*x5125)));
evalcond[4]=(cj0+((r11*x5128))+(((-1.0)*x5123*x5126))+(((-1.0)*r12*x5125)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5128))+(((-1.0)*x5122*x5126))+(((-1.0)*r02*x5125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5129=((1.0)*sj5);
IkReal x5130=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5129))+(((-1.0)*r11*x5130)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5130))+(((-1.0)*r00*x5129)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5129))+(((-1.0)*r11*x5130))))+IKsqr(((((-1.0)*r01*x5130))+(((-1.0)*r00*x5129))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5129))+(((-1.0)*r11*x5130))), ((((-1.0)*r01*x5130))+(((-1.0)*r00*x5129))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5131=IKsin(j0);
IkReal x5132=IKcos(j0);
IkReal x5133=(r00*sj5);
IkReal x5134=(r10*sj5);
IkReal x5135=(cj5*r11);
IkReal x5136=(cj5*r01);
evalcond[0]=(x5136+x5133+x5132);
evalcond[1]=(x5135+x5134+x5131);
evalcond[2]=((((-0.10915)*x5131))+(((-0.09465)*x5136))+(((-0.09465)*x5133))+(((-1.0)*px)));
evalcond[3]=((((0.10915)*x5132))+(((-0.09465)*x5135))+(((-0.09465)*x5134))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5137=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5137;
j4eval[1]=IKsign(x5137);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5138=((1.0)*cj5);
IkReal x5139=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5138)));
j4eval[0]=x5139;
j4eval[1]=IKsign(x5139);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5138))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5140=cj5*cj5;
IkReal x5141=(r01*r11);
IkReal x5142=((1.0)*r00);
IkReal x5143=(r01*sj5);
IkReal x5144=((((-1.0)*r10*x5140*x5142))+(((-1.0)*r02*r12))+(((-1.0)*x5141))+((cj5*r10*x5143))+((x5140*x5141))+((cj5*r00*r11*sj5)));
j4eval[0]=x5144;
j4eval[1]=IKsign(x5144);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5143))+(((-1.0)*cj0*cj5*x5142))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5145=cj5*cj5;
IkReal x5146=(r01*r11);
IkReal x5147=(cj5*r00);
IkReal x5148=(r01*sj5);
CheckValue<IkReal> x5149=IKPowWithIntegerCheck(IKsign((((r11*sj5*x5147))+(((-1.0)*r02*r12))+((x5145*x5146))+(((-1.0)*x5146))+(((-1.0)*r00*r10*x5145))+((cj5*r10*x5148)))),-1);
if(!x5149.valid){
continue;
}
CheckValue<IkReal> x5150 = IKatan2WithCheck(IkReal((((cj0*x5148))+(((-1.0)*cj0*x5147)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5150.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5149.value)))+(x5150.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5151=IKcos(j4);
IkReal x5152=IKsin(j4);
IkReal x5153=(cj5*r00);
IkReal x5154=(r01*sj5);
IkReal x5155=(cj5*r10);
IkReal x5156=(cj5*r20);
IkReal x5157=((1.0)*x5151);
IkReal x5158=((1.0)*x5152);
IkReal x5159=(sj5*x5152);
IkReal x5160=(sj5*x5151);
evalcond[0]=(((r02*x5152))+((x5151*x5154))+(((-1.0)*x5153*x5157)));
evalcond[1]=(((r12*x5152))+((r11*x5160))+(((-1.0)*x5155*x5157)));
evalcond[2]=(((r21*x5159))+(((-1.0)*r22*x5157))+(((-1.0)*x5156*x5158)));
evalcond[3]=((-1.0)+((r21*x5160))+((r22*x5152))+(((-1.0)*x5156*x5157)));
evalcond[4]=(((r11*x5159))+cj0+(((-1.0)*r12*x5157))+(((-1.0)*x5155*x5158)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5153*x5158))+((x5152*x5154))+(((-1.0)*r02*x5157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5161=((1.0)*cj5);
CheckValue<IkReal> x5162 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5161)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5162.valid){
continue;
}
CheckValue<IkReal> x5163=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5161)))),-1);
if(!x5163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5162.value)+(((1.5707963267949)*(x5163.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5164=IKcos(j4);
IkReal x5165=IKsin(j4);
IkReal x5166=(cj5*r00);
IkReal x5167=(r01*sj5);
IkReal x5168=(cj5*r10);
IkReal x5169=(cj5*r20);
IkReal x5170=((1.0)*x5164);
IkReal x5171=((1.0)*x5165);
IkReal x5172=(sj5*x5165);
IkReal x5173=(sj5*x5164);
evalcond[0]=(((x5164*x5167))+((r02*x5165))+(((-1.0)*x5166*x5170)));
evalcond[1]=((((-1.0)*x5168*x5170))+((r12*x5165))+((r11*x5173)));
evalcond[2]=((((-1.0)*x5169*x5171))+(((-1.0)*r22*x5170))+((r21*x5172)));
evalcond[3]=((-1.0)+(((-1.0)*x5169*x5170))+((r22*x5165))+((r21*x5173)));
evalcond[4]=(cj0+(((-1.0)*r12*x5170))+(((-1.0)*x5168*x5171))+((r11*x5172)));
evalcond[5]=(((x5165*x5167))+(((-1.0)*sj0))+(((-1.0)*r02*x5170))+(((-1.0)*x5166*x5171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5174=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5174.valid){
continue;
}
CheckValue<IkReal> x5175 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5174.value)))+(x5175.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5176=IKcos(j4);
IkReal x5177=IKsin(j4);
IkReal x5178=(cj5*r00);
IkReal x5179=(r01*sj5);
IkReal x5180=(cj5*r10);
IkReal x5181=(cj5*r20);
IkReal x5182=((1.0)*x5176);
IkReal x5183=((1.0)*x5177);
IkReal x5184=(sj5*x5177);
IkReal x5185=(sj5*x5176);
evalcond[0]=(((r02*x5177))+((x5176*x5179))+(((-1.0)*x5178*x5182)));
evalcond[1]=(((r12*x5177))+((r11*x5185))+(((-1.0)*x5180*x5182)));
evalcond[2]=((((-1.0)*r22*x5182))+((r21*x5184))+(((-1.0)*x5181*x5183)));
evalcond[3]=((-1.0)+((r21*x5185))+((r22*x5177))+(((-1.0)*x5181*x5182)));
evalcond[4]=(cj0+(((-1.0)*r12*x5182))+((r11*x5184))+(((-1.0)*x5180*x5183)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5182))+((x5177*x5179))+(((-1.0)*x5178*x5183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5186=IKsin(j0);
IkReal x5187=IKcos(j0);
evalcond[0]=((((-0.10915)*x5186))+(((0.39225)*x5187))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5186))+(((-1.0)*py))+(((0.10915)*x5187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5188=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5188;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5188);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5189=((1.0)*cj5);
IkReal x5190=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5189)));
j4eval[0]=x5190;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5189))))));
j4eval[2]=IKsign(x5190);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5191=((1.0)*cj5);
IkReal x5192=((((-1.0)*r01*x5191))+(((-1.0)*r00*sj5)));
j4eval[0]=x5192;
j4eval[1]=IKsign(x5192);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5191))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5193=((1.0)*cj5);
CheckValue<IkReal> x5194=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5193))+(((-1.0)*r00*sj5)))),-1);
if(!x5194.valid){
continue;
}
CheckValue<IkReal> x5195 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5193)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5195.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5194.value)))+(x5195.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5196=IKcos(j4);
IkReal x5197=IKsin(j4);
IkReal x5198=((1.0)*sj0);
IkReal x5199=(cj5*r00);
IkReal x5200=(cj5*r10);
IkReal x5201=(cj5*r20);
IkReal x5202=((1.0)*x5196);
IkReal x5203=((1.0)*x5197);
IkReal x5204=(sj5*x5196);
IkReal x5205=(sj5*x5197);
evalcond[0]=((((-1.0)*x5201*x5202))+((r22*x5197))+((r21*x5204)));
evalcond[1]=((((-1.0)*x5201*x5203))+(((-1.0)*r22*x5202))+((r21*x5205)));
evalcond[2]=((((-1.0)*x5200*x5203))+cj0+((r11*x5205))+(((-1.0)*r12*x5202)));
evalcond[3]=((((-1.0)*x5199*x5202))+((r01*x5204))+((r02*x5197))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5200*x5202))+(((-1.0)*x5198))+((r11*x5204))+((r12*x5197)));
evalcond[5]=((((-1.0)*x5199*x5203))+(((-1.0)*r02*x5202))+((r01*x5205))+(((-1.0)*x5198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5206=((1.0)*cj5);
CheckValue<IkReal> x5207=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5206)))),-1);
if(!x5207.valid){
continue;
}
CheckValue<IkReal> x5208 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5207.value)))+(x5208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5209=IKcos(j4);
IkReal x5210=IKsin(j4);
IkReal x5211=((1.0)*sj0);
IkReal x5212=(cj5*r00);
IkReal x5213=(cj5*r10);
IkReal x5214=(cj5*r20);
IkReal x5215=((1.0)*x5209);
IkReal x5216=((1.0)*x5210);
IkReal x5217=(sj5*x5209);
IkReal x5218=(sj5*x5210);
evalcond[0]=((((-1.0)*x5214*x5215))+((r22*x5210))+((r21*x5217)));
evalcond[1]=((((-1.0)*x5214*x5216))+(((-1.0)*r22*x5215))+((r21*x5218)));
evalcond[2]=(cj0+(((-1.0)*x5213*x5216))+((r11*x5218))+(((-1.0)*r12*x5215)));
evalcond[3]=(((r01*x5217))+(((-1.0)*x5212*x5215))+((r02*x5210))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5211))+(((-1.0)*x5213*x5215))+((r12*x5210))+((r11*x5217)));
evalcond[5]=(((r01*x5218))+(((-1.0)*x5212*x5216))+(((-1.0)*x5211))+(((-1.0)*r02*x5215)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5219 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5219.valid){
continue;
}
CheckValue<IkReal> x5220=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5220.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5219.value)+(((1.5707963267949)*(x5220.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5221=IKcos(j4);
IkReal x5222=IKsin(j4);
IkReal x5223=((1.0)*sj0);
IkReal x5224=(cj5*r00);
IkReal x5225=(cj5*r10);
IkReal x5226=(cj5*r20);
IkReal x5227=((1.0)*x5221);
IkReal x5228=((1.0)*x5222);
IkReal x5229=(sj5*x5221);
IkReal x5230=(sj5*x5222);
evalcond[0]=(((r21*x5229))+((r22*x5222))+(((-1.0)*x5226*x5227)));
evalcond[1]=(((r21*x5230))+(((-1.0)*x5226*x5228))+(((-1.0)*r22*x5227)));
evalcond[2]=(cj0+((r11*x5230))+(((-1.0)*r12*x5227))+(((-1.0)*x5225*x5228)));
evalcond[3]=(((r02*x5222))+(((-1.0)*x5224*x5227))+((r01*x5229))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5225*x5227))+(((-1.0)*x5223))+((r11*x5229))+((r12*x5222)));
evalcond[5]=(((r01*x5230))+(((-1.0)*x5224*x5228))+(((-1.0)*x5223))+(((-1.0)*r02*x5227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5231=IKcos(j0);
IkReal x5232=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x5231))+(((-0.10915)*x5232)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x5231))+(((-0.81725)*x5232)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5233=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5233;
j4eval[1]=IKsign(x5233);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5234=((1.0)*cj5);
IkReal x5235=((((-1.0)*r11*x5234))+(((-1.0)*r10*sj5)));
j4eval[0]=x5235;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5234))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5235);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5236=cj5*cj5;
IkReal x5237=((1.0)*r20);
IkReal x5238=(r01*r21);
IkReal x5239=(r21*sj5);
IkReal x5240=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5236*x5238))+(((-1.0)*x5238))+(((-1.0)*r00*x5236*x5237))+((cj5*r00*x5239)));
j4eval[0]=x5240;
j4eval[1]=((IKabs((((cj0*x5239))+(((-1.0)*cj0*cj5*x5237)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5240);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5241=cj5*cj5;
IkReal x5242=((1.0)*r20);
IkReal x5243=(r01*r21);
IkReal x5244=(r21*sj5);
CheckValue<IkReal> x5245=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x5241*x5242))+(((-1.0)*r02*r22))+(((-1.0)*x5243))+((x5241*x5243))+((cj5*r00*x5244)))),-1);
if(!x5245.valid){
continue;
}
CheckValue<IkReal> x5246 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5244))+(((-1.0)*cj0*cj5*x5242)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5246.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5245.value)))+(x5246.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5247=IKcos(j4);
IkReal x5248=IKsin(j4);
IkReal x5249=(cj5*r00);
IkReal x5250=(cj5*r10);
IkReal x5251=(cj5*r20);
IkReal x5252=((1.0)*x5247);
IkReal x5253=((1.0)*x5248);
IkReal x5254=(sj5*x5247);
IkReal x5255=(sj5*x5248);
evalcond[0]=(((r21*x5254))+(((-1.0)*x5251*x5252))+((r22*x5248)));
evalcond[1]=(((r21*x5255))+(((-1.0)*r22*x5252))+(((-1.0)*x5251*x5253)));
evalcond[2]=(((r01*x5254))+cj0+(((-1.0)*x5249*x5252))+((r02*x5248)));
evalcond[3]=(sj0+((r12*x5248))+((r11*x5254))+(((-1.0)*x5250*x5252)));
evalcond[4]=(cj0+(((-1.0)*r12*x5252))+((r11*x5255))+(((-1.0)*x5250*x5253)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5252))+((r01*x5255))+(((-1.0)*x5249*x5253)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5256=((1.0)*cj5);
CheckValue<IkReal> x5257 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5256)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5257.valid){
continue;
}
CheckValue<IkReal> x5258=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5256)))),-1);
if(!x5258.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5257.value)+(((1.5707963267949)*(x5258.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5259=IKcos(j4);
IkReal x5260=IKsin(j4);
IkReal x5261=(cj5*r00);
IkReal x5262=(cj5*r10);
IkReal x5263=(cj5*r20);
IkReal x5264=((1.0)*x5259);
IkReal x5265=((1.0)*x5260);
IkReal x5266=(sj5*x5259);
IkReal x5267=(sj5*x5260);
evalcond[0]=((((-1.0)*x5263*x5264))+((r21*x5266))+((r22*x5260)));
evalcond[1]=((((-1.0)*x5263*x5265))+((r21*x5267))+(((-1.0)*r22*x5264)));
evalcond[2]=(((r02*x5260))+cj0+((r01*x5266))+(((-1.0)*x5261*x5264)));
evalcond[3]=(sj0+((r12*x5260))+((r11*x5266))+(((-1.0)*x5262*x5264)));
evalcond[4]=(cj0+(((-1.0)*r12*x5264))+((r11*x5267))+(((-1.0)*x5262*x5265)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5267))+(((-1.0)*r02*x5264))+(((-1.0)*x5261*x5265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5268 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5268.valid){
continue;
}
CheckValue<IkReal> x5269=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5268.value)+(((1.5707963267949)*(x5269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5270=IKcos(j4);
IkReal x5271=IKsin(j4);
IkReal x5272=(cj5*r00);
IkReal x5273=(cj5*r10);
IkReal x5274=(cj5*r20);
IkReal x5275=((1.0)*x5270);
IkReal x5276=((1.0)*x5271);
IkReal x5277=(sj5*x5270);
IkReal x5278=(sj5*x5271);
evalcond[0]=(((r22*x5271))+(((-1.0)*x5274*x5275))+((r21*x5277)));
evalcond[1]=((((-1.0)*x5274*x5276))+((r21*x5278))+(((-1.0)*r22*x5275)));
evalcond[2]=((((-1.0)*x5272*x5275))+((r02*x5271))+cj0+((r01*x5277)));
evalcond[3]=(sj0+((r11*x5277))+(((-1.0)*x5273*x5275))+((r12*x5271)));
evalcond[4]=(cj0+(((-1.0)*r12*x5275))+((r11*x5278))+(((-1.0)*x5273*x5276)));
evalcond[5]=((((-1.0)*x5272*x5276))+(((-1.0)*sj0))+((r01*x5278))+(((-1.0)*r02*x5275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5279=IKcos(j0);
IkReal x5280=IKsin(j0);
evalcond[0]=((((-0.03275)*x5279))+(((-1.0)*px))+(((-0.10915)*x5280)));
evalcond[1]=((((-0.03275)*x5280))+(((-1.0)*py))+(((0.10915)*x5279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5281=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5281;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5282=((1.0)*cj5);
IkReal x5283=((((-1.0)*r01*x5282))+(((-1.0)*r00*sj5)));
j4eval[0]=x5283;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5282)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5283);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5284=((1.0)*cj5);
IkReal x5285=((((-1.0)*r01*x5284))+(((-1.0)*r00*sj5)));
j4eval[0]=x5285;
j4eval[1]=IKsign(x5285);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5284))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5286=((1.0)*cj5);
CheckValue<IkReal> x5287=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5286))+(((-1.0)*r00*sj5)))),-1);
if(!x5287.valid){
continue;
}
CheckValue<IkReal> x5288 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5286)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5288.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5287.value)))+(x5288.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5289=IKcos(j4);
IkReal x5290=IKsin(j4);
IkReal x5291=((1.0)*sj0);
IkReal x5292=(cj5*r00);
IkReal x5293=(cj5*r10);
IkReal x5294=(cj5*r20);
IkReal x5295=((1.0)*x5289);
IkReal x5296=((1.0)*x5290);
IkReal x5297=(sj5*x5289);
IkReal x5298=(sj5*x5290);
evalcond[0]=(((r22*x5290))+((r21*x5297))+(((-1.0)*x5294*x5295)));
evalcond[1]=((((-1.0)*r22*x5295))+((r21*x5298))+(((-1.0)*x5294*x5296)));
evalcond[2]=(cj0+(((-1.0)*r12*x5295))+(((-1.0)*x5293*x5296))+((r11*x5298)));
evalcond[3]=(((r02*x5290))+(((-1.0)*x5292*x5295))+((r01*x5297))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5290))+(((-1.0)*x5291))+(((-1.0)*x5293*x5295))+((r11*x5297)));
evalcond[5]=((((-1.0)*x5291))+(((-1.0)*x5292*x5296))+((r01*x5298))+(((-1.0)*r02*x5295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5299=((1.0)*cj5);
CheckValue<IkReal> x5300=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5299))+(((-1.0)*r00*sj5)))),-1);
if(!x5300.valid){
continue;
}
CheckValue<IkReal> x5301 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5299)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5300.value)))+(x5301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5302=IKcos(j4);
IkReal x5303=IKsin(j4);
IkReal x5304=((1.0)*sj0);
IkReal x5305=(cj5*r00);
IkReal x5306=(cj5*r10);
IkReal x5307=(cj5*r20);
IkReal x5308=((1.0)*x5302);
IkReal x5309=((1.0)*x5303);
IkReal x5310=(sj5*x5302);
IkReal x5311=(sj5*x5303);
evalcond[0]=(((r21*x5310))+((r22*x5303))+(((-1.0)*x5307*x5308)));
evalcond[1]=((((-1.0)*r22*x5308))+((r21*x5311))+(((-1.0)*x5307*x5309)));
evalcond[2]=((((-1.0)*x5306*x5309))+cj0+(((-1.0)*r12*x5308))+((r11*x5311)));
evalcond[3]=(((r01*x5310))+(((-1.0)*x5305*x5308))+((r02*x5303))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5306*x5308))+(((-1.0)*x5304))+((r12*x5303))+((r11*x5310)));
evalcond[5]=(((r01*x5311))+(((-1.0)*x5305*x5309))+(((-1.0)*x5304))+(((-1.0)*r02*x5308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5312 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5312.valid){
continue;
}
CheckValue<IkReal> x5313=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5312.value)+(((1.5707963267949)*(x5313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5314=IKcos(j4);
IkReal x5315=IKsin(j4);
IkReal x5316=((1.0)*sj0);
IkReal x5317=(cj5*r00);
IkReal x5318=(cj5*r10);
IkReal x5319=(cj5*r20);
IkReal x5320=((1.0)*x5314);
IkReal x5321=((1.0)*x5315);
IkReal x5322=(sj5*x5314);
IkReal x5323=(sj5*x5315);
evalcond[0]=(((r22*x5315))+((r21*x5322))+(((-1.0)*x5319*x5320)));
evalcond[1]=((((-1.0)*r22*x5320))+((r21*x5323))+(((-1.0)*x5319*x5321)));
evalcond[2]=((((-1.0)*x5318*x5321))+((r11*x5323))+cj0+(((-1.0)*r12*x5320)));
evalcond[3]=(((r02*x5315))+(((-1.0)*x5317*x5320))+((r01*x5322))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5318*x5320))+(((-1.0)*x5316))+((r11*x5322))+((r12*x5315)));
evalcond[5]=((((-1.0)*x5316))+(((-1.0)*r02*x5320))+(((-1.0)*x5317*x5321))+((r01*x5323)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5324=((1.0)*sj5);
IkReal x5325=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5325))+(((-1.0)*r10*x5324)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x5324))+(((-1.0)*r01*x5325)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5325))+(((-1.0)*r10*x5324))))+IKsqr(((((-1.0)*r00*x5324))+(((-1.0)*r01*x5325))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5325))+(((-1.0)*r10*x5324))), ((((-1.0)*r00*x5324))+(((-1.0)*r01*x5325))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5326=IKsin(j0);
IkReal x5327=IKcos(j0);
IkReal x5328=(r00*sj5);
IkReal x5329=(r10*sj5);
IkReal x5330=(cj5*r11);
IkReal x5331=(cj5*r01);
evalcond[0]=(x5327+x5328+x5331);
evalcond[1]=(x5326+x5329+x5330);
evalcond[2]=((((-1.0)*px))+(((-0.09465)*x5328))+(((-0.09465)*x5331))+(((-0.10915)*x5326)));
evalcond[3]=((((-1.0)*py))+(((-0.09465)*x5329))+(((0.10915)*x5327))+(((-0.09465)*x5330)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5332=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5332;
j4eval[1]=IKsign(x5332);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5333=((1.0)*cj5);
IkReal x5334=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5333)));
j4eval[0]=x5334;
j4eval[1]=IKsign(x5334);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x5333))+((r01*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5335=cj5*cj5;
IkReal x5336=(r01*r11);
IkReal x5337=((1.0)*r00);
IkReal x5338=(r01*sj5);
IkReal x5339=((((-1.0)*x5336))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5335*x5337))+((x5335*x5336))+((cj5*r10*x5338))+((cj5*r00*r11*sj5)));
j4eval[0]=x5339;
j4eval[1]=IKsign(x5339);
j4eval[2]=((IKabs((((cj0*x5338))+(((-1.0)*cj0*cj5*x5337)))))+(IKabs((cj0*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5340=cj5*cj5;
IkReal x5341=(r01*r11);
IkReal x5342=(cj5*r00);
IkReal x5343=(r01*sj5);
CheckValue<IkReal> x5344=IKPowWithIntegerCheck(IKsign((((cj5*r10*x5343))+(((-1.0)*r00*r10*x5340))+(((-1.0)*r02*r12))+((r11*sj5*x5342))+(((-1.0)*x5341))+((x5340*x5341)))),-1);
if(!x5344.valid){
continue;
}
CheckValue<IkReal> x5345 = IKatan2WithCheck(IkReal((((cj0*x5343))+(((-1.0)*cj0*x5342)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5344.value)))+(x5345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5346=IKcos(j4);
IkReal x5347=IKsin(j4);
IkReal x5348=(cj5*r00);
IkReal x5349=(r01*sj5);
IkReal x5350=(cj5*r10);
IkReal x5351=(cj5*r20);
IkReal x5352=((1.0)*x5346);
IkReal x5353=((1.0)*x5347);
IkReal x5354=(sj5*x5347);
IkReal x5355=(sj5*x5346);
evalcond[0]=(((x5346*x5349))+((r02*x5347))+(((-1.0)*x5348*x5352)));
evalcond[1]=(((r12*x5347))+((r11*x5355))+(((-1.0)*x5350*x5352)));
evalcond[2]=((((-1.0)*x5351*x5353))+(((-1.0)*r22*x5352))+((r21*x5354)));
evalcond[3]=((-1.0)+(((-1.0)*x5351*x5352))+((r22*x5347))+((r21*x5355)));
evalcond[4]=(cj0+((r11*x5354))+(((-1.0)*r12*x5352))+(((-1.0)*x5350*x5353)));
evalcond[5]=(((x5347*x5349))+(((-1.0)*sj0))+(((-1.0)*r02*x5352))+(((-1.0)*x5348*x5353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5356=((1.0)*cj5);
CheckValue<IkReal> x5357 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5356)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5357.valid){
continue;
}
CheckValue<IkReal> x5358=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5356)))),-1);
if(!x5358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5357.value)+(((1.5707963267949)*(x5358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5359=IKcos(j4);
IkReal x5360=IKsin(j4);
IkReal x5361=(cj5*r00);
IkReal x5362=(r01*sj5);
IkReal x5363=(cj5*r10);
IkReal x5364=(cj5*r20);
IkReal x5365=((1.0)*x5359);
IkReal x5366=((1.0)*x5360);
IkReal x5367=(sj5*x5360);
IkReal x5368=(sj5*x5359);
evalcond[0]=(((r02*x5360))+(((-1.0)*x5361*x5365))+((x5359*x5362)));
evalcond[1]=(((r12*x5360))+(((-1.0)*x5363*x5365))+((r11*x5368)));
evalcond[2]=((((-1.0)*r22*x5365))+(((-1.0)*x5364*x5366))+((r21*x5367)));
evalcond[3]=((-1.0)+((r22*x5360))+(((-1.0)*x5364*x5365))+((r21*x5368)));
evalcond[4]=(cj0+(((-1.0)*x5363*x5366))+(((-1.0)*r12*x5365))+((r11*x5367)));
evalcond[5]=((((-1.0)*sj0))+((x5360*x5362))+(((-1.0)*r02*x5365))+(((-1.0)*x5361*x5366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5369=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5369.valid){
continue;
}
CheckValue<IkReal> x5370 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5369.value)))+(x5370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5371=IKcos(j4);
IkReal x5372=IKsin(j4);
IkReal x5373=(cj5*r00);
IkReal x5374=(r01*sj5);
IkReal x5375=(cj5*r10);
IkReal x5376=(cj5*r20);
IkReal x5377=((1.0)*x5371);
IkReal x5378=((1.0)*x5372);
IkReal x5379=(sj5*x5372);
IkReal x5380=(sj5*x5371);
evalcond[0]=((((-1.0)*x5373*x5377))+((r02*x5372))+((x5371*x5374)));
evalcond[1]=(((r11*x5380))+((r12*x5372))+(((-1.0)*x5375*x5377)));
evalcond[2]=((((-1.0)*r22*x5377))+((r21*x5379))+(((-1.0)*x5376*x5378)));
evalcond[3]=((-1.0)+(((-1.0)*x5376*x5377))+((r22*x5372))+((r21*x5380)));
evalcond[4]=(cj0+(((-1.0)*r12*x5377))+(((-1.0)*x5375*x5378))+((r11*x5379)));
evalcond[5]=((((-1.0)*sj0))+((x5372*x5374))+(((-1.0)*x5373*x5378))+(((-1.0)*r02*x5377)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5381=IKsin(j0);
IkReal x5382=IKcos(j0);
evalcond[0]=((((-0.10915)*x5381))+(((0.39225)*x5382))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5381))+(((0.10915)*x5382))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5383=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5383;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5383);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5384=((1.0)*cj5);
IkReal x5385=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5384)));
j4eval[0]=x5385;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5384))))));
j4eval[2]=IKsign(x5385);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5386=((1.0)*cj5);
IkReal x5387=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5386)));
j4eval[0]=x5387;
j4eval[1]=IKsign(x5387);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5386))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5388=((1.0)*cj5);
CheckValue<IkReal> x5389 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5388))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5389.valid){
continue;
}
CheckValue<IkReal> x5390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5388)))),-1);
if(!x5390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5389.value)+(((1.5707963267949)*(x5390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5391=IKcos(j4);
IkReal x5392=IKsin(j4);
IkReal x5393=((1.0)*sj0);
IkReal x5394=(cj5*r00);
IkReal x5395=(cj5*r10);
IkReal x5396=(cj5*r20);
IkReal x5397=((1.0)*x5391);
IkReal x5398=((1.0)*x5392);
IkReal x5399=(sj5*x5391);
IkReal x5400=(sj5*x5392);
evalcond[0]=(((r22*x5392))+((r21*x5399))+(((-1.0)*x5396*x5397)));
evalcond[1]=(((r21*x5400))+(((-1.0)*r22*x5397))+(((-1.0)*x5396*x5398)));
evalcond[2]=(cj0+(((-1.0)*r12*x5397))+((r11*x5400))+(((-1.0)*x5395*x5398)));
evalcond[3]=(((r02*x5392))+(((-1.0)*x5394*x5397))+((r01*x5399))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5399))+((r12*x5392))+(((-1.0)*x5393))+(((-1.0)*x5395*x5397)));
evalcond[5]=((((-1.0)*x5394*x5398))+(((-1.0)*r02*x5397))+(((-1.0)*x5393))+((r01*x5400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5401=((1.0)*cj5);
CheckValue<IkReal> x5402=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5401))+(((-1.0)*r00*sj5)))),-1);
if(!x5402.valid){
continue;
}
CheckValue<IkReal> x5403 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5401))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5403.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5402.value)))+(x5403.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5404=IKcos(j4);
IkReal x5405=IKsin(j4);
IkReal x5406=((1.0)*sj0);
IkReal x5407=(cj5*r00);
IkReal x5408=(cj5*r10);
IkReal x5409=(cj5*r20);
IkReal x5410=((1.0)*x5404);
IkReal x5411=((1.0)*x5405);
IkReal x5412=(sj5*x5404);
IkReal x5413=(sj5*x5405);
evalcond[0]=(((r22*x5405))+((r21*x5412))+(((-1.0)*x5409*x5410)));
evalcond[1]=((((-1.0)*r22*x5410))+((r21*x5413))+(((-1.0)*x5409*x5411)));
evalcond[2]=(((r11*x5413))+cj0+(((-1.0)*r12*x5410))+(((-1.0)*x5408*x5411)));
evalcond[3]=((((-1.0)*x5407*x5410))+((r02*x5405))+((r01*x5412))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5405))+((r11*x5412))+(((-1.0)*x5406))+(((-1.0)*x5408*x5410)));
evalcond[5]=((((-1.0)*r02*x5410))+(((-1.0)*x5407*x5411))+(((-1.0)*x5406))+((r01*x5413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5414 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5414.valid){
continue;
}
CheckValue<IkReal> x5415=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5414.value)+(((1.5707963267949)*(x5415.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5416=IKcos(j4);
IkReal x5417=IKsin(j4);
IkReal x5418=((1.0)*sj0);
IkReal x5419=(cj5*r00);
IkReal x5420=(cj5*r10);
IkReal x5421=(cj5*r20);
IkReal x5422=((1.0)*x5416);
IkReal x5423=((1.0)*x5417);
IkReal x5424=(sj5*x5416);
IkReal x5425=(sj5*x5417);
evalcond[0]=((((-1.0)*x5421*x5422))+((r22*x5417))+((r21*x5424)));
evalcond[1]=((((-1.0)*x5421*x5423))+((r21*x5425))+(((-1.0)*r22*x5422)));
evalcond[2]=(cj0+((r11*x5425))+(((-1.0)*r12*x5422))+(((-1.0)*x5420*x5423)));
evalcond[3]=(((r01*x5424))+((r02*x5417))+(((-1.0)*x5419*x5422))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5418))+((r12*x5417))+((r11*x5424))+(((-1.0)*x5420*x5422)));
evalcond[5]=(((r01*x5425))+(((-1.0)*x5419*x5423))+(((-1.0)*x5418))+(((-1.0)*r02*x5422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5426=IKsin(j0);
IkReal x5427=IKcos(j0);
IkReal x5428=(r00*sj5);
IkReal x5429=(r10*sj5);
IkReal x5430=(cj5*r11);
IkReal x5431=(cj5*r01);
evalcond[0]=(x5428+x5431+(((-1.0)*x5427)));
evalcond[1]=(x5429+x5430+(((-1.0)*x5426)));
evalcond[2]=((((-0.10915)*x5426))+(((-0.09465)*x5431))+(((-1.0)*px))+(((-0.09465)*x5428)));
evalcond[3]=((((-0.09465)*x5430))+(((0.10915)*x5427))+(((-1.0)*py))+(((-0.09465)*x5429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5432=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5432;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5432);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5433=((1.0)*cj5);
IkReal x5434=((((-1.0)*r01*x5433))+(((-1.0)*r00*sj5)));
j4eval[0]=x5434;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x5433))))));
j4eval[2]=IKsign(x5434);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5435=cj5*cj5;
IkReal x5436=(r01*r11);
IkReal x5437=((1.0)*r00);
IkReal x5438=(r01*sj5);
IkReal x5439=((((-1.0)*x5436))+(((-1.0)*r02*r12))+((x5435*x5436))+(((-1.0)*r10*x5435*x5437))+((cj5*r10*x5438))+((cj5*r00*r11*sj5)));
j4eval[0]=x5439;
j4eval[1]=IKsign(x5439);
j4eval[2]=((IKabs(((((-1.0)*cj0*cj5*x5437))+((cj0*x5438)))))+(IKabs((cj0*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5440=cj5*cj5;
IkReal x5441=(r01*r11);
IkReal x5442=(cj5*r00);
IkReal x5443=(r01*sj5);
CheckValue<IkReal> x5444 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5442))+((cj0*x5443)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5444.valid){
continue;
}
CheckValue<IkReal> x5445=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5441))+((x5440*x5441))+(((-1.0)*r02*r12))+((cj5*r10*x5443))+(((-1.0)*r00*r10*x5440))+((r11*sj5*x5442)))),-1);
if(!x5445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5444.value)+(((1.5707963267949)*(x5445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5446=IKcos(j4);
IkReal x5447=IKsin(j4);
IkReal x5448=(cj5*r00);
IkReal x5449=(r01*sj5);
IkReal x5450=(cj5*r10);
IkReal x5451=(cj5*r20);
IkReal x5452=((1.0)*x5446);
IkReal x5453=((1.0)*x5447);
IkReal x5454=(sj5*x5447);
IkReal x5455=(sj5*x5446);
evalcond[0]=(((x5446*x5449))+(((-1.0)*x5448*x5452))+((r02*x5447)));
evalcond[1]=((((-1.0)*x5450*x5452))+((r12*x5447))+((r11*x5455)));
evalcond[2]=((((-1.0)*x5451*x5453))+((r21*x5454))+(((-1.0)*r22*x5452)));
evalcond[3]=((1.0)+(((-1.0)*x5451*x5452))+((r21*x5455))+((r22*x5447)));
evalcond[4]=((((-1.0)*r12*x5452))+cj0+(((-1.0)*x5450*x5453))+((r11*x5454)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5452))+(((-1.0)*x5448*x5453))+((x5447*x5449)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5456=((1.0)*cj5);
CheckValue<IkReal> x5457 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x5456)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5457.valid){
continue;
}
CheckValue<IkReal> x5458=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5456)))),-1);
if(!x5458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5457.value)+(((1.5707963267949)*(x5458.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5459=IKcos(j4);
IkReal x5460=IKsin(j4);
IkReal x5461=(cj5*r00);
IkReal x5462=(r01*sj5);
IkReal x5463=(cj5*r10);
IkReal x5464=(cj5*r20);
IkReal x5465=((1.0)*x5459);
IkReal x5466=((1.0)*x5460);
IkReal x5467=(sj5*x5460);
IkReal x5468=(sj5*x5459);
evalcond[0]=(((r02*x5460))+(((-1.0)*x5461*x5465))+((x5459*x5462)));
evalcond[1]=((((-1.0)*x5463*x5465))+((r11*x5468))+((r12*x5460)));
evalcond[2]=((((-1.0)*x5464*x5466))+((r21*x5467))+(((-1.0)*r22*x5465)));
evalcond[3]=((1.0)+(((-1.0)*x5464*x5465))+((r22*x5460))+((r21*x5468)));
evalcond[4]=((((-1.0)*x5463*x5466))+cj0+((r11*x5467))+(((-1.0)*r12*x5465)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5465))+(((-1.0)*x5461*x5466))+((x5460*x5462)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5469 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5469.valid){
continue;
}
CheckValue<IkReal> x5470=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5469.value)+(((1.5707963267949)*(x5470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5471=IKcos(j4);
IkReal x5472=IKsin(j4);
IkReal x5473=(cj5*r00);
IkReal x5474=(r01*sj5);
IkReal x5475=(cj5*r10);
IkReal x5476=(cj5*r20);
IkReal x5477=((1.0)*x5471);
IkReal x5478=((1.0)*x5472);
IkReal x5479=(sj5*x5472);
IkReal x5480=(sj5*x5471);
evalcond[0]=(((x5471*x5474))+(((-1.0)*x5473*x5477))+((r02*x5472)));
evalcond[1]=(((r11*x5480))+(((-1.0)*x5475*x5477))+((r12*x5472)));
evalcond[2]=((((-1.0)*x5476*x5478))+(((-1.0)*r22*x5477))+((r21*x5479)));
evalcond[3]=((1.0)+(((-1.0)*x5476*x5477))+((r21*x5480))+((r22*x5472)));
evalcond[4]=(cj0+(((-1.0)*x5475*x5478))+(((-1.0)*r12*x5477))+((r11*x5479)));
evalcond[5]=((((-1.0)*sj0))+((x5472*x5474))+(((-1.0)*x5473*x5478))+(((-1.0)*r02*x5477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5481=IKcos(j0);
IkReal x5482=IKsin(j0);
evalcond[0]=((((-0.39225)*x5481))+(((-0.10915)*x5482))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x5481))+(((-0.39225)*x5482))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5483=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5483;
j4eval[1]=IKsign(x5483);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5484=((1.0)*cj5);
IkReal x5485=((((-1.0)*r11*x5484))+(((-1.0)*r10*sj5)));
j4eval[0]=x5485;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5484)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5485);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5486=cj5*cj5;
IkReal x5487=((1.0)*r20);
IkReal x5488=(r01*r21);
IkReal x5489=(r21*sj5);
IkReal x5490=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((cj5*r00*x5489))+((x5486*x5488))+(((-1.0)*x5488))+(((-1.0)*r00*x5486*x5487)));
j4eval[0]=x5490;
j4eval[1]=((IKabs((((cj0*x5489))+(((-1.0)*cj0*cj5*x5487)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5491=cj5*cj5;
IkReal x5492=((1.0)*r20);
IkReal x5493=(r01*r21);
IkReal x5494=(r21*sj5);
CheckValue<IkReal> x5495=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r00*x5491*x5492))+(((-1.0)*r02*r22))+((cj5*r00*x5494))+((x5491*x5493))+(((-1.0)*x5493)))),-1);
if(!x5495.valid){
continue;
}
CheckValue<IkReal> x5496 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5494))+(((-1.0)*cj0*cj5*x5492)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5496.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5495.value)))+(x5496.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5497=IKcos(j4);
IkReal x5498=IKsin(j4);
IkReal x5499=(cj5*r00);
IkReal x5500=(cj5*r10);
IkReal x5501=(cj5*r20);
IkReal x5502=((1.0)*x5497);
IkReal x5503=((1.0)*x5498);
IkReal x5504=(sj5*x5497);
IkReal x5505=(sj5*x5498);
evalcond[0]=((((-1.0)*x5501*x5502))+((r21*x5504))+((r22*x5498)));
evalcond[1]=((((-1.0)*r22*x5502))+(((-1.0)*x5501*x5503))+((r21*x5505)));
evalcond[2]=(cj0+((r01*x5504))+((r02*x5498))+(((-1.0)*x5499*x5502)));
evalcond[3]=(sj0+(((-1.0)*x5500*x5502))+((r12*x5498))+((r11*x5504)));
evalcond[4]=(cj0+(((-1.0)*x5500*x5503))+(((-1.0)*r12*x5502))+((r11*x5505)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5502))+((r01*x5505))+(((-1.0)*x5499*x5503)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5506=((1.0)*cj5);
CheckValue<IkReal> x5507 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5506)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5507.valid){
continue;
}
CheckValue<IkReal> x5508=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5506)))),-1);
if(!x5508.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5507.value)+(((1.5707963267949)*(x5508.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5509=IKcos(j4);
IkReal x5510=IKsin(j4);
IkReal x5511=(cj5*r00);
IkReal x5512=(cj5*r10);
IkReal x5513=(cj5*r20);
IkReal x5514=((1.0)*x5509);
IkReal x5515=((1.0)*x5510);
IkReal x5516=(sj5*x5509);
IkReal x5517=(sj5*x5510);
evalcond[0]=((((-1.0)*x5513*x5514))+((r21*x5516))+((r22*x5510)));
evalcond[1]=((((-1.0)*r22*x5514))+(((-1.0)*x5513*x5515))+((r21*x5517)));
evalcond[2]=(cj0+((r02*x5510))+(((-1.0)*x5511*x5514))+((r01*x5516)));
evalcond[3]=((((-1.0)*x5512*x5514))+sj0+((r12*x5510))+((r11*x5516)));
evalcond[4]=((((-1.0)*x5512*x5515))+cj0+(((-1.0)*r12*x5514))+((r11*x5517)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5514))+(((-1.0)*x5511*x5515))+((r01*x5517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5518 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5518.valid){
continue;
}
CheckValue<IkReal> x5519=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5518.value)+(((1.5707963267949)*(x5519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5520=IKcos(j4);
IkReal x5521=IKsin(j4);
IkReal x5522=(cj5*r00);
IkReal x5523=(cj5*r10);
IkReal x5524=(cj5*r20);
IkReal x5525=((1.0)*x5520);
IkReal x5526=((1.0)*x5521);
IkReal x5527=(sj5*x5520);
IkReal x5528=(sj5*x5521);
evalcond[0]=(((r22*x5521))+((r21*x5527))+(((-1.0)*x5524*x5525)));
evalcond[1]=((((-1.0)*r22*x5525))+((r21*x5528))+(((-1.0)*x5524*x5526)));
evalcond[2]=(((r02*x5521))+cj0+((r01*x5527))+(((-1.0)*x5522*x5525)));
evalcond[3]=((((-1.0)*x5523*x5525))+sj0+((r11*x5527))+((r12*x5521)));
evalcond[4]=((((-1.0)*x5523*x5526))+cj0+((r11*x5528))+(((-1.0)*r12*x5525)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5525))+((r01*x5528))+(((-1.0)*x5522*x5526)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5529=cj1*cj1;
IkReal x5530=(cj1*sj1);
IkReal x5531=(cj5*r01);
IkReal x5532=(r00*sj5);
IkReal x5533=(r10*sj5);
IkReal x5534=(cj5*r11);
IkReal x5535=(cj1*sj2);
IkReal x5536=((20000.0)*py);
IkReal x5537=(cj2*sj1);
IkReal x5538=((1893.0)*x5537);
IkReal x5539=(sj2*x5529);
CheckValue<IkReal> x5540=IKPowWithIntegerCheck(((((-8500.0)*x5539))+(((-8500.0)*cj2*x5530))+(((7845.0)*x5530))+(((-15690.0)*x5530*(cj2*cj2)))+(((7845.0)*cj2*sj2))+(((-15690.0)*cj2*x5539))),-1);
if(!x5540.valid){
continue;
}
CheckValue<IkReal> x5541=IKPowWithIntegerCheck(((((-1.0)*x5537))+(((-1.0)*x5535))),-1);
if(!x5541.valid){
continue;
}
if( IKabs(((x5540.value)*(((((-1893.0)*x5533*x5535))+(((-1.0)*x5535*x5536))+(((-1.0)*x5534*x5538))+(((-1.0)*x5536*x5537))+(((-1893.0)*x5534*x5535))+(((2183.0)*x5531))+(((2183.0)*x5532))+(((-1.0)*x5533*x5538)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5541.value)*(((((-1.0)*x5532))+(((-1.0)*x5531)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5540.value)*(((((-1893.0)*x5533*x5535))+(((-1.0)*x5535*x5536))+(((-1.0)*x5534*x5538))+(((-1.0)*x5536*x5537))+(((-1893.0)*x5534*x5535))+(((2183.0)*x5531))+(((2183.0)*x5532))+(((-1.0)*x5533*x5538))))))+IKsqr(((x5541.value)*(((((-1.0)*x5532))+(((-1.0)*x5531))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5540.value)*(((((-1893.0)*x5533*x5535))+(((-1.0)*x5535*x5536))+(((-1.0)*x5534*x5538))+(((-1.0)*x5536*x5537))+(((-1893.0)*x5534*x5535))+(((2183.0)*x5531))+(((2183.0)*x5532))+(((-1.0)*x5533*x5538))))), ((x5541.value)*(((((-1.0)*x5532))+(((-1.0)*x5531))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5542=IKcos(j0);
IkReal x5543=IKsin(j0);
IkReal x5544=(cj5*r01);
IkReal x5545=((1.0)*cj1);
IkReal x5546=((0.39225)*sj1);
IkReal x5547=(cj5*r11);
IkReal x5548=(r00*sj5);
IkReal x5549=((0.39225)*cj2);
IkReal x5550=(r10*sj5);
IkReal x5551=(sj2*x5542);
IkReal x5552=(sj2*x5543);
IkReal x5553=(cj1*x5542);
IkReal x5554=((1.0)*cj2*sj1);
IkReal x5555=(cj1*x5543);
evalcond[0]=((((-1.0)*x5542*x5554))+x5548+x5544+(((-1.0)*x5545*x5551)));
evalcond[1]=((((-1.0)*x5543*x5554))+x5547+x5550+(((-1.0)*x5545*x5552)));
evalcond[2]=((((-0.10915)*x5543))+(((-0.09465)*x5548))+(((-0.09465)*x5544))+(((0.425)*x5553))+((x5549*x5553))+(((-1.0)*px))+(((-1.0)*x5546*x5551)));
evalcond[3]=((((0.10915)*x5542))+(((-0.09465)*x5547))+(((-0.09465)*x5550))+(((0.425)*x5555))+((x5549*x5555))+(((-1.0)*py))+(((-1.0)*x5546*x5552)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5556=((1.0)*cj5);
IkReal x5557=((((-1.0)*r01*x5556))+(((-1.0)*r00*sj5)));
j4eval[0]=x5557;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5556)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5558=((1.0)*cj5);
IkReal x5559=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5558)));
j4eval[0]=x5559;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5558))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x5559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5560=((1.0)*sj0);
IkReal x5561=((1.0)*cj0);
IkReal x5562=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5562;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5561))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5560)))))+(IKabs(((((-1.0)*r12*x5560))+(((-1.0)*r02*x5561))))));
j4eval[2]=IKsign(x5562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5563=((-1.0)*r20);
IkReal x5565 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5565)==0){
continue;
}
IkReal x5564=pow(x5565,-0.5);
CheckValue<IkReal> x5566 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5563),IKFAST_ATAN2_MAGTHRESH);
if(!x5566.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5566.value));
IkReal gconst115=(r21*x5564);
IkReal gconst116=(x5563*x5564);
CheckValue<IkReal> x5567 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5567.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5567.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5568=((-1.0)*r20);
IkReal x5569=x5564;
CheckValue<IkReal> x5571 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5568),IKFAST_ATAN2_MAGTHRESH);
if(!x5571.valid){
continue;
}
IkReal x5570=((-1.0)*(x5571.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5570;
IkReal gconst114=x5570;
IkReal gconst115=(r21*x5569);
IkReal gconst116=(x5568*x5569);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5572=((-1.0)*r20);
IkReal x5573=x5564;
CheckValue<IkReal> x5575 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5572),IKFAST_ATAN2_MAGTHRESH);
if(!x5575.valid){
continue;
}
IkReal x5574=((-1.0)*(x5575.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5574;
IkReal gconst114=x5574;
IkReal gconst115=(r21*x5573);
IkReal gconst116=(x5572*x5573);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5576=((-1.0)*r20);
IkReal x5577=x5564;
CheckValue<IkReal> x5579 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5576),IKFAST_ATAN2_MAGTHRESH);
if(!x5579.valid){
continue;
}
IkReal x5578=((-1.0)*(x5579.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5578;
IkReal gconst114=x5578;
IkReal gconst115=(r21*x5577);
IkReal gconst116=(x5576*x5577);
IkReal x5580=((1.0)*(r22*r22));
CheckValue<IkReal> x5584=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5580))),-1);
if(!x5584.valid){
continue;
}
IkReal x5581=x5584.value;
IkReal x5582=((1.0)*x5581);
IkReal x5583=((((-2.0)*x5581*(r20*r20)*(r21*r21)))+(((-1.0)*x5582*(r21*r21*r21*r21)))+(((-1.0)*x5582*(r20*r20*r20*r20)))+(((-1.0)*x5580)));
j4eval[0]=x5583;
j4eval[1]=IKsign(x5583);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5585=(cj2*sj1);
IkReal x5586=(gconst115*r21);
IkReal x5587=(cj1*sj2);
IkReal x5588=((1.0)*gconst116*r20);
CheckValue<IkReal> x5589=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5586))+(((-1.0)*gconst116*r20*x5588))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5586*x5586))))),-1);
if(!x5589.valid){
continue;
}
CheckValue<IkReal> x5590 = IKatan2WithCheck(IkReal((((r22*x5587))+((r22*x5585)))),IkReal((((x5586*x5587))+(((-1.0)*x5585*x5588))+((x5585*x5586))+(((-1.0)*x5587*x5588)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5590.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5589.value)))+(x5590.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5591=IKsin(j4);
IkReal x5592=IKcos(j4);
IkReal x5593=(sj1*sj2);
IkReal x5594=((1.0)*x5592);
IkReal x5595=((1.0)*cj1*cj2);
IkReal x5596=(gconst115*x5591);
IkReal x5597=(gconst115*x5592);
IkReal x5598=((1.0)*gconst116*x5591);
evalcond[0]=(((r21*x5596))+(((-1.0)*r20*x5598))+(((-1.0)*r22*x5594)));
evalcond[1]=((((-1.0)*r12*x5594))+cj0+((r11*x5596))+(((-1.0)*r10*x5598)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5594))+(((-1.0)*r00*x5598))+((r01*x5596)));
evalcond[3]=(((r21*x5597))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5594))+((r22*x5591)));
evalcond[4]=((((-1.0)*cj0*x5595))+((cj0*x5593))+((r02*x5591))+(((-1.0)*gconst116*r00*x5594))+((r01*x5597)));
evalcond[5]=(((sj0*x5593))+((r11*x5597))+((r12*x5591))+(((-1.0)*gconst116*r10*x5594))+(((-1.0)*sj0*x5595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5599=((1.0)*gconst116);
CheckValue<IkReal> x5600 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5599)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5600.valid){
continue;
}
CheckValue<IkReal> x5601=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5599))+(((-1.0)*gconst115*r10)))),-1);
if(!x5601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5600.value)+(((1.5707963267949)*(x5601.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5602=IKsin(j4);
IkReal x5603=IKcos(j4);
IkReal x5604=(sj1*sj2);
IkReal x5605=((1.0)*x5603);
IkReal x5606=((1.0)*cj1*cj2);
IkReal x5607=(gconst115*x5602);
IkReal x5608=(gconst115*x5603);
IkReal x5609=((1.0)*gconst116*x5602);
evalcond[0]=((((-1.0)*r22*x5605))+((r21*x5607))+(((-1.0)*r20*x5609)));
evalcond[1]=((((-1.0)*r10*x5609))+cj0+(((-1.0)*r12*x5605))+((r11*x5607)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5609))+((r01*x5607))+(((-1.0)*r02*x5605)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5605))+((r21*x5608))+((r22*x5602)));
evalcond[4]=(((r02*x5602))+(((-1.0)*cj0*x5606))+((r01*x5608))+(((-1.0)*gconst116*r00*x5605))+((cj0*x5604)));
evalcond[5]=(((sj0*x5604))+((r12*x5602))+(((-1.0)*gconst116*r10*x5605))+(((-1.0)*sj0*x5606))+((r11*x5608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5610=((1.0)*gconst116);
CheckValue<IkReal> x5611 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5610))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5611.valid){
continue;
}
CheckValue<IkReal> x5612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5610))+(((-1.0)*gconst115*r00)))),-1);
if(!x5612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5611.value)+(((1.5707963267949)*(x5612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5613=IKsin(j4);
IkReal x5614=IKcos(j4);
IkReal x5615=(sj1*sj2);
IkReal x5616=((1.0)*x5614);
IkReal x5617=((1.0)*cj1*cj2);
IkReal x5618=(gconst115*x5613);
IkReal x5619=(gconst115*x5614);
IkReal x5620=((1.0)*gconst116*x5613);
evalcond[0]=((((-1.0)*r22*x5616))+((r21*x5618))+(((-1.0)*r20*x5620)));
evalcond[1]=(cj0+(((-1.0)*r10*x5620))+(((-1.0)*r12*x5616))+((r11*x5618)));
evalcond[2]=((((-1.0)*r00*x5620))+(((-1.0)*sj0))+((r01*x5618))+(((-1.0)*r02*x5616)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5616))+((cj1*sj2))+((r21*x5619))+((r22*x5613)));
evalcond[4]=(((cj0*x5615))+(((-1.0)*cj0*x5617))+((r02*x5613))+((r01*x5619))+(((-1.0)*gconst116*r00*x5616)));
evalcond[5]=(((sj0*x5615))+(((-1.0)*gconst116*r10*x5616))+((r12*x5613))+(((-1.0)*sj0*x5617))+((r11*x5619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5621=((-1.0)*r21);
IkReal x5623 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5623)==0){
continue;
}
IkReal x5622=pow(x5623,-0.5);
CheckValue<IkReal> x5624 = IKatan2WithCheck(IkReal(x5621),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5624.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5624.value))));
IkReal gconst118=(x5621*x5622);
IkReal gconst119=((1.0)*r20*x5622);
CheckValue<IkReal> x5625 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5625.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5625.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5626=((-1.0)*r21);
CheckValue<IkReal> x5629 = IKatan2WithCheck(IkReal(x5626),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5629.valid){
continue;
}
IkReal x5627=((1.0)*(x5629.value));
IkReal x5628=x5622;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5627)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5627)));
IkReal gconst118=(x5626*x5628);
IkReal gconst119=((1.0)*r20*x5628);
IkReal x5630=r22*r22;
IkReal x5631=((1.0)*x5630);
CheckValue<IkReal> x5635=IKPowWithIntegerCheck(((-1.0)+x5630),-1);
if(!x5635.valid){
continue;
}
IkReal x5632=x5635.value;
if((((1.0)+(((-1.0)*x5631)))) < -0.00001)
continue;
IkReal x5633=IKsqrt(((1.0)+(((-1.0)*x5631))));
IkReal x5634=(cj0*x5632*x5633);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs((x5634+(((-1.0)*x5631*x5634))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5636=((-1.0)*r21);
CheckValue<IkReal> x5639 = IKatan2WithCheck(IkReal(x5636),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5639.valid){
continue;
}
IkReal x5637=((1.0)*(x5639.value));
IkReal x5638=x5622;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5637)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5637)));
IkReal gconst118=(x5636*x5638);
IkReal gconst119=((1.0)*r20*x5638);
IkReal x5640=r22*r22;
IkReal x5641=((1.0)*x5640);
CheckValue<IkReal> x5645=IKPowWithIntegerCheck(((-1.0)+x5640),-1);
if(!x5645.valid){
continue;
}
IkReal x5642=x5645.value;
if((((1.0)+(((-1.0)*x5641)))) < -0.00001)
continue;
IkReal x5643=IKsqrt(((1.0)+(((-1.0)*x5641))));
IkReal x5644=(sj0*x5642*x5643);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5644+(((-1.0)*x5641*x5644))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5646=((-1.0)*r21);
CheckValue<IkReal> x5649 = IKatan2WithCheck(IkReal(x5646),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5649.valid){
continue;
}
IkReal x5647=((1.0)*(x5649.value));
IkReal x5648=x5622;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5647)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5647)));
IkReal gconst118=(x5646*x5648);
IkReal gconst119=((1.0)*r20*x5648);
IkReal x5650=r22*r22;
IkReal x5651=(r12*sj0);
IkReal x5652=(cj0*r02);
CheckValue<IkReal> x5656=IKPowWithIntegerCheck(((-1.0)+x5650),-1);
if(!x5656.valid){
continue;
}
IkReal x5653=x5656.value;
if((((1.0)+(((-1.0)*x5650)))) < -0.00001)
continue;
IkReal x5654=IKsqrt(((1.0)+(((-1.0)*x5650))));
IkReal x5655=(r22*x5653*x5654);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x5652*x5655))+((x5651*x5655)))))+(IKabs(((((-1.0)*x5651))+(((-1.0)*x5652))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5657=((1.0)*sj0);
IkReal x5658=((1.0)*gconst118);
CheckValue<IkReal> x5659=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5658)))),-1);
if(!x5659.valid){
continue;
}
CheckValue<IkReal> x5660 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5657))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*cj0*r01*x5658))+(((-1.0)*gconst118*r11*x5657))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5660.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5659.value)))+(x5660.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5661=IKsin(j4);
IkReal x5662=IKcos(j4);
IkReal x5663=(gconst118*r01);
IkReal x5664=(sj1*sj2);
IkReal x5665=(gconst119*r20);
IkReal x5666=(gconst119*r10);
IkReal x5667=(gconst119*r00);
IkReal x5668=(gconst118*r21);
IkReal x5669=(gconst118*r11);
IkReal x5670=((1.0)*x5662);
IkReal x5671=((1.0)*cj1*cj2);
IkReal x5672=((1.0)*x5661);
evalcond[0]=((((-1.0)*r22*x5670))+(((-1.0)*x5665*x5672))+((x5661*x5668)));
evalcond[1]=((((-1.0)*x5666*x5672))+cj0+(((-1.0)*r12*x5670))+((x5661*x5669)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5667*x5672))+((x5661*x5663))+(((-1.0)*r02*x5670)));
evalcond[3]=(((cj2*sj1))+((r22*x5661))+((cj1*sj2))+(((-1.0)*x5665*x5670))+((x5662*x5668)));
evalcond[4]=((((-1.0)*x5667*x5670))+((r02*x5661))+(((-1.0)*cj0*x5671))+((x5662*x5663))+((cj0*x5664)));
evalcond[5]=((((-1.0)*x5666*x5670))+((sj0*x5664))+((x5662*x5669))+((r12*x5661))+(((-1.0)*sj0*x5671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5673=((1.0)*gconst119);
CheckValue<IkReal> x5674 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5673))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5674.valid){
continue;
}
CheckValue<IkReal> x5675=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5673)))),-1);
if(!x5675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5674.value)+(((1.5707963267949)*(x5675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5676=IKsin(j4);
IkReal x5677=IKcos(j4);
IkReal x5678=(gconst118*r01);
IkReal x5679=(sj1*sj2);
IkReal x5680=(gconst119*r20);
IkReal x5681=(gconst119*r10);
IkReal x5682=(gconst119*r00);
IkReal x5683=(gconst118*r21);
IkReal x5684=(gconst118*r11);
IkReal x5685=((1.0)*x5677);
IkReal x5686=((1.0)*cj1*cj2);
IkReal x5687=((1.0)*x5676);
evalcond[0]=((((-1.0)*x5680*x5687))+(((-1.0)*r22*x5685))+((x5676*x5683)));
evalcond[1]=((((-1.0)*x5681*x5687))+cj0+(((-1.0)*r12*x5685))+((x5676*x5684)));
evalcond[2]=((((-1.0)*r02*x5685))+(((-1.0)*sj0))+((x5676*x5678))+(((-1.0)*x5682*x5687)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5680*x5685))+((r22*x5676))+((x5677*x5683)));
evalcond[4]=(((r02*x5676))+((cj0*x5679))+(((-1.0)*cj0*x5686))+((x5677*x5678))+(((-1.0)*x5682*x5685)));
evalcond[5]=((((-1.0)*x5681*x5685))+((sj0*x5679))+(((-1.0)*sj0*x5686))+((r12*x5676))+((x5677*x5684)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5688=((1.0)*gconst119);
CheckValue<IkReal> x5689=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5688)))),-1);
if(!x5689.valid){
continue;
}
CheckValue<IkReal> x5690 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5688)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5690.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5689.value)))+(x5690.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5691=IKsin(j4);
IkReal x5692=IKcos(j4);
IkReal x5693=(gconst118*r01);
IkReal x5694=(sj1*sj2);
IkReal x5695=(gconst119*r20);
IkReal x5696=(gconst119*r10);
IkReal x5697=(gconst119*r00);
IkReal x5698=(gconst118*r21);
IkReal x5699=(gconst118*r11);
IkReal x5700=((1.0)*x5692);
IkReal x5701=((1.0)*cj1*cj2);
IkReal x5702=((1.0)*x5691);
evalcond[0]=((((-1.0)*x5695*x5702))+((x5691*x5698))+(((-1.0)*r22*x5700)));
evalcond[1]=((((-1.0)*r12*x5700))+cj0+((x5691*x5699))+(((-1.0)*x5696*x5702)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5697*x5702))+((x5691*x5693))+(((-1.0)*r02*x5700)));
evalcond[3]=(((cj2*sj1))+((r22*x5691))+((x5692*x5698))+(((-1.0)*x5695*x5700))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x5697*x5700))+((x5692*x5693))+((r02*x5691))+(((-1.0)*cj0*x5701))+((cj0*x5694)));
evalcond[5]=(((x5692*x5699))+((sj0*x5694))+(((-1.0)*sj0*x5701))+((r12*x5691))+(((-1.0)*x5696*x5700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5703=((-1.0)*r10);
IkReal x5705 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5705)==0){
continue;
}
IkReal x5704=pow(x5705,-0.5);
CheckValue<IkReal> x5706 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5703),IKFAST_ATAN2_MAGTHRESH);
if(!x5706.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5706.value));
IkReal gconst121=(r11*x5704);
IkReal gconst122=(x5703*x5704);
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5707.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5708=((-1.0)*r10);
IkReal x5709=x5704;
CheckValue<IkReal> x5711 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5708),IKFAST_ATAN2_MAGTHRESH);
if(!x5711.valid){
continue;
}
IkReal x5710=((-1.0)*(x5711.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5710;
IkReal gconst120=x5710;
IkReal gconst121=(r11*x5709);
IkReal gconst122=(x5708*x5709);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5712=((1.0)*sj0);
IkReal x5713=((1.0)*gconst121);
CheckValue<IkReal> x5714 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5712)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x5712))+(((-1.0)*cj0*r01*x5713))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5714.valid){
continue;
}
CheckValue<IkReal> x5715=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x5713)))),-1);
if(!x5715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5714.value)+(((1.5707963267949)*(x5715.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5716=IKsin(j4);
IkReal x5717=IKcos(j4);
IkReal x5718=(gconst121*r11);
IkReal x5719=(sj1*sj2);
IkReal x5720=(gconst122*r00);
IkReal x5721=(gconst122*r10);
IkReal x5722=(gconst122*r20);
IkReal x5723=((1.0)*x5717);
IkReal x5724=((1.0)*cj1*cj2);
IkReal x5725=((1.0)*x5716);
IkReal x5726=(gconst121*x5716);
IkReal x5727=(gconst121*x5717);
evalcond[0]=(((r21*x5726))+(((-1.0)*x5722*x5725))+(((-1.0)*r22*x5723)));
evalcond[1]=(cj0+((x5716*x5718))+(((-1.0)*r12*x5723))+(((-1.0)*x5721*x5725)));
evalcond[2]=((((-1.0)*sj0))+((r01*x5726))+(((-1.0)*r02*x5723))+(((-1.0)*x5720*x5725)));
evalcond[3]=(((cj2*sj1))+((r21*x5727))+((r22*x5716))+((cj1*sj2))+(((-1.0)*x5722*x5723)));
evalcond[4]=(((r02*x5716))+((r01*x5727))+((cj0*x5719))+(((-1.0)*cj0*x5724))+(((-1.0)*x5720*x5723)));
evalcond[5]=((((-1.0)*sj0*x5724))+((sj0*x5719))+((r12*x5716))+((x5717*x5718))+(((-1.0)*x5721*x5723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5728=((1.0)*gconst122);
CheckValue<IkReal> x5729=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x5728)))),-1);
if(!x5729.valid){
continue;
}
CheckValue<IkReal> x5730 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5728))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5729.value)))+(x5730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5731=IKsin(j4);
IkReal x5732=IKcos(j4);
IkReal x5733=(gconst121*r11);
IkReal x5734=(sj1*sj2);
IkReal x5735=(gconst122*r00);
IkReal x5736=(gconst122*r10);
IkReal x5737=(gconst122*r20);
IkReal x5738=((1.0)*x5732);
IkReal x5739=((1.0)*cj1*cj2);
IkReal x5740=((1.0)*x5731);
IkReal x5741=(gconst121*x5731);
IkReal x5742=(gconst121*x5732);
evalcond[0]=((((-1.0)*x5737*x5740))+(((-1.0)*r22*x5738))+((r21*x5741)));
evalcond[1]=(cj0+(((-1.0)*r12*x5738))+((x5731*x5733))+(((-1.0)*x5736*x5740)));
evalcond[2]=((((-1.0)*x5735*x5740))+(((-1.0)*sj0))+(((-1.0)*r02*x5738))+((r01*x5741)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5737*x5738))+((cj1*sj2))+((r21*x5742))+((r22*x5731)));
evalcond[4]=((((-1.0)*x5735*x5738))+(((-1.0)*cj0*x5739))+((r01*x5742))+((cj0*x5734))+((r02*x5731)));
evalcond[5]=(((x5732*x5733))+((r12*x5731))+(((-1.0)*sj0*x5739))+(((-1.0)*x5736*x5738))+((sj0*x5734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5743=((-1.0)*r11);
IkReal x5745 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5745)==0){
continue;
}
IkReal x5744=pow(x5745,-0.5);
CheckValue<IkReal> x5746 = IKatan2WithCheck(IkReal(x5743),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5746.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5746.value))));
IkReal gconst124=(x5743*x5744);
IkReal gconst125=((1.0)*r10*x5744);
CheckValue<IkReal> x5747 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5747.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5747.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5748=((-1.0)*r11);
CheckValue<IkReal> x5751 = IKatan2WithCheck(IkReal(x5748),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5751.valid){
continue;
}
IkReal x5749=((1.0)*(x5751.value));
IkReal x5750=x5744;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5749)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5749)));
IkReal gconst124=(x5748*x5750);
IkReal gconst125=((1.0)*r10*x5750);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5752=((-1.0)*r11);
CheckValue<IkReal> x5755 = IKatan2WithCheck(IkReal(x5752),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5755.valid){
continue;
}
IkReal x5753=((1.0)*(x5755.value));
IkReal x5754=x5744;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5753)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5753)));
IkReal gconst124=(x5752*x5754);
IkReal gconst125=((1.0)*r10*x5754);
IkReal x5756=r12*r12;
IkReal x5757=((1.0)*sj0);
IkReal x5758=(cj0*r02);
IkReal x5759=x5744;
j4eval[0]=((IKabs((((sj0*x5756*x5759))+((r12*x5758*x5759))+(((-1.0)*x5757*x5759)))))+(IKabs(((((-1.0)*r12*x5757))+(((-1.0)*x5758))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5760=((-1.0)*r11);
CheckValue<IkReal> x5763 = IKatan2WithCheck(IkReal(x5760),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5763.valid){
continue;
}
IkReal x5761=((1.0)*(x5763.value));
IkReal x5762=x5744;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5761)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5761)));
IkReal gconst124=(x5760*x5762);
IkReal gconst125=((1.0)*r10*x5762);
IkReal x5764=r12*r12;
IkReal x5765=((1.0)+(((-1.0)*x5764)));
IkReal x5766=(cj2*r22*sj1);
IkReal x5767=(cj1*r22*sj2);
CheckValue<IkReal> x5774=IKPowWithIntegerCheck(x5765,-1);
if(!x5774.valid){
continue;
}
IkReal x5768=x5774.value;
CheckValue<IkReal> x5775=IKPowWithIntegerCheck(((-1.0)+x5764),-1);
if(!x5775.valid){
continue;
}
IkReal x5769=x5775.value;
IkReal x5770=((1.0)*x5768);
if((x5765) < -0.00001)
continue;
IkReal x5771=IKsqrt(x5765);
IkReal x5772=((1.0)*r12*x5769*x5771);
IkReal x5773=((((-1.0)*x5770*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x5768))+(((-1.0)*(r22*r22)))+(((-1.0)*x5770*(r11*r11)*(r21*r21))));
j4eval[0]=x5773;
j4eval[1]=IKsign(x5773);
j4eval[2]=((IKabs((x5766+x5767)))+(IKabs(((((-1.0)*x5767*x5772))+(((-1.0)*x5766*x5772))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5776=(gconst124*r21);
IkReal x5777=(cj1*sj2);
IkReal x5778=(cj2*sj1);
IkReal x5779=(gconst125*r20);
CheckValue<IkReal> x5780=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5776*x5776)))+(((-1.0)*(x5779*x5779)))+(((2.0)*x5776*x5779))+(((-1.0)*(r22*r22))))),-1);
if(!x5780.valid){
continue;
}
CheckValue<IkReal> x5781 = IKatan2WithCheck(IkReal((((r22*x5777))+((r22*x5778)))),IkReal((((x5776*x5778))+((x5776*x5777))+(((-1.0)*x5777*x5779))+(((-1.0)*x5778*x5779)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5780.value)))+(x5781.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5782=IKsin(j4);
IkReal x5783=IKcos(j4);
IkReal x5784=(sj1*sj2);
IkReal x5785=(gconst125*r20);
IkReal x5786=(gconst124*r01);
IkReal x5787=(gconst125*r00);
IkReal x5788=(gconst125*r10);
IkReal x5789=((1.0)*x5783);
IkReal x5790=((1.0)*cj1*cj2);
IkReal x5791=((1.0)*x5782);
IkReal x5792=(gconst124*x5782);
IkReal x5793=(gconst124*x5783);
evalcond[0]=((((-1.0)*x5785*x5791))+((r21*x5792))+(((-1.0)*r22*x5789)));
evalcond[1]=(cj0+((r11*x5792))+(((-1.0)*r12*x5789))+(((-1.0)*x5788*x5791)));
evalcond[2]=((((-1.0)*sj0))+((x5782*x5786))+(((-1.0)*x5787*x5791))+(((-1.0)*r02*x5789)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x5785*x5789))+((cj1*sj2))+((r21*x5793))+((r22*x5782)));
evalcond[4]=(((x5783*x5786))+(((-1.0)*x5787*x5789))+(((-1.0)*cj0*x5790))+((r02*x5782))+((cj0*x5784)));
evalcond[5]=(((r12*x5782))+((r11*x5793))+((sj0*x5784))+(((-1.0)*x5788*x5789))+(((-1.0)*sj0*x5790)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5794=((1.0)*sj0);
IkReal x5795=((1.0)*cj0);
CheckValue<IkReal> x5796 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5794))+(((-1.0)*r02*x5795)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x5795))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r11*x5794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5796.valid){
continue;
}
CheckValue<IkReal> x5797=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5796.value)+(((1.5707963267949)*(x5797.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5798=IKsin(j4);
IkReal x5799=IKcos(j4);
IkReal x5800=(sj1*sj2);
IkReal x5801=(gconst125*r20);
IkReal x5802=(gconst124*r01);
IkReal x5803=(gconst125*r00);
IkReal x5804=(gconst125*r10);
IkReal x5805=((1.0)*x5799);
IkReal x5806=((1.0)*cj1*cj2);
IkReal x5807=((1.0)*x5798);
IkReal x5808=(gconst124*x5798);
IkReal x5809=(gconst124*x5799);
evalcond[0]=((((-1.0)*r22*x5805))+((r21*x5808))+(((-1.0)*x5801*x5807)));
evalcond[1]=((((-1.0)*x5804*x5807))+cj0+(((-1.0)*r12*x5805))+((r11*x5808)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5803*x5807))+((x5798*x5802))+(((-1.0)*r02*x5805)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5809))+((r22*x5798))+(((-1.0)*x5801*x5805)));
evalcond[4]=(((x5799*x5802))+((cj0*x5800))+(((-1.0)*cj0*x5806))+(((-1.0)*x5803*x5805))+((r02*x5798)));
evalcond[5]=((((-1.0)*x5804*x5805))+((r12*x5798))+((r11*x5809))+((sj0*x5800))+(((-1.0)*sj0*x5806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5810=((1.0)*gconst125);
CheckValue<IkReal> x5811=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5810)))),-1);
if(!x5811.valid){
continue;
}
CheckValue<IkReal> x5812 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5810))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5812.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5811.value)))+(x5812.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5813=IKsin(j4);
IkReal x5814=IKcos(j4);
IkReal x5815=(sj1*sj2);
IkReal x5816=(gconst125*r20);
IkReal x5817=(gconst124*r01);
IkReal x5818=(gconst125*r00);
IkReal x5819=(gconst125*r10);
IkReal x5820=((1.0)*x5814);
IkReal x5821=((1.0)*cj1*cj2);
IkReal x5822=((1.0)*x5813);
IkReal x5823=(gconst124*x5813);
IkReal x5824=(gconst124*x5814);
evalcond[0]=((((-1.0)*r22*x5820))+((r21*x5823))+(((-1.0)*x5816*x5822)));
evalcond[1]=(cj0+((r11*x5823))+(((-1.0)*r12*x5820))+(((-1.0)*x5819*x5822)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5820))+((x5813*x5817))+(((-1.0)*x5818*x5822)));
evalcond[3]=(((r21*x5824))+((cj2*sj1))+((r22*x5813))+((cj1*sj2))+(((-1.0)*x5816*x5820)));
evalcond[4]=(((x5814*x5817))+(((-1.0)*x5818*x5820))+((r02*x5813))+((cj0*x5815))+(((-1.0)*cj0*x5821)));
evalcond[5]=(((sj0*x5815))+((r11*x5824))+((r12*x5813))+(((-1.0)*sj0*x5821))+(((-1.0)*x5819*x5820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5825=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5825;
j4eval[1]=IKsign(x5825);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5826=((1.0)*cj5);
IkReal x5827=((((-1.0)*r01*x5826))+(((-1.0)*r00*sj5)));
j4eval[0]=x5827;
j4eval[1]=((IKabs(((((-1.0)*r20*x5826))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x5827);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5828=cj5*cj5;
IkReal x5829=r11*r11;
IkReal x5830=(cj5*r10);
IkReal x5831=(r11*sj5);
IkReal x5832=((((2.0)*x5830*x5831))+(((-1.0)*(r12*r12)))+(((-1.0)*x5829))+((x5828*x5829))+(((-1.0)*x5828*(r10*r10))));
j4eval[0]=x5832;
j4eval[1]=IKsign(x5832);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5830))+x5831))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5833=cj5*cj5;
IkReal x5834=r11*r11;
IkReal x5835=(cj5*r10);
IkReal x5836=(r11*sj5);
CheckValue<IkReal> x5837 = IKatan2WithCheck(IkReal(((((-1.0)*x5835))+x5836)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5837.valid){
continue;
}
CheckValue<IkReal> x5838=IKPowWithIntegerCheck(IKsign(((((2.0)*x5835*x5836))+(((-1.0)*x5833*(r10*r10)))+((x5833*x5834))+(((-1.0)*(r12*r12)))+(((-1.0)*x5834)))),-1);
if(!x5838.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5837.value)+(((1.5707963267949)*(x5838.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5839=IKcos(j4);
IkReal x5840=IKsin(j4);
IkReal x5841=(cj5*r00);
IkReal x5842=(cj5*r10);
IkReal x5843=(r21*sj5);
IkReal x5844=(cj5*r20);
IkReal x5845=((1.0)*x5839);
IkReal x5846=((1.0)*x5840);
IkReal x5847=(sj5*x5840);
IkReal x5848=(sj5*x5839);
evalcond[0]=(((r11*x5848))+((r12*x5840))+(((-1.0)*x5842*x5845)));
evalcond[1]=(((x5840*x5843))+(((-1.0)*x5844*x5846))+(((-1.0)*r22*x5845)));
evalcond[2]=((((-1.0)*r02*x5845))+((r01*x5847))+(((-1.0)*x5841*x5846)));
evalcond[3]=((1.0)+((r11*x5847))+(((-1.0)*x5842*x5846))+(((-1.0)*r12*x5845)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5844*x5845))+((r22*x5840))+((x5839*x5843)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5848))+(((-1.0)*x5841*x5845))+((r02*x5840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5849=((1.0)*cj5);
CheckValue<IkReal> x5850=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5849))+(((-1.0)*r00*sj5)))),-1);
if(!x5850.valid){
continue;
}
CheckValue<IkReal> x5851 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5849)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5851.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5850.value)))+(x5851.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5852=IKcos(j4);
IkReal x5853=IKsin(j4);
IkReal x5854=(cj5*r00);
IkReal x5855=(cj5*r10);
IkReal x5856=(r21*sj5);
IkReal x5857=(cj5*r20);
IkReal x5858=((1.0)*x5852);
IkReal x5859=((1.0)*x5853);
IkReal x5860=(sj5*x5853);
IkReal x5861=(sj5*x5852);
evalcond[0]=(((r12*x5853))+((r11*x5861))+(((-1.0)*x5855*x5858)));
evalcond[1]=((((-1.0)*x5857*x5859))+(((-1.0)*r22*x5858))+((x5853*x5856)));
evalcond[2]=((((-1.0)*x5854*x5859))+(((-1.0)*r02*x5858))+((r01*x5860)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5858))+((r11*x5860))+(((-1.0)*x5855*x5859)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5857*x5858))+((x5852*x5856))+((r22*x5853)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x5854*x5858))+((r02*x5853))+((r01*x5861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5862=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5862.valid){
continue;
}
CheckValue<IkReal> x5863 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5863.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5862.value)))+(x5863.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5864=IKcos(j4);
IkReal x5865=IKsin(j4);
IkReal x5866=(cj5*r00);
IkReal x5867=(cj5*r10);
IkReal x5868=(r21*sj5);
IkReal x5869=(cj5*r20);
IkReal x5870=((1.0)*x5864);
IkReal x5871=((1.0)*x5865);
IkReal x5872=(sj5*x5865);
IkReal x5873=(sj5*x5864);
evalcond[0]=(((r11*x5873))+((r12*x5865))+(((-1.0)*x5867*x5870)));
evalcond[1]=((((-1.0)*r22*x5870))+(((-1.0)*x5869*x5871))+((x5865*x5868)));
evalcond[2]=((((-1.0)*x5866*x5871))+(((-1.0)*r02*x5870))+((r01*x5872)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5870))+((r11*x5872))+(((-1.0)*x5867*x5871)));
evalcond[4]=(((cj2*sj1))+((r22*x5865))+((cj1*sj2))+(((-1.0)*x5869*x5870))+((x5864*x5868)));
evalcond[5]=((((-1.0)*x5866*x5870))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5865))+((r01*x5873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5874=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5874;
j4eval[1]=IKsign(x5874);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5875=((1.0)*cj5);
IkReal x5876=((((-1.0)*r21*x5875))+(((-1.0)*r20*sj5)));
j4eval[0]=x5876;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5875))))));
j4eval[2]=IKsign(x5876);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5877=cj5*cj5;
IkReal x5878=r11*r11;
IkReal x5879=(r11*sj5);
IkReal x5880=(cj5*r10);
IkReal x5881=((r12*r12)+((x5877*(r10*r10)))+(((-2.0)*x5879*x5880))+(((-1.0)*x5877*x5878))+x5878);
j4eval[0]=x5881;
j4eval[1]=IKsign(x5881);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5880))+x5879))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5882=cj5*cj5;
IkReal x5883=r11*r11;
IkReal x5884=(cj5*r10);
IkReal x5885=(r11*sj5);
CheckValue<IkReal> x5886 = IKatan2WithCheck(IkReal(((((-1.0)*x5884))+x5885)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5886.valid){
continue;
}
CheckValue<IkReal> x5887=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x5882*x5883))+((x5882*(r10*r10)))+x5883+(((-2.0)*x5884*x5885)))),-1);
if(!x5887.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5886.value)+(((1.5707963267949)*(x5887.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5888=IKcos(j4);
IkReal x5889=IKsin(j4);
IkReal x5890=(cj5*r00);
IkReal x5891=(cj5*r10);
IkReal x5892=(r21*sj5);
IkReal x5893=(cj5*r20);
IkReal x5894=((1.0)*x5888);
IkReal x5895=((1.0)*x5889);
IkReal x5896=(sj5*x5889);
IkReal x5897=(sj5*x5888);
evalcond[0]=(((r12*x5889))+(((-1.0)*x5891*x5894))+((r11*x5897)));
evalcond[1]=((((-1.0)*x5893*x5895))+(((-1.0)*r22*x5894))+((x5889*x5892)));
evalcond[2]=((((-1.0)*x5890*x5895))+(((-1.0)*r02*x5894))+((r01*x5896)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5894))+(((-1.0)*x5891*x5895))+((r11*x5896)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5893*x5894))+((cj1*sj2))+((r22*x5889))+((x5888*x5892)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5890*x5894))+((r01*x5897))+((cj1*cj2))+((r02*x5889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5898=((1.0)*cj5);
CheckValue<IkReal> x5899=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5898))+(((-1.0)*r20*sj5)))),-1);
if(!x5899.valid){
continue;
}
CheckValue<IkReal> x5900 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x5898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5900.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5899.value)))+(x5900.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5901=IKcos(j4);
IkReal x5902=IKsin(j4);
IkReal x5903=(cj5*r00);
IkReal x5904=(cj5*r10);
IkReal x5905=(r21*sj5);
IkReal x5906=(cj5*r20);
IkReal x5907=((1.0)*x5901);
IkReal x5908=((1.0)*x5902);
IkReal x5909=(sj5*x5902);
IkReal x5910=(sj5*x5901);
evalcond[0]=(((r12*x5902))+(((-1.0)*x5904*x5907))+((r11*x5910)));
evalcond[1]=((((-1.0)*r22*x5907))+(((-1.0)*x5906*x5908))+((x5902*x5905)));
evalcond[2]=((((-1.0)*x5903*x5908))+(((-1.0)*r02*x5907))+((r01*x5909)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5907))+(((-1.0)*x5904*x5908))+((r11*x5909)));
evalcond[4]=(((cj2*sj1))+((r22*x5902))+((cj1*sj2))+(((-1.0)*x5906*x5907))+((x5901*x5905)));
evalcond[5]=(((r01*x5910))+(((-1.0)*x5903*x5907))+(((-1.0)*sj1*sj2))+((r02*x5902))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5911 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5911.valid){
continue;
}
CheckValue<IkReal> x5912=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5911.value)+(((1.5707963267949)*(x5912.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5913=IKcos(j4);
IkReal x5914=IKsin(j4);
IkReal x5915=(cj5*r00);
IkReal x5916=(cj5*r10);
IkReal x5917=(r21*sj5);
IkReal x5918=(cj5*r20);
IkReal x5919=((1.0)*x5913);
IkReal x5920=((1.0)*x5914);
IkReal x5921=(sj5*x5914);
IkReal x5922=(sj5*x5913);
evalcond[0]=(((r12*x5914))+((r11*x5922))+(((-1.0)*x5916*x5919)));
evalcond[1]=((((-1.0)*x5918*x5920))+(((-1.0)*r22*x5919))+((x5914*x5917)));
evalcond[2]=((((-1.0)*r02*x5919))+(((-1.0)*x5915*x5920))+((r01*x5921)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5919))+(((-1.0)*x5916*x5920))+((r11*x5921)));
evalcond[4]=(((cj2*sj1))+((r22*x5914))+((cj1*sj2))+(((-1.0)*x5918*x5919))+((x5913*x5917)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x5914))+((cj1*cj2))+((r01*x5922))+(((-1.0)*x5915*x5919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5923=((-1.0)*r00);
IkReal x5925 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5925)==0){
continue;
}
IkReal x5924=pow(x5925,-0.5);
CheckValue<IkReal> x5926 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5923),IKFAST_ATAN2_MAGTHRESH);
if(!x5926.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5926.value));
IkReal gconst127=(r01*x5924);
IkReal gconst128=(x5923*x5924);
CheckValue<IkReal> x5927 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5927.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5927.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5928=((-1.0)*r00);
IkReal x5929=x5924;
CheckValue<IkReal> x5931 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5928),IKFAST_ATAN2_MAGTHRESH);
if(!x5931.valid){
continue;
}
IkReal x5930=((-1.0)*(x5931.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5930;
IkReal gconst126=x5930;
IkReal gconst127=(r01*x5929);
IkReal gconst128=(x5928*x5929);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5932=((1.0)*sj0);
IkReal x5933=((1.0)*gconst127);
CheckValue<IkReal> x5934=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5933)))),-1);
if(!x5934.valid){
continue;
}
CheckValue<IkReal> x5935 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x5932)))),IkReal(((((-1.0)*cj0*r01*x5933))+((gconst128*r10*sj0))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5935.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5934.value)))+(x5935.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5936=IKsin(j4);
IkReal x5937=IKcos(j4);
IkReal x5938=(gconst127*r01);
IkReal x5939=(sj1*sj2);
IkReal x5940=(gconst128*r10);
IkReal x5941=(gconst128*r00);
IkReal x5942=(gconst128*r20);
IkReal x5943=((1.0)*x5937);
IkReal x5944=((1.0)*cj1*cj2);
IkReal x5945=((1.0)*x5936);
IkReal x5946=(gconst127*x5937);
IkReal x5947=(gconst127*x5936);
evalcond[0]=((((-1.0)*x5942*x5945))+(((-1.0)*r22*x5943))+((r21*x5947)));
evalcond[1]=(cj0+(((-1.0)*r12*x5943))+(((-1.0)*x5940*x5945))+((r11*x5947)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5941*x5945))+((x5936*x5938))+(((-1.0)*r02*x5943)));
evalcond[3]=((((-1.0)*x5942*x5943))+((cj2*sj1))+((cj1*sj2))+((r22*x5936))+((r21*x5946)));
evalcond[4]=(((x5937*x5938))+(((-1.0)*cj0*x5944))+(((-1.0)*x5941*x5943))+((cj0*x5939))+((r02*x5936)));
evalcond[5]=((((-1.0)*sj0*x5944))+(((-1.0)*x5940*x5943))+((r12*x5936))+((sj0*x5939))+((r11*x5946)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5948=((1.0)*gconst128);
CheckValue<IkReal> x5949 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5948)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5949.valid){
continue;
}
CheckValue<IkReal> x5950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5948))+(((-1.0)*gconst127*r10)))),-1);
if(!x5950.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5949.value)+(((1.5707963267949)*(x5950.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5951=IKsin(j4);
IkReal x5952=IKcos(j4);
IkReal x5953=(gconst127*r01);
IkReal x5954=(sj1*sj2);
IkReal x5955=(gconst128*r10);
IkReal x5956=(gconst128*r00);
IkReal x5957=(gconst128*r20);
IkReal x5958=((1.0)*x5952);
IkReal x5959=((1.0)*cj1*cj2);
IkReal x5960=((1.0)*x5951);
IkReal x5961=(gconst127*x5952);
IkReal x5962=(gconst127*x5951);
evalcond[0]=((((-1.0)*x5957*x5960))+((r21*x5962))+(((-1.0)*r22*x5958)));
evalcond[1]=(cj0+(((-1.0)*x5955*x5960))+((r11*x5962))+(((-1.0)*r12*x5958)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5956*x5960))+((x5951*x5953))+(((-1.0)*r02*x5958)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5961))+(((-1.0)*x5957*x5958))+((r22*x5951)));
evalcond[4]=(((x5952*x5953))+((r02*x5951))+(((-1.0)*x5956*x5958))+((cj0*x5954))+(((-1.0)*cj0*x5959)));
evalcond[5]=(((sj0*x5954))+((r12*x5951))+((r11*x5961))+(((-1.0)*x5955*x5958))+(((-1.0)*sj0*x5959)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5963=((-1.0)*r01);
IkReal x5965 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5965)==0){
continue;
}
IkReal x5964=pow(x5965,-0.5);
CheckValue<IkReal> x5966 = IKatan2WithCheck(IkReal(x5963),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5966.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5966.value))));
IkReal gconst130=(x5963*x5964);
IkReal gconst131=((1.0)*r00*x5964);
CheckValue<IkReal> x5967 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5967.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5967.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5968=((-1.0)*r01);
CheckValue<IkReal> x5971 = IKatan2WithCheck(IkReal(x5968),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5971.valid){
continue;
}
IkReal x5969=((1.0)*(x5971.value));
IkReal x5970=x5964;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5969)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5969)));
IkReal gconst130=(x5968*x5970);
IkReal gconst131=((1.0)*r00*x5970);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5972=((-1.0)*r01);
CheckValue<IkReal> x5975 = IKatan2WithCheck(IkReal(x5972),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5975.valid){
continue;
}
IkReal x5973=((1.0)*(x5975.value));
IkReal x5974=x5964;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5973)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5973)));
IkReal gconst130=(x5972*x5974);
IkReal gconst131=((1.0)*r00*x5974);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5976=((-1.0)*r01);
CheckValue<IkReal> x5979 = IKatan2WithCheck(IkReal(x5976),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5979.valid){
continue;
}
IkReal x5977=((1.0)*(x5979.value));
IkReal x5978=x5964;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5977)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5977)));
IkReal gconst130=(x5976*x5978);
IkReal gconst131=((1.0)*r00*x5978);
IkReal x5980=r02*r02;
IkReal x5981=(r12*sj0);
IkReal x5982=((1.0)*cj0);
IkReal x5983=x5964;
j4eval[0]=((IKabs(((((-1.0)*x5981))+(((-1.0)*r02*x5982)))))+(IKabs((((cj0*x5980*x5983))+(((-1.0)*x5982*x5983))+((r02*x5981*x5983))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5984=((1.0)*sj0);
IkReal x5985=((1.0)*gconst130);
CheckValue<IkReal> x5986=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x5985)))),-1);
if(!x5986.valid){
continue;
}
CheckValue<IkReal> x5987 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5984))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x5984))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*cj0*r01*x5985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5986.value)))+(x5987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5988=IKsin(j4);
IkReal x5989=IKcos(j4);
IkReal x5990=(gconst131*r10);
IkReal x5991=(sj1*sj2);
IkReal x5992=(gconst131*r20);
IkReal x5993=(gconst131*r00);
IkReal x5994=((1.0)*x5989);
IkReal x5995=((1.0)*cj1*cj2);
IkReal x5996=(gconst130*x5988);
IkReal x5997=((1.0)*x5988);
IkReal x5998=(gconst130*x5989);
evalcond[0]=(((r21*x5996))+(((-1.0)*x5992*x5997))+(((-1.0)*r22*x5994)));
evalcond[1]=((((-1.0)*r12*x5994))+cj0+((r11*x5996))+(((-1.0)*x5990*x5997)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x5994))+((r01*x5996))+(((-1.0)*x5993*x5997)));
evalcond[3]=(((r21*x5998))+((cj2*sj1))+(((-1.0)*x5992*x5994))+((cj1*sj2))+((r22*x5988)));
evalcond[4]=(((r02*x5988))+((cj0*x5991))+(((-1.0)*cj0*x5995))+((r01*x5998))+(((-1.0)*x5993*x5994)));
evalcond[5]=(((r12*x5988))+((sj0*x5991))+((r11*x5998))+(((-1.0)*x5990*x5994))+(((-1.0)*sj0*x5995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5999=((1.0)*gconst131);
CheckValue<IkReal> x6000=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5999))+(((-1.0)*gconst130*r10)))),-1);
if(!x6000.valid){
continue;
}
CheckValue<IkReal> x6001 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5999))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6001.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6000.value)))+(x6001.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6002=IKsin(j4);
IkReal x6003=IKcos(j4);
IkReal x6004=(gconst131*r10);
IkReal x6005=(sj1*sj2);
IkReal x6006=(gconst131*r20);
IkReal x6007=(gconst131*r00);
IkReal x6008=((1.0)*x6003);
IkReal x6009=((1.0)*cj1*cj2);
IkReal x6010=(gconst130*x6002);
IkReal x6011=((1.0)*x6002);
IkReal x6012=(gconst130*x6003);
evalcond[0]=(((r21*x6010))+(((-1.0)*x6006*x6011))+(((-1.0)*r22*x6008)));
evalcond[1]=(((r11*x6010))+cj0+(((-1.0)*r12*x6008))+(((-1.0)*x6004*x6011)));
evalcond[2]=(((r01*x6010))+(((-1.0)*sj0))+(((-1.0)*x6007*x6011))+(((-1.0)*r02*x6008)));
evalcond[3]=(((cj2*sj1))+((r22*x6002))+((r21*x6012))+(((-1.0)*x6006*x6008))+((cj1*sj2)));
evalcond[4]=(((r01*x6012))+((cj0*x6005))+(((-1.0)*cj0*x6009))+((r02*x6002))+(((-1.0)*x6007*x6008)));
evalcond[5]=((((-1.0)*sj0*x6009))+((r12*x6002))+((r11*x6012))+((sj0*x6005))+(((-1.0)*x6004*x6008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6013=((1.0)*gconst131);
CheckValue<IkReal> x6014 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6013)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6014.valid){
continue;
}
CheckValue<IkReal> x6015=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6013))+(((-1.0)*gconst130*r00)))),-1);
if(!x6015.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6014.value)+(((1.5707963267949)*(x6015.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6016=IKsin(j4);
IkReal x6017=IKcos(j4);
IkReal x6018=(gconst131*r10);
IkReal x6019=(sj1*sj2);
IkReal x6020=(gconst131*r20);
IkReal x6021=(gconst131*r00);
IkReal x6022=((1.0)*x6017);
IkReal x6023=((1.0)*cj1*cj2);
IkReal x6024=(gconst130*x6016);
IkReal x6025=((1.0)*x6016);
IkReal x6026=(gconst130*x6017);
evalcond[0]=((((-1.0)*x6020*x6025))+(((-1.0)*r22*x6022))+((r21*x6024)));
evalcond[1]=(cj0+((r11*x6024))+(((-1.0)*x6018*x6025))+(((-1.0)*r12*x6022)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6024))+(((-1.0)*x6021*x6025))+(((-1.0)*r02*x6022)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6020*x6022))+((cj1*sj2))+((r21*x6026))+((r22*x6016)));
evalcond[4]=((((-1.0)*cj0*x6023))+((cj0*x6019))+((r01*x6026))+(((-1.0)*x6021*x6022))+((r02*x6016)));
evalcond[5]=(((r12*x6016))+(((-1.0)*sj0*x6023))+((sj0*x6019))+((r11*x6026))+(((-1.0)*x6018*x6022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6027=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6027;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6028=((1.0)*cj5);
IkReal x6029=((((-1.0)*r11*x6028))+(((-1.0)*r10*sj5)));
j4eval[0]=x6029;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6028)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6029);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6030=cj5*cj5;
IkReal x6031=r01*r01;
IkReal x6032=(cj5*r00);
IkReal x6033=(r01*sj5);
IkReal x6034=(x6031+(((-1.0)*x6030*x6031))+((x6030*(r00*r00)))+(r02*r02)+(((-2.0)*x6032*x6033)));
j4eval[0]=x6034;
j4eval[1]=IKsign(x6034);
j4eval[2]=((IKabs(r02))+(IKabs((x6033+(((-1.0)*x6032))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6035=cj5*cj5;
IkReal x6036=r01*r01;
IkReal x6037=(r01*sj5);
IkReal x6038=(cj5*r00);
CheckValue<IkReal> x6039 = IKatan2WithCheck(IkReal((x6037+(((-1.0)*x6038)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6039.valid){
continue;
}
CheckValue<IkReal> x6040=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6035*x6036))+x6036+((x6035*(r00*r00)))+(r02*r02)+(((-2.0)*x6037*x6038)))),-1);
if(!x6040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6039.value)+(((1.5707963267949)*(x6040.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6041=IKcos(j4);
IkReal x6042=IKsin(j4);
IkReal x6043=(cj5*r00);
IkReal x6044=(cj5*r10);
IkReal x6045=(r21*sj5);
IkReal x6046=(cj5*r20);
IkReal x6047=((1.0)*x6041);
IkReal x6048=((1.0)*x6042);
IkReal x6049=(sj5*x6042);
IkReal x6050=(sj5*x6041);
evalcond[0]=(((r01*x6050))+(((-1.0)*x6043*x6047))+((r02*x6042)));
evalcond[1]=((((-1.0)*x6046*x6048))+((x6042*x6045))+(((-1.0)*r22*x6047)));
evalcond[2]=(((r11*x6049))+(((-1.0)*x6044*x6048))+(((-1.0)*r12*x6047)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6047))+(((-1.0)*x6043*x6048))+((r01*x6049)));
evalcond[4]=(((cj2*sj1))+((x6041*x6045))+(((-1.0)*x6046*x6047))+((cj1*sj2))+((r22*x6042)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6044*x6047))+((r12*x6042))+((r11*x6050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6051=((1.0)*cj5);
CheckValue<IkReal> x6052 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6052.valid){
continue;
}
CheckValue<IkReal> x6053=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6051)))),-1);
if(!x6053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6052.value)+(((1.5707963267949)*(x6053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6054=IKcos(j4);
IkReal x6055=IKsin(j4);
IkReal x6056=(cj5*r00);
IkReal x6057=(cj5*r10);
IkReal x6058=(r21*sj5);
IkReal x6059=(cj5*r20);
IkReal x6060=((1.0)*x6054);
IkReal x6061=((1.0)*x6055);
IkReal x6062=(sj5*x6055);
IkReal x6063=(sj5*x6054);
evalcond[0]=(((r01*x6063))+((r02*x6055))+(((-1.0)*x6056*x6060)));
evalcond[1]=((((-1.0)*r22*x6060))+((x6055*x6058))+(((-1.0)*x6059*x6061)));
evalcond[2]=((((-1.0)*x6057*x6061))+((r11*x6062))+(((-1.0)*r12*x6060)));
evalcond[3]=((-1.0)+((r01*x6062))+(((-1.0)*r02*x6060))+(((-1.0)*x6056*x6061)));
evalcond[4]=(((cj2*sj1))+((r22*x6055))+((cj1*sj2))+(((-1.0)*x6059*x6060))+((x6054*x6058)));
evalcond[5]=(((r12*x6055))+(((-1.0)*x6057*x6060))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6064=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6064.valid){
continue;
}
CheckValue<IkReal> x6065 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6064.value)))+(x6065.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6066=IKcos(j4);
IkReal x6067=IKsin(j4);
IkReal x6068=(cj5*r00);
IkReal x6069=(cj5*r10);
IkReal x6070=(r21*sj5);
IkReal x6071=(cj5*r20);
IkReal x6072=((1.0)*x6066);
IkReal x6073=((1.0)*x6067);
IkReal x6074=(sj5*x6067);
IkReal x6075=(sj5*x6066);
evalcond[0]=(((r01*x6075))+(((-1.0)*x6068*x6072))+((r02*x6067)));
evalcond[1]=(((x6067*x6070))+(((-1.0)*r22*x6072))+(((-1.0)*x6071*x6073)));
evalcond[2]=(((r11*x6074))+(((-1.0)*r12*x6072))+(((-1.0)*x6069*x6073)));
evalcond[3]=((-1.0)+((r01*x6074))+(((-1.0)*r02*x6072))+(((-1.0)*x6068*x6073)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6067))+((x6066*x6070))+(((-1.0)*x6071*x6072)));
evalcond[5]=(((r11*x6075))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6067))+(((-1.0)*x6069*x6072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6076=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6076;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6076);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6077=((1.0)*cj5);
IkReal x6078=((((-1.0)*r21*x6077))+(((-1.0)*r20*sj5)));
j4eval[0]=x6078;
j4eval[1]=((IKabs(((((-1.0)*r10*x6077))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6078);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6079=(r01*sj5);
IkReal x6080=(cj1*sj2);
IkReal x6081=(cj2*sj1);
IkReal x6082=((1.0)*r02);
IkReal x6083=((1.0)*cj5*r00);
IkReal x6084=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6084;
j4eval[1]=((IKabs(((((-1.0)*x6080*x6083))+((x6079*x6080))+((x6079*x6081))+(((-1.0)*x6081*x6083)))))+(IKabs(((((-1.0)*x6080*x6082))+(((-1.0)*x6081*x6082))))));
j4eval[2]=IKsign(x6084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6085=(r01*sj5);
IkReal x6086=(cj1*sj2);
IkReal x6087=(cj2*sj1);
IkReal x6088=((1.0)*r02);
IkReal x6089=((1.0)*cj5*r00);
CheckValue<IkReal> x6090 = IKatan2WithCheck(IkReal((((x6085*x6087))+((x6085*x6086))+(((-1.0)*x6086*x6089))+(((-1.0)*x6087*x6089)))),IkReal(((((-1.0)*x6086*x6088))+(((-1.0)*x6087*x6088)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6090.valid){
continue;
}
CheckValue<IkReal> x6091=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6091.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6090.value)+(((1.5707963267949)*(x6091.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6092=IKcos(j4);
IkReal x6093=IKsin(j4);
IkReal x6094=(cj5*r00);
IkReal x6095=(cj5*r10);
IkReal x6096=(r21*sj5);
IkReal x6097=(cj5*r20);
IkReal x6098=((1.0)*x6092);
IkReal x6099=((1.0)*x6093);
IkReal x6100=(sj5*x6093);
IkReal x6101=(sj5*x6092);
evalcond[0]=((((-1.0)*x6094*x6098))+((r01*x6101))+((r02*x6093)));
evalcond[1]=(((x6093*x6096))+(((-1.0)*r22*x6098))+(((-1.0)*x6097*x6099)));
evalcond[2]=(((r11*x6100))+(((-1.0)*x6095*x6099))+(((-1.0)*r12*x6098)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6098))+(((-1.0)*x6094*x6099))+((r01*x6100)));
evalcond[4]=(((cj2*sj1))+((x6092*x6096))+((cj1*sj2))+((r22*x6093))+(((-1.0)*x6097*x6098)));
evalcond[5]=(((r11*x6101))+(((-1.0)*sj1*sj2))+(((-1.0)*x6095*x6098))+((r12*x6093))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6102=((1.0)*cj5);
CheckValue<IkReal> x6103=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6102))+(((-1.0)*r20*sj5)))),-1);
if(!x6103.valid){
continue;
}
CheckValue<IkReal> x6104 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x6102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6103.value)))+(x6104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6105=IKcos(j4);
IkReal x6106=IKsin(j4);
IkReal x6107=(cj5*r00);
IkReal x6108=(cj5*r10);
IkReal x6109=(r21*sj5);
IkReal x6110=(cj5*r20);
IkReal x6111=((1.0)*x6105);
IkReal x6112=((1.0)*x6106);
IkReal x6113=(sj5*x6106);
IkReal x6114=(sj5*x6105);
evalcond[0]=((((-1.0)*x6107*x6111))+((r01*x6114))+((r02*x6106)));
evalcond[1]=(((x6106*x6109))+(((-1.0)*r22*x6111))+(((-1.0)*x6110*x6112)));
evalcond[2]=((((-1.0)*r12*x6111))+((r11*x6113))+(((-1.0)*x6108*x6112)));
evalcond[3]=((1.0)+(((-1.0)*x6107*x6112))+(((-1.0)*r02*x6111))+((r01*x6113)));
evalcond[4]=(((cj2*sj1))+((r22*x6106))+((cj1*sj2))+(((-1.0)*x6110*x6111))+((x6105*x6109)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6114))+(((-1.0)*x6108*x6111))+((cj1*cj2))+((r12*x6106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6115 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6115.valid){
continue;
}
CheckValue<IkReal> x6116=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6115.value)+(((1.5707963267949)*(x6116.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6117=IKcos(j4);
IkReal x6118=IKsin(j4);
IkReal x6119=(cj5*r00);
IkReal x6120=(cj5*r10);
IkReal x6121=(r21*sj5);
IkReal x6122=(cj5*r20);
IkReal x6123=((1.0)*x6117);
IkReal x6124=((1.0)*x6118);
IkReal x6125=(sj5*x6118);
IkReal x6126=(sj5*x6117);
evalcond[0]=(((r01*x6126))+((r02*x6118))+(((-1.0)*x6119*x6123)));
evalcond[1]=(((x6118*x6121))+(((-1.0)*r22*x6123))+(((-1.0)*x6122*x6124)));
evalcond[2]=((((-1.0)*r12*x6123))+(((-1.0)*x6120*x6124))+((r11*x6125)));
evalcond[3]=((1.0)+((r01*x6125))+(((-1.0)*r02*x6123))+(((-1.0)*x6119*x6124)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6118))+(((-1.0)*x6122*x6123))+((x6117*x6121)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r12*x6118))+((cj1*cj2))+(((-1.0)*x6120*x6123))+((r11*x6126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6127=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6127);
rxp1_1=(px*r21);
rxp1_2=(r11*x6127);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6128=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6128);
rxp1_1=(px*r21);
rxp1_2=(r11*x6128);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6129=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6129);
rxp1_1=(px*r21);
rxp1_2=(r11*x6129);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6132=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6132.valid){
continue;
}
IkReal x6130=x6132.value;
IkReal x6131=(sj0*x6130);
cj4array[0]=(((cj1*cj2*x6131))+(((-1.0)*sj1*sj2*x6131)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6133=IKsin(j4);
IkReal x6134=IKcos(j4);
IkReal x6135=(r21*sj5);
IkReal x6136=((1.0)*cj5*r20);
evalcond[0]=(r02*x6133);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6134)));
evalcond[2]=(((x6133*x6135))+(((-1.0)*x6133*x6136)));
evalcond[3]=(((r11*sj5*x6133))+(((-1.0)*cj5*r10*x6133)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6134*x6136))+((x6134*x6135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6139=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6139.valid){
continue;
}
IkReal x6137=x6139.value;
IkReal x6138=((1.0)*x6137);
cj4array[0]=((((-1.0)*cj2*sj1*x6138))+(((-1.0)*cj1*sj2*x6138)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6140=IKsin(j4);
IkReal x6141=IKcos(j4);
IkReal x6142=((1.0)*sj0);
IkReal x6143=((1.0)*cj5);
IkReal x6144=(sj5*x6140);
evalcond[0]=(r02*x6140);
evalcond[1]=((((-1.0)*x6142))+(((-1.0)*r02*x6141)));
evalcond[2]=((((-1.0)*r20*x6140*x6143))+((r21*x6144)));
evalcond[3]=((((-1.0)*r10*x6140*x6143))+((r11*x6144)));
evalcond[4]=(((r11*sj5*x6141))+(((-1.0)*r10*x6141*x6143))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x6142)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6145=IKPowWithIntegerCheck(r02,-1);
if(!x6145.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6145.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6146=IKsin(j4);
IkReal x6147=IKcos(j4);
IkReal x6148=(r21*sj5);
IkReal x6149=((1.0)*cj5);
IkReal x6150=(r11*sj5);
evalcond[0]=(r02*x6146);
evalcond[1]=((((-1.0)*r20*x6146*x6149))+((x6146*x6148)));
evalcond[2]=(((x6146*x6150))+(((-1.0)*r10*x6146*x6149)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x6147*x6149))+((cj1*sj2))+((x6147*x6148)));
evalcond[4]=((((-1.0)*r10*x6147*x6149))+((x6147*x6150))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6151=((1.0)*sj0);
IkReal x6152=((1.0)*cj0);
CheckValue<IkReal> x6153 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x6152))+(((-1.0)*r12*x6151)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6152))+(((-1.0)*r11*sj5*x6151)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6153.valid){
continue;
}
CheckValue<IkReal> x6154=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6154.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6153.value)+(((1.5707963267949)*(x6154.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6155=IKsin(j4);
IkReal x6156=IKcos(j4);
IkReal x6157=(cj5*r00);
IkReal x6158=(cj5*r10);
IkReal x6159=(r21*sj5);
IkReal x6160=(sj1*sj2);
IkReal x6161=(cj5*r20);
IkReal x6162=((1.0)*x6156);
IkReal x6163=((1.0)*cj1*cj2);
IkReal x6164=((1.0)*x6155);
IkReal x6165=(sj5*x6155);
IkReal x6166=(sj5*x6156);
evalcond[0]=(((x6155*x6159))+(((-1.0)*r22*x6162))+(((-1.0)*x6161*x6164)));
evalcond[1]=(cj0+(((-1.0)*r12*x6162))+((r11*x6165))+(((-1.0)*x6158*x6164)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6157*x6164))+((r01*x6165))+(((-1.0)*r02*x6162)));
evalcond[3]=(((r22*x6155))+((cj2*sj1))+((cj1*sj2))+((x6156*x6159))+(((-1.0)*x6161*x6162)));
evalcond[4]=((((-1.0)*cj0*x6163))+(((-1.0)*x6157*x6162))+((r02*x6155))+((r01*x6166))+((cj0*x6160)));
evalcond[5]=(((r12*x6155))+(((-1.0)*sj0*x6163))+((sj0*x6160))+((r11*x6166))+(((-1.0)*x6158*x6162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6167=((1.0)*cj5);
CheckValue<IkReal> x6168=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6167)))),-1);
if(!x6168.valid){
continue;
}
CheckValue<IkReal> x6169 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6167)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6168.value)))+(x6169.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6170=IKsin(j4);
IkReal x6171=IKcos(j4);
IkReal x6172=(cj5*r00);
IkReal x6173=(cj5*r10);
IkReal x6174=(r21*sj5);
IkReal x6175=(sj1*sj2);
IkReal x6176=(cj5*r20);
IkReal x6177=((1.0)*x6171);
IkReal x6178=((1.0)*cj1*cj2);
IkReal x6179=((1.0)*x6170);
IkReal x6180=(sj5*x6170);
IkReal x6181=(sj5*x6171);
evalcond[0]=((((-1.0)*x6176*x6179))+((x6170*x6174))+(((-1.0)*r22*x6177)));
evalcond[1]=(cj0+(((-1.0)*r12*x6177))+(((-1.0)*x6173*x6179))+((r11*x6180)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6180))+(((-1.0)*x6172*x6179))+(((-1.0)*r02*x6177)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6176*x6177))+((cj1*sj2))+((x6171*x6174))+((r22*x6170)));
evalcond[4]=((((-1.0)*cj0*x6178))+((r01*x6181))+((r02*x6170))+(((-1.0)*x6172*x6177))+((cj0*x6175)));
evalcond[5]=((((-1.0)*sj0*x6178))+((r12*x6170))+((sj0*x6175))+(((-1.0)*x6173*x6177))+((r11*x6181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6182=((1.0)*cj5);
CheckValue<IkReal> x6183=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6182))+(((-1.0)*r00*sj5)))),-1);
if(!x6183.valid){
continue;
}
CheckValue<IkReal> x6184 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6182)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6183.value)))+(x6184.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6185=IKsin(j4);
IkReal x6186=IKcos(j4);
IkReal x6187=(cj5*r00);
IkReal x6188=(cj5*r10);
IkReal x6189=(r21*sj5);
IkReal x6190=(sj1*sj2);
IkReal x6191=(cj5*r20);
IkReal x6192=((1.0)*x6186);
IkReal x6193=((1.0)*cj1*cj2);
IkReal x6194=((1.0)*x6185);
IkReal x6195=(sj5*x6185);
IkReal x6196=(sj5*x6186);
evalcond[0]=(((x6185*x6189))+(((-1.0)*x6191*x6194))+(((-1.0)*r22*x6192)));
evalcond[1]=(cj0+((r11*x6195))+(((-1.0)*r12*x6192))+(((-1.0)*x6188*x6194)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6195))+(((-1.0)*r02*x6192))+(((-1.0)*x6187*x6194)));
evalcond[3]=(((cj2*sj1))+((x6186*x6189))+((r22*x6185))+((cj1*sj2))+(((-1.0)*x6191*x6192)));
evalcond[4]=((((-1.0)*cj0*x6193))+((r02*x6185))+((r01*x6196))+(((-1.0)*x6187*x6192))+((cj0*x6190)));
evalcond[5]=(((r11*x6196))+(((-1.0)*sj0*x6193))+((sj0*x6190))+(((-1.0)*x6188*x6192))+((r12*x6185)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6197=r21*r21;
IkReal x6198=cj5*cj5;
IkReal x6199=(cj2*sj1);
IkReal x6200=(cj1*sj2);
IkReal x6201=(r21*sj5);
IkReal x6202=((1.0)*cj5*r20);
CheckValue<IkReal> x6203=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6198*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-1.0)*x6197))+(((2.0)*cj5*r20*x6201))+((x6197*x6198)))),-1);
if(!x6203.valid){
continue;
}
CheckValue<IkReal> x6204 = IKatan2WithCheck(IkReal((((r22*x6200))+((r22*x6199)))),IkReal((((x6199*x6201))+(((-1.0)*x6199*x6202))+((x6200*x6201))+(((-1.0)*x6200*x6202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6204.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6203.value)))+(x6204.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6205=IKsin(j4);
IkReal x6206=IKcos(j4);
IkReal x6207=(r21*sj5);
IkReal x6208=(cj5*r20);
IkReal x6209=((1.0)*x6206);
evalcond[0]=((((-1.0)*r22*x6209))+(((-1.0)*x6205*x6208))+((x6205*x6207)));
evalcond[1]=(((cj2*sj1))+((r22*x6205))+(((-1.0)*x6208*x6209))+((cj1*sj2))+((x6206*x6207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6210=(cj5*sj4);
IkReal x6211=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6211))+(((-1.0)*r00*x6210)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6210))+(((-1.0)*r11*x6211))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6211))+(((-1.0)*r00*x6210))))+IKsqr((((r10*x6210))+(((-1.0)*r11*x6211))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6211))+(((-1.0)*r00*x6210))), (((r10*x6210))+(((-1.0)*r11*x6211))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6212=IKcos(j0);
IkReal x6213=IKsin(j0);
IkReal x6214=(cj5*r01);
IkReal x6215=((1.0)*cj1);
IkReal x6216=((0.39225)*sj1);
IkReal x6217=(r11*sj5);
IkReal x6218=((0.39225)*cj2);
IkReal x6219=((1.0)*sj1);
IkReal x6220=(r00*sj5);
IkReal x6221=(cj5*r11);
IkReal x6222=((1.0)*cj4);
IkReal x6223=(r01*sj5);
IkReal x6224=(r10*sj5);
IkReal x6225=(sj2*x6212);
IkReal x6226=(sj2*x6213);
IkReal x6227=(cj5*x6222);
IkReal x6228=(cj1*x6212);
IkReal x6229=(cj1*x6213);
IkReal x6230=(cj2*x6212);
IkReal x6231=((1.0)*cj5*sj4);
IkReal x6232=(cj2*x6213);
evalcond[0]=(x6212+(((-1.0)*r10*x6231))+(((-1.0)*r12*x6222))+((sj4*x6217)));
evalcond[1]=((((-1.0)*x6213))+((sj4*x6223))+(((-1.0)*r00*x6231))+(((-1.0)*r02*x6222)));
evalcond[2]=(x6214+x6220+(((-1.0)*x6215*x6225))+(((-1.0)*x6219*x6230)));
evalcond[3]=(x6221+x6224+(((-1.0)*x6215*x6226))+(((-1.0)*x6219*x6232)));
evalcond[4]=(((sj1*x6225))+(((-1.0)*r00*x6227))+((r02*sj4))+((cj4*x6223))+(((-1.0)*x6215*x6230)));
evalcond[5]=(((sj1*x6226))+((r12*sj4))+(((-1.0)*x6215*x6232))+((cj4*x6217))+(((-1.0)*r10*x6227)));
evalcond[6]=((((-0.09465)*x6220))+(((-0.10915)*x6213))+(((-1.0)*px))+(((-1.0)*x6216*x6225))+(((0.425)*x6228))+((x6218*x6228))+(((-0.09465)*x6214)));
evalcond[7]=((((-0.09465)*x6221))+(((-0.09465)*x6224))+(((0.10915)*x6212))+(((-1.0)*py))+(((-1.0)*x6216*x6226))+(((0.425)*x6229))+((x6218*x6229)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6233=((1.0)*cj5);
IkReal x6234=((1.0)*sj5);
CheckValue<IkReal> x6235 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x6233))+(((-1.0)*r10*x6234)))),IkReal(((((-1.0)*r00*x6234))+(((-1.0)*r01*x6233)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6235.valid){
continue;
}
CheckValue<IkReal> x6236=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6236.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6235.value)+(((1.5707963267949)*(x6236.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6237=IKcos(j0);
IkReal x6238=IKsin(j0);
IkReal x6239=(cj5*r01);
IkReal x6240=((1.0)*cj1);
IkReal x6241=((0.39225)*sj1);
IkReal x6242=(cj5*r11);
IkReal x6243=(r00*sj5);
IkReal x6244=((0.39225)*cj2);
IkReal x6245=(r10*sj5);
IkReal x6246=(sj2*x6237);
IkReal x6247=(sj2*x6238);
IkReal x6248=(cj1*x6237);
IkReal x6249=((1.0)*cj2*sj1);
IkReal x6250=(cj1*x6238);
evalcond[0]=(x6243+x6239+(((-1.0)*x6237*x6249))+(((-1.0)*x6240*x6246)));
evalcond[1]=((((-1.0)*x6238*x6249))+x6242+x6245+(((-1.0)*x6240*x6247)));
evalcond[2]=((((-0.09465)*x6239))+(((-0.09465)*x6243))+(((0.425)*x6248))+(((-0.10915)*x6238))+((x6244*x6248))+(((-1.0)*px))+(((-1.0)*x6241*x6246)));
evalcond[3]=((((-0.09465)*x6245))+(((-0.09465)*x6242))+((x6244*x6250))+(((0.10915)*x6237))+(((-1.0)*py))+(((0.425)*x6250))+(((-1.0)*x6241*x6247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6251=((1.0)*cj5);
IkReal x6252=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6251)));
j4eval[0]=x6252;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6251))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6253=((1.0)*cj5);
IkReal x6254=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6253)));
j4eval[0]=x6254;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6253))))));
j4eval[2]=IKsign(x6254);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6255=((1.0)*sj0);
IkReal x6256=((1.0)*cj0);
IkReal x6257=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6257;
j4eval[1]=((IKabs(((((-1.0)*r02*x6256))+(((-1.0)*r12*x6255)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6255))+(((-1.0)*r01*sj5*x6256))))));
j4eval[2]=IKsign(x6257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6258=((-1.0)*r20);
IkReal x6260 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6260)==0){
continue;
}
IkReal x6259=pow(x6260,-0.5);
CheckValue<IkReal> x6261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6258),IKFAST_ATAN2_MAGTHRESH);
if(!x6261.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6261.value));
IkReal gconst115=(r21*x6259);
IkReal gconst116=(x6258*x6259);
CheckValue<IkReal> x6262 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6262.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6262.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6263=((-1.0)*r20);
IkReal x6264=x6259;
CheckValue<IkReal> x6266 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6263),IKFAST_ATAN2_MAGTHRESH);
if(!x6266.valid){
continue;
}
IkReal x6265=((-1.0)*(x6266.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6265;
IkReal gconst114=x6265;
IkReal gconst115=(r21*x6264);
IkReal gconst116=(x6263*x6264);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6267=((-1.0)*r20);
IkReal x6268=x6259;
CheckValue<IkReal> x6270 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6267),IKFAST_ATAN2_MAGTHRESH);
if(!x6270.valid){
continue;
}
IkReal x6269=((-1.0)*(x6270.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6269;
IkReal gconst114=x6269;
IkReal gconst115=(r21*x6268);
IkReal gconst116=(x6267*x6268);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6271=((-1.0)*r20);
IkReal x6272=x6259;
CheckValue<IkReal> x6274 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6271),IKFAST_ATAN2_MAGTHRESH);
if(!x6274.valid){
continue;
}
IkReal x6273=((-1.0)*(x6274.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6273;
IkReal gconst114=x6273;
IkReal gconst115=(r21*x6272);
IkReal gconst116=(x6271*x6272);
IkReal x6275=((1.0)*(r22*r22));
CheckValue<IkReal> x6279=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6275))),-1);
if(!x6279.valid){
continue;
}
IkReal x6276=x6279.value;
IkReal x6277=((1.0)*x6276);
IkReal x6278=((((-1.0)*x6277*(r20*r20*r20*r20)))+(((-2.0)*x6276*(r20*r20)*(r21*r21)))+(((-1.0)*x6277*(r21*r21*r21*r21)))+(((-1.0)*x6275)));
j4eval[0]=x6278;
j4eval[1]=IKsign(x6278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6280=(cj2*sj1);
IkReal x6281=(gconst115*r21);
IkReal x6282=(cj1*sj2);
IkReal x6283=((1.0)*gconst116*r20);
CheckValue<IkReal> x6284=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst116*r20*x6283))+(((2.0)*gconst116*r20*x6281))+(((-1.0)*(r22*r22)))+(((-1.0)*(x6281*x6281))))),-1);
if(!x6284.valid){
continue;
}
CheckValue<IkReal> x6285 = IKatan2WithCheck(IkReal((((r22*x6280))+((r22*x6282)))),IkReal(((((-1.0)*x6282*x6283))+(((-1.0)*x6280*x6283))+((x6280*x6281))+((x6281*x6282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6284.value)))+(x6285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6286=IKsin(j4);
IkReal x6287=IKcos(j4);
IkReal x6288=(sj1*sj2);
IkReal x6289=((1.0)*x6287);
IkReal x6290=((1.0)*cj1*cj2);
IkReal x6291=(gconst115*x6286);
IkReal x6292=(gconst115*x6287);
IkReal x6293=((1.0)*gconst116*x6286);
evalcond[0]=((((-1.0)*r20*x6293))+(((-1.0)*r22*x6289))+((r21*x6291)));
evalcond[1]=(cj0+((r11*x6291))+(((-1.0)*r10*x6293))+(((-1.0)*r12*x6289)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x6293))+((r01*x6291))+(((-1.0)*r02*x6289)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6289))+((r22*x6286))+((cj1*sj2))+((r21*x6292)));
evalcond[4]=((((-1.0)*gconst116*r00*x6289))+((r01*x6292))+((cj0*x6288))+((r02*x6286))+(((-1.0)*cj0*x6290)));
evalcond[5]=(((r11*x6292))+((r12*x6286))+(((-1.0)*gconst116*r10*x6289))+((sj0*x6288))+(((-1.0)*sj0*x6290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6294=((1.0)*gconst116);
CheckValue<IkReal> x6295=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6294)))),-1);
if(!x6295.valid){
continue;
}
CheckValue<IkReal> x6296 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6294))+((gconst115*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6295.value)))+(x6296.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6297=IKsin(j4);
IkReal x6298=IKcos(j4);
IkReal x6299=(sj1*sj2);
IkReal x6300=((1.0)*x6298);
IkReal x6301=((1.0)*cj1*cj2);
IkReal x6302=(gconst115*x6297);
IkReal x6303=(gconst115*x6298);
IkReal x6304=((1.0)*gconst116*x6297);
evalcond[0]=(((r21*x6302))+(((-1.0)*r20*x6304))+(((-1.0)*r22*x6300)));
evalcond[1]=(cj0+(((-1.0)*r10*x6304))+(((-1.0)*r12*x6300))+((r11*x6302)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6300))+((r01*x6302))+(((-1.0)*r00*x6304)));
evalcond[3]=(((cj2*sj1))+((r22*x6297))+((cj1*sj2))+((r21*x6303))+(((-1.0)*gconst116*r20*x6300)));
evalcond[4]=(((r01*x6303))+((cj0*x6299))+((r02*x6297))+(((-1.0)*gconst116*r00*x6300))+(((-1.0)*cj0*x6301)));
evalcond[5]=(((r11*x6303))+(((-1.0)*sj0*x6301))+((r12*x6297))+((sj0*x6299))+(((-1.0)*gconst116*r10*x6300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6305=((1.0)*gconst116);
CheckValue<IkReal> x6306 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst115*r21))+(((-1.0)*cj0*r20*x6305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6306.valid){
continue;
}
CheckValue<IkReal> x6307=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r00))+(((-1.0)*r01*x6305)))),-1);
if(!x6307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6306.value)+(((1.5707963267949)*(x6307.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6308=IKsin(j4);
IkReal x6309=IKcos(j4);
IkReal x6310=(sj1*sj2);
IkReal x6311=((1.0)*x6309);
IkReal x6312=((1.0)*cj1*cj2);
IkReal x6313=(gconst115*x6308);
IkReal x6314=(gconst115*x6309);
IkReal x6315=((1.0)*gconst116*x6308);
evalcond[0]=((((-1.0)*r22*x6311))+((r21*x6313))+(((-1.0)*r20*x6315)));
evalcond[1]=(cj0+(((-1.0)*r12*x6311))+(((-1.0)*r10*x6315))+((r11*x6313)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6311))+((r01*x6313))+(((-1.0)*r00*x6315)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6308))+((r21*x6314))+(((-1.0)*gconst116*r20*x6311)));
evalcond[4]=(((r01*x6314))+((r02*x6308))+((cj0*x6310))+(((-1.0)*gconst116*r00*x6311))+(((-1.0)*cj0*x6312)));
evalcond[5]=(((r11*x6314))+(((-1.0)*sj0*x6312))+((r12*x6308))+(((-1.0)*gconst116*r10*x6311))+((sj0*x6310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6316=((-1.0)*r21);
IkReal x6318 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6318)==0){
continue;
}
IkReal x6317=pow(x6318,-0.5);
CheckValue<IkReal> x6319 = IKatan2WithCheck(IkReal(x6316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6319.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6319.value))));
IkReal gconst118=(x6316*x6317);
IkReal gconst119=((1.0)*r20*x6317);
CheckValue<IkReal> x6320 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6320.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6320.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6321=((-1.0)*r21);
CheckValue<IkReal> x6324 = IKatan2WithCheck(IkReal(x6321),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6324.valid){
continue;
}
IkReal x6322=((1.0)*(x6324.value));
IkReal x6323=x6317;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6322)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6322)));
IkReal gconst118=(x6321*x6323);
IkReal gconst119=((1.0)*r20*x6323);
IkReal x6325=r22*r22;
IkReal x6326=((1.0)*x6325);
CheckValue<IkReal> x6330=IKPowWithIntegerCheck(((-1.0)+x6325),-1);
if(!x6330.valid){
continue;
}
IkReal x6327=x6330.value;
if((((1.0)+(((-1.0)*x6326)))) < -0.00001)
continue;
IkReal x6328=IKsqrt(((1.0)+(((-1.0)*x6326))));
IkReal x6329=(cj0*x6327*x6328);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x6326*x6329))+x6329))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6331=((-1.0)*r21);
CheckValue<IkReal> x6334 = IKatan2WithCheck(IkReal(x6331),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6334.valid){
continue;
}
IkReal x6332=((1.0)*(x6334.value));
IkReal x6333=x6317;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6332)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6332)));
IkReal gconst118=(x6331*x6333);
IkReal gconst119=((1.0)*r20*x6333);
IkReal x6335=r22*r22;
IkReal x6336=((1.0)*x6335);
CheckValue<IkReal> x6340=IKPowWithIntegerCheck(((-1.0)+x6335),-1);
if(!x6340.valid){
continue;
}
IkReal x6337=x6340.value;
if((((1.0)+(((-1.0)*x6336)))) < -0.00001)
continue;
IkReal x6338=IKsqrt(((1.0)+(((-1.0)*x6336))));
IkReal x6339=(sj0*x6337*x6338);
j4eval[0]=((IKabs((x6339+(((-1.0)*x6336*x6339)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6341=((-1.0)*r21);
CheckValue<IkReal> x6344 = IKatan2WithCheck(IkReal(x6341),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6344.valid){
continue;
}
IkReal x6342=((1.0)*(x6344.value));
IkReal x6343=x6317;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6342)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6342)));
IkReal gconst118=(x6341*x6343);
IkReal gconst119=((1.0)*r20*x6343);
IkReal x6345=r22*r22;
IkReal x6346=(r12*sj0);
IkReal x6347=(cj0*r02);
CheckValue<IkReal> x6351=IKPowWithIntegerCheck(((-1.0)+x6345),-1);
if(!x6351.valid){
continue;
}
IkReal x6348=x6351.value;
if((((1.0)+(((-1.0)*x6345)))) < -0.00001)
continue;
IkReal x6349=IKsqrt(((1.0)+(((-1.0)*x6345))));
IkReal x6350=(r22*x6348*x6349);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6347))+(((-1.0)*x6346)))))+(IKabs((((x6346*x6350))+((x6347*x6350))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6352=((1.0)*sj0);
IkReal x6353=((1.0)*gconst118);
CheckValue<IkReal> x6354=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6353)))),-1);
if(!x6354.valid){
continue;
}
CheckValue<IkReal> x6355 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6352)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6352))+(((-1.0)*cj0*r01*x6353))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6354.value)))+(x6355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6356=IKsin(j4);
IkReal x6357=IKcos(j4);
IkReal x6358=(gconst118*r01);
IkReal x6359=(sj1*sj2);
IkReal x6360=(gconst119*r20);
IkReal x6361=(gconst119*r10);
IkReal x6362=(gconst119*r00);
IkReal x6363=(gconst118*r21);
IkReal x6364=(gconst118*r11);
IkReal x6365=((1.0)*x6357);
IkReal x6366=((1.0)*cj1*cj2);
IkReal x6367=((1.0)*x6356);
evalcond[0]=((((-1.0)*x6360*x6367))+((x6356*x6363))+(((-1.0)*r22*x6365)));
evalcond[1]=(cj0+(((-1.0)*x6361*x6367))+((x6356*x6364))+(((-1.0)*r12*x6365)));
evalcond[2]=((((-1.0)*x6362*x6367))+(((-1.0)*sj0))+(((-1.0)*r02*x6365))+((x6356*x6358)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6360*x6365))+((r22*x6356))+((x6357*x6363)));
evalcond[4]=((((-1.0)*x6362*x6365))+((r02*x6356))+(((-1.0)*cj0*x6366))+((x6357*x6358))+((cj0*x6359)));
evalcond[5]=((((-1.0)*sj0*x6366))+(((-1.0)*x6361*x6365))+((r12*x6356))+((sj0*x6359))+((x6357*x6364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6368=((1.0)*gconst119);
CheckValue<IkReal> x6369=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6368)))),-1);
if(!x6369.valid){
continue;
}
CheckValue<IkReal> x6370 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst118*r21*sj0))+(((-1.0)*r20*sj0*x6368)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6370.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6369.value)))+(x6370.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6371=IKsin(j4);
IkReal x6372=IKcos(j4);
IkReal x6373=(gconst118*r01);
IkReal x6374=(sj1*sj2);
IkReal x6375=(gconst119*r20);
IkReal x6376=(gconst119*r10);
IkReal x6377=(gconst119*r00);
IkReal x6378=(gconst118*r21);
IkReal x6379=(gconst118*r11);
IkReal x6380=((1.0)*x6372);
IkReal x6381=((1.0)*cj1*cj2);
IkReal x6382=((1.0)*x6371);
evalcond[0]=((((-1.0)*x6375*x6382))+(((-1.0)*r22*x6380))+((x6371*x6378)));
evalcond[1]=(cj0+(((-1.0)*r12*x6380))+(((-1.0)*x6376*x6382))+((x6371*x6379)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6377*x6382))+((x6371*x6373))+(((-1.0)*r02*x6380)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6375*x6380))+((x6372*x6378))+((r22*x6371)));
evalcond[4]=((((-1.0)*x6377*x6380))+((x6372*x6373))+(((-1.0)*cj0*x6381))+((cj0*x6374))+((r02*x6371)));
evalcond[5]=((((-1.0)*x6376*x6380))+((x6372*x6379))+((r12*x6371))+((sj0*x6374))+(((-1.0)*sj0*x6381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6383=((1.0)*gconst119);
CheckValue<IkReal> x6384 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6383)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6384.valid){
continue;
}
CheckValue<IkReal> x6385=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6383)))),-1);
if(!x6385.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6384.value)+(((1.5707963267949)*(x6385.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6386=IKsin(j4);
IkReal x6387=IKcos(j4);
IkReal x6388=(gconst118*r01);
IkReal x6389=(sj1*sj2);
IkReal x6390=(gconst119*r20);
IkReal x6391=(gconst119*r10);
IkReal x6392=(gconst119*r00);
IkReal x6393=(gconst118*r21);
IkReal x6394=(gconst118*r11);
IkReal x6395=((1.0)*x6387);
IkReal x6396=((1.0)*cj1*cj2);
IkReal x6397=((1.0)*x6386);
evalcond[0]=((((-1.0)*r22*x6395))+((x6386*x6393))+(((-1.0)*x6390*x6397)));
evalcond[1]=(cj0+((x6386*x6394))+(((-1.0)*x6391*x6397))+(((-1.0)*r12*x6395)));
evalcond[2]=((((-1.0)*sj0))+((x6386*x6388))+(((-1.0)*x6392*x6397))+(((-1.0)*r02*x6395)));
evalcond[3]=(((cj2*sj1))+((x6387*x6393))+((r22*x6386))+((cj1*sj2))+(((-1.0)*x6390*x6395)));
evalcond[4]=(((cj0*x6389))+(((-1.0)*cj0*x6396))+((r02*x6386))+(((-1.0)*x6392*x6395))+((x6387*x6388)));
evalcond[5]=((((-1.0)*sj0*x6396))+((sj0*x6389))+((x6387*x6394))+(((-1.0)*x6391*x6395))+((r12*x6386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6398=((-1.0)*r10);
IkReal x6400 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6400)==0){
continue;
}
IkReal x6399=pow(x6400,-0.5);
CheckValue<IkReal> x6401 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6398),IKFAST_ATAN2_MAGTHRESH);
if(!x6401.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6401.value));
IkReal gconst121=(r11*x6399);
IkReal gconst122=(x6398*x6399);
CheckValue<IkReal> x6402 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6402.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6402.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6403=((-1.0)*r10);
IkReal x6404=x6399;
CheckValue<IkReal> x6406 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6403),IKFAST_ATAN2_MAGTHRESH);
if(!x6406.valid){
continue;
}
IkReal x6405=((-1.0)*(x6406.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6405;
IkReal gconst120=x6405;
IkReal gconst121=(r11*x6404);
IkReal gconst122=(x6403*x6404);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6407=((1.0)*sj0);
IkReal x6408=((1.0)*gconst121);
CheckValue<IkReal> x6409 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6407)))),IkReal(((((-1.0)*cj0*r01*x6408))+((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6407))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6409.valid){
continue;
}
CheckValue<IkReal> x6410=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6408))+(((-1.0)*gconst122*r21)))),-1);
if(!x6410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6409.value)+(((1.5707963267949)*(x6410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6411=IKsin(j4);
IkReal x6412=IKcos(j4);
IkReal x6413=(gconst121*r11);
IkReal x6414=(sj1*sj2);
IkReal x6415=(gconst122*r00);
IkReal x6416=(gconst122*r10);
IkReal x6417=(gconst122*r20);
IkReal x6418=((1.0)*x6412);
IkReal x6419=((1.0)*cj1*cj2);
IkReal x6420=((1.0)*x6411);
IkReal x6421=(gconst121*x6411);
IkReal x6422=(gconst121*x6412);
evalcond[0]=(((r21*x6421))+(((-1.0)*x6417*x6420))+(((-1.0)*r22*x6418)));
evalcond[1]=(cj0+((x6411*x6413))+(((-1.0)*x6416*x6420))+(((-1.0)*r12*x6418)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6415*x6420))+(((-1.0)*r02*x6418))+((r01*x6421)));
evalcond[3]=(((r21*x6422))+((cj2*sj1))+(((-1.0)*x6417*x6418))+((cj1*sj2))+((r22*x6411)));
evalcond[4]=(((r02*x6411))+(((-1.0)*x6415*x6418))+((cj0*x6414))+((r01*x6422))+(((-1.0)*cj0*x6419)));
evalcond[5]=(((sj0*x6414))+(((-1.0)*x6416*x6418))+((r12*x6411))+(((-1.0)*sj0*x6419))+((x6412*x6413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6423=((1.0)*gconst122);
CheckValue<IkReal> x6424 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6423))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6424.valid){
continue;
}
CheckValue<IkReal> x6425=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst121*r00))+(((-1.0)*r01*x6423)))),-1);
if(!x6425.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6424.value)+(((1.5707963267949)*(x6425.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6426=IKsin(j4);
IkReal x6427=IKcos(j4);
IkReal x6428=(gconst121*r11);
IkReal x6429=(sj1*sj2);
IkReal x6430=(gconst122*r00);
IkReal x6431=(gconst122*r10);
IkReal x6432=(gconst122*r20);
IkReal x6433=((1.0)*x6427);
IkReal x6434=((1.0)*cj1*cj2);
IkReal x6435=((1.0)*x6426);
IkReal x6436=(gconst121*x6426);
IkReal x6437=(gconst121*x6427);
evalcond[0]=((((-1.0)*r22*x6433))+(((-1.0)*x6432*x6435))+((r21*x6436)));
evalcond[1]=(cj0+(((-1.0)*x6431*x6435))+(((-1.0)*r12*x6433))+((x6426*x6428)));
evalcond[2]=(((r01*x6436))+(((-1.0)*sj0))+(((-1.0)*r02*x6433))+(((-1.0)*x6430*x6435)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6432*x6433))+((r21*x6437))+((r22*x6426)));
evalcond[4]=(((r01*x6437))+((r02*x6426))+(((-1.0)*x6430*x6433))+(((-1.0)*cj0*x6434))+((cj0*x6429)));
evalcond[5]=((((-1.0)*sj0*x6434))+(((-1.0)*x6431*x6433))+((r12*x6426))+((x6427*x6428))+((sj0*x6429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6438=((-1.0)*r11);
IkReal x6440 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6440)==0){
continue;
}
IkReal x6439=pow(x6440,-0.5);
CheckValue<IkReal> x6441 = IKatan2WithCheck(IkReal(x6438),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6441.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6441.value))));
IkReal gconst124=(x6438*x6439);
IkReal gconst125=((1.0)*r10*x6439);
CheckValue<IkReal> x6442 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6442.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6442.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6443=((-1.0)*r11);
CheckValue<IkReal> x6446 = IKatan2WithCheck(IkReal(x6443),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6446.valid){
continue;
}
IkReal x6444=((1.0)*(x6446.value));
IkReal x6445=x6439;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6444)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6444)));
IkReal gconst124=(x6443*x6445);
IkReal gconst125=((1.0)*r10*x6445);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6447=((-1.0)*r11);
CheckValue<IkReal> x6450 = IKatan2WithCheck(IkReal(x6447),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6450.valid){
continue;
}
IkReal x6448=((1.0)*(x6450.value));
IkReal x6449=x6439;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6448)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6448)));
IkReal gconst124=(x6447*x6449);
IkReal gconst125=((1.0)*r10*x6449);
IkReal x6451=r12*r12;
IkReal x6452=((1.0)*sj0);
IkReal x6453=(cj0*r02);
IkReal x6454=x6439;
j4eval[0]=((IKabs((((r12*x6453*x6454))+(((-1.0)*x6452*x6454))+((sj0*x6451*x6454)))))+(IKabs(((((-1.0)*x6453))+(((-1.0)*r12*x6452))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6455=((-1.0)*r11);
CheckValue<IkReal> x6458 = IKatan2WithCheck(IkReal(x6455),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6458.valid){
continue;
}
IkReal x6456=((1.0)*(x6458.value));
IkReal x6457=x6439;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6456)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6456)));
IkReal gconst124=(x6455*x6457);
IkReal gconst125=((1.0)*r10*x6457);
IkReal x6459=r12*r12;
IkReal x6460=((1.0)+(((-1.0)*x6459)));
IkReal x6461=(cj2*r22*sj1);
IkReal x6462=(cj1*r22*sj2);
CheckValue<IkReal> x6469=IKPowWithIntegerCheck(x6460,-1);
if(!x6469.valid){
continue;
}
IkReal x6463=x6469.value;
CheckValue<IkReal> x6470=IKPowWithIntegerCheck(((-1.0)+x6459),-1);
if(!x6470.valid){
continue;
}
IkReal x6464=x6470.value;
IkReal x6465=((1.0)*x6463);
if((x6460) < -0.00001)
continue;
IkReal x6466=IKsqrt(x6460);
IkReal x6467=((1.0)*r12*x6464*x6466);
IkReal x6468=((((-1.0)*x6465*(r10*r10)*(r20*r20)))+(((-1.0)*x6465*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x6463)));
j4eval[0]=x6468;
j4eval[1]=IKsign(x6468);
j4eval[2]=((IKabs((x6461+x6462)))+(IKabs(((((-1.0)*x6461*x6467))+(((-1.0)*x6462*x6467))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6471=(gconst124*r21);
IkReal x6472=(cj1*sj2);
IkReal x6473=(cj2*sj1);
IkReal x6474=(gconst125*r20);
CheckValue<IkReal> x6475 = IKatan2WithCheck(IkReal((((r22*x6473))+((r22*x6472)))),IkReal((((x6471*x6472))+((x6471*x6473))+(((-1.0)*x6473*x6474))+(((-1.0)*x6472*x6474)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6475.valid){
continue;
}
CheckValue<IkReal> x6476=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6474*x6474)))+(((2.0)*x6471*x6474))+(((-1.0)*(x6471*x6471)))+(((-1.0)*(r22*r22))))),-1);
if(!x6476.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6475.value)+(((1.5707963267949)*(x6476.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6477=IKsin(j4);
IkReal x6478=IKcos(j4);
IkReal x6479=(sj1*sj2);
IkReal x6480=(gconst125*r20);
IkReal x6481=(gconst124*r01);
IkReal x6482=(gconst125*r00);
IkReal x6483=(gconst125*r10);
IkReal x6484=((1.0)*x6478);
IkReal x6485=((1.0)*cj1*cj2);
IkReal x6486=((1.0)*x6477);
IkReal x6487=(gconst124*x6477);
IkReal x6488=(gconst124*x6478);
evalcond[0]=(((r21*x6487))+(((-1.0)*r22*x6484))+(((-1.0)*x6480*x6486)));
evalcond[1]=(((r11*x6487))+cj0+(((-1.0)*r12*x6484))+(((-1.0)*x6483*x6486)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6484))+(((-1.0)*x6482*x6486))+((x6477*x6481)));
evalcond[3]=(((r22*x6477))+((r21*x6488))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6480*x6484)));
evalcond[4]=(((r02*x6477))+(((-1.0)*cj0*x6485))+(((-1.0)*x6482*x6484))+((cj0*x6479))+((x6478*x6481)));
evalcond[5]=(((r11*x6488))+(((-1.0)*sj0*x6485))+((r12*x6477))+(((-1.0)*x6483*x6484))+((sj0*x6479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6489=((1.0)*sj0);
IkReal x6490=((1.0)*cj0);
CheckValue<IkReal> x6491 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6489))+(((-1.0)*r02*x6490)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x6489))+(((-1.0)*gconst124*r01*x6490))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6491.valid){
continue;
}
CheckValue<IkReal> x6492=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6491.value)+(((1.5707963267949)*(x6492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6493=IKsin(j4);
IkReal x6494=IKcos(j4);
IkReal x6495=(sj1*sj2);
IkReal x6496=(gconst125*r20);
IkReal x6497=(gconst124*r01);
IkReal x6498=(gconst125*r00);
IkReal x6499=(gconst125*r10);
IkReal x6500=((1.0)*x6494);
IkReal x6501=((1.0)*cj1*cj2);
IkReal x6502=((1.0)*x6493);
IkReal x6503=(gconst124*x6493);
IkReal x6504=(gconst124*x6494);
evalcond[0]=(((r21*x6503))+(((-1.0)*r22*x6500))+(((-1.0)*x6496*x6502)));
evalcond[1]=((((-1.0)*r12*x6500))+cj0+(((-1.0)*x6499*x6502))+((r11*x6503)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6498*x6502))+(((-1.0)*r02*x6500))+((x6493*x6497)));
evalcond[3]=(((cj2*sj1))+((r21*x6504))+((cj1*sj2))+(((-1.0)*x6496*x6500))+((r22*x6493)));
evalcond[4]=(((x6494*x6497))+((cj0*x6495))+((r02*x6493))+(((-1.0)*x6498*x6500))+(((-1.0)*cj0*x6501)));
evalcond[5]=(((r12*x6493))+(((-1.0)*sj0*x6501))+(((-1.0)*x6499*x6500))+((sj0*x6495))+((r11*x6504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6505=((1.0)*gconst125);
CheckValue<IkReal> x6506 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6505))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6506.valid){
continue;
}
CheckValue<IkReal> x6507=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6505)))),-1);
if(!x6507.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6506.value)+(((1.5707963267949)*(x6507.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6508=IKsin(j4);
IkReal x6509=IKcos(j4);
IkReal x6510=(sj1*sj2);
IkReal x6511=(gconst125*r20);
IkReal x6512=(gconst124*r01);
IkReal x6513=(gconst125*r00);
IkReal x6514=(gconst125*r10);
IkReal x6515=((1.0)*x6509);
IkReal x6516=((1.0)*cj1*cj2);
IkReal x6517=((1.0)*x6508);
IkReal x6518=(gconst124*x6508);
IkReal x6519=(gconst124*x6509);
evalcond[0]=((((-1.0)*r22*x6515))+((r21*x6518))+(((-1.0)*x6511*x6517)));
evalcond[1]=(cj0+((r11*x6518))+(((-1.0)*x6514*x6517))+(((-1.0)*r12*x6515)));
evalcond[2]=((((-1.0)*r02*x6515))+((x6508*x6512))+(((-1.0)*sj0))+(((-1.0)*x6513*x6517)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6508))+((r21*x6519))+(((-1.0)*x6511*x6515)));
evalcond[4]=((((-1.0)*cj0*x6516))+((x6509*x6512))+((r02*x6508))+((cj0*x6510))+(((-1.0)*x6513*x6515)));
evalcond[5]=(((r12*x6508))+((r11*x6519))+(((-1.0)*x6514*x6515))+((sj0*x6510))+(((-1.0)*sj0*x6516)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6520=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6520;
j4eval[1]=IKsign(x6520);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6521=((1.0)*cj5);
IkReal x6522=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6521)));
j4eval[0]=x6522;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6521)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6522);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6523=cj5*cj5;
IkReal x6524=r11*r11;
IkReal x6525=(cj5*r10);
IkReal x6526=(r11*sj5);
IkReal x6527=((((2.0)*x6525*x6526))+(((-1.0)*x6523*(r10*r10)))+(((-1.0)*x6524))+(((-1.0)*(r12*r12)))+((x6523*x6524)));
j4eval[0]=x6527;
j4eval[1]=IKsign(x6527);
j4eval[2]=((IKabs(r12))+(IKabs((x6526+(((-1.0)*x6525))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6528=cj5*cj5;
IkReal x6529=r11*r11;
IkReal x6530=(cj5*r10);
IkReal x6531=(r11*sj5);
CheckValue<IkReal> x6532=IKPowWithIntegerCheck(IKsign(((((2.0)*x6530*x6531))+((x6528*x6529))+(((-1.0)*x6528*(r10*r10)))+(((-1.0)*x6529))+(((-1.0)*(r12*r12))))),-1);
if(!x6532.valid){
continue;
}
CheckValue<IkReal> x6533 = IKatan2WithCheck(IkReal((x6531+(((-1.0)*x6530)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6533.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6532.value)))+(x6533.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6534=IKcos(j4);
IkReal x6535=IKsin(j4);
IkReal x6536=(cj5*r00);
IkReal x6537=(cj5*r10);
IkReal x6538=(r21*sj5);
IkReal x6539=(cj5*r20);
IkReal x6540=((1.0)*x6534);
IkReal x6541=((1.0)*x6535);
IkReal x6542=(sj5*x6535);
IkReal x6543=(sj5*x6534);
evalcond[0]=((((-1.0)*x6537*x6540))+((r11*x6543))+((r12*x6535)));
evalcond[1]=((((-1.0)*r22*x6540))+(((-1.0)*x6539*x6541))+((x6535*x6538)));
evalcond[2]=((((-1.0)*x6536*x6541))+(((-1.0)*r02*x6540))+((r01*x6542)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6540))+(((-1.0)*x6537*x6541))+((r11*x6542)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6535))+(((-1.0)*x6539*x6540))+((x6534*x6538)));
evalcond[5]=(((r02*x6535))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6536*x6540))+((r01*x6543)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6544=((1.0)*cj5);
CheckValue<IkReal> x6545 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6545.valid){
continue;
}
CheckValue<IkReal> x6546=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6544)))),-1);
if(!x6546.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6545.value)+(((1.5707963267949)*(x6546.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6547=IKcos(j4);
IkReal x6548=IKsin(j4);
IkReal x6549=(cj5*r00);
IkReal x6550=(cj5*r10);
IkReal x6551=(r21*sj5);
IkReal x6552=(cj5*r20);
IkReal x6553=((1.0)*x6547);
IkReal x6554=((1.0)*x6548);
IkReal x6555=(sj5*x6548);
IkReal x6556=(sj5*x6547);
evalcond[0]=((((-1.0)*x6550*x6553))+((r11*x6556))+((r12*x6548)));
evalcond[1]=((((-1.0)*x6552*x6554))+(((-1.0)*r22*x6553))+((x6548*x6551)));
evalcond[2]=((((-1.0)*r02*x6553))+(((-1.0)*x6549*x6554))+((r01*x6555)));
evalcond[3]=((1.0)+(((-1.0)*x6550*x6554))+(((-1.0)*r12*x6553))+((r11*x6555)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6552*x6553))+((cj1*sj2))+((x6547*x6551))+((r22*x6548)));
evalcond[5]=(((r02*x6548))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6549*x6553))+((r01*x6556)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6557=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6557.valid){
continue;
}
CheckValue<IkReal> x6558 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6558.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6557.value)))+(x6558.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6559=IKcos(j4);
IkReal x6560=IKsin(j4);
IkReal x6561=(cj5*r00);
IkReal x6562=(cj5*r10);
IkReal x6563=(r21*sj5);
IkReal x6564=(cj5*r20);
IkReal x6565=((1.0)*x6559);
IkReal x6566=((1.0)*x6560);
IkReal x6567=(sj5*x6560);
IkReal x6568=(sj5*x6559);
evalcond[0]=(((r12*x6560))+((r11*x6568))+(((-1.0)*x6562*x6565)));
evalcond[1]=(((x6560*x6563))+(((-1.0)*r22*x6565))+(((-1.0)*x6564*x6566)));
evalcond[2]=((((-1.0)*x6561*x6566))+(((-1.0)*r02*x6565))+((r01*x6567)));
evalcond[3]=((1.0)+((r11*x6567))+(((-1.0)*r12*x6565))+(((-1.0)*x6562*x6566)));
evalcond[4]=(((cj2*sj1))+((r22*x6560))+((cj1*sj2))+((x6559*x6563))+(((-1.0)*x6564*x6565)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6561*x6565))+((r02*x6560))+((r01*x6568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6569=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6569;
j4eval[1]=IKsign(x6569);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6570=((1.0)*cj5);
IkReal x6571=((((-1.0)*r21*x6570))+(((-1.0)*r20*sj5)));
j4eval[0]=x6571;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x6570))))));
j4eval[2]=IKsign(x6571);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6572=cj5*cj5;
IkReal x6573=r11*r11;
IkReal x6574=(r11*sj5);
IkReal x6575=(cj5*r10);
IkReal x6576=((r12*r12)+(((-1.0)*x6572*x6573))+(((-2.0)*x6574*x6575))+((x6572*(r10*r10)))+x6573);
j4eval[0]=x6576;
j4eval[1]=IKsign(x6576);
j4eval[2]=((IKabs(r12))+(IKabs((x6574+(((-1.0)*x6575))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6577=cj5*cj5;
IkReal x6578=r11*r11;
IkReal x6579=(cj5*r10);
IkReal x6580=(r11*sj5);
CheckValue<IkReal> x6581=IKPowWithIntegerCheck(IKsign(((r12*r12)+x6578+(((-2.0)*x6579*x6580))+(((-1.0)*x6577*x6578))+((x6577*(r10*r10))))),-1);
if(!x6581.valid){
continue;
}
CheckValue<IkReal> x6582 = IKatan2WithCheck(IkReal((x6580+(((-1.0)*x6579)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6581.value)))+(x6582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6583=IKcos(j4);
IkReal x6584=IKsin(j4);
IkReal x6585=(cj5*r00);
IkReal x6586=(cj5*r10);
IkReal x6587=(r21*sj5);
IkReal x6588=(cj5*r20);
IkReal x6589=((1.0)*x6583);
IkReal x6590=((1.0)*x6584);
IkReal x6591=(sj5*x6584);
IkReal x6592=(sj5*x6583);
evalcond[0]=(((r11*x6592))+(((-1.0)*x6586*x6589))+((r12*x6584)));
evalcond[1]=((((-1.0)*r22*x6589))+(((-1.0)*x6588*x6590))+((x6584*x6587)));
evalcond[2]=((((-1.0)*r02*x6589))+((r01*x6591))+(((-1.0)*x6585*x6590)));
evalcond[3]=((-1.0)+((r11*x6591))+(((-1.0)*r12*x6589))+(((-1.0)*x6586*x6590)));
evalcond[4]=(((cj2*sj1))+((r22*x6584))+((cj1*sj2))+((x6583*x6587))+(((-1.0)*x6588*x6589)));
evalcond[5]=(((r02*x6584))+(((-1.0)*sj1*sj2))+((r01*x6592))+((cj1*cj2))+(((-1.0)*x6585*x6589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6593=((1.0)*cj5);
CheckValue<IkReal> x6594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6593))+(((-1.0)*r20*sj5)))),-1);
if(!x6594.valid){
continue;
}
CheckValue<IkReal> x6595 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x6593))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6594.value)))+(x6595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6596=IKcos(j4);
IkReal x6597=IKsin(j4);
IkReal x6598=(cj5*r00);
IkReal x6599=(cj5*r10);
IkReal x6600=(r21*sj5);
IkReal x6601=(cj5*r20);
IkReal x6602=((1.0)*x6596);
IkReal x6603=((1.0)*x6597);
IkReal x6604=(sj5*x6597);
IkReal x6605=(sj5*x6596);
evalcond[0]=(((r12*x6597))+(((-1.0)*x6599*x6602))+((r11*x6605)));
evalcond[1]=(((x6597*x6600))+(((-1.0)*x6601*x6603))+(((-1.0)*r22*x6602)));
evalcond[2]=(((r01*x6604))+(((-1.0)*x6598*x6603))+(((-1.0)*r02*x6602)));
evalcond[3]=((-1.0)+(((-1.0)*x6599*x6603))+(((-1.0)*r12*x6602))+((r11*x6604)));
evalcond[4]=(((cj2*sj1))+((r22*x6597))+(((-1.0)*x6601*x6602))+((cj1*sj2))+((x6596*x6600)));
evalcond[5]=(((r02*x6597))+((r01*x6605))+(((-1.0)*sj1*sj2))+(((-1.0)*x6598*x6602))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6606 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6606.valid){
continue;
}
CheckValue<IkReal> x6607=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6606.value)+(((1.5707963267949)*(x6607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6608=IKcos(j4);
IkReal x6609=IKsin(j4);
IkReal x6610=(cj5*r00);
IkReal x6611=(cj5*r10);
IkReal x6612=(r21*sj5);
IkReal x6613=(cj5*r20);
IkReal x6614=((1.0)*x6608);
IkReal x6615=((1.0)*x6609);
IkReal x6616=(sj5*x6609);
IkReal x6617=(sj5*x6608);
evalcond[0]=((((-1.0)*x6611*x6614))+((r11*x6617))+((r12*x6609)));
evalcond[1]=((((-1.0)*x6613*x6615))+((x6609*x6612))+(((-1.0)*r22*x6614)));
evalcond[2]=(((r01*x6616))+(((-1.0)*x6610*x6615))+(((-1.0)*r02*x6614)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6614))+(((-1.0)*x6611*x6615))+((r11*x6616)));
evalcond[4]=((((-1.0)*x6613*x6614))+((cj2*sj1))+((r22*x6609))+((cj1*sj2))+((x6608*x6612)));
evalcond[5]=(((r01*x6617))+(((-1.0)*sj1*sj2))+(((-1.0)*x6610*x6614))+((r02*x6609))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6618=((-1.0)*r00);
IkReal x6620 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6620)==0){
continue;
}
IkReal x6619=pow(x6620,-0.5);
CheckValue<IkReal> x6621 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6618),IKFAST_ATAN2_MAGTHRESH);
if(!x6621.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6621.value));
IkReal gconst127=(r01*x6619);
IkReal gconst128=(x6618*x6619);
CheckValue<IkReal> x6622 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6622.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6622.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6623=((-1.0)*r00);
IkReal x6624=x6619;
CheckValue<IkReal> x6626 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6623),IKFAST_ATAN2_MAGTHRESH);
if(!x6626.valid){
continue;
}
IkReal x6625=((-1.0)*(x6626.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6625;
IkReal gconst126=x6625;
IkReal gconst127=(r01*x6624);
IkReal gconst128=(x6623*x6624);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6627=((1.0)*sj0);
IkReal x6628=((1.0)*gconst127);
CheckValue<IkReal> x6629=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6628)))),-1);
if(!x6629.valid){
continue;
}
CheckValue<IkReal> x6630 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6627))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6627))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6628)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6629.value)))+(x6630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6631=IKsin(j4);
IkReal x6632=IKcos(j4);
IkReal x6633=(gconst127*r01);
IkReal x6634=(sj1*sj2);
IkReal x6635=(gconst128*r10);
IkReal x6636=(gconst128*r00);
IkReal x6637=(gconst128*r20);
IkReal x6638=((1.0)*x6632);
IkReal x6639=((1.0)*cj1*cj2);
IkReal x6640=((1.0)*x6631);
IkReal x6641=(gconst127*x6632);
IkReal x6642=(gconst127*x6631);
evalcond[0]=((((-1.0)*r22*x6638))+((r21*x6642))+(((-1.0)*x6637*x6640)));
evalcond[1]=(cj0+((r11*x6642))+(((-1.0)*r12*x6638))+(((-1.0)*x6635*x6640)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6636*x6640))+(((-1.0)*r02*x6638))+((x6631*x6633)));
evalcond[3]=(((cj2*sj1))+((r21*x6641))+((cj1*sj2))+(((-1.0)*x6637*x6638))+((r22*x6631)));
evalcond[4]=((((-1.0)*x6636*x6638))+(((-1.0)*cj0*x6639))+((x6632*x6633))+((cj0*x6634))+((r02*x6631)));
evalcond[5]=(((r11*x6641))+((r12*x6631))+(((-1.0)*sj0*x6639))+(((-1.0)*x6635*x6638))+((sj0*x6634)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6643=((1.0)*gconst128);
CheckValue<IkReal> x6644 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x6643)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6644.valid){
continue;
}
CheckValue<IkReal> x6645=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6643))+(((-1.0)*gconst127*r10)))),-1);
if(!x6645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6644.value)+(((1.5707963267949)*(x6645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6646=IKsin(j4);
IkReal x6647=IKcos(j4);
IkReal x6648=(gconst127*r01);
IkReal x6649=(sj1*sj2);
IkReal x6650=(gconst128*r10);
IkReal x6651=(gconst128*r00);
IkReal x6652=(gconst128*r20);
IkReal x6653=((1.0)*x6647);
IkReal x6654=((1.0)*cj1*cj2);
IkReal x6655=((1.0)*x6646);
IkReal x6656=(gconst127*x6647);
IkReal x6657=(gconst127*x6646);
evalcond[0]=((((-1.0)*r22*x6653))+(((-1.0)*x6652*x6655))+((r21*x6657)));
evalcond[1]=(cj0+((r11*x6657))+(((-1.0)*r12*x6653))+(((-1.0)*x6650*x6655)));
evalcond[2]=((((-1.0)*x6651*x6655))+(((-1.0)*sj0))+((x6646*x6648))+(((-1.0)*r02*x6653)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6652*x6653))+((cj1*sj2))+((r22*x6646))+((r21*x6656)));
evalcond[4]=((((-1.0)*x6651*x6653))+((x6647*x6648))+(((-1.0)*cj0*x6654))+((cj0*x6649))+((r02*x6646)));
evalcond[5]=(((r11*x6656))+(((-1.0)*sj0*x6654))+(((-1.0)*x6650*x6653))+((r12*x6646))+((sj0*x6649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6658=((-1.0)*r01);
IkReal x6660 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6660)==0){
continue;
}
IkReal x6659=pow(x6660,-0.5);
CheckValue<IkReal> x6661 = IKatan2WithCheck(IkReal(x6658),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6661.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6661.value))));
IkReal gconst130=(x6658*x6659);
IkReal gconst131=((1.0)*r00*x6659);
CheckValue<IkReal> x6662 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6662.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6662.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6663=((-1.0)*r01);
CheckValue<IkReal> x6666 = IKatan2WithCheck(IkReal(x6663),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6666.valid){
continue;
}
IkReal x6664=((1.0)*(x6666.value));
IkReal x6665=x6659;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6664)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6664)));
IkReal gconst130=(x6663*x6665);
IkReal gconst131=((1.0)*r00*x6665);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6667=((-1.0)*r01);
CheckValue<IkReal> x6670 = IKatan2WithCheck(IkReal(x6667),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6670.valid){
continue;
}
IkReal x6668=((1.0)*(x6670.value));
IkReal x6669=x6659;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6668)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6668)));
IkReal gconst130=(x6667*x6669);
IkReal gconst131=((1.0)*r00*x6669);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6671=((-1.0)*r01);
CheckValue<IkReal> x6674 = IKatan2WithCheck(IkReal(x6671),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6674.valid){
continue;
}
IkReal x6672=((1.0)*(x6674.value));
IkReal x6673=x6659;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6672)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6672)));
IkReal gconst130=(x6671*x6673);
IkReal gconst131=((1.0)*r00*x6673);
IkReal x6675=r02*r02;
IkReal x6676=(r12*sj0);
IkReal x6677=((1.0)*cj0);
IkReal x6678=x6659;
j4eval[0]=((IKabs(((((-1.0)*r02*x6677))+(((-1.0)*x6676)))))+(IKabs((((cj0*x6675*x6678))+((r02*x6676*x6678))+(((-1.0)*x6677*x6678))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6679=((1.0)*sj0);
IkReal x6680=((1.0)*gconst130);
CheckValue<IkReal> x6681 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6679))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst130*r11*x6679))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6680))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6681.valid){
continue;
}
CheckValue<IkReal> x6682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6680))+(((-1.0)*gconst131*r21)))),-1);
if(!x6682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6681.value)+(((1.5707963267949)*(x6682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6683=IKsin(j4);
IkReal x6684=IKcos(j4);
IkReal x6685=(gconst131*r10);
IkReal x6686=(sj1*sj2);
IkReal x6687=(gconst131*r20);
IkReal x6688=(gconst131*r00);
IkReal x6689=((1.0)*x6684);
IkReal x6690=((1.0)*cj1*cj2);
IkReal x6691=(gconst130*x6683);
IkReal x6692=((1.0)*x6683);
IkReal x6693=(gconst130*x6684);
evalcond[0]=((((-1.0)*x6687*x6692))+((r21*x6691))+(((-1.0)*r22*x6689)));
evalcond[1]=((((-1.0)*x6685*x6692))+((r11*x6691))+cj0+(((-1.0)*r12*x6689)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6689))+(((-1.0)*x6688*x6692))+((r01*x6691)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6683))+((r21*x6693))+(((-1.0)*x6687*x6689)));
evalcond[4]=(((r02*x6683))+(((-1.0)*x6688*x6689))+(((-1.0)*cj0*x6690))+((r01*x6693))+((cj0*x6686)));
evalcond[5]=(((r12*x6683))+((r11*x6693))+((sj0*x6686))+(((-1.0)*sj0*x6690))+(((-1.0)*x6685*x6689)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6694=((1.0)*gconst131);
CheckValue<IkReal> x6695=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r10))+(((-1.0)*r11*x6694)))),-1);
if(!x6695.valid){
continue;
}
CheckValue<IkReal> x6696 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6694))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6695.value)))+(x6696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6697=IKsin(j4);
IkReal x6698=IKcos(j4);
IkReal x6699=(gconst131*r10);
IkReal x6700=(sj1*sj2);
IkReal x6701=(gconst131*r20);
IkReal x6702=(gconst131*r00);
IkReal x6703=((1.0)*x6698);
IkReal x6704=((1.0)*cj1*cj2);
IkReal x6705=(gconst130*x6697);
IkReal x6706=((1.0)*x6697);
IkReal x6707=(gconst130*x6698);
evalcond[0]=(((r21*x6705))+(((-1.0)*r22*x6703))+(((-1.0)*x6701*x6706)));
evalcond[1]=(cj0+(((-1.0)*x6699*x6706))+((r11*x6705))+(((-1.0)*r12*x6703)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6703))+(((-1.0)*x6702*x6706))+((r01*x6705)));
evalcond[3]=(((cj2*sj1))+((r21*x6707))+((r22*x6697))+((cj1*sj2))+(((-1.0)*x6701*x6703)));
evalcond[4]=((((-1.0)*cj0*x6704))+(((-1.0)*x6702*x6703))+((r01*x6707))+((cj0*x6700))+((r02*x6697)));
evalcond[5]=(((r12*x6697))+(((-1.0)*x6699*x6703))+((sj0*x6700))+((r11*x6707))+(((-1.0)*sj0*x6704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6708=((1.0)*gconst131);
CheckValue<IkReal> x6709=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6708))+(((-1.0)*gconst130*r00)))),-1);
if(!x6709.valid){
continue;
}
CheckValue<IkReal> x6710 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6708)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6709.value)))+(x6710.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6711=IKsin(j4);
IkReal x6712=IKcos(j4);
IkReal x6713=(gconst131*r10);
IkReal x6714=(sj1*sj2);
IkReal x6715=(gconst131*r20);
IkReal x6716=(gconst131*r00);
IkReal x6717=((1.0)*x6712);
IkReal x6718=((1.0)*cj1*cj2);
IkReal x6719=(gconst130*x6711);
IkReal x6720=((1.0)*x6711);
IkReal x6721=(gconst130*x6712);
evalcond[0]=((((-1.0)*x6715*x6720))+((r21*x6719))+(((-1.0)*r22*x6717)));
evalcond[1]=(cj0+((r11*x6719))+(((-1.0)*x6713*x6720))+(((-1.0)*r12*x6717)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6717))+(((-1.0)*x6716*x6720))+((r01*x6719)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6711))+(((-1.0)*x6715*x6717))+((r21*x6721)));
evalcond[4]=(((cj0*x6714))+((r02*x6711))+(((-1.0)*cj0*x6718))+(((-1.0)*x6716*x6717))+((r01*x6721)));
evalcond[5]=((((-1.0)*sj0*x6718))+((r11*x6721))+(((-1.0)*x6713*x6717))+((sj0*x6714))+((r12*x6711)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6722=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6722;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6723=((1.0)*cj5);
IkReal x6724=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6723)));
j4eval[0]=x6724;
j4eval[1]=((IKabs(((((-1.0)*r20*x6723))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6725=cj5*cj5;
IkReal x6726=r01*r01;
IkReal x6727=(cj5*r00);
IkReal x6728=(r01*sj5);
IkReal x6729=((((-1.0)*x6725*x6726))+((x6725*(r00*r00)))+x6726+(((-2.0)*x6727*x6728))+(r02*r02));
j4eval[0]=x6729;
j4eval[1]=IKsign(x6729);
j4eval[2]=((IKabs(((((-1.0)*x6727))+x6728)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6730=cj5*cj5;
IkReal x6731=r01*r01;
IkReal x6732=(r01*sj5);
IkReal x6733=(cj5*r00);
CheckValue<IkReal> x6734=IKPowWithIntegerCheck(IKsign(((((-2.0)*x6732*x6733))+((x6730*(r00*r00)))+x6731+(r02*r02)+(((-1.0)*x6730*x6731)))),-1);
if(!x6734.valid){
continue;
}
CheckValue<IkReal> x6735 = IKatan2WithCheck(IkReal(((((-1.0)*x6733))+x6732)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6734.value)))+(x6735.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6736=IKcos(j4);
IkReal x6737=IKsin(j4);
IkReal x6738=(cj5*r00);
IkReal x6739=(cj5*r10);
IkReal x6740=(r21*sj5);
IkReal x6741=(cj5*r20);
IkReal x6742=((1.0)*x6736);
IkReal x6743=((1.0)*x6737);
IkReal x6744=(sj5*x6737);
IkReal x6745=(sj5*x6736);
evalcond[0]=((((-1.0)*x6738*x6742))+((r01*x6745))+((r02*x6737)));
evalcond[1]=((((-1.0)*r22*x6742))+((x6737*x6740))+(((-1.0)*x6741*x6743)));
evalcond[2]=((((-1.0)*r12*x6742))+((r11*x6744))+(((-1.0)*x6739*x6743)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6742))+(((-1.0)*x6738*x6743))+((r01*x6744)));
evalcond[4]=(((r22*x6737))+((cj2*sj1))+((cj1*sj2))+((x6736*x6740))+(((-1.0)*x6741*x6742)));
evalcond[5]=(((r11*x6745))+((r12*x6737))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6739*x6742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6746=((1.0)*cj5);
CheckValue<IkReal> x6747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6746))+(((-1.0)*r10*sj5)))),-1);
if(!x6747.valid){
continue;
}
CheckValue<IkReal> x6748 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6747.value)))+(x6748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6749=IKcos(j4);
IkReal x6750=IKsin(j4);
IkReal x6751=(cj5*r00);
IkReal x6752=(cj5*r10);
IkReal x6753=(r21*sj5);
IkReal x6754=(cj5*r20);
IkReal x6755=((1.0)*x6749);
IkReal x6756=((1.0)*x6750);
IkReal x6757=(sj5*x6750);
IkReal x6758=(sj5*x6749);
evalcond[0]=(((r01*x6758))+(((-1.0)*x6751*x6755))+((r02*x6750)));
evalcond[1]=((((-1.0)*r22*x6755))+((x6750*x6753))+(((-1.0)*x6754*x6756)));
evalcond[2]=(((r11*x6757))+(((-1.0)*r12*x6755))+(((-1.0)*x6752*x6756)));
evalcond[3]=((-1.0)+((r01*x6757))+(((-1.0)*x6751*x6756))+(((-1.0)*r02*x6755)));
evalcond[4]=(((cj2*sj1))+((r22*x6750))+((cj1*sj2))+((x6749*x6753))+(((-1.0)*x6754*x6755)));
evalcond[5]=(((r12*x6750))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6758))+(((-1.0)*x6752*x6755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6759=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6759.valid){
continue;
}
CheckValue<IkReal> x6760 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6759.value)))+(x6760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6761=IKcos(j4);
IkReal x6762=IKsin(j4);
IkReal x6763=(cj5*r00);
IkReal x6764=(cj5*r10);
IkReal x6765=(r21*sj5);
IkReal x6766=(cj5*r20);
IkReal x6767=((1.0)*x6761);
IkReal x6768=((1.0)*x6762);
IkReal x6769=(sj5*x6762);
IkReal x6770=(sj5*x6761);
evalcond[0]=(((r02*x6762))+((r01*x6770))+(((-1.0)*x6763*x6767)));
evalcond[1]=((((-1.0)*x6766*x6768))+(((-1.0)*r22*x6767))+((x6762*x6765)));
evalcond[2]=(((r11*x6769))+(((-1.0)*x6764*x6768))+(((-1.0)*r12*x6767)));
evalcond[3]=((-1.0)+((r01*x6769))+(((-1.0)*r02*x6767))+(((-1.0)*x6763*x6768)));
evalcond[4]=(((cj2*sj1))+((r22*x6762))+(((-1.0)*x6766*x6767))+((cj1*sj2))+((x6761*x6765)));
evalcond[5]=(((r11*x6770))+((r12*x6762))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6764*x6767)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6771=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6771;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6771);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6772=((1.0)*cj5);
IkReal x6773=((((-1.0)*r21*x6772))+(((-1.0)*r20*sj5)));
j4eval[0]=x6773;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x6772)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6774=(r01*sj5);
IkReal x6775=(cj1*sj2);
IkReal x6776=(cj2*sj1);
IkReal x6777=((1.0)*r02);
IkReal x6778=((1.0)*cj5*r00);
IkReal x6779=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6779;
j4eval[1]=((IKabs(((((-1.0)*x6776*x6777))+(((-1.0)*x6775*x6777)))))+(IKabs(((((-1.0)*x6776*x6778))+(((-1.0)*x6775*x6778))+((x6774*x6775))+((x6774*x6776))))));
j4eval[2]=IKsign(x6779);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6780=(r01*sj5);
IkReal x6781=(cj1*sj2);
IkReal x6782=(cj2*sj1);
IkReal x6783=((1.0)*r02);
IkReal x6784=((1.0)*cj5*r00);
CheckValue<IkReal> x6785=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6785.valid){
continue;
}
CheckValue<IkReal> x6786 = IKatan2WithCheck(IkReal(((((-1.0)*x6782*x6784))+(((-1.0)*x6781*x6784))+((x6780*x6781))+((x6780*x6782)))),IkReal(((((-1.0)*x6782*x6783))+(((-1.0)*x6781*x6783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6785.value)))+(x6786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6787=IKcos(j4);
IkReal x6788=IKsin(j4);
IkReal x6789=(cj5*r00);
IkReal x6790=(cj5*r10);
IkReal x6791=(r21*sj5);
IkReal x6792=(cj5*r20);
IkReal x6793=((1.0)*x6787);
IkReal x6794=((1.0)*x6788);
IkReal x6795=(sj5*x6788);
IkReal x6796=(sj5*x6787);
evalcond[0]=((((-1.0)*x6789*x6793))+((r01*x6796))+((r02*x6788)));
evalcond[1]=((((-1.0)*x6792*x6794))+(((-1.0)*r22*x6793))+((x6788*x6791)));
evalcond[2]=(((r11*x6795))+(((-1.0)*x6790*x6794))+(((-1.0)*r12*x6793)));
evalcond[3]=((1.0)+(((-1.0)*x6789*x6794))+((r01*x6795))+(((-1.0)*r02*x6793)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6792*x6793))+((cj1*sj2))+((x6787*x6791))+((r22*x6788)));
evalcond[5]=(((r12*x6788))+(((-1.0)*sj1*sj2))+((r11*x6796))+(((-1.0)*x6790*x6793))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6797=((1.0)*cj5);
CheckValue<IkReal> x6798=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6797))+(((-1.0)*r20*sj5)))),-1);
if(!x6798.valid){
continue;
}
CheckValue<IkReal> x6799 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6797))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6799.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6798.value)))+(x6799.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6800=IKcos(j4);
IkReal x6801=IKsin(j4);
IkReal x6802=(cj5*r00);
IkReal x6803=(cj5*r10);
IkReal x6804=(r21*sj5);
IkReal x6805=(cj5*r20);
IkReal x6806=((1.0)*x6800);
IkReal x6807=((1.0)*x6801);
IkReal x6808=(sj5*x6801);
IkReal x6809=(sj5*x6800);
evalcond[0]=(((r01*x6809))+(((-1.0)*x6802*x6806))+((r02*x6801)));
evalcond[1]=(((x6801*x6804))+(((-1.0)*r22*x6806))+(((-1.0)*x6805*x6807)));
evalcond[2]=((((-1.0)*x6803*x6807))+(((-1.0)*r12*x6806))+((r11*x6808)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6806))+((r01*x6808))+(((-1.0)*x6802*x6807)));
evalcond[4]=(((cj2*sj1))+((r22*x6801))+((x6800*x6804))+((cj1*sj2))+(((-1.0)*x6805*x6806)));
evalcond[5]=((((-1.0)*x6803*x6806))+(((-1.0)*sj1*sj2))+((r11*x6809))+((r12*x6801))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6810 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6810.valid){
continue;
}
CheckValue<IkReal> x6811=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6811.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6810.value)+(((1.5707963267949)*(x6811.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6812=IKcos(j4);
IkReal x6813=IKsin(j4);
IkReal x6814=(cj5*r00);
IkReal x6815=(cj5*r10);
IkReal x6816=(r21*sj5);
IkReal x6817=(cj5*r20);
IkReal x6818=((1.0)*x6812);
IkReal x6819=((1.0)*x6813);
IkReal x6820=(sj5*x6813);
IkReal x6821=(sj5*x6812);
evalcond[0]=(((r01*x6821))+((r02*x6813))+(((-1.0)*x6814*x6818)));
evalcond[1]=((((-1.0)*x6817*x6819))+((x6813*x6816))+(((-1.0)*r22*x6818)));
evalcond[2]=(((r11*x6820))+(((-1.0)*r12*x6818))+(((-1.0)*x6815*x6819)));
evalcond[3]=((1.0)+((r01*x6820))+(((-1.0)*r02*x6818))+(((-1.0)*x6814*x6819)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6817*x6818))+((cj1*sj2))+((x6812*x6816))+((r22*x6813)));
evalcond[5]=(((r12*x6813))+(((-1.0)*sj1*sj2))+((r11*x6821))+(((-1.0)*x6815*x6818))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6822=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6822);
rxp1_1=(px*r21);
rxp1_2=(r11*x6822);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6823=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6823);
rxp1_1=(px*r21);
rxp1_2=(r11*x6823);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6824=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6824);
rxp1_1=(px*r21);
rxp1_2=(r11*x6824);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6827=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6827.valid){
continue;
}
IkReal x6825=x6827.value;
IkReal x6826=(sj0*x6825);
cj4array[0]=(((cj1*cj2*x6826))+(((-1.0)*sj1*sj2*x6826)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6828=IKsin(j4);
IkReal x6829=IKcos(j4);
IkReal x6830=(r21*sj5);
IkReal x6831=((1.0)*cj5*r20);
evalcond[0]=(r02*x6828);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6829)));
evalcond[2]=((((-1.0)*x6828*x6831))+((x6828*x6830)));
evalcond[3]=(((r11*sj5*x6828))+(((-1.0)*cj5*r10*x6828)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6829*x6830))+(((-1.0)*x6829*x6831)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6834=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6834.valid){
continue;
}
IkReal x6832=x6834.value;
IkReal x6833=((1.0)*x6832);
cj4array[0]=((((-1.0)*cj2*sj1*x6833))+(((-1.0)*cj1*sj2*x6833)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6835=IKsin(j4);
IkReal x6836=IKcos(j4);
IkReal x6837=((1.0)*sj0);
IkReal x6838=((1.0)*cj5);
IkReal x6839=(sj5*x6835);
evalcond[0]=(r02*x6835);
evalcond[1]=((((-1.0)*r02*x6836))+(((-1.0)*x6837)));
evalcond[2]=(((r21*x6839))+(((-1.0)*r20*x6835*x6838)));
evalcond[3]=(((r11*x6839))+(((-1.0)*r10*x6835*x6838)));
evalcond[4]=((((-1.0)*cj1*cj2*x6837))+((sj0*sj1*sj2))+(((-1.0)*r10*x6836*x6838))+((r11*sj5*x6836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6840=IKPowWithIntegerCheck(r02,-1);
if(!x6840.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6840.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6841=IKsin(j4);
IkReal x6842=IKcos(j4);
IkReal x6843=(r21*sj5);
IkReal x6844=((1.0)*cj5);
IkReal x6845=(r11*sj5);
evalcond[0]=(r02*x6841);
evalcond[1]=((((-1.0)*r20*x6841*x6844))+((x6841*x6843)));
evalcond[2]=((((-1.0)*r10*x6841*x6844))+((x6841*x6845)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x6842*x6844))+((x6842*x6843)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r10*x6842*x6844))+((x6842*x6845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6846=((1.0)*sj0);
IkReal x6847=((1.0)*cj0);
CheckValue<IkReal> x6848=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6848.valid){
continue;
}
CheckValue<IkReal> x6849 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6846))+(((-1.0)*r02*x6847)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6847))+(((-1.0)*r11*sj5*x6846)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6849.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6848.value)))+(x6849.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6850=IKsin(j4);
IkReal x6851=IKcos(j4);
IkReal x6852=(cj5*r00);
IkReal x6853=(cj5*r10);
IkReal x6854=(r21*sj5);
IkReal x6855=(sj1*sj2);
IkReal x6856=(cj5*r20);
IkReal x6857=((1.0)*x6851);
IkReal x6858=((1.0)*cj1*cj2);
IkReal x6859=((1.0)*x6850);
IkReal x6860=(sj5*x6850);
IkReal x6861=(sj5*x6851);
evalcond[0]=((((-1.0)*x6856*x6859))+(((-1.0)*r22*x6857))+((x6850*x6854)));
evalcond[1]=(((r11*x6860))+cj0+(((-1.0)*r12*x6857))+(((-1.0)*x6853*x6859)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6857))+(((-1.0)*x6852*x6859))+((r01*x6860)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6856*x6857))+((r22*x6850))+((cj1*sj2))+((x6851*x6854)));
evalcond[4]=(((r02*x6850))+(((-1.0)*cj0*x6858))+(((-1.0)*x6852*x6857))+((cj0*x6855))+((r01*x6861)));
evalcond[5]=(((sj0*x6855))+((r11*x6861))+((r12*x6850))+(((-1.0)*x6853*x6857))+(((-1.0)*sj0*x6858)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6862=((1.0)*cj5);
CheckValue<IkReal> x6863=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6862)))),-1);
if(!x6863.valid){
continue;
}
CheckValue<IkReal> x6864 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6862))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6864.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6863.value)))+(x6864.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6865=IKsin(j4);
IkReal x6866=IKcos(j4);
IkReal x6867=(cj5*r00);
IkReal x6868=(cj5*r10);
IkReal x6869=(r21*sj5);
IkReal x6870=(sj1*sj2);
IkReal x6871=(cj5*r20);
IkReal x6872=((1.0)*x6866);
IkReal x6873=((1.0)*cj1*cj2);
IkReal x6874=((1.0)*x6865);
IkReal x6875=(sj5*x6865);
IkReal x6876=(sj5*x6866);
evalcond[0]=((((-1.0)*x6871*x6874))+((x6865*x6869))+(((-1.0)*r22*x6872)));
evalcond[1]=((((-1.0)*x6868*x6874))+((r11*x6875))+cj0+(((-1.0)*r12*x6872)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6872))+(((-1.0)*x6867*x6874))+((r01*x6875)));
evalcond[3]=(((cj2*sj1))+((x6866*x6869))+((r22*x6865))+(((-1.0)*x6871*x6872))+((cj1*sj2)));
evalcond[4]=(((r02*x6865))+((cj0*x6870))+(((-1.0)*x6867*x6872))+((r01*x6876))+(((-1.0)*cj0*x6873)));
evalcond[5]=((((-1.0)*x6868*x6872))+((sj0*x6870))+((r11*x6876))+((r12*x6865))+(((-1.0)*sj0*x6873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6877=((1.0)*cj5);
CheckValue<IkReal> x6878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6877))+(((-1.0)*r00*sj5)))),-1);
if(!x6878.valid){
continue;
}
CheckValue<IkReal> x6879 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6877))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6878.value)))+(x6879.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6880=IKsin(j4);
IkReal x6881=IKcos(j4);
IkReal x6882=(cj5*r00);
IkReal x6883=(cj5*r10);
IkReal x6884=(r21*sj5);
IkReal x6885=(sj1*sj2);
IkReal x6886=(cj5*r20);
IkReal x6887=((1.0)*x6881);
IkReal x6888=((1.0)*cj1*cj2);
IkReal x6889=((1.0)*x6880);
IkReal x6890=(sj5*x6880);
IkReal x6891=(sj5*x6881);
evalcond[0]=((((-1.0)*x6886*x6889))+((x6880*x6884))+(((-1.0)*r22*x6887)));
evalcond[1]=(cj0+(((-1.0)*x6883*x6889))+(((-1.0)*r12*x6887))+((r11*x6890)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6887))+(((-1.0)*x6882*x6889))+((r01*x6890)));
evalcond[3]=((((-1.0)*x6886*x6887))+((cj2*sj1))+((cj1*sj2))+((r22*x6880))+((x6881*x6884)));
evalcond[4]=(((cj0*x6885))+((r02*x6880))+(((-1.0)*x6882*x6887))+(((-1.0)*cj0*x6888))+((r01*x6891)));
evalcond[5]=(((sj0*x6885))+(((-1.0)*sj0*x6888))+(((-1.0)*x6883*x6887))+((r11*x6891))+((r12*x6880)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6892=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6892;
j0eval[1]=IKsign(x6892);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6893=cj5*cj5;
IkReal x6894=r21*r21;
IkReal x6895=(cj2*sj1);
IkReal x6896=(cj1*sj2);
IkReal x6897=(r21*sj5);
IkReal x6898=((1.0)*cj5*r20);
IkReal x6899=(((x6893*(r20*r20)))+(r22*r22)+(((-2.0)*cj5*r20*x6897))+x6894+(((-1.0)*x6893*x6894)));
j4eval[0]=x6899;
j4eval[1]=IKsign(x6899);
j4eval[2]=((IKabs((((x6895*x6897))+(((-1.0)*x6896*x6898))+(((-1.0)*x6895*x6898))+((x6896*x6897)))))+(IKabs((((r22*x6896))+((r22*x6895))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6900=cj1*cj1;
IkReal x6901=(cj2*sj2);
IkReal x6902=(cj2*sj1);
IkReal x6903=(cj1*sj1);
j0eval[0]=((((-2.0)*x6900*x6901))+(((-1.08349267049076)*cj1*x6902))+(((-2.0)*cj1*cj2*x6902))+x6903+x6901+(((-1.08349267049076)*sj2*x6900)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6902)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6904=IKsin(j0);
IkReal x6905=IKcos(j0);
evalcond[0]=((((0.81725)*x6905))+(((-0.10915)*x6904))+(((-1.0)*px)));
evalcond[1]=((((0.81725)*x6904))+(((-1.0)*py))+(((0.10915)*x6905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6906=((1.0)*cj5);
IkReal x6907=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6906)));
j4eval[0]=x6907;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6906))))));
j4eval[2]=IKsign(x6907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6908=((1.0)*cj5);
IkReal x6909=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6908)));
j4eval[0]=x6909;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x6908))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6909);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6910=cj5*cj5;
IkReal x6911=((1.0)*sj5);
IkReal x6912=(cj5*r20);
IkReal x6913=(r11*r21);
IkReal x6914=((((-1.0)*x6910*x6913))+((r12*r22))+((r10*r20*x6910))+(((-1.0)*cj5*r10*r21*x6911))+x6913+(((-1.0)*r11*x6911*x6912)));
j4eval[0]=x6914;
j4eval[1]=IKsign(x6914);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6911))+((cj0*x6912)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6915=cj5*cj5;
IkReal x6916=((1.0)*sj5);
IkReal x6917=(cj5*r20);
IkReal x6918=(r11*r21);
CheckValue<IkReal> x6919=IKPowWithIntegerCheck(IKsign((((r12*r22))+((r10*r20*x6915))+(((-1.0)*cj5*r10*r21*x6916))+x6918+(((-1.0)*x6915*x6918))+(((-1.0)*r11*x6916*x6917)))),-1);
if(!x6919.valid){
continue;
}
CheckValue<IkReal> x6920 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6916))+((cj0*x6917)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6919.value)))+(x6920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6921=IKsin(j4);
IkReal x6922=IKcos(j4);
IkReal x6923=((1.0)*sj0);
IkReal x6924=(cj5*r00);
IkReal x6925=(r11*sj5);
IkReal x6926=(cj5*r10);
IkReal x6927=(r21*sj5);
IkReal x6928=(cj5*r20);
IkReal x6929=(r01*sj5);
IkReal x6930=((1.0)*x6922);
IkReal x6931=((1.0)*x6921);
evalcond[0]=(((x6921*x6927))+(((-1.0)*r22*x6930))+(((-1.0)*x6928*x6931)));
evalcond[1]=(((x6922*x6928))+(((-1.0)*r22*x6931))+(((-1.0)*x6927*x6930)));
evalcond[2]=((((-1.0)*x6926*x6931))+((x6921*x6925))+cj0+(((-1.0)*r12*x6930)));
evalcond[3]=(((x6921*x6929))+(((-1.0)*x6924*x6931))+(((-1.0)*r02*x6930))+(((-1.0)*x6923)));
evalcond[4]=(((x6922*x6924))+(((-1.0)*r02*x6931))+(((-1.0)*x6929*x6930))+(((-1.0)*cj0)));
evalcond[5]=(((x6922*x6926))+(((-1.0)*x6925*x6930))+(((-1.0)*r12*x6931))+(((-1.0)*x6923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6932=((1.0)*cj5);
CheckValue<IkReal> x6933 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6932)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6933.valid){
continue;
}
CheckValue<IkReal> x6934=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6932)))),-1);
if(!x6934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6933.value)+(((1.5707963267949)*(x6934.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6935=IKsin(j4);
IkReal x6936=IKcos(j4);
IkReal x6937=((1.0)*sj0);
IkReal x6938=(cj5*r00);
IkReal x6939=(r11*sj5);
IkReal x6940=(cj5*r10);
IkReal x6941=(r21*sj5);
IkReal x6942=(cj5*r20);
IkReal x6943=(r01*sj5);
IkReal x6944=((1.0)*x6936);
IkReal x6945=((1.0)*x6935);
evalcond[0]=((((-1.0)*x6942*x6945))+(((-1.0)*r22*x6944))+((x6935*x6941)));
evalcond[1]=((((-1.0)*x6941*x6944))+((x6936*x6942))+(((-1.0)*r22*x6945)));
evalcond[2]=(cj0+(((-1.0)*r12*x6944))+(((-1.0)*x6940*x6945))+((x6935*x6939)));
evalcond[3]=((((-1.0)*r02*x6944))+(((-1.0)*x6938*x6945))+(((-1.0)*x6937))+((x6935*x6943)));
evalcond[4]=((((-1.0)*x6943*x6944))+(((-1.0)*r02*x6945))+(((-1.0)*cj0))+((x6936*x6938)));
evalcond[5]=((((-1.0)*r12*x6945))+((x6936*x6940))+(((-1.0)*x6939*x6944))+(((-1.0)*x6937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6946=((1.0)*cj5);
CheckValue<IkReal> x6947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6946)))),-1);
if(!x6947.valid){
continue;
}
CheckValue<IkReal> x6948 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6946)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6947.value)))+(x6948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6949=IKsin(j4);
IkReal x6950=IKcos(j4);
IkReal x6951=((1.0)*sj0);
IkReal x6952=(cj5*r00);
IkReal x6953=(r11*sj5);
IkReal x6954=(cj5*r10);
IkReal x6955=(r21*sj5);
IkReal x6956=(cj5*r20);
IkReal x6957=(r01*sj5);
IkReal x6958=((1.0)*x6950);
IkReal x6959=((1.0)*x6949);
evalcond[0]=((((-1.0)*x6956*x6959))+((x6949*x6955))+(((-1.0)*r22*x6958)));
evalcond[1]=((((-1.0)*x6955*x6958))+((x6950*x6956))+(((-1.0)*r22*x6959)));
evalcond[2]=(((x6949*x6953))+cj0+(((-1.0)*r12*x6958))+(((-1.0)*x6954*x6959)));
evalcond[3]=(((x6949*x6957))+(((-1.0)*x6951))+(((-1.0)*x6952*x6959))+(((-1.0)*r02*x6958)));
evalcond[4]=(((x6950*x6952))+(((-1.0)*r02*x6959))+(((-1.0)*x6957*x6958))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6959))+(((-1.0)*x6951))+((x6950*x6954))+(((-1.0)*x6953*x6958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6960=IKsin(j0);
IkReal x6961=IKcos(j0);
evalcond[0]=((((0.03275)*x6961))+(((-1.0)*px))+(((-0.10915)*x6960)));
evalcond[1]=((((0.10915)*x6961))+(((0.03275)*x6960))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6962=((1.0)*cj5);
IkReal x6963=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6962)));
j4eval[0]=x6963;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6962))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6963);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6964=cj5*cj5;
IkReal x6965=((1.0)*r21);
IkReal x6966=(cj5*sj5);
IkReal x6967=((1.0)*r20);
IkReal x6968=(((r01*r21))+((r00*r20*x6964))+((r02*r22))+(((-1.0)*r01*x6964*x6965))+(((-1.0)*r00*x6965*x6966))+(((-1.0)*r01*x6966*x6967)));
j4eval[0]=x6968;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6967))))));
j4eval[2]=IKsign(x6968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6969=cj5*cj5;
IkReal x6970=(r21*sj5);
IkReal x6971=(r11*r21);
IkReal x6972=((1.0)*cj5*r20);
IkReal x6973=((((-1.0)*cj5*r10*x6970))+(((-1.0)*r11*sj5*x6972))+((r12*r22))+x6971+(((-1.0)*x6969*x6971))+((r10*r20*x6969)));
j4eval[0]=x6973;
j4eval[1]=((IKabs((((sj0*x6970))+(((-1.0)*sj0*x6972)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6973);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6974=cj5*cj5;
IkReal x6975=(r21*sj5);
IkReal x6976=(r11*r21);
IkReal x6977=((1.0)*cj5*r20);
CheckValue<IkReal> x6978=IKPowWithIntegerCheck(IKsign((((r10*r20*x6974))+(((-1.0)*cj5*r10*x6975))+(((-1.0)*r11*sj5*x6977))+((r12*r22))+(((-1.0)*x6974*x6976))+x6976)),-1);
if(!x6978.valid){
continue;
}
CheckValue<IkReal> x6979 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6975))+(((-1.0)*sj0*x6977)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6978.value)))+(x6979.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6980=IKsin(j4);
IkReal x6981=IKcos(j4);
IkReal x6982=(r11*sj5);
IkReal x6983=(cj5*r00);
IkReal x6984=(cj5*r10);
IkReal x6985=(r21*sj5);
IkReal x6986=(cj5*r20);
IkReal x6987=(r01*sj5);
IkReal x6988=((1.0)*x6981);
IkReal x6989=((1.0)*x6980);
evalcond[0]=((((-1.0)*x6986*x6989))+((x6980*x6985))+(((-1.0)*r22*x6988)));
evalcond[1]=((((-1.0)*x6985*x6988))+((x6981*x6986))+(((-1.0)*r22*x6989)));
evalcond[2]=(cj0+(((-1.0)*x6984*x6989))+((x6980*x6982))+(((-1.0)*r12*x6988)));
evalcond[3]=((((-1.0)*x6987*x6988))+cj0+((x6981*x6983))+(((-1.0)*r02*x6989)));
evalcond[4]=(sj0+((x6981*x6984))+(((-1.0)*r12*x6989))+(((-1.0)*x6982*x6988)));
evalcond[5]=((((-1.0)*sj0))+((x6980*x6987))+(((-1.0)*x6983*x6989))+(((-1.0)*r02*x6988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6990=cj5*cj5;
IkReal x6991=((1.0)*r21);
IkReal x6992=(cj5*sj5);
IkReal x6993=((1.0)*r20);
CheckValue<IkReal> x6994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6992*x6993))+((r01*r21))+(((-1.0)*r01*x6990*x6991))+((r00*r20*x6990))+((r02*r22))+(((-1.0)*r00*x6991*x6992)))),-1);
if(!x6994.valid){
continue;
}
CheckValue<IkReal> x6995 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x6993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6994.value)))+(x6995.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6996=IKsin(j4);
IkReal x6997=IKcos(j4);
IkReal x6998=(r11*sj5);
IkReal x6999=(cj5*r00);
IkReal x7000=(cj5*r10);
IkReal x7001=(r21*sj5);
IkReal x7002=(cj5*r20);
IkReal x7003=(r01*sj5);
IkReal x7004=((1.0)*x6997);
IkReal x7005=((1.0)*x6996);
evalcond[0]=((((-1.0)*r22*x7004))+((x6996*x7001))+(((-1.0)*x7002*x7005)));
evalcond[1]=((((-1.0)*r22*x7005))+(((-1.0)*x7001*x7004))+((x6997*x7002)));
evalcond[2]=((((-1.0)*r12*x7004))+cj0+(((-1.0)*x7000*x7005))+((x6996*x6998)));
evalcond[3]=((((-1.0)*r02*x7005))+cj0+(((-1.0)*x7003*x7004))+((x6997*x6999)));
evalcond[4]=((((-1.0)*r12*x7005))+sj0+(((-1.0)*x6998*x7004))+((x6997*x7000)));
evalcond[5]=((((-1.0)*r02*x7004))+(((-1.0)*sj0))+((x6996*x7003))+(((-1.0)*x6999*x7005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7006=((1.0)*cj5);
CheckValue<IkReal> x7007 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7006)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7007.valid){
continue;
}
CheckValue<IkReal> x7008=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7006)))),-1);
if(!x7008.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7007.value)+(((1.5707963267949)*(x7008.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7009=IKsin(j4);
IkReal x7010=IKcos(j4);
IkReal x7011=(r11*sj5);
IkReal x7012=(cj5*r00);
IkReal x7013=(cj5*r10);
IkReal x7014=(r21*sj5);
IkReal x7015=(cj5*r20);
IkReal x7016=(r01*sj5);
IkReal x7017=((1.0)*x7010);
IkReal x7018=((1.0)*x7009);
evalcond[0]=((((-1.0)*r22*x7017))+(((-1.0)*x7015*x7018))+((x7009*x7014)));
evalcond[1]=((((-1.0)*r22*x7018))+((x7010*x7015))+(((-1.0)*x7014*x7017)));
evalcond[2]=(cj0+((x7009*x7011))+(((-1.0)*r12*x7017))+(((-1.0)*x7013*x7018)));
evalcond[3]=(((x7010*x7012))+cj0+(((-1.0)*x7016*x7017))+(((-1.0)*r02*x7018)));
evalcond[4]=((((-1.0)*x7011*x7017))+((x7010*x7013))+sj0+(((-1.0)*r12*x7018)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7012*x7018))+((x7009*x7016))+(((-1.0)*r02*x7017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7019=((1.0)*sj5);
IkReal x7020=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7020))+(((-1.0)*r10*x7019)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7019))+(((-1.0)*r01*x7020)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7020))+(((-1.0)*r10*x7019))))+IKsqr(((((-1.0)*r00*x7019))+(((-1.0)*r01*x7020))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7020))+(((-1.0)*r10*x7019))), ((((-1.0)*r00*x7019))+(((-1.0)*r01*x7020))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7021=IKsin(j0);
IkReal x7022=IKcos(j0);
IkReal x7023=((1.0)*cj5);
IkReal x7024=((1.0)*sj5);
IkReal x7025=((0.09465)*cj5);
IkReal x7026=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7022))+(((-1.0)*r00*x7024))+(((-1.0)*r01*x7023)));
evalcond[1]=((((-1.0)*r11*x7023))+(((-1.0)*r10*x7024))+(((-1.0)*x7021)));
evalcond[2]=((((-0.10915)*x7021))+(((-1.0)*px))+(((-1.0)*r00*x7026))+(((-1.0)*r01*x7025)));
evalcond[3]=((((-1.0)*r11*x7025))+(((-1.0)*r10*x7026))+(((-1.0)*py))+(((0.10915)*x7022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7027=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7027;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7027);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7028=((1.0)*cj5);
IkReal x7029=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7028)));
j4eval[0]=x7029;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7028)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7029);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7030=cj5*cj5;
IkReal x7031=r21*r21;
IkReal x7032=(r21*sj5);
IkReal x7033=(cj5*r20);
IkReal x7034=(x7031+(r22*r22)+(((-2.0)*x7032*x7033))+(((-1.0)*x7030*x7031))+((x7030*(r20*r20))));
j4eval[0]=x7034;
j4eval[1]=IKsign(x7034);
j4eval[2]=((IKabs(r22))+(IKabs((x7032+(((-1.0)*x7033))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7035=cj5*cj5;
IkReal x7036=r21*r21;
IkReal x7037=(r21*sj5);
IkReal x7038=(cj5*r20);
CheckValue<IkReal> x7039=IKPowWithIntegerCheck(IKsign((x7036+(r22*r22)+(((-2.0)*x7037*x7038))+((x7035*(r20*r20)))+(((-1.0)*x7035*x7036)))),-1);
if(!x7039.valid){
continue;
}
CheckValue<IkReal> x7040 = IKatan2WithCheck(IkReal(r22),IkReal((x7037+(((-1.0)*x7038)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7040.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7039.value)))+(x7040.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7041=IKsin(j4);
IkReal x7042=IKcos(j4);
IkReal x7043=(r11*sj5);
IkReal x7044=(r21*sj5);
IkReal x7045=(cj5*r00);
IkReal x7046=(cj5*r20);
IkReal x7047=(r01*sj5);
IkReal x7048=(cj5*r10);
IkReal x7049=((1.0)*x7042);
IkReal x7050=((1.0)*x7041);
evalcond[0]=((((-1.0)*x7046*x7050))+((x7041*x7044))+(((-1.0)*r22*x7049)));
evalcond[1]=((((-1.0)*x7047*x7049))+((x7042*x7045))+(((-1.0)*r02*x7050)));
evalcond[2]=((((-1.0)*x7043*x7049))+(((-1.0)*r12*x7050))+((x7042*x7048)));
evalcond[3]=(cj0+(((-1.0)*r12*x7049))+((x7041*x7043))+(((-1.0)*x7048*x7050)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7050))+(((-1.0)*x7044*x7049))+((x7042*x7046)));
evalcond[5]=((((-1.0)*sj0))+((x7041*x7047))+(((-1.0)*r02*x7049))+(((-1.0)*x7045*x7050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7051=((1.0)*cj5);
CheckValue<IkReal> x7052=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7051))+(((-1.0)*r00*sj5)))),-1);
if(!x7052.valid){
continue;
}
CheckValue<IkReal> x7053 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7051))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7052.value)))+(x7053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7054=IKsin(j4);
IkReal x7055=IKcos(j4);
IkReal x7056=(r11*sj5);
IkReal x7057=(r21*sj5);
IkReal x7058=(cj5*r00);
IkReal x7059=(cj5*r20);
IkReal x7060=(r01*sj5);
IkReal x7061=(cj5*r10);
IkReal x7062=((1.0)*x7055);
IkReal x7063=((1.0)*x7054);
evalcond[0]=((((-1.0)*x7059*x7063))+((x7054*x7057))+(((-1.0)*r22*x7062)));
evalcond[1]=((((-1.0)*r02*x7063))+(((-1.0)*x7060*x7062))+((x7055*x7058)));
evalcond[2]=((((-1.0)*x7056*x7062))+((x7055*x7061))+(((-1.0)*r12*x7063)));
evalcond[3]=(cj0+(((-1.0)*r12*x7062))+(((-1.0)*x7061*x7063))+((x7054*x7056)));
evalcond[4]=((1.0)+((x7055*x7059))+(((-1.0)*r22*x7063))+(((-1.0)*x7057*x7062)));
evalcond[5]=((((-1.0)*sj0))+((x7054*x7060))+(((-1.0)*x7058*x7063))+(((-1.0)*r02*x7062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7064 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7064.valid){
continue;
}
CheckValue<IkReal> x7065=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7065.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7064.value)+(((1.5707963267949)*(x7065.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7066=IKsin(j4);
IkReal x7067=IKcos(j4);
IkReal x7068=(r11*sj5);
IkReal x7069=(r21*sj5);
IkReal x7070=(cj5*r00);
IkReal x7071=(cj5*r20);
IkReal x7072=(r01*sj5);
IkReal x7073=(cj5*r10);
IkReal x7074=((1.0)*x7067);
IkReal x7075=((1.0)*x7066);
evalcond[0]=((((-1.0)*x7071*x7075))+(((-1.0)*r22*x7074))+((x7066*x7069)));
evalcond[1]=(((x7067*x7070))+(((-1.0)*x7072*x7074))+(((-1.0)*r02*x7075)));
evalcond[2]=(((x7067*x7073))+(((-1.0)*x7068*x7074))+(((-1.0)*r12*x7075)));
evalcond[3]=(cj0+(((-1.0)*x7073*x7075))+(((-1.0)*r12*x7074))+((x7066*x7068)));
evalcond[4]=((1.0)+(((-1.0)*x7069*x7074))+((x7067*x7071))+(((-1.0)*r22*x7075)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7070*x7075))+(((-1.0)*r02*x7074))+((x7066*x7072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7076=IKcos(j0);
IkReal x7077=IKsin(j0);
evalcond[0]=((((-0.10915)*x7077))+(((-1.0)*px))+(((-0.39225)*x7076)));
evalcond[1]=((((0.10915)*x7076))+(((-1.0)*py))+(((-0.39225)*x7077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7078=((1.0)*cj5);
IkReal x7079=((((-1.0)*r01*x7078))+(((-1.0)*r00*sj5)));
j4eval[0]=x7079;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7078)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7079);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7080=cj5*cj5;
IkReal x7081=((1.0)*r21);
IkReal x7082=(cj5*sj5);
IkReal x7083=((1.0)*r20);
IkReal x7084=((((-1.0)*r01*x7082*x7083))+(((-1.0)*r00*x7081*x7082))+((r01*r21))+((r00*r20*x7080))+((r02*r22))+(((-1.0)*r01*x7080*x7081)));
j4eval[0]=x7084;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7083))))));
j4eval[2]=IKsign(x7084);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7085=cj5*cj5;
IkReal x7086=(r21*sj5);
IkReal x7087=(r11*r21);
IkReal x7088=((1.0)*cj5*r20);
IkReal x7089=(x7087+(((-1.0)*cj5*r10*x7086))+((r12*r22))+((r10*r20*x7085))+(((-1.0)*x7085*x7087))+(((-1.0)*r11*sj5*x7088)));
j4eval[0]=x7089;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7086))+(((-1.0)*sj0*x7088))))));
j4eval[2]=IKsign(x7089);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7090=cj5*cj5;
IkReal x7091=(r21*sj5);
IkReal x7092=(r11*r21);
IkReal x7093=((1.0)*cj5*r20);
CheckValue<IkReal> x7094 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7091))+(((-1.0)*sj0*x7093)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7094.valid){
continue;
}
CheckValue<IkReal> x7095=IKPowWithIntegerCheck(IKsign((x7092+(((-1.0)*cj5*r10*x7091))+((r12*r22))+((r10*r20*x7090))+(((-1.0)*r11*sj5*x7093))+(((-1.0)*x7090*x7092)))),-1);
if(!x7095.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7094.value)+(((1.5707963267949)*(x7095.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7096=IKsin(j4);
IkReal x7097=IKcos(j4);
IkReal x7098=(r11*sj5);
IkReal x7099=(cj5*r00);
IkReal x7100=(cj5*r10);
IkReal x7101=(r21*sj5);
IkReal x7102=(cj5*r20);
IkReal x7103=(r01*sj5);
IkReal x7104=((1.0)*x7097);
IkReal x7105=((1.0)*x7096);
evalcond[0]=((((-1.0)*x7102*x7105))+((x7096*x7101))+(((-1.0)*r22*x7104)));
evalcond[1]=(((x7097*x7102))+(((-1.0)*x7101*x7104))+(((-1.0)*r22*x7105)));
evalcond[2]=(cj0+(((-1.0)*r12*x7104))+((x7096*x7098))+(((-1.0)*x7100*x7105)));
evalcond[3]=(((x7097*x7099))+cj0+(((-1.0)*x7103*x7104))+(((-1.0)*r02*x7105)));
evalcond[4]=(sj0+((x7097*x7100))+(((-1.0)*r12*x7105))+(((-1.0)*x7098*x7104)));
evalcond[5]=((((-1.0)*sj0))+((x7096*x7103))+(((-1.0)*r02*x7104))+(((-1.0)*x7099*x7105)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7106=cj5*cj5;
IkReal x7107=((1.0)*r21);
IkReal x7108=(cj5*sj5);
IkReal x7109=((1.0)*r20);
CheckValue<IkReal> x7110=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7108*x7109))+(((-1.0)*r00*x7107*x7108))+((r01*r21))+((r00*r20*x7106))+(((-1.0)*r01*x7106*x7107))+((r02*r22)))),-1);
if(!x7110.valid){
continue;
}
CheckValue<IkReal> x7111 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7111.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7110.value)))+(x7111.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7112=IKsin(j4);
IkReal x7113=IKcos(j4);
IkReal x7114=(r11*sj5);
IkReal x7115=(cj5*r00);
IkReal x7116=(cj5*r10);
IkReal x7117=(r21*sj5);
IkReal x7118=(cj5*r20);
IkReal x7119=(r01*sj5);
IkReal x7120=((1.0)*x7113);
IkReal x7121=((1.0)*x7112);
evalcond[0]=((((-1.0)*x7118*x7121))+(((-1.0)*r22*x7120))+((x7112*x7117)));
evalcond[1]=(((x7113*x7118))+(((-1.0)*r22*x7121))+(((-1.0)*x7117*x7120)));
evalcond[2]=((((-1.0)*x7116*x7121))+cj0+(((-1.0)*r12*x7120))+((x7112*x7114)));
evalcond[3]=(((x7113*x7115))+(((-1.0)*x7119*x7120))+cj0+(((-1.0)*r02*x7121)));
evalcond[4]=(((x7113*x7116))+sj0+(((-1.0)*x7114*x7120))+(((-1.0)*r12*x7121)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7115*x7121))+(((-1.0)*r02*x7120))+((x7112*x7119)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7122=((1.0)*cj5);
CheckValue<IkReal> x7123 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7123.valid){
continue;
}
CheckValue<IkReal> x7124=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7122)))),-1);
if(!x7124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7123.value)+(((1.5707963267949)*(x7124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7125=IKsin(j4);
IkReal x7126=IKcos(j4);
IkReal x7127=(r11*sj5);
IkReal x7128=(cj5*r00);
IkReal x7129=(cj5*r10);
IkReal x7130=(r21*sj5);
IkReal x7131=(cj5*r20);
IkReal x7132=(r01*sj5);
IkReal x7133=((1.0)*x7126);
IkReal x7134=((1.0)*x7125);
evalcond[0]=(((x7125*x7130))+(((-1.0)*r22*x7133))+(((-1.0)*x7131*x7134)));
evalcond[1]=((((-1.0)*x7130*x7133))+((x7126*x7131))+(((-1.0)*r22*x7134)));
evalcond[2]=((((-1.0)*r12*x7133))+cj0+((x7125*x7127))+(((-1.0)*x7129*x7134)));
evalcond[3]=((((-1.0)*x7132*x7133))+cj0+((x7126*x7128))+(((-1.0)*r02*x7134)));
evalcond[4]=(sj0+(((-1.0)*r12*x7134))+(((-1.0)*x7127*x7133))+((x7126*x7129)));
evalcond[5]=((((-1.0)*sj0))+((x7125*x7132))+(((-1.0)*x7128*x7134))+(((-1.0)*r02*x7133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7135=IKsin(j0);
IkReal x7136=IKcos(j0);
IkReal x7137=((1.0)*cj5);
IkReal x7138=((1.0)*sj5);
IkReal x7139=((0.09465)*cj5);
IkReal x7140=((0.09465)*sj5);
evalcond[0]=(x7136+(((-1.0)*r01*x7137))+(((-1.0)*r00*x7138)));
evalcond[1]=(x7135+(((-1.0)*r10*x7138))+(((-1.0)*r11*x7137)));
evalcond[2]=((((-1.0)*r01*x7139))+(((-1.0)*px))+(((-0.10915)*x7135))+(((-1.0)*r00*x7140)));
evalcond[3]=((((-1.0)*r11*x7139))+(((0.10915)*x7136))+(((-1.0)*py))+(((-1.0)*r10*x7140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7141=((1.0)*sj5);
IkReal x7142=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7141)));
j4eval[0]=x7142;
j4eval[1]=IKsign(x7142);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7141))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7143=((1.0)*cj5);
IkReal x7144=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7143)));
j4eval[0]=x7144;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7143)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7144);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7145=r21*r21;
IkReal x7146=cj5*cj5;
IkReal x7147=(r21*sj5);
IkReal x7148=(cj5*r20);
IkReal x7149=((((2.0)*x7147*x7148))+((x7145*x7146))+(((-1.0)*x7145))+(((-1.0)*(r22*r22)))+(((-1.0)*x7146*(r20*r20))));
j4eval[0]=x7149;
j4eval[1]=((IKabs(r22))+(IKabs((x7147+(((-1.0)*x7148))))));
j4eval[2]=IKsign(x7149);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7150=r21*r21;
IkReal x7151=cj5*cj5;
IkReal x7152=(r21*sj5);
IkReal x7153=(cj5*r20);
CheckValue<IkReal> x7154=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7151*(r20*r20)))+((x7150*x7151))+(((2.0)*x7152*x7153))+(((-1.0)*x7150))+(((-1.0)*(r22*r22))))),-1);
if(!x7154.valid){
continue;
}
CheckValue<IkReal> x7155 = IKatan2WithCheck(IkReal(r22),IkReal((x7152+(((-1.0)*x7153)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7154.value)))+(x7155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7156=IKsin(j4);
IkReal x7157=IKcos(j4);
IkReal x7158=(r11*sj5);
IkReal x7159=(r21*sj5);
IkReal x7160=(cj5*r00);
IkReal x7161=(cj5*r20);
IkReal x7162=(r01*sj5);
IkReal x7163=(cj5*r10);
IkReal x7164=((1.0)*x7157);
IkReal x7165=((1.0)*x7156);
evalcond[0]=((((-1.0)*r22*x7164))+(((-1.0)*x7161*x7165))+((x7156*x7159)));
evalcond[1]=((((-1.0)*r02*x7165))+((x7157*x7160))+(((-1.0)*x7162*x7164)));
evalcond[2]=((((-1.0)*x7158*x7164))+((x7157*x7163))+(((-1.0)*r12*x7165)));
evalcond[3]=(cj0+(((-1.0)*x7163*x7165))+((x7156*x7158))+(((-1.0)*r12*x7164)));
evalcond[4]=((-1.0)+(((-1.0)*x7159*x7164))+(((-1.0)*r22*x7165))+((x7157*x7161)));
evalcond[5]=((((-1.0)*r02*x7164))+(((-1.0)*sj0))+(((-1.0)*x7160*x7165))+((x7156*x7162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7166=((1.0)*cj5);
CheckValue<IkReal> x7167=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7166)))),-1);
if(!x7167.valid){
continue;
}
CheckValue<IkReal> x7168 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7166)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7168.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7167.value)))+(x7168.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7169=IKsin(j4);
IkReal x7170=IKcos(j4);
IkReal x7171=(r11*sj5);
IkReal x7172=(r21*sj5);
IkReal x7173=(cj5*r00);
IkReal x7174=(cj5*r20);
IkReal x7175=(r01*sj5);
IkReal x7176=(cj5*r10);
IkReal x7177=((1.0)*x7170);
IkReal x7178=((1.0)*x7169);
evalcond[0]=((((-1.0)*x7174*x7178))+((x7169*x7172))+(((-1.0)*r22*x7177)));
evalcond[1]=(((x7170*x7173))+(((-1.0)*r02*x7178))+(((-1.0)*x7175*x7177)));
evalcond[2]=(((x7170*x7176))+(((-1.0)*x7171*x7177))+(((-1.0)*r12*x7178)));
evalcond[3]=(cj0+((x7169*x7171))+(((-1.0)*r12*x7177))+(((-1.0)*x7176*x7178)));
evalcond[4]=((-1.0)+((x7170*x7174))+(((-1.0)*r22*x7178))+(((-1.0)*x7172*x7177)));
evalcond[5]=((((-1.0)*sj0))+((x7169*x7175))+(((-1.0)*r02*x7177))+(((-1.0)*x7173*x7178)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7179=((1.0)*sj5);
CheckValue<IkReal> x7180=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7179)))),-1);
if(!x7180.valid){
continue;
}
CheckValue<IkReal> x7181 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7179))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7180.value)))+(x7181.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7182=IKsin(j4);
IkReal x7183=IKcos(j4);
IkReal x7184=(r11*sj5);
IkReal x7185=(r21*sj5);
IkReal x7186=(cj5*r00);
IkReal x7187=(cj5*r20);
IkReal x7188=(r01*sj5);
IkReal x7189=(cj5*r10);
IkReal x7190=((1.0)*x7183);
IkReal x7191=((1.0)*x7182);
evalcond[0]=((((-1.0)*x7187*x7191))+((x7182*x7185))+(((-1.0)*r22*x7190)));
evalcond[1]=(((x7183*x7186))+(((-1.0)*x7188*x7190))+(((-1.0)*r02*x7191)));
evalcond[2]=((((-1.0)*x7184*x7190))+((x7183*x7189))+(((-1.0)*r12*x7191)));
evalcond[3]=(cj0+(((-1.0)*x7189*x7191))+((x7182*x7184))+(((-1.0)*r12*x7190)));
evalcond[4]=((-1.0)+((x7183*x7187))+(((-1.0)*x7185*x7190))+(((-1.0)*r22*x7191)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7186*x7191))+((x7182*x7188))+(((-1.0)*r02*x7190)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7192=IKsin(j0);
IkReal x7193=IKcos(j0);
evalcond[0]=((((0.39225)*x7193))+(((-1.0)*px))+(((-0.10915)*x7192)));
evalcond[1]=((((0.10915)*x7193))+(((0.39225)*x7192))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7194=((1.0)*cj5);
IkReal x7195=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7194)));
j4eval[0]=x7195;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7194)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7195);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7196=((1.0)*cj5);
IkReal x7197=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7196)));
j4eval[0]=x7197;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7196)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7197);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7198=cj5*cj5;
IkReal x7199=((1.0)*sj5);
IkReal x7200=(cj5*r20);
IkReal x7201=(r11*r21);
IkReal x7202=((((-1.0)*r11*x7199*x7200))+x7201+((r12*r22))+((r10*r20*x7198))+(((-1.0)*cj5*r10*r21*x7199))+(((-1.0)*x7198*x7201)));
j4eval[0]=x7202;
j4eval[1]=IKsign(x7202);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7199))+((cj0*x7200))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7203=cj5*cj5;
IkReal x7204=((1.0)*sj5);
IkReal x7205=(cj5*r20);
IkReal x7206=(r11*r21);
CheckValue<IkReal> x7207=IKPowWithIntegerCheck(IKsign((x7206+((r10*r20*x7203))+((r12*r22))+(((-1.0)*cj5*r10*r21*x7204))+(((-1.0)*r11*x7204*x7205))+(((-1.0)*x7203*x7206)))),-1);
if(!x7207.valid){
continue;
}
CheckValue<IkReal> x7208 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7204))+((cj0*x7205)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7207.value)))+(x7208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7209=IKsin(j4);
IkReal x7210=IKcos(j4);
IkReal x7211=((1.0)*sj0);
IkReal x7212=(cj5*r00);
IkReal x7213=(r11*sj5);
IkReal x7214=(cj5*r10);
IkReal x7215=(r21*sj5);
IkReal x7216=(cj5*r20);
IkReal x7217=(r01*sj5);
IkReal x7218=((1.0)*x7210);
IkReal x7219=((1.0)*x7209);
evalcond[0]=(((x7209*x7215))+(((-1.0)*x7216*x7219))+(((-1.0)*r22*x7218)));
evalcond[1]=((((-1.0)*x7215*x7218))+((x7210*x7216))+(((-1.0)*r22*x7219)));
evalcond[2]=(cj0+((x7209*x7213))+(((-1.0)*r12*x7218))+(((-1.0)*x7214*x7219)));
evalcond[3]=((((-1.0)*x7212*x7219))+((x7209*x7217))+(((-1.0)*x7211))+(((-1.0)*r02*x7218)));
evalcond[4]=((((-1.0)*x7217*x7218))+((x7210*x7212))+(((-1.0)*r02*x7219))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7213*x7218))+((x7210*x7214))+(((-1.0)*x7211))+(((-1.0)*r12*x7219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7220=((1.0)*cj5);
CheckValue<IkReal> x7221 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7220)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7221.valid){
continue;
}
CheckValue<IkReal> x7222=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7220)))),-1);
if(!x7222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7221.value)+(((1.5707963267949)*(x7222.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7223=IKsin(j4);
IkReal x7224=IKcos(j4);
IkReal x7225=((1.0)*sj0);
IkReal x7226=(cj5*r00);
IkReal x7227=(r11*sj5);
IkReal x7228=(cj5*r10);
IkReal x7229=(r21*sj5);
IkReal x7230=(cj5*r20);
IkReal x7231=(r01*sj5);
IkReal x7232=((1.0)*x7224);
IkReal x7233=((1.0)*x7223);
evalcond[0]=(((x7223*x7229))+(((-1.0)*x7230*x7233))+(((-1.0)*r22*x7232)));
evalcond[1]=((((-1.0)*x7229*x7232))+(((-1.0)*r22*x7233))+((x7224*x7230)));
evalcond[2]=(cj0+(((-1.0)*x7228*x7233))+((x7223*x7227))+(((-1.0)*r12*x7232)));
evalcond[3]=((((-1.0)*x7226*x7233))+((x7223*x7231))+(((-1.0)*x7225))+(((-1.0)*r02*x7232)));
evalcond[4]=((((-1.0)*x7231*x7232))+((x7224*x7226))+(((-1.0)*r02*x7233))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7227*x7232))+(((-1.0)*x7225))+((x7224*x7228))+(((-1.0)*r12*x7233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7234=((1.0)*cj5);
CheckValue<IkReal> x7235=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7234)))),-1);
if(!x7235.valid){
continue;
}
CheckValue<IkReal> x7236 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7234)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7236.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7235.value)))+(x7236.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7237=IKsin(j4);
IkReal x7238=IKcos(j4);
IkReal x7239=((1.0)*sj0);
IkReal x7240=(cj5*r00);
IkReal x7241=(r11*sj5);
IkReal x7242=(cj5*r10);
IkReal x7243=(r21*sj5);
IkReal x7244=(cj5*r20);
IkReal x7245=(r01*sj5);
IkReal x7246=((1.0)*x7238);
IkReal x7247=((1.0)*x7237);
evalcond[0]=((((-1.0)*x7244*x7247))+(((-1.0)*r22*x7246))+((x7237*x7243)));
evalcond[1]=(((x7238*x7244))+(((-1.0)*r22*x7247))+(((-1.0)*x7243*x7246)));
evalcond[2]=((((-1.0)*r12*x7246))+cj0+(((-1.0)*x7242*x7247))+((x7237*x7241)));
evalcond[3]=((((-1.0)*r02*x7246))+(((-1.0)*x7240*x7247))+((x7237*x7245))+(((-1.0)*x7239)));
evalcond[4]=((((-1.0)*x7245*x7246))+((x7238*x7240))+(((-1.0)*r02*x7247))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7247))+((x7238*x7242))+(((-1.0)*x7239))+(((-1.0)*x7241*x7246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7248=IKcos(j0);
IkReal x7249=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x7248))+(((-0.10915)*x7249)));
evalcond[1]=((((0.10915)*x7248))+(((-1.0)*py))+(((-0.81725)*x7249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7250=((1.0)*cj5);
IkReal x7251=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7250)));
j4eval[0]=x7251;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7250)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7251);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7252=cj5*cj5;
IkReal x7253=((1.0)*r21);
IkReal x7254=(cj5*sj5);
IkReal x7255=((1.0)*r20);
IkReal x7256=((((-1.0)*r01*x7252*x7253))+((r01*r21))+(((-1.0)*r01*x7254*x7255))+((r02*r22))+(((-1.0)*r00*x7253*x7254))+((r00*r20*x7252)));
j4eval[0]=x7256;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7255)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7256);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7257=cj5*cj5;
IkReal x7258=(r21*sj5);
IkReal x7259=(r11*r21);
IkReal x7260=((1.0)*cj5*r20);
IkReal x7261=((((-1.0)*r11*sj5*x7260))+x7259+((r12*r22))+(((-1.0)*cj5*r10*x7258))+(((-1.0)*x7257*x7259))+((r10*r20*x7257)));
j4eval[0]=x7261;
j4eval[1]=((IKabs(((((-1.0)*sj0*x7260))+((sj0*x7258)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7261);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7262=cj5*cj5;
IkReal x7263=(r21*sj5);
IkReal x7264=(r11*r21);
IkReal x7265=((1.0)*cj5*r20);
CheckValue<IkReal> x7266 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7263))+(((-1.0)*sj0*x7265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7266.valid){
continue;
}
CheckValue<IkReal> x7267=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7265))+(((-1.0)*cj5*r10*x7263))+x7264+(((-1.0)*x7262*x7264))+((r12*r22))+((r10*r20*x7262)))),-1);
if(!x7267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7266.value)+(((1.5707963267949)*(x7267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7268=IKsin(j4);
IkReal x7269=IKcos(j4);
IkReal x7270=(r11*sj5);
IkReal x7271=(cj5*r00);
IkReal x7272=(cj5*r10);
IkReal x7273=(r21*sj5);
IkReal x7274=(cj5*r20);
IkReal x7275=(r01*sj5);
IkReal x7276=((1.0)*x7269);
IkReal x7277=((1.0)*x7268);
evalcond[0]=((((-1.0)*r22*x7276))+((x7268*x7273))+(((-1.0)*x7274*x7277)));
evalcond[1]=((((-1.0)*r22*x7277))+(((-1.0)*x7273*x7276))+((x7269*x7274)));
evalcond[2]=(cj0+(((-1.0)*r12*x7276))+((x7268*x7270))+(((-1.0)*x7272*x7277)));
evalcond[3]=(cj0+((x7269*x7271))+(((-1.0)*r02*x7277))+(((-1.0)*x7275*x7276)));
evalcond[4]=(sj0+(((-1.0)*r12*x7277))+((x7269*x7272))+(((-1.0)*x7270*x7276)));
evalcond[5]=((((-1.0)*sj0))+((x7268*x7275))+(((-1.0)*r02*x7276))+(((-1.0)*x7271*x7277)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7278=cj5*cj5;
IkReal x7279=((1.0)*r21);
IkReal x7280=(cj5*sj5);
IkReal x7281=((1.0)*r20);
CheckValue<IkReal> x7282=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7278*x7279))+((r01*r21))+(((-1.0)*r00*x7279*x7280))+(((-1.0)*r01*x7280*x7281))+((r00*r20*x7278))+((r02*r22)))),-1);
if(!x7282.valid){
continue;
}
CheckValue<IkReal> x7283 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7281)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7283.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7282.value)))+(x7283.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7284=IKsin(j4);
IkReal x7285=IKcos(j4);
IkReal x7286=(r11*sj5);
IkReal x7287=(cj5*r00);
IkReal x7288=(cj5*r10);
IkReal x7289=(r21*sj5);
IkReal x7290=(cj5*r20);
IkReal x7291=(r01*sj5);
IkReal x7292=((1.0)*x7285);
IkReal x7293=((1.0)*x7284);
evalcond[0]=((((-1.0)*x7290*x7293))+(((-1.0)*r22*x7292))+((x7284*x7289)));
evalcond[1]=((((-1.0)*r22*x7293))+(((-1.0)*x7289*x7292))+((x7285*x7290)));
evalcond[2]=(cj0+(((-1.0)*x7288*x7293))+((x7284*x7286))+(((-1.0)*r12*x7292)));
evalcond[3]=((((-1.0)*x7291*x7292))+cj0+((x7285*x7287))+(((-1.0)*r02*x7293)));
evalcond[4]=(sj0+(((-1.0)*x7286*x7292))+((x7285*x7288))+(((-1.0)*r12*x7293)));
evalcond[5]=((((-1.0)*sj0))+((x7284*x7291))+(((-1.0)*r02*x7292))+(((-1.0)*x7287*x7293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7294=((1.0)*cj5);
CheckValue<IkReal> x7295 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7294)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7295.valid){
continue;
}
CheckValue<IkReal> x7296=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7294))+(((-1.0)*r00*sj5)))),-1);
if(!x7296.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7295.value)+(((1.5707963267949)*(x7296.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7297=IKsin(j4);
IkReal x7298=IKcos(j4);
IkReal x7299=(r11*sj5);
IkReal x7300=(cj5*r00);
IkReal x7301=(cj5*r10);
IkReal x7302=(r21*sj5);
IkReal x7303=(cj5*r20);
IkReal x7304=(r01*sj5);
IkReal x7305=((1.0)*x7298);
IkReal x7306=((1.0)*x7297);
evalcond[0]=((((-1.0)*x7303*x7306))+(((-1.0)*r22*x7305))+((x7297*x7302)));
evalcond[1]=((((-1.0)*x7302*x7305))+(((-1.0)*r22*x7306))+((x7298*x7303)));
evalcond[2]=(((x7297*x7299))+cj0+(((-1.0)*x7301*x7306))+(((-1.0)*r12*x7305)));
evalcond[3]=((((-1.0)*r02*x7306))+cj0+((x7298*x7300))+(((-1.0)*x7304*x7305)));
evalcond[4]=(sj0+(((-1.0)*r12*x7306))+(((-1.0)*x7299*x7305))+((x7298*x7301)));
evalcond[5]=((((-1.0)*r02*x7305))+(((-1.0)*sj0))+(((-1.0)*x7300*x7306))+((x7297*x7304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7307=IKcos(j0);
IkReal x7308=IKsin(j0);
evalcond[0]=((((-0.03275)*x7307))+(((-0.10915)*x7308))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x7307))+(((-0.03275)*x7308))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7309=((1.0)*cj5);
IkReal x7310=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7309)));
j4eval[0]=x7310;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7309)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7310);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7311=((1.0)*cj5);
IkReal x7312=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7311)));
j4eval[0]=x7312;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7311))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7312);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7313=cj5*cj5;
IkReal x7314=((1.0)*sj5);
IkReal x7315=(cj5*r20);
IkReal x7316=(r11*r21);
IkReal x7317=(x7316+((r12*r22))+((r10*r20*x7313))+(((-1.0)*r11*x7314*x7315))+(((-1.0)*x7313*x7316))+(((-1.0)*cj5*r10*r21*x7314)));
j4eval[0]=x7317;
j4eval[1]=IKsign(x7317);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7314))+((cj0*x7315))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7318=cj5*cj5;
IkReal x7319=((1.0)*sj5);
IkReal x7320=(cj5*r20);
IkReal x7321=(r11*r21);
CheckValue<IkReal> x7322=IKPowWithIntegerCheck(IKsign((x7321+(((-1.0)*r11*x7319*x7320))+((r12*r22))+(((-1.0)*x7318*x7321))+((r10*r20*x7318))+(((-1.0)*cj5*r10*r21*x7319)))),-1);
if(!x7322.valid){
continue;
}
CheckValue<IkReal> x7323 = IKatan2WithCheck(IkReal((((cj0*x7320))+(((-1.0)*cj0*r21*x7319)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7322.value)))+(x7323.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7324=IKsin(j4);
IkReal x7325=IKcos(j4);
IkReal x7326=((1.0)*sj0);
IkReal x7327=(cj5*r00);
IkReal x7328=(r11*sj5);
IkReal x7329=(cj5*r10);
IkReal x7330=(r21*sj5);
IkReal x7331=(cj5*r20);
IkReal x7332=(r01*sj5);
IkReal x7333=((1.0)*x7325);
IkReal x7334=((1.0)*x7324);
evalcond[0]=(((x7324*x7330))+(((-1.0)*x7331*x7334))+(((-1.0)*r22*x7333)));
evalcond[1]=(((x7325*x7331))+(((-1.0)*r22*x7334))+(((-1.0)*x7330*x7333)));
evalcond[2]=(cj0+(((-1.0)*r12*x7333))+(((-1.0)*x7329*x7334))+((x7324*x7328)));
evalcond[3]=((((-1.0)*r02*x7333))+(((-1.0)*x7327*x7334))+((x7324*x7332))+(((-1.0)*x7326)));
evalcond[4]=((((-1.0)*r02*x7334))+((x7325*x7327))+(((-1.0)*x7332*x7333))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x7334))+((x7325*x7329))+(((-1.0)*x7326))+(((-1.0)*x7328*x7333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7335=((1.0)*cj5);
CheckValue<IkReal> x7336 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7335))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7336.valid){
continue;
}
CheckValue<IkReal> x7337=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7335)))),-1);
if(!x7337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7336.value)+(((1.5707963267949)*(x7337.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7338=IKsin(j4);
IkReal x7339=IKcos(j4);
IkReal x7340=((1.0)*sj0);
IkReal x7341=(cj5*r00);
IkReal x7342=(r11*sj5);
IkReal x7343=(cj5*r10);
IkReal x7344=(r21*sj5);
IkReal x7345=(cj5*r20);
IkReal x7346=(r01*sj5);
IkReal x7347=((1.0)*x7339);
IkReal x7348=((1.0)*x7338);
evalcond[0]=((((-1.0)*r22*x7347))+(((-1.0)*x7345*x7348))+((x7338*x7344)));
evalcond[1]=(((x7339*x7345))+(((-1.0)*r22*x7348))+(((-1.0)*x7344*x7347)));
evalcond[2]=(cj0+(((-1.0)*r12*x7347))+(((-1.0)*x7343*x7348))+((x7338*x7342)));
evalcond[3]=((((-1.0)*x7341*x7348))+(((-1.0)*x7340))+(((-1.0)*r02*x7347))+((x7338*x7346)));
evalcond[4]=(((x7339*x7341))+(((-1.0)*r02*x7348))+(((-1.0)*x7346*x7347))+(((-1.0)*cj0)));
evalcond[5]=(((x7339*x7343))+(((-1.0)*r12*x7348))+(((-1.0)*x7340))+(((-1.0)*x7342*x7347)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7349=((1.0)*cj5);
CheckValue<IkReal> x7350 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7350.valid){
continue;
}
CheckValue<IkReal> x7351=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7349))+(((-1.0)*r00*sj5)))),-1);
if(!x7351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7350.value)+(((1.5707963267949)*(x7351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7352=IKsin(j4);
IkReal x7353=IKcos(j4);
IkReal x7354=((1.0)*sj0);
IkReal x7355=(cj5*r00);
IkReal x7356=(r11*sj5);
IkReal x7357=(cj5*r10);
IkReal x7358=(r21*sj5);
IkReal x7359=(cj5*r20);
IkReal x7360=(r01*sj5);
IkReal x7361=((1.0)*x7353);
IkReal x7362=((1.0)*x7352);
evalcond[0]=(((x7352*x7358))+(((-1.0)*r22*x7361))+(((-1.0)*x7359*x7362)));
evalcond[1]=(((x7353*x7359))+(((-1.0)*r22*x7362))+(((-1.0)*x7358*x7361)));
evalcond[2]=(((x7352*x7356))+cj0+(((-1.0)*r12*x7361))+(((-1.0)*x7357*x7362)));
evalcond[3]=(((x7352*x7360))+(((-1.0)*x7354))+(((-1.0)*r02*x7361))+(((-1.0)*x7355*x7362)));
evalcond[4]=(((x7353*x7355))+(((-1.0)*x7360*x7361))+(((-1.0)*r02*x7362))+(((-1.0)*cj0)));
evalcond[5]=(((x7353*x7357))+(((-1.0)*x7354))+(((-1.0)*r12*x7362))+(((-1.0)*x7356*x7361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7363=IKsin(j0);
IkReal x7364=IKcos(j0);
IkReal x7365=((1.0)*cj5);
IkReal x7366=((1.0)*sj5);
IkReal x7367=((0.09465)*cj5);
IkReal x7368=((0.09465)*sj5);
evalcond[0]=(x7364+(((-1.0)*r00*x7366))+(((-1.0)*r01*x7365)));
evalcond[1]=(x7363+(((-1.0)*r10*x7366))+(((-1.0)*r11*x7365)));
evalcond[2]=((((-1.0)*px))+(((-0.10915)*x7363))+(((-1.0)*r00*x7368))+(((-1.0)*r01*x7367)));
evalcond[3]=((((-1.0)*r10*x7368))+(((-1.0)*r11*x7367))+(((-1.0)*py))+(((0.10915)*x7364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7369=((1.0)*sj5);
IkReal x7370=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7369)));
j4eval[0]=x7370;
j4eval[1]=IKsign(x7370);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7369))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7371=((1.0)*cj5);
IkReal x7372=((((-1.0)*r01*x7371))+(((-1.0)*r00*sj5)));
j4eval[0]=x7372;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7371)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7373=r21*r21;
IkReal x7374=cj5*cj5;
IkReal x7375=(r21*sj5);
IkReal x7376=(cj5*r20);
IkReal x7377=((((-1.0)*x7374*(r20*r20)))+((x7373*x7374))+(((-1.0)*(r22*r22)))+(((-1.0)*x7373))+(((2.0)*x7375*x7376)));
j4eval[0]=x7377;
j4eval[1]=((IKabs(r22))+(IKabs((x7375+(((-1.0)*x7376))))));
j4eval[2]=IKsign(x7377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7378=r21*r21;
IkReal x7379=cj5*cj5;
IkReal x7380=(r21*sj5);
IkReal x7381=(cj5*r20);
CheckValue<IkReal> x7382=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r22*r22)))+(((2.0)*x7380*x7381))+(((-1.0)*x7378))+((x7378*x7379))+(((-1.0)*x7379*(r20*r20))))),-1);
if(!x7382.valid){
continue;
}
CheckValue<IkReal> x7383 = IKatan2WithCheck(IkReal(r22),IkReal((x7380+(((-1.0)*x7381)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7383.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7382.value)))+(x7383.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7384=IKsin(j4);
IkReal x7385=IKcos(j4);
IkReal x7386=(r11*sj5);
IkReal x7387=(r21*sj5);
IkReal x7388=(cj5*r00);
IkReal x7389=(cj5*r20);
IkReal x7390=(r01*sj5);
IkReal x7391=(cj5*r10);
IkReal x7392=((1.0)*x7385);
IkReal x7393=((1.0)*x7384);
evalcond[0]=((((-1.0)*r22*x7392))+((x7384*x7387))+(((-1.0)*x7389*x7393)));
evalcond[1]=((((-1.0)*x7390*x7392))+(((-1.0)*r02*x7393))+((x7385*x7388)));
evalcond[2]=((((-1.0)*r12*x7393))+((x7385*x7391))+(((-1.0)*x7386*x7392)));
evalcond[3]=((((-1.0)*r12*x7392))+cj0+((x7384*x7386))+(((-1.0)*x7391*x7393)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7393))+((x7385*x7389))+(((-1.0)*x7387*x7392)));
evalcond[5]=((((-1.0)*sj0))+((x7384*x7390))+(((-1.0)*r02*x7392))+(((-1.0)*x7388*x7393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7394=((1.0)*cj5);
CheckValue<IkReal> x7395 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7395.valid){
continue;
}
CheckValue<IkReal> x7396=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7394)))),-1);
if(!x7396.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7395.value)+(((1.5707963267949)*(x7396.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7397=IKsin(j4);
IkReal x7398=IKcos(j4);
IkReal x7399=(r11*sj5);
IkReal x7400=(r21*sj5);
IkReal x7401=(cj5*r00);
IkReal x7402=(cj5*r20);
IkReal x7403=(r01*sj5);
IkReal x7404=(cj5*r10);
IkReal x7405=((1.0)*x7398);
IkReal x7406=((1.0)*x7397);
evalcond[0]=(((x7397*x7400))+(((-1.0)*r22*x7405))+(((-1.0)*x7402*x7406)));
evalcond[1]=((((-1.0)*x7403*x7405))+((x7398*x7401))+(((-1.0)*r02*x7406)));
evalcond[2]=((((-1.0)*r12*x7406))+(((-1.0)*x7399*x7405))+((x7398*x7404)));
evalcond[3]=(((x7397*x7399))+(((-1.0)*r12*x7405))+cj0+(((-1.0)*x7404*x7406)));
evalcond[4]=((-1.0)+((x7398*x7402))+(((-1.0)*r22*x7406))+(((-1.0)*x7400*x7405)));
evalcond[5]=(((x7397*x7403))+(((-1.0)*sj0))+(((-1.0)*x7401*x7406))+(((-1.0)*r02*x7405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7407=((1.0)*sj5);
CheckValue<IkReal> x7408 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7407))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7408.valid){
continue;
}
CheckValue<IkReal> x7409=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7407)))),-1);
if(!x7409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7408.value)+(((1.5707963267949)*(x7409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7410=IKsin(j4);
IkReal x7411=IKcos(j4);
IkReal x7412=(r11*sj5);
IkReal x7413=(r21*sj5);
IkReal x7414=(cj5*r00);
IkReal x7415=(cj5*r20);
IkReal x7416=(r01*sj5);
IkReal x7417=(cj5*r10);
IkReal x7418=((1.0)*x7411);
IkReal x7419=((1.0)*x7410);
evalcond[0]=(((x7410*x7413))+(((-1.0)*x7415*x7419))+(((-1.0)*r22*x7418)));
evalcond[1]=((((-1.0)*x7416*x7418))+((x7411*x7414))+(((-1.0)*r02*x7419)));
evalcond[2]=((((-1.0)*r12*x7419))+((x7411*x7417))+(((-1.0)*x7412*x7418)));
evalcond[3]=((((-1.0)*r12*x7418))+((x7410*x7412))+cj0+(((-1.0)*x7417*x7419)));
evalcond[4]=((-1.0)+((x7411*x7415))+(((-1.0)*r22*x7419))+(((-1.0)*x7413*x7418)));
evalcond[5]=(((x7410*x7416))+(((-1.0)*sj0))+(((-1.0)*x7414*x7419))+(((-1.0)*r02*x7418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7420=IKsin(j0);
IkReal x7421=IKcos(j0);
evalcond[0]=((((0.39225)*x7421))+(((-1.0)*px))+(((-0.10915)*x7420)));
evalcond[1]=((((0.39225)*x7420))+(((-1.0)*py))+(((0.10915)*x7421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7422=((1.0)*cj5);
IkReal x7423=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7422)));
j4eval[0]=x7423;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7422))))));
j4eval[2]=IKsign(x7423);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7424=((1.0)*cj5);
IkReal x7425=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7424)));
j4eval[0]=x7425;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7424))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7425);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7426=cj5*cj5;
IkReal x7427=((1.0)*sj5);
IkReal x7428=(cj5*r20);
IkReal x7429=(r11*r21);
IkReal x7430=((((-1.0)*cj5*r10*r21*x7427))+(((-1.0)*r11*x7427*x7428))+(((-1.0)*x7426*x7429))+((r12*r22))+((r10*r20*x7426))+x7429);
j4eval[0]=x7430;
j4eval[1]=IKsign(x7430);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x7427))+((cj0*x7428)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7431=cj5*cj5;
IkReal x7432=((1.0)*sj5);
IkReal x7433=(cj5*r20);
IkReal x7434=(r11*r21);
CheckValue<IkReal> x7435 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7432))+((cj0*x7433)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7435.valid){
continue;
}
CheckValue<IkReal> x7436=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7432*x7433))+(((-1.0)*cj5*r10*r21*x7432))+(((-1.0)*x7431*x7434))+((r12*r22))+((r10*r20*x7431))+x7434)),-1);
if(!x7436.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7435.value)+(((1.5707963267949)*(x7436.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7437=IKsin(j4);
IkReal x7438=IKcos(j4);
IkReal x7439=((1.0)*sj0);
IkReal x7440=(cj5*r00);
IkReal x7441=(r11*sj5);
IkReal x7442=(cj5*r10);
IkReal x7443=(r21*sj5);
IkReal x7444=(cj5*r20);
IkReal x7445=(r01*sj5);
IkReal x7446=((1.0)*x7438);
IkReal x7447=((1.0)*x7437);
evalcond[0]=(((x7437*x7443))+(((-1.0)*x7444*x7447))+(((-1.0)*r22*x7446)));
evalcond[1]=(((x7438*x7444))+(((-1.0)*r22*x7447))+(((-1.0)*x7443*x7446)));
evalcond[2]=(cj0+(((-1.0)*x7442*x7447))+((x7437*x7441))+(((-1.0)*r12*x7446)));
evalcond[3]=((((-1.0)*x7440*x7447))+(((-1.0)*x7439))+(((-1.0)*r02*x7446))+((x7437*x7445)));
evalcond[4]=(((x7438*x7440))+(((-1.0)*r02*x7447))+(((-1.0)*x7445*x7446))+(((-1.0)*cj0)));
evalcond[5]=(((x7438*x7442))+(((-1.0)*x7439))+(((-1.0)*x7441*x7446))+(((-1.0)*r12*x7447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7448=((1.0)*cj5);
CheckValue<IkReal> x7449 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7448)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7449.valid){
continue;
}
CheckValue<IkReal> x7450=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7448)))),-1);
if(!x7450.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7449.value)+(((1.5707963267949)*(x7450.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7451=IKsin(j4);
IkReal x7452=IKcos(j4);
IkReal x7453=((1.0)*sj0);
IkReal x7454=(cj5*r00);
IkReal x7455=(r11*sj5);
IkReal x7456=(cj5*r10);
IkReal x7457=(r21*sj5);
IkReal x7458=(cj5*r20);
IkReal x7459=(r01*sj5);
IkReal x7460=((1.0)*x7452);
IkReal x7461=((1.0)*x7451);
evalcond[0]=((((-1.0)*x7458*x7461))+(((-1.0)*r22*x7460))+((x7451*x7457)));
evalcond[1]=((((-1.0)*r22*x7461))+((x7452*x7458))+(((-1.0)*x7457*x7460)));
evalcond[2]=(cj0+(((-1.0)*r12*x7460))+(((-1.0)*x7456*x7461))+((x7451*x7455)));
evalcond[3]=((((-1.0)*x7454*x7461))+(((-1.0)*x7453))+(((-1.0)*r02*x7460))+((x7451*x7459)));
evalcond[4]=((((-1.0)*r02*x7461))+(((-1.0)*x7459*x7460))+((x7452*x7454))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7453))+(((-1.0)*r12*x7461))+(((-1.0)*x7455*x7460))+((x7452*x7456)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7462=((1.0)*cj5);
CheckValue<IkReal> x7463=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7462)))),-1);
if(!x7463.valid){
continue;
}
CheckValue<IkReal> x7464 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7462)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7464.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7463.value)))+(x7464.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7465=IKsin(j4);
IkReal x7466=IKcos(j4);
IkReal x7467=((1.0)*sj0);
IkReal x7468=(cj5*r00);
IkReal x7469=(r11*sj5);
IkReal x7470=(cj5*r10);
IkReal x7471=(r21*sj5);
IkReal x7472=(cj5*r20);
IkReal x7473=(r01*sj5);
IkReal x7474=((1.0)*x7466);
IkReal x7475=((1.0)*x7465);
evalcond[0]=(((x7465*x7471))+(((-1.0)*r22*x7474))+(((-1.0)*x7472*x7475)));
evalcond[1]=((((-1.0)*r22*x7475))+((x7466*x7472))+(((-1.0)*x7471*x7474)));
evalcond[2]=(cj0+((x7465*x7469))+(((-1.0)*x7470*x7475))+(((-1.0)*r12*x7474)));
evalcond[3]=((((-1.0)*r02*x7474))+((x7465*x7473))+(((-1.0)*x7467))+(((-1.0)*x7468*x7475)));
evalcond[4]=((((-1.0)*r02*x7475))+(((-1.0)*x7473*x7474))+((x7466*x7468))+(((-1.0)*cj0)));
evalcond[5]=(((x7466*x7470))+(((-1.0)*x7467))+(((-1.0)*x7469*x7474))+(((-1.0)*r12*x7475)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7476=((1.0)*sj5);
IkReal x7477=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7477))+(((-1.0)*r10*x7476)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r00*x7476))+(((-1.0)*r01*x7477)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7477))+(((-1.0)*r10*x7476))))+IKsqr(((((-1.0)*r00*x7476))+(((-1.0)*r01*x7477))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7477))+(((-1.0)*r10*x7476))), ((((-1.0)*r00*x7476))+(((-1.0)*r01*x7477))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7478=IKsin(j0);
IkReal x7479=IKcos(j0);
IkReal x7480=((1.0)*cj5);
IkReal x7481=((1.0)*sj5);
IkReal x7482=((0.09465)*cj5);
IkReal x7483=((0.09465)*sj5);
evalcond[0]=((((-1.0)*r01*x7480))+(((-1.0)*r00*x7481))+(((-1.0)*x7479)));
evalcond[1]=((((-1.0)*r10*x7481))+(((-1.0)*x7478))+(((-1.0)*r11*x7480)));
evalcond[2]=((((-0.10915)*x7478))+(((-1.0)*r01*x7482))+(((-1.0)*px))+(((-1.0)*r00*x7483)));
evalcond[3]=((((0.10915)*x7479))+(((-1.0)*py))+(((-1.0)*r10*x7483))+(((-1.0)*r11*x7482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7484=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7484;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7484);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7485=((1.0)*cj5);
IkReal x7486=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7485)));
j4eval[0]=x7486;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7485)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7486);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7487=cj5*cj5;
IkReal x7488=r21*r21;
IkReal x7489=(r21*sj5);
IkReal x7490=(cj5*r20);
IkReal x7491=((r22*r22)+(((-2.0)*x7489*x7490))+x7488+((x7487*(r20*r20)))+(((-1.0)*x7487*x7488)));
j4eval[0]=x7491;
j4eval[1]=IKsign(x7491);
j4eval[2]=((IKabs(((((-1.0)*x7490))+x7489)))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7492=cj5*cj5;
IkReal x7493=r21*r21;
IkReal x7494=(r21*sj5);
IkReal x7495=(cj5*r20);
CheckValue<IkReal> x7496=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7492*x7493))+(r22*r22)+((x7492*(r20*r20)))+(((-2.0)*x7494*x7495))+x7493)),-1);
if(!x7496.valid){
continue;
}
CheckValue<IkReal> x7497 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*x7495))+x7494)),IKFAST_ATAN2_MAGTHRESH);
if(!x7497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7496.value)))+(x7497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7498=IKsin(j4);
IkReal x7499=IKcos(j4);
IkReal x7500=(r11*sj5);
IkReal x7501=(r21*sj5);
IkReal x7502=(cj5*r00);
IkReal x7503=(cj5*r20);
IkReal x7504=(r01*sj5);
IkReal x7505=(cj5*r10);
IkReal x7506=((1.0)*x7499);
IkReal x7507=((1.0)*x7498);
evalcond[0]=((((-1.0)*r22*x7506))+(((-1.0)*x7503*x7507))+((x7498*x7501)));
evalcond[1]=(((x7499*x7502))+(((-1.0)*r02*x7507))+(((-1.0)*x7504*x7506)));
evalcond[2]=((((-1.0)*x7500*x7506))+((x7499*x7505))+(((-1.0)*r12*x7507)));
evalcond[3]=(cj0+((x7498*x7500))+(((-1.0)*x7505*x7507))+(((-1.0)*r12*x7506)));
evalcond[4]=((1.0)+(((-1.0)*x7501*x7506))+(((-1.0)*r22*x7507))+((x7499*x7503)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7502*x7507))+(((-1.0)*r02*x7506))+((x7498*x7504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7508=((1.0)*cj5);
CheckValue<IkReal> x7509 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7509.valid){
continue;
}
CheckValue<IkReal> x7510=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7508))+(((-1.0)*r00*sj5)))),-1);
if(!x7510.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7509.value)+(((1.5707963267949)*(x7510.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7511=IKsin(j4);
IkReal x7512=IKcos(j4);
IkReal x7513=(r11*sj5);
IkReal x7514=(r21*sj5);
IkReal x7515=(cj5*r00);
IkReal x7516=(cj5*r20);
IkReal x7517=(r01*sj5);
IkReal x7518=(cj5*r10);
IkReal x7519=((1.0)*x7512);
IkReal x7520=((1.0)*x7511);
evalcond[0]=((((-1.0)*x7516*x7520))+((x7511*x7514))+(((-1.0)*r22*x7519)));
evalcond[1]=((((-1.0)*r02*x7520))+(((-1.0)*x7517*x7519))+((x7512*x7515)));
evalcond[2]=(((x7512*x7518))+(((-1.0)*x7513*x7519))+(((-1.0)*r12*x7520)));
evalcond[3]=(cj0+(((-1.0)*x7518*x7520))+((x7511*x7513))+(((-1.0)*r12*x7519)));
evalcond[4]=((1.0)+((x7512*x7516))+(((-1.0)*r22*x7520))+(((-1.0)*x7514*x7519)));
evalcond[5]=((((-1.0)*x7515*x7520))+(((-1.0)*sj0))+(((-1.0)*r02*x7519))+((x7511*x7517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7521 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7521.valid){
continue;
}
CheckValue<IkReal> x7522=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7521.value)+(((1.5707963267949)*(x7522.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7523=IKsin(j4);
IkReal x7524=IKcos(j4);
IkReal x7525=(r11*sj5);
IkReal x7526=(r21*sj5);
IkReal x7527=(cj5*r00);
IkReal x7528=(cj5*r20);
IkReal x7529=(r01*sj5);
IkReal x7530=(cj5*r10);
IkReal x7531=((1.0)*x7524);
IkReal x7532=((1.0)*x7523);
evalcond[0]=((((-1.0)*r22*x7531))+(((-1.0)*x7528*x7532))+((x7523*x7526)));
evalcond[1]=((((-1.0)*x7529*x7531))+((x7524*x7527))+(((-1.0)*r02*x7532)));
evalcond[2]=((((-1.0)*r12*x7532))+((x7524*x7530))+(((-1.0)*x7525*x7531)));
evalcond[3]=(cj0+(((-1.0)*r12*x7531))+(((-1.0)*x7530*x7532))+((x7523*x7525)));
evalcond[4]=((1.0)+(((-1.0)*x7526*x7531))+((x7524*x7528))+(((-1.0)*r22*x7532)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7527*x7532))+(((-1.0)*r02*x7531))+((x7523*x7529)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7533=IKcos(j0);
IkReal x7534=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x7533))+(((-0.10915)*x7534)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7534))+(((0.10915)*x7533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7535=((1.0)*cj5);
IkReal x7536=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7535)));
j4eval[0]=x7536;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7535))))));
j4eval[2]=IKsign(x7536);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7537=cj5*cj5;
IkReal x7538=((1.0)*r21);
IkReal x7539=(cj5*sj5);
IkReal x7540=((1.0)*r20);
IkReal x7541=((((-1.0)*r01*x7537*x7538))+(((-1.0)*r00*x7538*x7539))+((r01*r21))+(((-1.0)*r01*x7539*x7540))+((r02*r22))+((r00*r20*x7537)));
j4eval[0]=x7541;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7540))))));
j4eval[2]=IKsign(x7541);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7542=cj5*cj5;
IkReal x7543=(r21*sj5);
IkReal x7544=(r11*r21);
IkReal x7545=((1.0)*cj5*r20);
IkReal x7546=((((-1.0)*r11*sj5*x7545))+((r10*r20*x7542))+((r12*r22))+x7544+(((-1.0)*cj5*r10*x7543))+(((-1.0)*x7542*x7544)));
j4eval[0]=x7546;
j4eval[1]=((IKabs((((sj0*x7543))+(((-1.0)*sj0*x7545)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7546);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7547=cj5*cj5;
IkReal x7548=(r21*sj5);
IkReal x7549=(r11*r21);
IkReal x7550=((1.0)*cj5*r20);
CheckValue<IkReal> x7551=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x7550))+((r10*r20*x7547))+((r12*r22))+x7549+(((-1.0)*cj5*r10*x7548))+(((-1.0)*x7547*x7549)))),-1);
if(!x7551.valid){
continue;
}
CheckValue<IkReal> x7552 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7548))+(((-1.0)*sj0*x7550)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7552.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7551.value)))+(x7552.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7553=IKsin(j4);
IkReal x7554=IKcos(j4);
IkReal x7555=(r11*sj5);
IkReal x7556=(cj5*r00);
IkReal x7557=(cj5*r10);
IkReal x7558=(r21*sj5);
IkReal x7559=(cj5*r20);
IkReal x7560=(r01*sj5);
IkReal x7561=((1.0)*x7554);
IkReal x7562=((1.0)*x7553);
evalcond[0]=((((-1.0)*x7559*x7562))+(((-1.0)*r22*x7561))+((x7553*x7558)));
evalcond[1]=((((-1.0)*r22*x7562))+(((-1.0)*x7558*x7561))+((x7554*x7559)));
evalcond[2]=(cj0+(((-1.0)*x7557*x7562))+(((-1.0)*r12*x7561))+((x7553*x7555)));
evalcond[3]=((((-1.0)*r02*x7562))+cj0+(((-1.0)*x7560*x7561))+((x7554*x7556)));
evalcond[4]=((((-1.0)*x7555*x7561))+sj0+(((-1.0)*r12*x7562))+((x7554*x7557)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7561))+((x7553*x7560))+(((-1.0)*x7556*x7562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7563=cj5*cj5;
IkReal x7564=((1.0)*r21);
IkReal x7565=(cj5*sj5);
IkReal x7566=((1.0)*r20);
CheckValue<IkReal> x7567=IKPowWithIntegerCheck(IKsign((((r00*r20*x7563))+(((-1.0)*r00*x7564*x7565))+(((-1.0)*r01*x7563*x7564))+(((-1.0)*r01*x7565*x7566))+((r01*r21))+((r02*r22)))),-1);
if(!x7567.valid){
continue;
}
CheckValue<IkReal> x7568 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7567.value)))+(x7568.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7569=IKsin(j4);
IkReal x7570=IKcos(j4);
IkReal x7571=(r11*sj5);
IkReal x7572=(cj5*r00);
IkReal x7573=(cj5*r10);
IkReal x7574=(r21*sj5);
IkReal x7575=(cj5*r20);
IkReal x7576=(r01*sj5);
IkReal x7577=((1.0)*x7570);
IkReal x7578=((1.0)*x7569);
evalcond[0]=(((x7569*x7574))+(((-1.0)*x7575*x7578))+(((-1.0)*r22*x7577)));
evalcond[1]=((((-1.0)*x7574*x7577))+((x7570*x7575))+(((-1.0)*r22*x7578)));
evalcond[2]=(cj0+((x7569*x7571))+(((-1.0)*r12*x7577))+(((-1.0)*x7573*x7578)));
evalcond[3]=(cj0+(((-1.0)*x7576*x7577))+(((-1.0)*r02*x7578))+((x7570*x7572)));
evalcond[4]=((((-1.0)*x7571*x7577))+sj0+((x7570*x7573))+(((-1.0)*r12*x7578)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7577))+((x7569*x7576))+(((-1.0)*x7572*x7578)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7579=((1.0)*cj5);
CheckValue<IkReal> x7580=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7579))+(((-1.0)*r00*sj5)))),-1);
if(!x7580.valid){
continue;
}
CheckValue<IkReal> x7581 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7579)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7580.value)))+(x7581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7582=IKsin(j4);
IkReal x7583=IKcos(j4);
IkReal x7584=(r11*sj5);
IkReal x7585=(cj5*r00);
IkReal x7586=(cj5*r10);
IkReal x7587=(r21*sj5);
IkReal x7588=(cj5*r20);
IkReal x7589=(r01*sj5);
IkReal x7590=((1.0)*x7583);
IkReal x7591=((1.0)*x7582);
evalcond[0]=(((x7582*x7587))+(((-1.0)*r22*x7590))+(((-1.0)*x7588*x7591)));
evalcond[1]=(((x7583*x7588))+(((-1.0)*r22*x7591))+(((-1.0)*x7587*x7590)));
evalcond[2]=(((x7582*x7584))+cj0+(((-1.0)*x7586*x7591))+(((-1.0)*r12*x7590)));
evalcond[3]=(cj0+((x7583*x7585))+(((-1.0)*x7589*x7590))+(((-1.0)*r02*x7591)));
evalcond[4]=(sj0+((x7583*x7586))+(((-1.0)*r12*x7591))+(((-1.0)*x7584*x7590)));
evalcond[5]=((((-1.0)*sj0))+((x7582*x7589))+(((-1.0)*r02*x7590))+(((-1.0)*x7585*x7591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7592=cj1*cj1;
IkReal x7593=(cj1*sj1);
IkReal x7594=(cj1*sj2);
IkReal x7595=(r00*sj5);
IkReal x7596=(cj2*sj1);
IkReal x7597=(cj5*r01);
IkReal x7598=((20000.0)*py);
IkReal x7599=((1893.0)*r10*sj5);
IkReal x7600=((1893.0)*cj5*r11);
IkReal x7601=(sj2*x7592);
CheckValue<IkReal> x7602=IKPowWithIntegerCheck(((((-15690.0)*x7593*(cj2*cj2)))+(((-15690.0)*cj2*x7601))+(((-8500.0)*x7601))+(((7845.0)*cj2*sj2))+(((-8500.0)*cj2*x7593))+(((7845.0)*x7593))),-1);
if(!x7602.valid){
continue;
}
CheckValue<IkReal> x7603=IKPowWithIntegerCheck(((((-1.0)*x7596))+(((-1.0)*x7594))),-1);
if(!x7603.valid){
continue;
}
if( IKabs(((x7602.value)*(((((-1.0)*x7594*x7600))+(((-1.0)*x7596*x7599))+(((-1.0)*x7596*x7598))+(((-1.0)*x7594*x7599))+(((-1.0)*x7594*x7598))+(((-1.0)*x7596*x7600))+(((-2183.0)*x7595))+(((-2183.0)*x7597)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7603.value)*((x7597+x7595)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7602.value)*(((((-1.0)*x7594*x7600))+(((-1.0)*x7596*x7599))+(((-1.0)*x7596*x7598))+(((-1.0)*x7594*x7599))+(((-1.0)*x7594*x7598))+(((-1.0)*x7596*x7600))+(((-2183.0)*x7595))+(((-2183.0)*x7597))))))+IKsqr(((x7603.value)*((x7597+x7595))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7602.value)*(((((-1.0)*x7594*x7600))+(((-1.0)*x7596*x7599))+(((-1.0)*x7596*x7598))+(((-1.0)*x7594*x7599))+(((-1.0)*x7594*x7598))+(((-1.0)*x7596*x7600))+(((-2183.0)*x7595))+(((-2183.0)*x7597))))), ((x7603.value)*((x7597+x7595))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7604=IKcos(j0);
IkReal x7605=IKsin(j0);
IkReal x7606=((1.0)*cj1);
IkReal x7607=((0.39225)*sj1);
IkReal x7608=(cj5*r11);
IkReal x7609=((1.0)*sj5);
IkReal x7610=(cj5*r01);
IkReal x7611=((1.0)*sj1);
IkReal x7612=((0.09465)*sj5);
IkReal x7613=((0.39225)*cj1);
IkReal x7614=((0.425)*cj1);
IkReal x7615=(sj2*x7604);
IkReal x7616=(sj2*x7605);
IkReal x7617=(cj2*x7604);
IkReal x7618=(cj2*x7605);
evalcond[0]=((((-1.0)*x7611*x7617))+(((-1.0)*x7606*x7615))+(((-1.0)*r00*x7609))+(((-1.0)*x7610)));
evalcond[1]=((((-1.0)*r10*x7609))+(((-1.0)*x7611*x7618))+(((-1.0)*x7606*x7616))+(((-1.0)*x7608)));
evalcond[2]=(((x7613*x7617))+((x7604*x7614))+(((-0.09465)*x7610))+(((-1.0)*px))+(((-1.0)*r00*x7612))+(((-1.0)*x7607*x7615))+(((-0.10915)*x7605)));
evalcond[3]=(((x7605*x7614))+((x7613*x7618))+(((-0.09465)*x7608))+(((-1.0)*py))+(((0.10915)*x7604))+(((-1.0)*r10*x7612))+(((-1.0)*x7607*x7616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7619=((1.0)*cj5);
IkReal x7620=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7619)));
j4eval[0]=x7620;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7619)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7620);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7621=((1.0)*cj5);
IkReal x7622=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7621)));
j4eval[0]=x7622;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x7621))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x7622);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7623=((1.0)*sj0);
IkReal x7624=((1.0)*cj0);
IkReal x7625=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7625;
j4eval[1]=((IKabs(((((-1.0)*r12*x7623))+(((-1.0)*r02*x7624)))))+(IKabs(((((-1.0)*r11*sj5*x7623))+((cj0*cj5*r00))+(((-1.0)*r01*sj5*x7624))+((cj5*r10*sj0))))));
j4eval[2]=IKsign(x7625);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7626=((-1.0)*r20);
IkReal x7628 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7628)==0){
continue;
}
IkReal x7627=pow(x7628,-0.5);
CheckValue<IkReal> x7629 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7626),IKFAST_ATAN2_MAGTHRESH);
if(!x7629.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7629.value));
IkReal gconst133=(r21*x7627);
IkReal gconst134=(x7626*x7627);
CheckValue<IkReal> x7630 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7630.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7630.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7631=((-1.0)*r20);
IkReal x7632=x7627;
CheckValue<IkReal> x7634 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7631),IKFAST_ATAN2_MAGTHRESH);
if(!x7634.valid){
continue;
}
IkReal x7633=((-1.0)*(x7634.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7633;
IkReal gconst132=x7633;
IkReal gconst133=(r21*x7632);
IkReal gconst134=(x7631*x7632);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7635=((-1.0)*r20);
IkReal x7636=x7627;
CheckValue<IkReal> x7638 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7635),IKFAST_ATAN2_MAGTHRESH);
if(!x7638.valid){
continue;
}
IkReal x7637=((-1.0)*(x7638.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7637;
IkReal gconst132=x7637;
IkReal gconst133=(r21*x7636);
IkReal gconst134=(x7635*x7636);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7639=((-1.0)*r20);
IkReal x7640=x7627;
CheckValue<IkReal> x7642 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7639),IKFAST_ATAN2_MAGTHRESH);
if(!x7642.valid){
continue;
}
IkReal x7641=((-1.0)*(x7642.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7641;
IkReal gconst132=x7641;
IkReal gconst133=(r21*x7640);
IkReal gconst134=(x7639*x7640);
IkReal x7643=r22*r22;
CheckValue<IkReal> x7646=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7643))),-1);
if(!x7646.valid){
continue;
}
IkReal x7644=x7646.value;
IkReal x7645=(((x7644*(r21*r21*r21*r21)))+((x7644*(r20*r20*r20*r20)))+x7643+(((2.0)*x7644*(r20*r20)*(r21*r21))));
j4eval[0]=x7645;
j4eval[1]=IKsign(x7645);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7647=(gconst133*r21);
IkReal x7648=(cj1*sj2);
IkReal x7649=(gconst134*r20);
IkReal x7650=(cj2*sj1);
CheckValue<IkReal> x7651=IKPowWithIntegerCheck(IKsign(((x7647*x7647)+(r22*r22)+(((-2.0)*x7647*x7649))+(x7649*x7649))),-1);
if(!x7651.valid){
continue;
}
CheckValue<IkReal> x7652 = IKatan2WithCheck(IkReal((((r22*x7648))+((r22*x7650)))),IkReal(((((-1.0)*x7648*x7649))+(((-1.0)*x7649*x7650))+((x7647*x7650))+((x7647*x7648)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7652.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7651.value)))+(x7652.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7653=IKsin(j4);
IkReal x7654=IKcos(j4);
IkReal x7655=(sj1*sj2);
IkReal x7656=(gconst133*r11);
IkReal x7657=(gconst133*r21);
IkReal x7658=(gconst133*r01);
IkReal x7659=((1.0)*x7654);
IkReal x7660=(gconst134*x7654);
IkReal x7661=((1.0)*x7653);
IkReal x7662=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7659))+(((-1.0)*gconst134*r20*x7661))+((x7653*x7657)));
evalcond[1]=((((-1.0)*gconst134*r10*x7661))+cj0+(((-1.0)*r12*x7659))+((x7653*x7656)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7659))+(((-1.0)*gconst134*r00*x7661))+((x7653*x7658)));
evalcond[3]=(((cj2*sj1))+((r20*x7660))+((cj1*sj2))+(((-1.0)*r22*x7661))+(((-1.0)*x7657*x7659)));
evalcond[4]=((((-1.0)*cj0*x7662))+((r00*x7660))+(((-1.0)*r02*x7661))+((cj0*x7655))+(((-1.0)*x7658*x7659)));
evalcond[5]=((((-1.0)*r12*x7661))+((r10*x7660))+(((-1.0)*x7656*x7659))+(((-1.0)*sj0*x7662))+((sj0*x7655)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7663=((1.0)*gconst134);
CheckValue<IkReal> x7664 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7663))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7664.valid){
continue;
}
CheckValue<IkReal> x7665=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7663)))),-1);
if(!x7665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7664.value)+(((1.5707963267949)*(x7665.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7666=IKsin(j4);
IkReal x7667=IKcos(j4);
IkReal x7668=(sj1*sj2);
IkReal x7669=(gconst133*r11);
IkReal x7670=(gconst133*r21);
IkReal x7671=(gconst133*r01);
IkReal x7672=((1.0)*x7667);
IkReal x7673=(gconst134*x7667);
IkReal x7674=((1.0)*x7666);
IkReal x7675=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7674))+(((-1.0)*r22*x7672))+((x7666*x7670)));
evalcond[1]=(((x7666*x7669))+cj0+(((-1.0)*gconst134*r10*x7674))+(((-1.0)*r12*x7672)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7672))+(((-1.0)*gconst134*r00*x7674))+((x7666*x7671)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7670*x7672))+((r20*x7673))+(((-1.0)*r22*x7674)));
evalcond[4]=((((-1.0)*r02*x7674))+(((-1.0)*cj0*x7675))+((cj0*x7668))+((r00*x7673))+(((-1.0)*x7671*x7672)));
evalcond[5]=((((-1.0)*sj0*x7675))+(((-1.0)*r12*x7674))+((r10*x7673))+((sj0*x7668))+(((-1.0)*x7669*x7672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7676=((1.0)*gconst134);
CheckValue<IkReal> x7677 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7676))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7677.valid){
continue;
}
CheckValue<IkReal> x7678=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7676)))),-1);
if(!x7678.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7677.value)+(((1.5707963267949)*(x7678.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7679=IKsin(j4);
IkReal x7680=IKcos(j4);
IkReal x7681=(sj1*sj2);
IkReal x7682=(gconst133*r11);
IkReal x7683=(gconst133*r21);
IkReal x7684=(gconst133*r01);
IkReal x7685=((1.0)*x7680);
IkReal x7686=(gconst134*x7680);
IkReal x7687=((1.0)*x7679);
IkReal x7688=((1.0)*cj1*cj2);
evalcond[0]=(((x7679*x7683))+(((-1.0)*gconst134*r20*x7687))+(((-1.0)*r22*x7685)));
evalcond[1]=(((x7679*x7682))+(((-1.0)*gconst134*r10*x7687))+cj0+(((-1.0)*r12*x7685)));
evalcond[2]=(((x7679*x7684))+(((-1.0)*gconst134*r00*x7687))+(((-1.0)*sj0))+(((-1.0)*r02*x7685)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7687))+((r20*x7686))+(((-1.0)*x7683*x7685)));
evalcond[4]=((((-1.0)*cj0*x7688))+((cj0*x7681))+((r00*x7686))+(((-1.0)*x7684*x7685))+(((-1.0)*r02*x7687)));
evalcond[5]=(((sj0*x7681))+((r10*x7686))+(((-1.0)*x7682*x7685))+(((-1.0)*r12*x7687))+(((-1.0)*sj0*x7688)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7689=((-1.0)*r21);
IkReal x7691 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7691)==0){
continue;
}
IkReal x7690=pow(x7691,-0.5);
CheckValue<IkReal> x7692 = IKatan2WithCheck(IkReal(x7689),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7692.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7692.value))));
IkReal gconst136=(x7689*x7690);
IkReal gconst137=((1.0)*r20*x7690);
CheckValue<IkReal> x7693 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7693.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7693.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7694=((-1.0)*r21);
CheckValue<IkReal> x7697 = IKatan2WithCheck(IkReal(x7694),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7697.valid){
continue;
}
IkReal x7695=((1.0)*(x7697.value));
IkReal x7696=x7690;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7695)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7695)));
IkReal gconst136=(x7694*x7696);
IkReal gconst137=((1.0)*r20*x7696);
IkReal x7698=r22*r22;
IkReal x7699=((1.0)*x7698);
CheckValue<IkReal> x7703=IKPowWithIntegerCheck(((-1.0)+x7698),-1);
if(!x7703.valid){
continue;
}
IkReal x7700=x7703.value;
if((((1.0)+(((-1.0)*x7699)))) < -0.00001)
continue;
IkReal x7701=IKsqrt(((1.0)+(((-1.0)*x7699))));
IkReal x7702=(cj0*x7700*x7701);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x7699*x7702))+x7702))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7704=((-1.0)*r21);
CheckValue<IkReal> x7707 = IKatan2WithCheck(IkReal(x7704),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7707.valid){
continue;
}
IkReal x7705=((1.0)*(x7707.value));
IkReal x7706=x7690;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7705)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7705)));
IkReal gconst136=(x7704*x7706);
IkReal gconst137=((1.0)*r20*x7706);
IkReal x7708=r22*r22;
IkReal x7709=((1.0)*x7708);
CheckValue<IkReal> x7713=IKPowWithIntegerCheck(((-1.0)+x7708),-1);
if(!x7713.valid){
continue;
}
IkReal x7710=x7713.value;
if((((1.0)+(((-1.0)*x7709)))) < -0.00001)
continue;
IkReal x7711=IKsqrt(((1.0)+(((-1.0)*x7709))));
IkReal x7712=(sj0*x7710*x7711);
j4eval[0]=((IKabs((x7712+(((-1.0)*x7709*x7712)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7714=((-1.0)*r21);
CheckValue<IkReal> x7717 = IKatan2WithCheck(IkReal(x7714),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7717.valid){
continue;
}
IkReal x7715=((1.0)*(x7717.value));
IkReal x7716=x7690;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7715)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7715)));
IkReal gconst136=(x7714*x7716);
IkReal gconst137=((1.0)*r20*x7716);
IkReal x7718=r22*r22;
IkReal x7719=(r12*sj0);
IkReal x7720=(cj0*r02);
CheckValue<IkReal> x7724=IKPowWithIntegerCheck(((-1.0)+x7718),-1);
if(!x7724.valid){
continue;
}
IkReal x7721=x7724.value;
if((((1.0)+(((-1.0)*x7718)))) < -0.00001)
continue;
IkReal x7722=IKsqrt(((1.0)+(((-1.0)*x7718))));
IkReal x7723=(r22*x7721*x7722);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7719))+(((-1.0)*x7720)))))+(IKabs((((x7720*x7723))+((x7719*x7723))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7725=((1.0)*sj0);
IkReal x7726=((1.0)*cj0);
CheckValue<IkReal> x7727=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7727.valid){
continue;
}
CheckValue<IkReal> x7728 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7726))+(((-1.0)*r12*x7725)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7725))+(((-1.0)*gconst136*r01*x7726))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7727.value)))+(x7728.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7729=IKsin(j4);
IkReal x7730=IKcos(j4);
IkReal x7731=(gconst136*r01);
IkReal x7732=(gconst137*r10);
IkReal x7733=(sj1*sj2);
IkReal x7734=(gconst137*r20);
IkReal x7735=(gconst136*r11);
IkReal x7736=(gconst136*r21);
IkReal x7737=(gconst137*r00);
IkReal x7738=((1.0)*x7730);
IkReal x7739=((1.0)*cj1*cj2);
IkReal x7740=((1.0)*x7729);
evalcond[0]=(((x7729*x7736))+(((-1.0)*r22*x7738))+(((-1.0)*x7734*x7740)));
evalcond[1]=(cj0+((x7729*x7735))+(((-1.0)*r12*x7738))+(((-1.0)*x7732*x7740)));
evalcond[2]=((((-1.0)*sj0))+((x7729*x7731))+(((-1.0)*x7737*x7740))+(((-1.0)*r02*x7738)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7740))+(((-1.0)*x7736*x7738))+((cj1*sj2))+((x7730*x7734)));
evalcond[4]=((((-1.0)*cj0*x7739))+(((-1.0)*x7731*x7738))+(((-1.0)*r02*x7740))+((cj0*x7733))+((x7730*x7737)));
evalcond[5]=(((x7730*x7732))+(((-1.0)*r12*x7740))+(((-1.0)*x7735*x7738))+((sj0*x7733))+(((-1.0)*sj0*x7739)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7741=((1.0)*gconst137);
CheckValue<IkReal> x7742=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7741)))),-1);
if(!x7742.valid){
continue;
}
CheckValue<IkReal> x7743 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7741))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7742.value)))+(x7743.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7744=IKsin(j4);
IkReal x7745=IKcos(j4);
IkReal x7746=(gconst136*r01);
IkReal x7747=(gconst137*r10);
IkReal x7748=(sj1*sj2);
IkReal x7749=(gconst137*r20);
IkReal x7750=(gconst136*r11);
IkReal x7751=(gconst136*r21);
IkReal x7752=(gconst137*r00);
IkReal x7753=((1.0)*x7745);
IkReal x7754=((1.0)*cj1*cj2);
IkReal x7755=((1.0)*x7744);
evalcond[0]=((((-1.0)*r22*x7753))+(((-1.0)*x7749*x7755))+((x7744*x7751)));
evalcond[1]=(cj0+(((-1.0)*r12*x7753))+(((-1.0)*x7747*x7755))+((x7744*x7750)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7753))+(((-1.0)*x7752*x7755))+((x7744*x7746)));
evalcond[3]=((((-1.0)*r22*x7755))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x7751*x7753))+((x7745*x7749)));
evalcond[4]=((((-1.0)*r02*x7755))+(((-1.0)*cj0*x7754))+((cj0*x7748))+(((-1.0)*x7746*x7753))+((x7745*x7752)));
evalcond[5]=(((sj0*x7748))+(((-1.0)*r12*x7755))+(((-1.0)*sj0*x7754))+(((-1.0)*x7750*x7753))+((x7745*x7747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7756=((1.0)*gconst137);
CheckValue<IkReal> x7757=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x7756)))),-1);
if(!x7757.valid){
continue;
}
CheckValue<IkReal> x7758 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7756)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7757.value)))+(x7758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7759=IKsin(j4);
IkReal x7760=IKcos(j4);
IkReal x7761=(gconst136*r01);
IkReal x7762=(gconst137*r10);
IkReal x7763=(sj1*sj2);
IkReal x7764=(gconst137*r20);
IkReal x7765=(gconst136*r11);
IkReal x7766=(gconst136*r21);
IkReal x7767=(gconst137*r00);
IkReal x7768=((1.0)*x7760);
IkReal x7769=((1.0)*cj1*cj2);
IkReal x7770=((1.0)*x7759);
evalcond[0]=((((-1.0)*r22*x7768))+(((-1.0)*x7764*x7770))+((x7759*x7766)));
evalcond[1]=(cj0+(((-1.0)*r12*x7768))+(((-1.0)*x7762*x7770))+((x7759*x7765)));
evalcond[2]=((((-1.0)*x7767*x7770))+(((-1.0)*sj0))+(((-1.0)*r02*x7768))+((x7759*x7761)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7766*x7768))+((x7760*x7764))+(((-1.0)*r22*x7770))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r02*x7770))+((x7760*x7767))+(((-1.0)*cj0*x7769))+((cj0*x7763))+(((-1.0)*x7761*x7768)));
evalcond[5]=(((x7760*x7762))+((sj0*x7763))+(((-1.0)*sj0*x7769))+(((-1.0)*r12*x7770))+(((-1.0)*x7765*x7768)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7771=((-1.0)*r10);
IkReal x7773 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7773)==0){
continue;
}
IkReal x7772=pow(x7773,-0.5);
CheckValue<IkReal> x7774 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7771),IKFAST_ATAN2_MAGTHRESH);
if(!x7774.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7774.value));
IkReal gconst139=(r11*x7772);
IkReal gconst140=(x7771*x7772);
CheckValue<IkReal> x7775 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7775.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7775.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7776=((-1.0)*r10);
IkReal x7777=x7772;
CheckValue<IkReal> x7779 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7776),IKFAST_ATAN2_MAGTHRESH);
if(!x7779.valid){
continue;
}
IkReal x7778=((-1.0)*(x7779.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7778;
IkReal gconst138=x7778;
IkReal gconst139=(r11*x7777);
IkReal gconst140=(x7776*x7777);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7780=((1.0)*sj0);
IkReal x7781=((1.0)*gconst139);
CheckValue<IkReal> x7782 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7780)))),IkReal(((((-1.0)*gconst139*r11*x7780))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7781))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7782.valid){
continue;
}
CheckValue<IkReal> x7783=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7781)))),-1);
if(!x7783.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7782.value)+(((1.5707963267949)*(x7783.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7784=IKsin(j4);
IkReal x7785=IKcos(j4);
IkReal x7786=(gconst140*r00);
IkReal x7787=(sj1*sj2);
IkReal x7788=(gconst139*r11);
IkReal x7789=(gconst139*r01);
IkReal x7790=(gconst139*r21);
IkReal x7791=((1.0)*x7785);
IkReal x7792=((1.0)*x7784);
IkReal x7793=((1.0)*cj1*cj2);
IkReal x7794=(gconst140*x7785);
evalcond[0]=((((-1.0)*r22*x7791))+((x7784*x7790))+(((-1.0)*gconst140*r20*x7792)));
evalcond[1]=(((x7784*x7788))+cj0+(((-1.0)*r12*x7791))+(((-1.0)*gconst140*r10*x7792)));
evalcond[2]=((((-1.0)*x7786*x7792))+(((-1.0)*sj0))+((x7784*x7789))+(((-1.0)*r02*x7791)));
evalcond[3]=((((-1.0)*r22*x7792))+((cj2*sj1))+((cj1*sj2))+((r20*x7794))+(((-1.0)*x7790*x7791)));
evalcond[4]=((((-1.0)*cj0*x7793))+((x7785*x7786))+(((-1.0)*r02*x7792))+((cj0*x7787))+(((-1.0)*x7789*x7791)));
evalcond[5]=(((sj0*x7787))+((r10*x7794))+(((-1.0)*r12*x7792))+(((-1.0)*x7788*x7791))+(((-1.0)*sj0*x7793)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7795=((1.0)*gconst140);
CheckValue<IkReal> x7796=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7795)))),-1);
if(!x7796.valid){
continue;
}
CheckValue<IkReal> x7797 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7795)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7797.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7796.value)))+(x7797.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7798=IKsin(j4);
IkReal x7799=IKcos(j4);
IkReal x7800=(gconst140*r00);
IkReal x7801=(sj1*sj2);
IkReal x7802=(gconst139*r11);
IkReal x7803=(gconst139*r01);
IkReal x7804=(gconst139*r21);
IkReal x7805=((1.0)*x7799);
IkReal x7806=((1.0)*x7798);
IkReal x7807=((1.0)*cj1*cj2);
IkReal x7808=(gconst140*x7799);
evalcond[0]=((((-1.0)*gconst140*r20*x7806))+((x7798*x7804))+(((-1.0)*r22*x7805)));
evalcond[1]=(cj0+(((-1.0)*r12*x7805))+(((-1.0)*gconst140*r10*x7806))+((x7798*x7802)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7805))+((x7798*x7803))+(((-1.0)*x7800*x7806)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7806))+(((-1.0)*x7804*x7805))+((r20*x7808)));
evalcond[4]=(((cj0*x7801))+(((-1.0)*r02*x7806))+((x7799*x7800))+(((-1.0)*x7803*x7805))+(((-1.0)*cj0*x7807)));
evalcond[5]=((((-1.0)*sj0*x7807))+(((-1.0)*r12*x7806))+((sj0*x7801))+(((-1.0)*x7802*x7805))+((r10*x7808)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7809=((-1.0)*r11);
IkReal x7811 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7811)==0){
continue;
}
IkReal x7810=pow(x7811,-0.5);
CheckValue<IkReal> x7812 = IKatan2WithCheck(IkReal(x7809),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7812.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7812.value))));
IkReal gconst142=(x7809*x7810);
IkReal gconst143=((1.0)*r10*x7810);
CheckValue<IkReal> x7813 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7813.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7813.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7814=((-1.0)*r11);
CheckValue<IkReal> x7817 = IKatan2WithCheck(IkReal(x7814),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7817.valid){
continue;
}
IkReal x7815=((1.0)*(x7817.value));
IkReal x7816=x7810;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7815)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7815)));
IkReal gconst142=(x7814*x7816);
IkReal gconst143=((1.0)*r10*x7816);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7818=((-1.0)*r11);
CheckValue<IkReal> x7821 = IKatan2WithCheck(IkReal(x7818),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7821.valid){
continue;
}
IkReal x7819=((1.0)*(x7821.value));
IkReal x7820=x7810;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7819)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7819)));
IkReal gconst142=(x7818*x7820);
IkReal gconst143=((1.0)*r10*x7820);
IkReal x7822=r12*r12;
IkReal x7823=((1.0)*sj0);
IkReal x7824=(cj0*r02);
IkReal x7825=x7810;
j4eval[0]=((IKabs((((r12*x7824*x7825))+((sj0*x7822*x7825))+(((-1.0)*x7823*x7825)))))+(IKabs(((((-1.0)*x7824))+(((-1.0)*r12*x7823))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7826=((-1.0)*r11);
CheckValue<IkReal> x7829 = IKatan2WithCheck(IkReal(x7826),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7829.valid){
continue;
}
IkReal x7827=((1.0)*(x7829.value));
IkReal x7828=x7810;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7827)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7827)));
IkReal gconst142=(x7826*x7828);
IkReal gconst143=((1.0)*r10*x7828);
IkReal x7830=r12*r12;
IkReal x7831=(cj1*r22*sj2);
IkReal x7832=(cj2*r22*sj1);
CheckValue<IkReal> x7836=IKPowWithIntegerCheck(((-1.0)+x7830),-1);
if(!x7836.valid){
continue;
}
IkReal x7833=x7836.value;
if((((1.0)+(((-1.0)*x7830)))) < -0.00001)
continue;
IkReal x7834=IKsqrt(((1.0)+(((-1.0)*x7830))));
IkReal x7835=((1.0)*r12*x7833*x7834);
j4eval[0]=((IKabs((x7831+x7832)))+(IKabs(((((-1.0)*x7832*x7835))+(((-1.0)*x7831*x7835))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7837=(gconst142*r21);
IkReal x7838=(cj1*sj2);
IkReal x7839=(cj2*sj1);
IkReal x7840=(gconst143*r20);
CheckValue<IkReal> x7841 = IKatan2WithCheck(IkReal((((r22*x7838))+((r22*x7839)))),IkReal(((((-1.0)*x7839*x7840))+((x7837*x7839))+((x7837*x7838))+(((-1.0)*x7838*x7840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7841.valid){
continue;
}
CheckValue<IkReal> x7842=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x7837*x7837)+(((-2.0)*x7837*x7840))+(x7840*x7840))),-1);
if(!x7842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7841.value)+(((1.5707963267949)*(x7842.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7843=IKsin(j4);
IkReal x7844=IKcos(j4);
IkReal x7845=(sj1*sj2);
IkReal x7846=(gconst143*r20);
IkReal x7847=((1.0)*x7844);
IkReal x7848=((1.0)*cj1*cj2);
IkReal x7849=((1.0)*x7843);
IkReal x7850=(gconst142*x7843);
IkReal x7851=(gconst143*x7844);
evalcond[0]=((((-1.0)*r22*x7847))+((r21*x7850))+(((-1.0)*x7846*x7849)));
evalcond[1]=(((r11*x7850))+cj0+(((-1.0)*gconst143*r10*x7849))+(((-1.0)*r12*x7847)));
evalcond[2]=((((-1.0)*gconst143*r00*x7849))+(((-1.0)*sj0))+(((-1.0)*r02*x7847))+((r01*x7850)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7849))+((cj1*sj2))+((x7844*x7846))+(((-1.0)*gconst142*r21*x7847)));
evalcond[4]=((((-1.0)*cj0*x7848))+(((-1.0)*gconst142*r01*x7847))+((cj0*x7845))+(((-1.0)*r02*x7849))+((r00*x7851)));
evalcond[5]=((((-1.0)*gconst142*r11*x7847))+(((-1.0)*r12*x7849))+((r10*x7851))+(((-1.0)*sj0*x7848))+((sj0*x7845)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7852=((1.0)*sj0);
IkReal x7853=((1.0)*gconst142);
CheckValue<IkReal> x7854=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst143*r21))+(((-1.0)*r20*x7853)))),-1);
if(!x7854.valid){
continue;
}
CheckValue<IkReal> x7855 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7852)))),IkReal(((((-1.0)*gconst142*r11*x7852))+((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7853))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7854.value)))+(x7855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7856=IKsin(j4);
IkReal x7857=IKcos(j4);
IkReal x7858=(sj1*sj2);
IkReal x7859=(gconst143*r20);
IkReal x7860=((1.0)*x7857);
IkReal x7861=((1.0)*cj1*cj2);
IkReal x7862=((1.0)*x7856);
IkReal x7863=(gconst142*x7856);
IkReal x7864=(gconst143*x7857);
evalcond[0]=((((-1.0)*x7859*x7862))+((r21*x7863))+(((-1.0)*r22*x7860)));
evalcond[1]=(cj0+((r11*x7863))+(((-1.0)*r12*x7860))+(((-1.0)*gconst143*r10*x7862)));
evalcond[2]=((((-1.0)*gconst143*r00*x7862))+(((-1.0)*sj0))+((r01*x7863))+(((-1.0)*r02*x7860)));
evalcond[3]=(((cj2*sj1))+((x7857*x7859))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7860))+(((-1.0)*r22*x7862)));
evalcond[4]=((((-1.0)*gconst142*r01*x7860))+((cj0*x7858))+((r00*x7864))+(((-1.0)*r02*x7862))+(((-1.0)*cj0*x7861)));
evalcond[5]=(((sj0*x7858))+(((-1.0)*r12*x7862))+(((-1.0)*sj0*x7861))+((r10*x7864))+(((-1.0)*gconst142*r11*x7860)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7865=((1.0)*gconst143);
CheckValue<IkReal> x7866=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7865))+(((-1.0)*gconst142*r00)))),-1);
if(!x7866.valid){
continue;
}
CheckValue<IkReal> x7867 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7865))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7866.value)))+(x7867.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7868=IKsin(j4);
IkReal x7869=IKcos(j4);
IkReal x7870=(sj1*sj2);
IkReal x7871=(gconst143*r20);
IkReal x7872=((1.0)*x7869);
IkReal x7873=((1.0)*cj1*cj2);
IkReal x7874=((1.0)*x7868);
IkReal x7875=(gconst142*x7868);
IkReal x7876=(gconst143*x7869);
evalcond[0]=((((-1.0)*r22*x7872))+(((-1.0)*x7871*x7874))+((r21*x7875)));
evalcond[1]=(cj0+((r11*x7875))+(((-1.0)*r12*x7872))+(((-1.0)*gconst143*r10*x7874)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7875))+(((-1.0)*r02*x7872))+(((-1.0)*gconst143*r00*x7874)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7874))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7872))+((x7869*x7871)));
evalcond[4]=(((cj0*x7870))+(((-1.0)*gconst142*r01*x7872))+((r00*x7876))+(((-1.0)*r02*x7874))+(((-1.0)*cj0*x7873)));
evalcond[5]=((((-1.0)*gconst142*r11*x7872))+((r10*x7876))+(((-1.0)*r12*x7874))+((sj0*x7870))+(((-1.0)*sj0*x7873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7877=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7877;
j4eval[1]=IKsign(x7877);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7878=((1.0)*cj5);
IkReal x7879=((((-1.0)*r01*x7878))+(((-1.0)*r00*sj5)));
j4eval[0]=x7879;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7878))))));
j4eval[2]=IKsign(x7879);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7880=cj5*cj5;
IkReal x7881=r11*r11;
IkReal x7882=(r11*sj5);
IkReal x7883=(cj5*r10);
IkReal x7884=(((x7880*(r10*r10)))+(r12*r12)+(((-2.0)*x7882*x7883))+x7881+(((-1.0)*x7880*x7881)));
j4eval[0]=x7884;
j4eval[1]=IKsign(x7884);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x7882))+x7883))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7885=cj5*cj5;
IkReal x7886=r11*r11;
IkReal x7887=(cj5*r10);
IkReal x7888=(r11*sj5);
CheckValue<IkReal> x7889=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7885*x7886))+(r12*r12)+((x7885*(r10*r10)))+x7886+(((-2.0)*x7887*x7888)))),-1);
if(!x7889.valid){
continue;
}
CheckValue<IkReal> x7890 = IKatan2WithCheck(IkReal(((((-1.0)*x7888))+x7887)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7889.value)))+(x7890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7891=IKsin(j4);
IkReal x7892=IKcos(j4);
IkReal x7893=(cj5*r10);
IkReal x7894=(r01*sj5);
IkReal x7895=(cj5*r00);
IkReal x7896=(cj5*r20);
IkReal x7897=((1.0)*x7892);
IkReal x7898=((1.0)*x7891);
IkReal x7899=(sj5*x7891);
evalcond[0]=(((r21*x7899))+(((-1.0)*r22*x7897))+(((-1.0)*x7896*x7898)));
evalcond[1]=((((-1.0)*x7895*x7898))+((x7891*x7894))+(((-1.0)*r02*x7897)));
evalcond[2]=((((-1.0)*r11*sj5*x7897))+(((-1.0)*r12*x7898))+((x7892*x7893)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7897))+(((-1.0)*x7893*x7898))+((r11*x7899)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x7892*x7896))+(((-1.0)*r21*sj5*x7897))+(((-1.0)*r22*x7898)));
evalcond[5]=((((-1.0)*x7894*x7897))+((x7892*x7895))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x7898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7900=((1.0)*cj5);
CheckValue<IkReal> x7901=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7900))+(((-1.0)*r00*sj5)))),-1);
if(!x7901.valid){
continue;
}
CheckValue<IkReal> x7902 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7900)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7902.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7901.value)))+(x7902.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7903=IKsin(j4);
IkReal x7904=IKcos(j4);
IkReal x7905=(cj5*r10);
IkReal x7906=(r01*sj5);
IkReal x7907=(cj5*r00);
IkReal x7908=(cj5*r20);
IkReal x7909=((1.0)*x7904);
IkReal x7910=((1.0)*x7903);
IkReal x7911=(sj5*x7903);
evalcond[0]=(((r21*x7911))+(((-1.0)*x7908*x7910))+(((-1.0)*r22*x7909)));
evalcond[1]=(((x7903*x7906))+(((-1.0)*x7907*x7910))+(((-1.0)*r02*x7909)));
evalcond[2]=((((-1.0)*r11*sj5*x7909))+(((-1.0)*r12*x7910))+((x7904*x7905)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7909))+((r11*x7911))+(((-1.0)*x7905*x7910)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7910))+(((-1.0)*r21*sj5*x7909))+((x7904*x7908)));
evalcond[5]=((((-1.0)*r02*x7910))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7906*x7909))+((x7904*x7907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7912=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7912.valid){
continue;
}
CheckValue<IkReal> x7913 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7912.value)))+(x7913.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7914=IKsin(j4);
IkReal x7915=IKcos(j4);
IkReal x7916=(cj5*r10);
IkReal x7917=(r01*sj5);
IkReal x7918=(cj5*r00);
IkReal x7919=(cj5*r20);
IkReal x7920=((1.0)*x7915);
IkReal x7921=((1.0)*x7914);
IkReal x7922=(sj5*x7914);
evalcond[0]=((((-1.0)*r22*x7920))+((r21*x7922))+(((-1.0)*x7919*x7921)));
evalcond[1]=((((-1.0)*r02*x7920))+((x7914*x7917))+(((-1.0)*x7918*x7921)));
evalcond[2]=((((-1.0)*r11*sj5*x7920))+(((-1.0)*r12*x7921))+((x7915*x7916)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7920))+((r11*x7922))+(((-1.0)*x7916*x7921)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7921))+(((-1.0)*r21*sj5*x7920))+((x7915*x7919)));
evalcond[5]=((((-1.0)*r02*x7921))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7917*x7920))+((x7915*x7918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7923=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7923;
j4eval[1]=IKsign(x7923);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7924=((1.0)*cj5);
IkReal x7925=((((-1.0)*r21*x7924))+(((-1.0)*r20*sj5)));
j4eval[0]=x7925;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x7924))))));
j4eval[2]=IKsign(x7925);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7926=cj5*cj5;
IkReal x7927=r11*r11;
IkReal x7928=(cj5*r10);
IkReal x7929=(r11*sj5);
IkReal x7930=(((x7926*x7927))+(((2.0)*x7928*x7929))+(((-1.0)*x7927))+(((-1.0)*(r12*r12)))+(((-1.0)*x7926*(r10*r10))));
j4eval[0]=x7930;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*x7929))+x7928))));
j4eval[2]=IKsign(x7930);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7931=cj5*cj5;
IkReal x7932=r11*r11;
IkReal x7933=(cj5*r10);
IkReal x7934=(r11*sj5);
CheckValue<IkReal> x7935=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7931*(r10*r10)))+(((-1.0)*x7932))+(((2.0)*x7933*x7934))+(((-1.0)*(r12*r12)))+((x7931*x7932)))),-1);
if(!x7935.valid){
continue;
}
CheckValue<IkReal> x7936 = IKatan2WithCheck(IkReal(((((-1.0)*x7934))+x7933)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7935.value)))+(x7936.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7937=IKsin(j4);
IkReal x7938=IKcos(j4);
IkReal x7939=(cj5*r10);
IkReal x7940=(r01*sj5);
IkReal x7941=(cj5*r00);
IkReal x7942=(cj5*r20);
IkReal x7943=((1.0)*x7938);
IkReal x7944=((1.0)*x7937);
IkReal x7945=(sj5*x7937);
evalcond[0]=(((r21*x7945))+(((-1.0)*r22*x7943))+(((-1.0)*x7942*x7944)));
evalcond[1]=((((-1.0)*x7941*x7944))+(((-1.0)*r02*x7943))+((x7937*x7940)));
evalcond[2]=((((-1.0)*r11*sj5*x7943))+(((-1.0)*r12*x7944))+((x7938*x7939)));
evalcond[3]=((-1.0)+(((-1.0)*x7939*x7944))+((r11*x7945))+(((-1.0)*r12*x7943)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7944))+(((-1.0)*r21*sj5*x7943))+((cj1*sj2))+((x7938*x7942)));
evalcond[5]=((((-1.0)*x7940*x7943))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7944))+((x7938*x7941))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7946=((1.0)*cj5);
CheckValue<IkReal> x7947=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7946))+(((-1.0)*r20*sj5)))),-1);
if(!x7947.valid){
continue;
}
CheckValue<IkReal> x7948 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x7946))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7948.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7947.value)))+(x7948.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7949=IKsin(j4);
IkReal x7950=IKcos(j4);
IkReal x7951=(cj5*r10);
IkReal x7952=(r01*sj5);
IkReal x7953=(cj5*r00);
IkReal x7954=(cj5*r20);
IkReal x7955=((1.0)*x7950);
IkReal x7956=((1.0)*x7949);
IkReal x7957=(sj5*x7949);
evalcond[0]=((((-1.0)*x7954*x7956))+(((-1.0)*r22*x7955))+((r21*x7957)));
evalcond[1]=((((-1.0)*x7953*x7956))+(((-1.0)*r02*x7955))+((x7949*x7952)));
evalcond[2]=(((x7950*x7951))+(((-1.0)*r11*sj5*x7955))+(((-1.0)*r12*x7956)));
evalcond[3]=((-1.0)+((r11*x7957))+(((-1.0)*x7951*x7956))+(((-1.0)*r12*x7955)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7956))+((x7950*x7954))+((cj1*sj2))+(((-1.0)*r21*sj5*x7955)));
evalcond[5]=((((-1.0)*x7952*x7955))+((x7950*x7953))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7956))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7958 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7958.valid){
continue;
}
CheckValue<IkReal> x7959=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7958.value)+(((1.5707963267949)*(x7959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7960=IKsin(j4);
IkReal x7961=IKcos(j4);
IkReal x7962=(cj5*r10);
IkReal x7963=(r01*sj5);
IkReal x7964=(cj5*r00);
IkReal x7965=(cj5*r20);
IkReal x7966=((1.0)*x7961);
IkReal x7967=((1.0)*x7960);
IkReal x7968=(sj5*x7960);
evalcond[0]=(((r21*x7968))+(((-1.0)*r22*x7966))+(((-1.0)*x7965*x7967)));
evalcond[1]=((((-1.0)*x7964*x7967))+((x7960*x7963))+(((-1.0)*r02*x7966)));
evalcond[2]=((((-1.0)*r11*sj5*x7966))+((x7961*x7962))+(((-1.0)*r12*x7967)));
evalcond[3]=((-1.0)+((r11*x7968))+(((-1.0)*r12*x7966))+(((-1.0)*x7962*x7967)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7967))+((cj1*sj2))+((x7961*x7965))+(((-1.0)*r21*sj5*x7966)));
evalcond[5]=((((-1.0)*x7963*x7966))+(((-1.0)*sj1*sj2))+((x7961*x7964))+(((-1.0)*r02*x7967))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7969=((-1.0)*r00);
IkReal x7971 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7971)==0){
continue;
}
IkReal x7970=pow(x7971,-0.5);
CheckValue<IkReal> x7972 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7969),IKFAST_ATAN2_MAGTHRESH);
if(!x7972.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7972.value));
IkReal gconst145=(r01*x7970);
IkReal gconst146=(x7969*x7970);
CheckValue<IkReal> x7973 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7973.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7973.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7974=((-1.0)*r00);
IkReal x7975=x7970;
CheckValue<IkReal> x7977 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7974),IKFAST_ATAN2_MAGTHRESH);
if(!x7977.valid){
continue;
}
IkReal x7976=((-1.0)*(x7977.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7976;
IkReal gconst144=x7976;
IkReal gconst145=(r01*x7975);
IkReal gconst146=(x7974*x7975);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7978=((1.0)*sj0);
IkReal x7979=((1.0)*gconst145);
CheckValue<IkReal> x7980 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7978)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x7979))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7978)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7980.valid){
continue;
}
CheckValue<IkReal> x7981=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x7979)))),-1);
if(!x7981.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7980.value)+(((1.5707963267949)*(x7981.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7982=IKsin(j4);
IkReal x7983=IKcos(j4);
IkReal x7984=(gconst146*r10);
IkReal x7985=(sj1*sj2);
IkReal x7986=(gconst146*r20);
IkReal x7987=(gconst146*r00);
IkReal x7988=((1.0)*x7983);
IkReal x7989=((1.0)*x7982);
IkReal x7990=(gconst145*x7982);
IkReal x7991=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7988))+((r21*x7990))+(((-1.0)*x7986*x7989)));
evalcond[1]=(((r11*x7990))+(((-1.0)*r12*x7988))+cj0+(((-1.0)*x7984*x7989)));
evalcond[2]=((((-1.0)*x7987*x7989))+(((-1.0)*sj0))+((r01*x7990))+(((-1.0)*r02*x7988)));
evalcond[3]=((((-1.0)*r22*x7989))+((cj2*sj1))+(((-1.0)*gconst145*r21*x7988))+((cj1*sj2))+((x7983*x7986)));
evalcond[4]=(((x7983*x7987))+((cj0*x7985))+(((-1.0)*cj0*x7991))+(((-1.0)*r02*x7989))+(((-1.0)*gconst145*r01*x7988)));
evalcond[5]=((((-1.0)*r12*x7989))+((x7983*x7984))+(((-1.0)*gconst145*r11*x7988))+((sj0*x7985))+(((-1.0)*sj0*x7991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7992=((1.0)*gconst146);
CheckValue<IkReal> x7993 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7992))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7993.valid){
continue;
}
CheckValue<IkReal> x7994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x7992))+(((-1.0)*gconst145*r10)))),-1);
if(!x7994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7993.value)+(((1.5707963267949)*(x7994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7995=IKsin(j4);
IkReal x7996=IKcos(j4);
IkReal x7997=(gconst146*r10);
IkReal x7998=(sj1*sj2);
IkReal x7999=(gconst146*r20);
IkReal x8000=(gconst146*r00);
IkReal x8001=((1.0)*x7996);
IkReal x8002=((1.0)*x7995);
IkReal x8003=(gconst145*x7995);
IkReal x8004=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8003))+(((-1.0)*x7999*x8002))+(((-1.0)*r22*x8001)));
evalcond[1]=(cj0+((r11*x8003))+(((-1.0)*x7997*x8002))+(((-1.0)*r12*x8001)));
evalcond[2]=(((r01*x8003))+(((-1.0)*sj0))+(((-1.0)*x8000*x8002))+(((-1.0)*r02*x8001)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8001))+((x7996*x7999))+((cj1*sj2))+(((-1.0)*r22*x8002)));
evalcond[4]=((((-1.0)*cj0*x8004))+(((-1.0)*gconst145*r01*x8001))+((x7996*x8000))+((cj0*x7998))+(((-1.0)*r02*x8002)));
evalcond[5]=((((-1.0)*gconst145*r11*x8001))+((x7996*x7997))+((sj0*x7998))+(((-1.0)*r12*x8002))+(((-1.0)*sj0*x8004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8005=((-1.0)*r01);
IkReal x8007 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8007)==0){
continue;
}
IkReal x8006=pow(x8007,-0.5);
CheckValue<IkReal> x8008 = IKatan2WithCheck(IkReal(x8005),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8008.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8008.value))));
IkReal gconst148=(x8005*x8006);
IkReal gconst149=((1.0)*r00*x8006);
CheckValue<IkReal> x8009 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8009.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8009.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8010=((-1.0)*r01);
CheckValue<IkReal> x8013 = IKatan2WithCheck(IkReal(x8010),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8013.valid){
continue;
}
IkReal x8011=((1.0)*(x8013.value));
IkReal x8012=x8006;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8011)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8011)));
IkReal gconst148=(x8010*x8012);
IkReal gconst149=((1.0)*r00*x8012);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8014=((-1.0)*r01);
CheckValue<IkReal> x8017 = IKatan2WithCheck(IkReal(x8014),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8017.valid){
continue;
}
IkReal x8015=((1.0)*(x8017.value));
IkReal x8016=x8006;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8015)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8015)));
IkReal gconst148=(x8014*x8016);
IkReal gconst149=((1.0)*r00*x8016);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8018=((-1.0)*r01);
CheckValue<IkReal> x8021 = IKatan2WithCheck(IkReal(x8018),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8021.valid){
continue;
}
IkReal x8019=((1.0)*(x8021.value));
IkReal x8020=x8006;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8019)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8019)));
IkReal gconst148=(x8018*x8020);
IkReal gconst149=((1.0)*r00*x8020);
IkReal x8022=r02*r02;
IkReal x8023=(r12*sj0);
IkReal x8024=((1.0)*cj0);
IkReal x8025=x8006;
j4eval[0]=((IKabs(((((-1.0)*x8023))+(((-1.0)*r02*x8024)))))+(IKabs((((r02*x8023*x8025))+((cj0*x8022*x8025))+(((-1.0)*x8024*x8025))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8026=((1.0)*sj0);
IkReal x8027=((1.0)*gconst148);
CheckValue<IkReal> x8028 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8026))+(((-1.0)*cj0*r02)))),IkReal((((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8027))+((cj0*gconst149*r00))+(((-1.0)*gconst148*r11*x8026)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8028.valid){
continue;
}
CheckValue<IkReal> x8029=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8027))+(((-1.0)*gconst149*r21)))),-1);
if(!x8029.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8028.value)+(((1.5707963267949)*(x8029.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8030=IKsin(j4);
IkReal x8031=IKcos(j4);
IkReal x8032=(gconst148*r11);
IkReal x8033=(sj1*sj2);
IkReal x8034=((1.0)*x8031);
IkReal x8035=(gconst149*x8031);
IkReal x8036=(gconst148*x8030);
IkReal x8037=((1.0)*cj1*cj2);
IkReal x8038=((1.0)*x8030);
evalcond[0]=((((-1.0)*gconst149*r20*x8038))+((r21*x8036))+(((-1.0)*r22*x8034)));
evalcond[1]=(cj0+(((-1.0)*r12*x8034))+(((-1.0)*gconst149*r10*x8038))+((x8030*x8032)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8034))+(((-1.0)*gconst149*r00*x8038))+((r01*x8036)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8034))+((cj1*sj2))+((r20*x8035))+(((-1.0)*r22*x8038)));
evalcond[4]=((((-1.0)*gconst148*r01*x8034))+((cj0*x8033))+(((-1.0)*r02*x8038))+(((-1.0)*cj0*x8037))+((r00*x8035)));
evalcond[5]=((((-1.0)*sj0*x8037))+((r10*x8035))+(((-1.0)*r12*x8038))+((sj0*x8033))+(((-1.0)*x8032*x8034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8039=((1.0)*gconst149);
CheckValue<IkReal> x8040=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8039))+(((-1.0)*gconst148*r10)))),-1);
if(!x8040.valid){
continue;
}
CheckValue<IkReal> x8041 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8039))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8040.value)))+(x8041.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8042=IKsin(j4);
IkReal x8043=IKcos(j4);
IkReal x8044=(gconst148*r11);
IkReal x8045=(sj1*sj2);
IkReal x8046=((1.0)*x8043);
IkReal x8047=(gconst149*x8043);
IkReal x8048=(gconst148*x8042);
IkReal x8049=((1.0)*cj1*cj2);
IkReal x8050=((1.0)*x8042);
evalcond[0]=((((-1.0)*gconst149*r20*x8050))+((r21*x8048))+(((-1.0)*r22*x8046)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8050))+(((-1.0)*r12*x8046))+((x8042*x8044)));
evalcond[2]=(((r01*x8048))+(((-1.0)*sj0))+(((-1.0)*r02*x8046))+(((-1.0)*gconst149*r00*x8050)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8046))+((cj1*sj2))+((r20*x8047))+(((-1.0)*r22*x8050)));
evalcond[4]=((((-1.0)*cj0*x8049))+(((-1.0)*gconst148*r01*x8046))+(((-1.0)*r02*x8050))+((cj0*x8045))+((r00*x8047)));
evalcond[5]=((((-1.0)*r12*x8050))+((r10*x8047))+(((-1.0)*sj0*x8049))+((sj0*x8045))+(((-1.0)*x8044*x8046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8051=((1.0)*gconst149);
CheckValue<IkReal> x8052=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8051)))),-1);
if(!x8052.valid){
continue;
}
CheckValue<IkReal> x8053 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8052.value)))+(x8053.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8054=IKsin(j4);
IkReal x8055=IKcos(j4);
IkReal x8056=(gconst148*r11);
IkReal x8057=(sj1*sj2);
IkReal x8058=((1.0)*x8055);
IkReal x8059=(gconst149*x8055);
IkReal x8060=(gconst148*x8054);
IkReal x8061=((1.0)*cj1*cj2);
IkReal x8062=((1.0)*x8054);
evalcond[0]=(((r21*x8060))+(((-1.0)*gconst149*r20*x8062))+(((-1.0)*r22*x8058)));
evalcond[1]=((((-1.0)*r12*x8058))+cj0+((x8054*x8056))+(((-1.0)*gconst149*r10*x8062)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8060))+(((-1.0)*r02*x8058))+(((-1.0)*gconst149*r00*x8062)));
evalcond[3]=(((cj2*sj1))+((r20*x8059))+(((-1.0)*gconst148*r21*x8058))+((cj1*sj2))+(((-1.0)*r22*x8062)));
evalcond[4]=(((r00*x8059))+(((-1.0)*cj0*x8061))+(((-1.0)*gconst148*r01*x8058))+((cj0*x8057))+(((-1.0)*r02*x8062)));
evalcond[5]=((((-1.0)*sj0*x8061))+((r10*x8059))+((sj0*x8057))+(((-1.0)*r12*x8062))+(((-1.0)*x8056*x8058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8063=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8063;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8063);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8064=((1.0)*cj5);
IkReal x8065=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8064)));
j4eval[0]=x8065;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8064)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8065);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8066=cj5*cj5;
IkReal x8067=r01*r01;
IkReal x8068=(r01*sj5);
IkReal x8069=(cj5*r00);
IkReal x8070=((((-1.0)*x8067))+(((-1.0)*(r02*r02)))+(((-1.0)*x8066*(r00*r00)))+((x8066*x8067))+(((2.0)*x8068*x8069)));
j4eval[0]=x8070;
j4eval[1]=IKsign(x8070);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8068))+x8069))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8071=cj5*cj5;
IkReal x8072=r01*r01;
IkReal x8073=(r01*sj5);
IkReal x8074=(cj5*r00);
CheckValue<IkReal> x8075 = IKatan2WithCheck(IkReal(((((-1.0)*x8073))+x8074)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8075.valid){
continue;
}
CheckValue<IkReal> x8076=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8072))+(((-1.0)*(r02*r02)))+(((2.0)*x8073*x8074))+((x8071*x8072))+(((-1.0)*x8071*(r00*r00))))),-1);
if(!x8076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8075.value)+(((1.5707963267949)*(x8076.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8077=IKsin(j4);
IkReal x8078=IKcos(j4);
IkReal x8079=(cj5*r10);
IkReal x8080=(r01*sj5);
IkReal x8081=(cj5*r00);
IkReal x8082=(cj5*r20);
IkReal x8083=((1.0)*x8078);
IkReal x8084=((1.0)*x8077);
IkReal x8085=(sj5*x8077);
evalcond[0]=((((-1.0)*x8082*x8084))+((r21*x8085))+(((-1.0)*r22*x8083)));
evalcond[1]=((((-1.0)*x8079*x8084))+((r11*x8085))+(((-1.0)*r12*x8083)));
evalcond[2]=((((-1.0)*r02*x8084))+(((-1.0)*x8080*x8083))+((x8078*x8081)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8083))+((x8077*x8080))+(((-1.0)*x8081*x8084)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8083))+((cj1*sj2))+((x8078*x8082))+(((-1.0)*r22*x8084)));
evalcond[5]=(((x8078*x8079))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8083))+(((-1.0)*r12*x8084)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8086=((1.0)*cj5);
CheckValue<IkReal> x8087=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8086)))),-1);
if(!x8087.valid){
continue;
}
CheckValue<IkReal> x8088 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8087.value)))+(x8088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8089=IKsin(j4);
IkReal x8090=IKcos(j4);
IkReal x8091=(cj5*r10);
IkReal x8092=(r01*sj5);
IkReal x8093=(cj5*r00);
IkReal x8094=(cj5*r20);
IkReal x8095=((1.0)*x8090);
IkReal x8096=((1.0)*x8089);
IkReal x8097=(sj5*x8089);
evalcond[0]=((((-1.0)*x8094*x8096))+(((-1.0)*r22*x8095))+((r21*x8097)));
evalcond[1]=((((-1.0)*x8091*x8096))+((r11*x8097))+(((-1.0)*r12*x8095)));
evalcond[2]=((((-1.0)*x8092*x8095))+(((-1.0)*r02*x8096))+((x8090*x8093)));
evalcond[3]=((-1.0)+(((-1.0)*x8093*x8096))+((x8089*x8092))+(((-1.0)*r02*x8095)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8095))+((cj1*sj2))+((x8090*x8094))+(((-1.0)*r22*x8096)));
evalcond[5]=((((-1.0)*r11*sj5*x8095))+((x8090*x8091))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8098=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8098.valid){
continue;
}
CheckValue<IkReal> x8099 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8099.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8098.value)))+(x8099.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8100=IKsin(j4);
IkReal x8101=IKcos(j4);
IkReal x8102=(cj5*r10);
IkReal x8103=(r01*sj5);
IkReal x8104=(cj5*r00);
IkReal x8105=(cj5*r20);
IkReal x8106=((1.0)*x8101);
IkReal x8107=((1.0)*x8100);
IkReal x8108=(sj5*x8100);
evalcond[0]=((((-1.0)*x8105*x8107))+(((-1.0)*r22*x8106))+((r21*x8108)));
evalcond[1]=(((r11*x8108))+(((-1.0)*x8102*x8107))+(((-1.0)*r12*x8106)));
evalcond[2]=(((x8101*x8104))+(((-1.0)*x8103*x8106))+(((-1.0)*r02*x8107)));
evalcond[3]=((-1.0)+(((-1.0)*x8104*x8107))+((x8100*x8103))+(((-1.0)*r02*x8106)));
evalcond[4]=((((-1.0)*r21*sj5*x8106))+((cj2*sj1))+((x8101*x8105))+((cj1*sj2))+(((-1.0)*r22*x8107)));
evalcond[5]=(((x8101*x8102))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8106))+(((-1.0)*r12*x8107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8109=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8109;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8109);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8110=((1.0)*cj5);
IkReal x8111=((((-1.0)*r21*x8110))+(((-1.0)*r20*sj5)));
j4eval[0]=x8111;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8110))))));
j4eval[2]=IKsign(x8111);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8112=cj5*cj5;
IkReal x8113=r01*r01;
IkReal x8114=(cj5*r00);
IkReal x8115=(r01*sj5);
IkReal x8116=(((x8112*(r00*r00)))+(((-1.0)*x8112*x8113))+(r02*r02)+x8113+(((-2.0)*x8114*x8115)));
j4eval[0]=x8116;
j4eval[1]=((IKabs(r02))+(IKabs((x8114+(((-1.0)*x8115))))));
j4eval[2]=IKsign(x8116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8117=cj5*cj5;
IkReal x8118=r01*r01;
IkReal x8119=(r01*sj5);
IkReal x8120=(cj5*r00);
CheckValue<IkReal> x8121=IKPowWithIntegerCheck(IKsign((((x8117*(r00*r00)))+(((-2.0)*x8119*x8120))+(r02*r02)+x8118+(((-1.0)*x8117*x8118)))),-1);
if(!x8121.valid){
continue;
}
CheckValue<IkReal> x8122 = IKatan2WithCheck(IkReal((x8120+(((-1.0)*x8119)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8122.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8121.value)))+(x8122.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8123=IKsin(j4);
IkReal x8124=IKcos(j4);
IkReal x8125=(cj5*r10);
IkReal x8126=(r01*sj5);
IkReal x8127=(cj5*r00);
IkReal x8128=(cj5*r20);
IkReal x8129=((1.0)*x8124);
IkReal x8130=((1.0)*x8123);
IkReal x8131=(sj5*x8123);
evalcond[0]=(((r21*x8131))+(((-1.0)*r22*x8129))+(((-1.0)*x8128*x8130)));
evalcond[1]=((((-1.0)*r12*x8129))+((r11*x8131))+(((-1.0)*x8125*x8130)));
evalcond[2]=((((-1.0)*r02*x8130))+((x8124*x8127))+(((-1.0)*x8126*x8129)));
evalcond[3]=((1.0)+((x8123*x8126))+(((-1.0)*x8127*x8130))+(((-1.0)*r02*x8129)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8130))+(((-1.0)*r21*sj5*x8129))+((cj1*sj2))+((x8124*x8128)));
evalcond[5]=((((-1.0)*r11*sj5*x8129))+(((-1.0)*sj1*sj2))+((x8124*x8125))+(((-1.0)*r12*x8130))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8132=((1.0)*cj5);
CheckValue<IkReal> x8133=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8132))+(((-1.0)*r20*sj5)))),-1);
if(!x8133.valid){
continue;
}
CheckValue<IkReal> x8134 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8134.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8133.value)))+(x8134.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8135=IKsin(j4);
IkReal x8136=IKcos(j4);
IkReal x8137=(cj5*r10);
IkReal x8138=(r01*sj5);
IkReal x8139=(cj5*r00);
IkReal x8140=(cj5*r20);
IkReal x8141=((1.0)*x8136);
IkReal x8142=((1.0)*x8135);
IkReal x8143=(sj5*x8135);
evalcond[0]=((((-1.0)*x8140*x8142))+(((-1.0)*r22*x8141))+((r21*x8143)));
evalcond[1]=(((r11*x8143))+(((-1.0)*r12*x8141))+(((-1.0)*x8137*x8142)));
evalcond[2]=(((x8136*x8139))+(((-1.0)*x8138*x8141))+(((-1.0)*r02*x8142)));
evalcond[3]=((1.0)+(((-1.0)*x8139*x8142))+((x8135*x8138))+(((-1.0)*r02*x8141)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8142))+(((-1.0)*r21*sj5*x8141))+((x8136*x8140)));
evalcond[5]=((((-1.0)*r11*sj5*x8141))+((x8136*x8137))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8142))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8144 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8144.valid){
continue;
}
CheckValue<IkReal> x8145=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8144.value)+(((1.5707963267949)*(x8145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8146=IKsin(j4);
IkReal x8147=IKcos(j4);
IkReal x8148=(cj5*r10);
IkReal x8149=(r01*sj5);
IkReal x8150=(cj5*r00);
IkReal x8151=(cj5*r20);
IkReal x8152=((1.0)*x8147);
IkReal x8153=((1.0)*x8146);
IkReal x8154=(sj5*x8146);
evalcond[0]=((((-1.0)*x8151*x8153))+(((-1.0)*r22*x8152))+((r21*x8154)));
evalcond[1]=((((-1.0)*x8148*x8153))+((r11*x8154))+(((-1.0)*r12*x8152)));
evalcond[2]=((((-1.0)*r02*x8153))+((x8147*x8150))+(((-1.0)*x8149*x8152)));
evalcond[3]=((1.0)+(((-1.0)*x8150*x8153))+(((-1.0)*r02*x8152))+((x8146*x8149)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8152))+(((-1.0)*r22*x8153))+((x8147*x8151)));
evalcond[5]=(((x8147*x8148))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8152))+((cj1*cj2))+(((-1.0)*r12*x8153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8155=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8155);
rxp1_1=(px*r21);
rxp1_2=(r11*x8155);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8156=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8156);
rxp1_1=(px*r21);
rxp1_2=(r11*x8156);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8157=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8157);
rxp1_1=(px*r21);
rxp1_2=(r11*x8157);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8160=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8160.valid){
continue;
}
IkReal x8158=x8160.value;
IkReal x8159=(sj0*x8158);
cj4array[0]=((((-1.0)*sj1*sj2*x8159))+((cj1*cj2*x8159)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8161=IKsin(j4);
IkReal x8162=IKcos(j4);
IkReal x8163=(r21*sj5);
IkReal x8164=(cj5*r20);
IkReal x8165=((1.0)*x8161);
IkReal x8166=((1.0)*x8162);
evalcond[0]=((-1.0)*r02*x8161);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8166)));
evalcond[2]=(((x8161*x8163))+(((-1.0)*x8164*x8165)));
evalcond[3]=(((r11*sj5*x8161))+(((-1.0)*cj5*r10*x8165)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8163*x8166))+((x8162*x8164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8169=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8169.valid){
continue;
}
IkReal x8167=x8169.value;
IkReal x8168=((1.0)*x8167);
cj4array[0]=((((-1.0)*cj2*sj1*x8168))+(((-1.0)*cj1*sj2*x8168)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8170=IKsin(j4);
IkReal x8171=IKcos(j4);
IkReal x8172=(r11*sj5);
IkReal x8173=((1.0)*sj0);
IkReal x8174=((1.0)*x8171);
IkReal x8175=((1.0)*cj5*x8170);
evalcond[0]=((-1.0)*r02*x8170);
evalcond[1]=((((-1.0)*x8173))+(((-1.0)*r02*x8174)));
evalcond[2]=((((-1.0)*r20*x8175))+((r21*sj5*x8170)));
evalcond[3]=(((x8170*x8172))+(((-1.0)*r10*x8175)));
evalcond[4]=(((cj5*r10*x8171))+(((-1.0)*x8172*x8174))+(((-1.0)*cj1*cj2*x8173))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8176=IKPowWithIntegerCheck(r02,-1);
if(!x8176.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8176.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8177=IKsin(j4);
IkReal x8178=IKcos(j4);
IkReal x8179=(cj5*x8178);
IkReal x8180=(sj5*x8177);
IkReal x8181=((1.0)*sj5*x8178);
IkReal x8182=((1.0)*cj5*x8177);
evalcond[0]=((-1.0)*r02*x8177);
evalcond[1]=(((r21*x8180))+(((-1.0)*r20*x8182)));
evalcond[2]=(((r11*x8180))+(((-1.0)*r10*x8182)));
evalcond[3]=(((cj2*sj1))+((r20*x8179))+((cj1*sj2))+(((-1.0)*r21*x8181)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8181))+((r10*x8179))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8183=((1.0)*sj0);
IkReal x8184=((1.0)*cj0);
CheckValue<IkReal> x8185 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8184))+(((-1.0)*r12*x8183)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8184))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8185.valid){
continue;
}
CheckValue<IkReal> x8186=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8185.value)+(((1.5707963267949)*(x8186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8187=IKsin(j4);
IkReal x8188=IKcos(j4);
IkReal x8189=(cj5*r10);
IkReal x8190=(sj1*sj2);
IkReal x8191=(r01*sj5);
IkReal x8192=(cj5*r00);
IkReal x8193=(cj5*r20);
IkReal x8194=((1.0)*x8188);
IkReal x8195=((1.0)*cj1*cj2);
IkReal x8196=((1.0)*x8187);
IkReal x8197=(sj5*x8187);
evalcond[0]=(((r21*x8197))+(((-1.0)*r22*x8194))+(((-1.0)*x8193*x8196)));
evalcond[1]=(((r11*x8197))+cj0+(((-1.0)*r12*x8194))+(((-1.0)*x8189*x8196)));
evalcond[2]=((((-1.0)*r02*x8194))+(((-1.0)*sj0))+((x8187*x8191))+(((-1.0)*x8192*x8196)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8196))+((cj1*sj2))+(((-1.0)*r21*sj5*x8194))+((x8188*x8193)));
evalcond[4]=((((-1.0)*r02*x8196))+((x8188*x8192))+(((-1.0)*cj0*x8195))+(((-1.0)*x8191*x8194))+((cj0*x8190)));
evalcond[5]=(((sj0*x8190))+(((-1.0)*r12*x8196))+(((-1.0)*sj0*x8195))+((x8188*x8189))+(((-1.0)*r11*sj5*x8194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8198=((1.0)*cj5);
CheckValue<IkReal> x8199 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8198)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8199.valid){
continue;
}
CheckValue<IkReal> x8200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8198)))),-1);
if(!x8200.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8199.value)+(((1.5707963267949)*(x8200.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8201=IKsin(j4);
IkReal x8202=IKcos(j4);
IkReal x8203=(cj5*r10);
IkReal x8204=(sj1*sj2);
IkReal x8205=(r01*sj5);
IkReal x8206=(cj5*r00);
IkReal x8207=(cj5*r20);
IkReal x8208=((1.0)*x8202);
IkReal x8209=((1.0)*cj1*cj2);
IkReal x8210=((1.0)*x8201);
IkReal x8211=(sj5*x8201);
evalcond[0]=((((-1.0)*r22*x8208))+(((-1.0)*x8207*x8210))+((r21*x8211)));
evalcond[1]=(((r11*x8211))+cj0+(((-1.0)*r12*x8208))+(((-1.0)*x8203*x8210)));
evalcond[2]=((((-1.0)*sj0))+((x8201*x8205))+(((-1.0)*r02*x8208))+(((-1.0)*x8206*x8210)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8202*x8207))+(((-1.0)*r21*sj5*x8208))+(((-1.0)*r22*x8210)));
evalcond[4]=((((-1.0)*x8205*x8208))+(((-1.0)*cj0*x8209))+((cj0*x8204))+(((-1.0)*r02*x8210))+((x8202*x8206)));
evalcond[5]=(((sj0*x8204))+((x8202*x8203))+(((-1.0)*r12*x8210))+(((-1.0)*r11*sj5*x8208))+(((-1.0)*sj0*x8209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8212=((1.0)*cj5);
CheckValue<IkReal> x8213 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8212)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8213.valid){
continue;
}
CheckValue<IkReal> x8214=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8212))+(((-1.0)*r00*sj5)))),-1);
if(!x8214.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8213.value)+(((1.5707963267949)*(x8214.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8215=IKsin(j4);
IkReal x8216=IKcos(j4);
IkReal x8217=(cj5*r10);
IkReal x8218=(sj1*sj2);
IkReal x8219=(r01*sj5);
IkReal x8220=(cj5*r00);
IkReal x8221=(cj5*r20);
IkReal x8222=((1.0)*x8216);
IkReal x8223=((1.0)*cj1*cj2);
IkReal x8224=((1.0)*x8215);
IkReal x8225=(sj5*x8215);
evalcond[0]=((((-1.0)*x8221*x8224))+((r21*x8225))+(((-1.0)*r22*x8222)));
evalcond[1]=(cj0+((r11*x8225))+(((-1.0)*r12*x8222))+(((-1.0)*x8217*x8224)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8220*x8224))+(((-1.0)*r02*x8222))+((x8215*x8219)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8222))+(((-1.0)*r22*x8224))+((x8216*x8221)));
evalcond[4]=((((-1.0)*x8219*x8222))+((cj0*x8218))+(((-1.0)*r02*x8224))+((x8216*x8220))+(((-1.0)*cj0*x8223)));
evalcond[5]=((((-1.0)*r11*sj5*x8222))+((x8216*x8217))+(((-1.0)*r12*x8224))+(((-1.0)*sj0*x8223))+((sj0*x8218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8226=cj5*cj5;
IkReal x8227=r21*r21;
IkReal x8228=(cj2*sj1);
IkReal x8229=(cj1*sj2);
IkReal x8230=(r21*sj5);
IkReal x8231=((1.0)*cj5*r20);
CheckValue<IkReal> x8232 = IKatan2WithCheck(IkReal((((r22*x8228))+((r22*x8229)))),IkReal(((((-1.0)*x8228*x8231))+((x8228*x8230))+(((-1.0)*x8229*x8231))+((x8229*x8230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8232.valid){
continue;
}
CheckValue<IkReal> x8233=IKPowWithIntegerCheck(IKsign(((r22*r22)+((x8226*(r20*r20)))+(((-1.0)*x8226*x8227))+x8227+(((-2.0)*cj5*r20*x8230)))),-1);
if(!x8233.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8232.value)+(((1.5707963267949)*(x8233.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8234=IKsin(j4);
IkReal x8235=IKcos(j4);
IkReal x8236=(r21*sj5);
IkReal x8237=(cj5*r20);
IkReal x8238=((1.0)*x8235);
IkReal x8239=((1.0)*x8234);
evalcond[0]=(((x8234*x8236))+(((-1.0)*x8237*x8239))+(((-1.0)*r22*x8238)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8236*x8238))+((x8235*x8237))+(((-1.0)*r22*x8239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8240=(cj5*sj4);
IkReal x8241=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8241))+(((-1.0)*r00*x8240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8240))+(((-1.0)*r11*x8241))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8241))+(((-1.0)*r00*x8240))))+IKsqr((((r10*x8240))+(((-1.0)*r11*x8241))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8241))+(((-1.0)*r00*x8240))), (((r10*x8240))+(((-1.0)*r11*x8241))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8242=IKcos(j0);
IkReal x8243=IKsin(j0);
IkReal x8244=(cj4*cj5);
IkReal x8245=((1.0)*cj1);
IkReal x8246=((0.39225)*sj1);
IkReal x8247=(r11*sj5);
IkReal x8248=(cj5*r11);
IkReal x8249=((1.0)*sj5);
IkReal x8250=((1.0)*sj4);
IkReal x8251=((1.0)*sj1);
IkReal x8252=((0.09465)*sj5);
IkReal x8253=(cj5*r01);
IkReal x8254=((0.425)*cj1);
IkReal x8255=((1.0)*cj4);
IkReal x8256=(sj2*x8242);
IkReal x8257=(sj2*x8243);
IkReal x8258=((0.39225)*cj1*cj2);
IkReal x8259=(cj2*x8242);
IkReal x8260=(cj2*x8243);
evalcond[0]=((((-1.0)*r12*x8255))+(((-1.0)*cj5*r10*x8250))+((sj4*x8247))+x8242);
evalcond[1]=(((r01*sj4*sj5))+(((-1.0)*cj5*r00*x8250))+(((-1.0)*r02*x8255))+(((-1.0)*x8243)));
evalcond[2]=((((-1.0)*r00*x8249))+(((-1.0)*x8253))+(((-1.0)*x8251*x8259))+(((-1.0)*x8245*x8256)));
evalcond[3]=((((-1.0)*r10*x8249))+(((-1.0)*x8251*x8260))+(((-1.0)*x8245*x8257))+(((-1.0)*x8248)));
evalcond[4]=(((sj1*x8256))+(((-1.0)*cj4*r01*x8249))+(((-1.0)*x8245*x8259))+(((-1.0)*r02*x8250))+((r00*x8244)));
evalcond[5]=(((r10*x8244))+(((-1.0)*x8245*x8260))+(((-1.0)*r12*x8250))+((sj1*x8257))+(((-1.0)*x8247*x8255)));
evalcond[6]=((((-0.09465)*x8253))+(((-1.0)*x8246*x8256))+((x8242*x8254))+((x8242*x8258))+(((-0.10915)*x8243))+(((-1.0)*r00*x8252))+(((-1.0)*px)));
evalcond[7]=((((-0.09465)*x8248))+(((-1.0)*x8246*x8257))+(((-1.0)*r10*x8252))+(((-1.0)*py))+(((0.10915)*x8242))+((x8243*x8254))+((x8243*x8258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8261 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8261.valid){
continue;
}
CheckValue<IkReal> x8262=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8262.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8261.value)+(((1.5707963267949)*(x8262.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8263=IKcos(j0);
IkReal x8264=IKsin(j0);
IkReal x8265=((1.0)*cj1);
IkReal x8266=((0.39225)*sj1);
IkReal x8267=(cj5*r11);
IkReal x8268=((1.0)*sj5);
IkReal x8269=(cj5*r01);
IkReal x8270=((1.0)*sj1);
IkReal x8271=((0.09465)*sj5);
IkReal x8272=((0.39225)*cj1);
IkReal x8273=((0.425)*cj1);
IkReal x8274=(sj2*x8263);
IkReal x8275=(sj2*x8264);
IkReal x8276=(cj2*x8263);
IkReal x8277=(cj2*x8264);
evalcond[0]=((((-1.0)*x8265*x8274))+(((-1.0)*x8270*x8276))+(((-1.0)*r00*x8268))+(((-1.0)*x8269)));
evalcond[1]=((((-1.0)*r10*x8268))+(((-1.0)*x8265*x8275))+(((-1.0)*x8270*x8277))+(((-1.0)*x8267)));
evalcond[2]=((((-1.0)*px))+(((-0.10915)*x8264))+((x8263*x8273))+(((-1.0)*x8266*x8274))+((x8272*x8276))+(((-1.0)*r00*x8271))+(((-0.09465)*x8269)));
evalcond[3]=((((-1.0)*py))+(((0.10915)*x8263))+(((-1.0)*r10*x8271))+(((-1.0)*x8266*x8275))+((x8272*x8277))+((x8264*x8273))+(((-0.09465)*x8267)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8278=((1.0)*cj5);
IkReal x8279=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8278)));
j4eval[0]=x8279;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8278)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8280=((1.0)*cj5);
IkReal x8281=((((-1.0)*r11*x8280))+(((-1.0)*r10*sj5)));
j4eval[0]=x8281;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8280)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x8281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8282=((1.0)*sj0);
IkReal x8283=((1.0)*cj0);
IkReal x8284=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8284;
j4eval[1]=((IKabs(((((-1.0)*r02*x8283))+(((-1.0)*r12*x8282)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8282))+(((-1.0)*r01*sj5*x8283))))));
j4eval[2]=IKsign(x8284);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8285=((-1.0)*r20);
IkReal x8287 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8287)==0){
continue;
}
IkReal x8286=pow(x8287,-0.5);
CheckValue<IkReal> x8288 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8285),IKFAST_ATAN2_MAGTHRESH);
if(!x8288.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8288.value));
IkReal gconst133=(r21*x8286);
IkReal gconst134=(x8285*x8286);
CheckValue<IkReal> x8289 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8289.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8289.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8290=((-1.0)*r20);
IkReal x8291=x8286;
CheckValue<IkReal> x8293 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8290),IKFAST_ATAN2_MAGTHRESH);
if(!x8293.valid){
continue;
}
IkReal x8292=((-1.0)*(x8293.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8292;
IkReal gconst132=x8292;
IkReal gconst133=(r21*x8291);
IkReal gconst134=(x8290*x8291);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8294=((-1.0)*r20);
IkReal x8295=x8286;
CheckValue<IkReal> x8297 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8294),IKFAST_ATAN2_MAGTHRESH);
if(!x8297.valid){
continue;
}
IkReal x8296=((-1.0)*(x8297.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8296;
IkReal gconst132=x8296;
IkReal gconst133=(r21*x8295);
IkReal gconst134=(x8294*x8295);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8298=((-1.0)*r20);
IkReal x8299=x8286;
CheckValue<IkReal> x8301 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8298),IKFAST_ATAN2_MAGTHRESH);
if(!x8301.valid){
continue;
}
IkReal x8300=((-1.0)*(x8301.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8300;
IkReal gconst132=x8300;
IkReal gconst133=(r21*x8299);
IkReal gconst134=(x8298*x8299);
IkReal x8302=r22*r22;
CheckValue<IkReal> x8305=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8302))),-1);
if(!x8305.valid){
continue;
}
IkReal x8303=x8305.value;
IkReal x8304=(x8302+((x8303*(r21*r21*r21*r21)))+((x8303*(r20*r20*r20*r20)))+(((2.0)*x8303*(r20*r20)*(r21*r21))));
j4eval[0]=x8304;
j4eval[1]=IKsign(x8304);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8306=(gconst133*r21);
IkReal x8307=(cj1*sj2);
IkReal x8308=(gconst134*r20);
IkReal x8309=(cj2*sj1);
CheckValue<IkReal> x8310 = IKatan2WithCheck(IkReal((((r22*x8309))+((r22*x8307)))),IkReal(((((-1.0)*x8308*x8309))+((x8306*x8309))+((x8306*x8307))+(((-1.0)*x8307*x8308)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8310.valid){
continue;
}
CheckValue<IkReal> x8311=IKPowWithIntegerCheck(IKsign(((x8306*x8306)+(r22*r22)+(((-2.0)*x8306*x8308))+(x8308*x8308))),-1);
if(!x8311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8310.value)+(((1.5707963267949)*(x8311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8312=IKsin(j4);
IkReal x8313=IKcos(j4);
IkReal x8314=(sj1*sj2);
IkReal x8315=(gconst133*r11);
IkReal x8316=(gconst133*r21);
IkReal x8317=(gconst133*r01);
IkReal x8318=((1.0)*x8313);
IkReal x8319=(gconst134*x8313);
IkReal x8320=((1.0)*x8312);
IkReal x8321=((1.0)*cj1*cj2);
evalcond[0]=(((x8312*x8316))+(((-1.0)*gconst134*r20*x8320))+(((-1.0)*r22*x8318)));
evalcond[1]=(((x8312*x8315))+cj0+(((-1.0)*gconst134*r10*x8320))+(((-1.0)*r12*x8318)));
evalcond[2]=((((-1.0)*sj0))+((x8312*x8317))+(((-1.0)*gconst134*r00*x8320))+(((-1.0)*r02*x8318)));
evalcond[3]=(((cj2*sj1))+((r20*x8319))+(((-1.0)*x8316*x8318))+(((-1.0)*r22*x8320))+((cj1*sj2)));
evalcond[4]=(((r00*x8319))+(((-1.0)*x8317*x8318))+((cj0*x8314))+(((-1.0)*r02*x8320))+(((-1.0)*cj0*x8321)));
evalcond[5]=(((r10*x8319))+((sj0*x8314))+(((-1.0)*sj0*x8321))+(((-1.0)*x8315*x8318))+(((-1.0)*r12*x8320)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8322=((1.0)*gconst134);
CheckValue<IkReal> x8323=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8322)))),-1);
if(!x8323.valid){
continue;
}
CheckValue<IkReal> x8324 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8322))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8323.value)))+(x8324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8325=IKsin(j4);
IkReal x8326=IKcos(j4);
IkReal x8327=(sj1*sj2);
IkReal x8328=(gconst133*r11);
IkReal x8329=(gconst133*r21);
IkReal x8330=(gconst133*r01);
IkReal x8331=((1.0)*x8326);
IkReal x8332=(gconst134*x8326);
IkReal x8333=((1.0)*x8325);
IkReal x8334=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8331))+(((-1.0)*gconst134*r20*x8333))+((x8325*x8329)));
evalcond[1]=(cj0+(((-1.0)*r12*x8331))+(((-1.0)*gconst134*r10*x8333))+((x8325*x8328)));
evalcond[2]=((((-1.0)*gconst134*r00*x8333))+(((-1.0)*sj0))+((x8325*x8330))+(((-1.0)*r02*x8331)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8333))+((cj1*sj2))+((r20*x8332))+(((-1.0)*x8329*x8331)));
evalcond[4]=(((cj0*x8327))+((r00*x8332))+(((-1.0)*x8330*x8331))+(((-1.0)*r02*x8333))+(((-1.0)*cj0*x8334)));
evalcond[5]=((((-1.0)*r12*x8333))+((r10*x8332))+((sj0*x8327))+(((-1.0)*sj0*x8334))+(((-1.0)*x8328*x8331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8335=((1.0)*gconst134);
CheckValue<IkReal> x8336=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8335)))),-1);
if(!x8336.valid){
continue;
}
CheckValue<IkReal> x8337 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8335))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8337.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8336.value)))+(x8337.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8338=IKsin(j4);
IkReal x8339=IKcos(j4);
IkReal x8340=(sj1*sj2);
IkReal x8341=(gconst133*r11);
IkReal x8342=(gconst133*r21);
IkReal x8343=(gconst133*r01);
IkReal x8344=((1.0)*x8339);
IkReal x8345=(gconst134*x8339);
IkReal x8346=((1.0)*x8338);
IkReal x8347=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8344))+(((-1.0)*gconst134*r20*x8346))+((x8338*x8342)));
evalcond[1]=((((-1.0)*gconst134*r10*x8346))+cj0+((x8338*x8341))+(((-1.0)*r12*x8344)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8344))+((x8338*x8343))+(((-1.0)*gconst134*r00*x8346)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8342*x8344))+((cj1*sj2))+((r20*x8345))+(((-1.0)*r22*x8346)));
evalcond[4]=((((-1.0)*r02*x8346))+(((-1.0)*x8343*x8344))+((cj0*x8340))+(((-1.0)*cj0*x8347))+((r00*x8345)));
evalcond[5]=(((sj0*x8340))+(((-1.0)*x8341*x8344))+(((-1.0)*r12*x8346))+(((-1.0)*sj0*x8347))+((r10*x8345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8348=((-1.0)*r21);
IkReal x8350 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8350)==0){
continue;
}
IkReal x8349=pow(x8350,-0.5);
CheckValue<IkReal> x8351 = IKatan2WithCheck(IkReal(x8348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8351.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8351.value))));
IkReal gconst136=(x8348*x8349);
IkReal gconst137=((1.0)*r20*x8349);
CheckValue<IkReal> x8352 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8352.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8352.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8353=((-1.0)*r21);
CheckValue<IkReal> x8356 = IKatan2WithCheck(IkReal(x8353),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8356.valid){
continue;
}
IkReal x8354=((1.0)*(x8356.value));
IkReal x8355=x8349;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8354)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8354)));
IkReal gconst136=(x8353*x8355);
IkReal gconst137=((1.0)*r20*x8355);
IkReal x8357=r22*r22;
IkReal x8358=((1.0)*x8357);
CheckValue<IkReal> x8362=IKPowWithIntegerCheck(((-1.0)+x8357),-1);
if(!x8362.valid){
continue;
}
IkReal x8359=x8362.value;
if((((1.0)+(((-1.0)*x8358)))) < -0.00001)
continue;
IkReal x8360=IKsqrt(((1.0)+(((-1.0)*x8358))));
IkReal x8361=(cj0*x8359*x8360);
j4eval[0]=((IKabs((x8361+(((-1.0)*x8358*x8361)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8363=((-1.0)*r21);
CheckValue<IkReal> x8366 = IKatan2WithCheck(IkReal(x8363),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8366.valid){
continue;
}
IkReal x8364=((1.0)*(x8366.value));
IkReal x8365=x8349;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8364)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8364)));
IkReal gconst136=(x8363*x8365);
IkReal gconst137=((1.0)*r20*x8365);
IkReal x8367=r22*r22;
IkReal x8368=((1.0)*x8367);
CheckValue<IkReal> x8372=IKPowWithIntegerCheck(((-1.0)+x8367),-1);
if(!x8372.valid){
continue;
}
IkReal x8369=x8372.value;
if((((1.0)+(((-1.0)*x8368)))) < -0.00001)
continue;
IkReal x8370=IKsqrt(((1.0)+(((-1.0)*x8368))));
IkReal x8371=(sj0*x8369*x8370);
j4eval[0]=((IKabs((x8371+(((-1.0)*x8368*x8371)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8373=((-1.0)*r21);
CheckValue<IkReal> x8376 = IKatan2WithCheck(IkReal(x8373),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8376.valid){
continue;
}
IkReal x8374=((1.0)*(x8376.value));
IkReal x8375=x8349;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8374)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8374)));
IkReal gconst136=(x8373*x8375);
IkReal gconst137=((1.0)*r20*x8375);
IkReal x8377=r22*r22;
IkReal x8378=(r12*sj0);
IkReal x8379=(cj0*r02);
CheckValue<IkReal> x8383=IKPowWithIntegerCheck(((-1.0)+x8377),-1);
if(!x8383.valid){
continue;
}
IkReal x8380=x8383.value;
if((((1.0)+(((-1.0)*x8377)))) < -0.00001)
continue;
IkReal x8381=IKsqrt(((1.0)+(((-1.0)*x8377))));
IkReal x8382=(r22*x8380*x8381);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8379))+(((-1.0)*x8378)))))+(IKabs((((x8378*x8382))+((x8379*x8382))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8384=((1.0)*sj0);
IkReal x8385=((1.0)*cj0);
CheckValue<IkReal> x8386=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8386.valid){
continue;
}
CheckValue<IkReal> x8387 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8385))+(((-1.0)*r12*x8384)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x8384))+(((-1.0)*gconst136*r01*x8385))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8386.value)))+(x8387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8388=IKsin(j4);
IkReal x8389=IKcos(j4);
IkReal x8390=(gconst136*r01);
IkReal x8391=(gconst137*r10);
IkReal x8392=(sj1*sj2);
IkReal x8393=(gconst137*r20);
IkReal x8394=(gconst136*r11);
IkReal x8395=(gconst136*r21);
IkReal x8396=(gconst137*r00);
IkReal x8397=((1.0)*x8389);
IkReal x8398=((1.0)*cj1*cj2);
IkReal x8399=((1.0)*x8388);
evalcond[0]=((((-1.0)*x8393*x8399))+(((-1.0)*r22*x8397))+((x8388*x8395)));
evalcond[1]=(cj0+(((-1.0)*x8391*x8399))+(((-1.0)*r12*x8397))+((x8388*x8394)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8397))+(((-1.0)*x8396*x8399))+((x8388*x8390)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8395*x8397))+((x8389*x8393))+(((-1.0)*r22*x8399)));
evalcond[4]=((((-1.0)*x8390*x8397))+(((-1.0)*r02*x8399))+(((-1.0)*cj0*x8398))+((x8389*x8396))+((cj0*x8392)));
evalcond[5]=((((-1.0)*sj0*x8398))+((x8389*x8391))+((sj0*x8392))+(((-1.0)*x8394*x8397))+(((-1.0)*r12*x8399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8400=((1.0)*gconst137);
CheckValue<IkReal> x8401 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8400))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8401.valid){
continue;
}
CheckValue<IkReal> x8402=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x8400)))),-1);
if(!x8402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8401.value)+(((1.5707963267949)*(x8402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8403=IKsin(j4);
IkReal x8404=IKcos(j4);
IkReal x8405=(gconst136*r01);
IkReal x8406=(gconst137*r10);
IkReal x8407=(sj1*sj2);
IkReal x8408=(gconst137*r20);
IkReal x8409=(gconst136*r11);
IkReal x8410=(gconst136*r21);
IkReal x8411=(gconst137*r00);
IkReal x8412=((1.0)*x8404);
IkReal x8413=((1.0)*cj1*cj2);
IkReal x8414=((1.0)*x8403);
evalcond[0]=((((-1.0)*x8408*x8414))+((x8403*x8410))+(((-1.0)*r22*x8412)));
evalcond[1]=((((-1.0)*r12*x8412))+cj0+(((-1.0)*x8406*x8414))+((x8403*x8409)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8412))+(((-1.0)*x8411*x8414))+((x8403*x8405)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8410*x8412))+((cj1*sj2))+((x8404*x8408))+(((-1.0)*r22*x8414)));
evalcond[4]=((((-1.0)*x8405*x8412))+(((-1.0)*cj0*x8413))+(((-1.0)*r02*x8414))+((x8404*x8411))+((cj0*x8407)));
evalcond[5]=((((-1.0)*r12*x8414))+((sj0*x8407))+(((-1.0)*x8409*x8412))+(((-1.0)*sj0*x8413))+((x8404*x8406)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8415=((1.0)*gconst137);
CheckValue<IkReal> x8416=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r00))+(((-1.0)*r01*x8415)))),-1);
if(!x8416.valid){
continue;
}
CheckValue<IkReal> x8417 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8415))+((cj0*gconst136*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8417.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8416.value)))+(x8417.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8418=IKsin(j4);
IkReal x8419=IKcos(j4);
IkReal x8420=(gconst136*r01);
IkReal x8421=(gconst137*r10);
IkReal x8422=(sj1*sj2);
IkReal x8423=(gconst137*r20);
IkReal x8424=(gconst136*r11);
IkReal x8425=(gconst136*r21);
IkReal x8426=(gconst137*r00);
IkReal x8427=((1.0)*x8419);
IkReal x8428=((1.0)*cj1*cj2);
IkReal x8429=((1.0)*x8418);
evalcond[0]=((((-1.0)*r22*x8427))+(((-1.0)*x8423*x8429))+((x8418*x8425)));
evalcond[1]=(cj0+(((-1.0)*x8421*x8429))+((x8418*x8424))+(((-1.0)*r12*x8427)));
evalcond[2]=((((-1.0)*x8426*x8429))+(((-1.0)*sj0))+((x8418*x8420))+(((-1.0)*r02*x8427)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8429))+((x8419*x8423))+(((-1.0)*x8425*x8427)));
evalcond[4]=(((cj0*x8422))+(((-1.0)*cj0*x8428))+(((-1.0)*x8420*x8427))+(((-1.0)*r02*x8429))+((x8419*x8426)));
evalcond[5]=((((-1.0)*x8424*x8427))+((sj0*x8422))+((x8419*x8421))+(((-1.0)*sj0*x8428))+(((-1.0)*r12*x8429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8430=((-1.0)*r10);
IkReal x8432 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8432)==0){
continue;
}
IkReal x8431=pow(x8432,-0.5);
CheckValue<IkReal> x8433 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8430),IKFAST_ATAN2_MAGTHRESH);
if(!x8433.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8433.value));
IkReal gconst139=(r11*x8431);
IkReal gconst140=(x8430*x8431);
CheckValue<IkReal> x8434 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8434.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8434.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8435=((-1.0)*r10);
IkReal x8436=x8431;
CheckValue<IkReal> x8438 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8435),IKFAST_ATAN2_MAGTHRESH);
if(!x8438.valid){
continue;
}
IkReal x8437=((-1.0)*(x8438.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8437;
IkReal gconst138=x8437;
IkReal gconst139=(r11*x8436);
IkReal gconst140=(x8435*x8436);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8439=((1.0)*sj0);
IkReal x8440=((1.0)*gconst139);
CheckValue<IkReal> x8441 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8439))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x8439))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8440))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8441.valid){
continue;
}
CheckValue<IkReal> x8442=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8440)))),-1);
if(!x8442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8441.value)+(((1.5707963267949)*(x8442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8443=IKsin(j4);
IkReal x8444=IKcos(j4);
IkReal x8445=(gconst140*r00);
IkReal x8446=(sj1*sj2);
IkReal x8447=(gconst139*r11);
IkReal x8448=(gconst139*r01);
IkReal x8449=(gconst139*r21);
IkReal x8450=((1.0)*x8444);
IkReal x8451=((1.0)*x8443);
IkReal x8452=((1.0)*cj1*cj2);
IkReal x8453=(gconst140*x8444);
evalcond[0]=(((x8443*x8449))+(((-1.0)*r22*x8450))+(((-1.0)*gconst140*r20*x8451)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8451))+((x8443*x8447))+(((-1.0)*r12*x8450)));
evalcond[2]=((((-1.0)*sj0))+((x8443*x8448))+(((-1.0)*x8445*x8451))+(((-1.0)*r02*x8450)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x8453))+(((-1.0)*r22*x8451))+(((-1.0)*x8449*x8450)));
evalcond[4]=(((x8444*x8445))+(((-1.0)*x8448*x8450))+(((-1.0)*cj0*x8452))+(((-1.0)*r02*x8451))+((cj0*x8446)));
evalcond[5]=((((-1.0)*x8447*x8450))+(((-1.0)*sj0*x8452))+(((-1.0)*r12*x8451))+((sj0*x8446))+((r10*x8453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8454=((1.0)*gconst140);
CheckValue<IkReal> x8455 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x8454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8455.valid){
continue;
}
CheckValue<IkReal> x8456=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8454))+(((-1.0)*gconst139*r00)))),-1);
if(!x8456.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8455.value)+(((1.5707963267949)*(x8456.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8457=IKsin(j4);
IkReal x8458=IKcos(j4);
IkReal x8459=(gconst140*r00);
IkReal x8460=(sj1*sj2);
IkReal x8461=(gconst139*r11);
IkReal x8462=(gconst139*r01);
IkReal x8463=(gconst139*r21);
IkReal x8464=((1.0)*x8458);
IkReal x8465=((1.0)*x8457);
IkReal x8466=((1.0)*cj1*cj2);
IkReal x8467=(gconst140*x8458);
evalcond[0]=(((x8457*x8463))+(((-1.0)*gconst140*r20*x8465))+(((-1.0)*r22*x8464)));
evalcond[1]=(cj0+((x8457*x8461))+(((-1.0)*gconst140*r10*x8465))+(((-1.0)*r12*x8464)));
evalcond[2]=((((-1.0)*x8459*x8465))+(((-1.0)*sj0))+(((-1.0)*r02*x8464))+((x8457*x8462)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8463*x8464))+(((-1.0)*r22*x8465))+((r20*x8467)));
evalcond[4]=((((-1.0)*r02*x8465))+((x8458*x8459))+((cj0*x8460))+(((-1.0)*cj0*x8466))+(((-1.0)*x8462*x8464)));
evalcond[5]=((((-1.0)*sj0*x8466))+((r10*x8467))+(((-1.0)*r12*x8465))+((sj0*x8460))+(((-1.0)*x8461*x8464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8468=((-1.0)*r11);
IkReal x8470 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8470)==0){
continue;
}
IkReal x8469=pow(x8470,-0.5);
CheckValue<IkReal> x8471 = IKatan2WithCheck(IkReal(x8468),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8471.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8471.value))));
IkReal gconst142=(x8468*x8469);
IkReal gconst143=((1.0)*r10*x8469);
CheckValue<IkReal> x8472 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8472.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8472.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8473=((-1.0)*r11);
CheckValue<IkReal> x8476 = IKatan2WithCheck(IkReal(x8473),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8476.valid){
continue;
}
IkReal x8474=((1.0)*(x8476.value));
IkReal x8475=x8469;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8474)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8474)));
IkReal gconst142=(x8473*x8475);
IkReal gconst143=((1.0)*r10*x8475);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8477=((-1.0)*r11);
CheckValue<IkReal> x8480 = IKatan2WithCheck(IkReal(x8477),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8480.valid){
continue;
}
IkReal x8478=((1.0)*(x8480.value));
IkReal x8479=x8469;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8478)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8478)));
IkReal gconst142=(x8477*x8479);
IkReal gconst143=((1.0)*r10*x8479);
IkReal x8481=r12*r12;
IkReal x8482=((1.0)*sj0);
IkReal x8483=(cj0*r02);
IkReal x8484=x8469;
j4eval[0]=((IKabs(((((-1.0)*x8483))+(((-1.0)*r12*x8482)))))+(IKabs((((r12*x8483*x8484))+(((-1.0)*x8482*x8484))+((sj0*x8481*x8484))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8485=((-1.0)*r11);
CheckValue<IkReal> x8488 = IKatan2WithCheck(IkReal(x8485),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8488.valid){
continue;
}
IkReal x8486=((1.0)*(x8488.value));
IkReal x8487=x8469;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8486)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8486)));
IkReal gconst142=(x8485*x8487);
IkReal gconst143=((1.0)*r10*x8487);
IkReal x8489=r12*r12;
IkReal x8490=(cj1*r22*sj2);
IkReal x8491=(cj2*r22*sj1);
CheckValue<IkReal> x8495=IKPowWithIntegerCheck(((-1.0)+x8489),-1);
if(!x8495.valid){
continue;
}
IkReal x8492=x8495.value;
if((((1.0)+(((-1.0)*x8489)))) < -0.00001)
continue;
IkReal x8493=IKsqrt(((1.0)+(((-1.0)*x8489))));
IkReal x8494=((1.0)*r12*x8492*x8493);
j4eval[0]=((IKabs((x8491+x8490)))+(IKabs(((((-1.0)*x8491*x8494))+(((-1.0)*x8490*x8494))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8496=(gconst142*r21);
IkReal x8497=(cj1*sj2);
IkReal x8498=(cj2*sj1);
IkReal x8499=(gconst143*r20);
CheckValue<IkReal> x8500=IKPowWithIntegerCheck(IKsign(((x8499*x8499)+(r22*r22)+(x8496*x8496)+(((-2.0)*x8496*x8499)))),-1);
if(!x8500.valid){
continue;
}
CheckValue<IkReal> x8501 = IKatan2WithCheck(IkReal((((r22*x8497))+((r22*x8498)))),IkReal(((((-1.0)*x8498*x8499))+((x8496*x8498))+((x8496*x8497))+(((-1.0)*x8497*x8499)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8500.value)))+(x8501.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8502=IKsin(j4);
IkReal x8503=IKcos(j4);
IkReal x8504=(sj1*sj2);
IkReal x8505=(gconst143*r20);
IkReal x8506=((1.0)*x8503);
IkReal x8507=((1.0)*cj1*cj2);
IkReal x8508=((1.0)*x8502);
IkReal x8509=(gconst142*x8502);
IkReal x8510=(gconst143*x8503);
evalcond[0]=((((-1.0)*x8505*x8508))+((r21*x8509))+(((-1.0)*r22*x8506)));
evalcond[1]=((((-1.0)*gconst143*r10*x8508))+cj0+((r11*x8509))+(((-1.0)*r12*x8506)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst143*r00*x8508))+(((-1.0)*r02*x8506))+((r01*x8509)));
evalcond[3]=(((cj2*sj1))+((x8503*x8505))+(((-1.0)*gconst142*r21*x8506))+((cj1*sj2))+(((-1.0)*r22*x8508)));
evalcond[4]=(((cj0*x8504))+(((-1.0)*r02*x8508))+(((-1.0)*gconst142*r01*x8506))+(((-1.0)*cj0*x8507))+((r00*x8510)));
evalcond[5]=(((sj0*x8504))+(((-1.0)*r12*x8508))+(((-1.0)*sj0*x8507))+(((-1.0)*gconst142*r11*x8506))+((r10*x8510)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8511=((1.0)*sj0);
IkReal x8512=((1.0)*gconst142);
CheckValue<IkReal> x8513 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8511)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8512))+(((-1.0)*gconst142*r11*x8511))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8513.valid){
continue;
}
CheckValue<IkReal> x8514=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8512))+(((-1.0)*gconst143*r21)))),-1);
if(!x8514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8513.value)+(((1.5707963267949)*(x8514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8515=IKsin(j4);
IkReal x8516=IKcos(j4);
IkReal x8517=(sj1*sj2);
IkReal x8518=(gconst143*r20);
IkReal x8519=((1.0)*x8516);
IkReal x8520=((1.0)*cj1*cj2);
IkReal x8521=((1.0)*x8515);
IkReal x8522=(gconst142*x8515);
IkReal x8523=(gconst143*x8516);
evalcond[0]=(((r21*x8522))+(((-1.0)*x8518*x8521))+(((-1.0)*r22*x8519)));
evalcond[1]=((((-1.0)*gconst143*r10*x8521))+cj0+((r11*x8522))+(((-1.0)*r12*x8519)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8519))+((r01*x8522))+(((-1.0)*gconst143*r00*x8521)));
evalcond[3]=(((cj2*sj1))+((x8516*x8518))+(((-1.0)*gconst142*r21*x8519))+((cj1*sj2))+(((-1.0)*r22*x8521)));
evalcond[4]=(((cj0*x8517))+(((-1.0)*r02*x8521))+(((-1.0)*cj0*x8520))+((r00*x8523))+(((-1.0)*gconst142*r01*x8519)));
evalcond[5]=(((sj0*x8517))+(((-1.0)*sj0*x8520))+(((-1.0)*r12*x8521))+(((-1.0)*gconst142*r11*x8519))+((r10*x8523)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8524=((1.0)*gconst143);
CheckValue<IkReal> x8525=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst142*r00))+(((-1.0)*r01*x8524)))),-1);
if(!x8525.valid){
continue;
}
CheckValue<IkReal> x8526 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8524))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8525.value)))+(x8526.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8527=IKsin(j4);
IkReal x8528=IKcos(j4);
IkReal x8529=(sj1*sj2);
IkReal x8530=(gconst143*r20);
IkReal x8531=((1.0)*x8528);
IkReal x8532=((1.0)*cj1*cj2);
IkReal x8533=((1.0)*x8527);
IkReal x8534=(gconst142*x8527);
IkReal x8535=(gconst143*x8528);
evalcond[0]=((((-1.0)*r22*x8531))+((r21*x8534))+(((-1.0)*x8530*x8533)));
evalcond[1]=(cj0+(((-1.0)*r12*x8531))+(((-1.0)*gconst143*r10*x8533))+((r11*x8534)));
evalcond[2]=((((-1.0)*r02*x8531))+(((-1.0)*sj0))+((r01*x8534))+(((-1.0)*gconst143*r00*x8533)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8533))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8531))+((x8528*x8530)));
evalcond[4]=((((-1.0)*r02*x8533))+(((-1.0)*cj0*x8532))+((r00*x8535))+(((-1.0)*gconst142*r01*x8531))+((cj0*x8529)));
evalcond[5]=((((-1.0)*sj0*x8532))+(((-1.0)*gconst142*r11*x8531))+((sj0*x8529))+((r10*x8535))+(((-1.0)*r12*x8533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8536=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8536;
j4eval[1]=IKsign(x8536);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8537=((1.0)*cj5);
IkReal x8538=((((-1.0)*r01*x8537))+(((-1.0)*r00*sj5)));
j4eval[0]=x8538;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8537))))));
j4eval[2]=IKsign(x8538);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8539=cj5*cj5;
IkReal x8540=r11*r11;
IkReal x8541=(r11*sj5);
IkReal x8542=(cj5*r10);
IkReal x8543=((r12*r12)+((x8539*(r10*r10)))+x8540+(((-2.0)*x8541*x8542))+(((-1.0)*x8539*x8540)));
j4eval[0]=x8543;
j4eval[1]=IKsign(x8543);
j4eval[2]=((IKabs(r12))+(IKabs((x8542+(((-1.0)*x8541))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8544=cj5*cj5;
IkReal x8545=r11*r11;
IkReal x8546=(cj5*r10);
IkReal x8547=(r11*sj5);
CheckValue<IkReal> x8548 = IKatan2WithCheck(IkReal((x8546+(((-1.0)*x8547)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8548.valid){
continue;
}
CheckValue<IkReal> x8549=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x8544*(r10*r10)))+x8545+(((-1.0)*x8544*x8545))+(((-2.0)*x8546*x8547)))),-1);
if(!x8549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8548.value)+(((1.5707963267949)*(x8549.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8550=IKsin(j4);
IkReal x8551=IKcos(j4);
IkReal x8552=(cj5*r10);
IkReal x8553=(r01*sj5);
IkReal x8554=(cj5*r00);
IkReal x8555=(cj5*r20);
IkReal x8556=((1.0)*x8551);
IkReal x8557=((1.0)*x8550);
IkReal x8558=(sj5*x8550);
evalcond[0]=(((r21*x8558))+(((-1.0)*r22*x8556))+(((-1.0)*x8555*x8557)));
evalcond[1]=(((x8550*x8553))+(((-1.0)*x8554*x8557))+(((-1.0)*r02*x8556)));
evalcond[2]=(((x8551*x8552))+(((-1.0)*r12*x8557))+(((-1.0)*r11*sj5*x8556)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8556))+((r11*x8558))+(((-1.0)*x8552*x8557)));
evalcond[4]=(((x8551*x8555))+((cj2*sj1))+(((-1.0)*r22*x8557))+(((-1.0)*r21*sj5*x8556))+((cj1*sj2)));
evalcond[5]=(((x8551*x8554))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8553*x8556))+(((-1.0)*r02*x8557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8559=((1.0)*cj5);
CheckValue<IkReal> x8560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8559))+(((-1.0)*r00*sj5)))),-1);
if(!x8560.valid){
continue;
}
CheckValue<IkReal> x8561 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8559)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8561.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8560.value)))+(x8561.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8562=IKsin(j4);
IkReal x8563=IKcos(j4);
IkReal x8564=(cj5*r10);
IkReal x8565=(r01*sj5);
IkReal x8566=(cj5*r00);
IkReal x8567=(cj5*r20);
IkReal x8568=((1.0)*x8563);
IkReal x8569=((1.0)*x8562);
IkReal x8570=(sj5*x8562);
evalcond[0]=(((r21*x8570))+(((-1.0)*r22*x8568))+(((-1.0)*x8567*x8569)));
evalcond[1]=(((x8562*x8565))+(((-1.0)*x8566*x8569))+(((-1.0)*r02*x8568)));
evalcond[2]=((((-1.0)*r12*x8569))+((x8563*x8564))+(((-1.0)*r11*sj5*x8568)));
evalcond[3]=((1.0)+(((-1.0)*x8564*x8569))+(((-1.0)*r12*x8568))+((r11*x8570)));
evalcond[4]=(((cj2*sj1))+((x8563*x8567))+((cj1*sj2))+(((-1.0)*r22*x8569))+(((-1.0)*r21*sj5*x8568)));
evalcond[5]=((((-1.0)*x8565*x8568))+((x8563*x8566))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8569)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8571=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8571.valid){
continue;
}
CheckValue<IkReal> x8572 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8572.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8571.value)))+(x8572.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8573=IKsin(j4);
IkReal x8574=IKcos(j4);
IkReal x8575=(cj5*r10);
IkReal x8576=(r01*sj5);
IkReal x8577=(cj5*r00);
IkReal x8578=(cj5*r20);
IkReal x8579=((1.0)*x8574);
IkReal x8580=((1.0)*x8573);
IkReal x8581=(sj5*x8573);
evalcond[0]=(((r21*x8581))+(((-1.0)*x8578*x8580))+(((-1.0)*r22*x8579)));
evalcond[1]=((((-1.0)*x8577*x8580))+(((-1.0)*r02*x8579))+((x8573*x8576)));
evalcond[2]=((((-1.0)*r11*sj5*x8579))+(((-1.0)*r12*x8580))+((x8574*x8575)));
evalcond[3]=((1.0)+((r11*x8581))+(((-1.0)*r12*x8579))+(((-1.0)*x8575*x8580)));
evalcond[4]=((((-1.0)*r21*sj5*x8579))+((cj2*sj1))+(((-1.0)*r22*x8580))+((cj1*sj2))+((x8574*x8578)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8580))+((x8574*x8577))+(((-1.0)*x8576*x8579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8582=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8582;
j4eval[1]=IKsign(x8582);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8583=((1.0)*cj5);
IkReal x8584=((((-1.0)*r21*x8583))+(((-1.0)*r20*sj5)));
j4eval[0]=x8584;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x8583))))));
j4eval[2]=IKsign(x8584);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8585=cj5*cj5;
IkReal x8586=r11*r11;
IkReal x8587=(cj5*r10);
IkReal x8588=(r11*sj5);
IkReal x8589=((((-1.0)*x8586))+(((-1.0)*x8585*(r10*r10)))+(((2.0)*x8587*x8588))+(((-1.0)*(r12*r12)))+((x8585*x8586)));
j4eval[0]=x8589;
j4eval[1]=((IKabs(r12))+(IKabs((x8587+(((-1.0)*x8588))))));
j4eval[2]=IKsign(x8589);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8590=cj5*cj5;
IkReal x8591=r11*r11;
IkReal x8592=(cj5*r10);
IkReal x8593=(r11*sj5);
CheckValue<IkReal> x8594=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8591))+(((-1.0)*x8590*(r10*r10)))+(((2.0)*x8592*x8593))+((x8590*x8591))+(((-1.0)*(r12*r12))))),-1);
if(!x8594.valid){
continue;
}
CheckValue<IkReal> x8595 = IKatan2WithCheck(IkReal((x8592+(((-1.0)*x8593)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8594.value)))+(x8595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8596=IKsin(j4);
IkReal x8597=IKcos(j4);
IkReal x8598=(cj5*r10);
IkReal x8599=(r01*sj5);
IkReal x8600=(cj5*r00);
IkReal x8601=(cj5*r20);
IkReal x8602=((1.0)*x8597);
IkReal x8603=((1.0)*x8596);
IkReal x8604=(sj5*x8596);
evalcond[0]=((((-1.0)*x8601*x8603))+(((-1.0)*r22*x8602))+((r21*x8604)));
evalcond[1]=(((x8596*x8599))+(((-1.0)*r02*x8602))+(((-1.0)*x8600*x8603)));
evalcond[2]=((((-1.0)*r12*x8603))+(((-1.0)*r11*sj5*x8602))+((x8597*x8598)));
evalcond[3]=((-1.0)+((r11*x8604))+(((-1.0)*r12*x8602))+(((-1.0)*x8598*x8603)));
evalcond[4]=(((cj2*sj1))+((x8597*x8601))+((cj1*sj2))+(((-1.0)*r22*x8603))+(((-1.0)*r21*sj5*x8602)));
evalcond[5]=(((x8597*x8600))+(((-1.0)*r02*x8603))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x8599*x8602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8605=((1.0)*cj5);
CheckValue<IkReal> x8606 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x8605))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8606.valid){
continue;
}
CheckValue<IkReal> x8607=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8605))+(((-1.0)*r20*sj5)))),-1);
if(!x8607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8606.value)+(((1.5707963267949)*(x8607.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8608=IKsin(j4);
IkReal x8609=IKcos(j4);
IkReal x8610=(cj5*r10);
IkReal x8611=(r01*sj5);
IkReal x8612=(cj5*r00);
IkReal x8613=(cj5*r20);
IkReal x8614=((1.0)*x8609);
IkReal x8615=((1.0)*x8608);
IkReal x8616=(sj5*x8608);
evalcond[0]=((((-1.0)*r22*x8614))+(((-1.0)*x8613*x8615))+((r21*x8616)));
evalcond[1]=((((-1.0)*x8612*x8615))+(((-1.0)*r02*x8614))+((x8608*x8611)));
evalcond[2]=(((x8609*x8610))+(((-1.0)*r12*x8615))+(((-1.0)*r11*sj5*x8614)));
evalcond[3]=((-1.0)+((r11*x8616))+(((-1.0)*r12*x8614))+(((-1.0)*x8610*x8615)));
evalcond[4]=(((cj2*sj1))+((x8609*x8613))+((cj1*sj2))+(((-1.0)*r22*x8615))+(((-1.0)*r21*sj5*x8614)));
evalcond[5]=((((-1.0)*r02*x8615))+((x8609*x8612))+(((-1.0)*sj1*sj2))+(((-1.0)*x8611*x8614))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8617 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8617.valid){
continue;
}
CheckValue<IkReal> x8618=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8617.value)+(((1.5707963267949)*(x8618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8619=IKsin(j4);
IkReal x8620=IKcos(j4);
IkReal x8621=(cj5*r10);
IkReal x8622=(r01*sj5);
IkReal x8623=(cj5*r00);
IkReal x8624=(cj5*r20);
IkReal x8625=((1.0)*x8620);
IkReal x8626=((1.0)*x8619);
IkReal x8627=(sj5*x8619);
evalcond[0]=(((r21*x8627))+(((-1.0)*x8624*x8626))+(((-1.0)*r22*x8625)));
evalcond[1]=((((-1.0)*x8623*x8626))+((x8619*x8622))+(((-1.0)*r02*x8625)));
evalcond[2]=(((x8620*x8621))+(((-1.0)*r12*x8626))+(((-1.0)*r11*sj5*x8625)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8625))+(((-1.0)*x8621*x8626))+((r11*x8627)));
evalcond[4]=(((cj2*sj1))+((x8620*x8624))+((cj1*sj2))+(((-1.0)*r21*sj5*x8625))+(((-1.0)*r22*x8626)));
evalcond[5]=(((x8620*x8623))+(((-1.0)*sj1*sj2))+(((-1.0)*x8622*x8625))+((cj1*cj2))+(((-1.0)*r02*x8626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8628=((-1.0)*r00);
IkReal x8630 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8630)==0){
continue;
}
IkReal x8629=pow(x8630,-0.5);
CheckValue<IkReal> x8631 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8628),IKFAST_ATAN2_MAGTHRESH);
if(!x8631.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8631.value));
IkReal gconst145=(r01*x8629);
IkReal gconst146=(x8628*x8629);
CheckValue<IkReal> x8632 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8632.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8632.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8633=((-1.0)*r00);
IkReal x8634=x8629;
CheckValue<IkReal> x8636 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8633),IKFAST_ATAN2_MAGTHRESH);
if(!x8636.valid){
continue;
}
IkReal x8635=((-1.0)*(x8636.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8635;
IkReal gconst144=x8635;
IkReal gconst145=(r01*x8634);
IkReal gconst146=(x8633*x8634);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8637=((1.0)*sj0);
IkReal x8638=((1.0)*gconst145);
CheckValue<IkReal> x8639 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8637))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*cj0*r01*x8638))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x8637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8639.valid){
continue;
}
CheckValue<IkReal> x8640=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst146*r21))+(((-1.0)*r20*x8638)))),-1);
if(!x8640.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8639.value)+(((1.5707963267949)*(x8640.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8641=IKsin(j4);
IkReal x8642=IKcos(j4);
IkReal x8643=(gconst146*r10);
IkReal x8644=(sj1*sj2);
IkReal x8645=(gconst146*r20);
IkReal x8646=(gconst146*r00);
IkReal x8647=((1.0)*x8642);
IkReal x8648=((1.0)*x8641);
IkReal x8649=(gconst145*x8641);
IkReal x8650=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8645*x8648))+(((-1.0)*r22*x8647))+((r21*x8649)));
evalcond[1]=(((r11*x8649))+cj0+(((-1.0)*x8643*x8648))+(((-1.0)*r12*x8647)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8646*x8648))+(((-1.0)*r02*x8647))+((r01*x8649)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8648))+(((-1.0)*gconst145*r21*x8647))+((x8642*x8645)));
evalcond[4]=((((-1.0)*gconst145*r01*x8647))+((cj0*x8644))+(((-1.0)*r02*x8648))+((x8642*x8646))+(((-1.0)*cj0*x8650)));
evalcond[5]=((((-1.0)*sj0*x8650))+(((-1.0)*gconst145*r11*x8647))+(((-1.0)*r12*x8648))+((x8642*x8643))+((sj0*x8644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8651=((1.0)*gconst146);
CheckValue<IkReal> x8652 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8651))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8652.valid){
continue;
}
CheckValue<IkReal> x8653=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8651))+(((-1.0)*gconst145*r10)))),-1);
if(!x8653.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8652.value)+(((1.5707963267949)*(x8653.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8654=IKsin(j4);
IkReal x8655=IKcos(j4);
IkReal x8656=(gconst146*r10);
IkReal x8657=(sj1*sj2);
IkReal x8658=(gconst146*r20);
IkReal x8659=(gconst146*r00);
IkReal x8660=((1.0)*x8655);
IkReal x8661=((1.0)*x8654);
IkReal x8662=(gconst145*x8654);
IkReal x8663=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8658*x8661))+(((-1.0)*r22*x8660))+((r21*x8662)));
evalcond[1]=((((-1.0)*x8656*x8661))+cj0+(((-1.0)*r12*x8660))+((r11*x8662)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8660))+(((-1.0)*x8659*x8661))+((r01*x8662)));
evalcond[3]=(((cj2*sj1))+((x8655*x8658))+((cj1*sj2))+(((-1.0)*r22*x8661))+(((-1.0)*gconst145*r21*x8660)));
evalcond[4]=((((-1.0)*cj0*x8663))+((x8655*x8659))+(((-1.0)*r02*x8661))+((cj0*x8657))+(((-1.0)*gconst145*r01*x8660)));
evalcond[5]=((((-1.0)*sj0*x8663))+(((-1.0)*gconst145*r11*x8660))+(((-1.0)*r12*x8661))+((x8655*x8656))+((sj0*x8657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8664=((-1.0)*r01);
IkReal x8666 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8666)==0){
continue;
}
IkReal x8665=pow(x8666,-0.5);
CheckValue<IkReal> x8667 = IKatan2WithCheck(IkReal(x8664),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8667.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8667.value))));
IkReal gconst148=(x8664*x8665);
IkReal gconst149=((1.0)*r00*x8665);
CheckValue<IkReal> x8668 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8668.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8668.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8669=((-1.0)*r01);
CheckValue<IkReal> x8672 = IKatan2WithCheck(IkReal(x8669),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8672.valid){
continue;
}
IkReal x8670=((1.0)*(x8672.value));
IkReal x8671=x8665;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8670)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8670)));
IkReal gconst148=(x8669*x8671);
IkReal gconst149=((1.0)*r00*x8671);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8673=((-1.0)*r01);
CheckValue<IkReal> x8676 = IKatan2WithCheck(IkReal(x8673),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8676.valid){
continue;
}
IkReal x8674=((1.0)*(x8676.value));
IkReal x8675=x8665;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8674)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8674)));
IkReal gconst148=(x8673*x8675);
IkReal gconst149=((1.0)*r00*x8675);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8677=((-1.0)*r01);
CheckValue<IkReal> x8680 = IKatan2WithCheck(IkReal(x8677),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8680.valid){
continue;
}
IkReal x8678=((1.0)*(x8680.value));
IkReal x8679=x8665;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8678)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8678)));
IkReal gconst148=(x8677*x8679);
IkReal gconst149=((1.0)*r00*x8679);
IkReal x8681=r02*r02;
IkReal x8682=(r12*sj0);
IkReal x8683=((1.0)*cj0);
IkReal x8684=x8665;
j4eval[0]=((IKabs(((((-1.0)*x8683*x8684))+((cj0*x8681*x8684))+((r02*x8682*x8684)))))+(IKabs(((((-1.0)*r02*x8683))+(((-1.0)*x8682))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8685=((1.0)*sj0);
IkReal x8686=((1.0)*gconst148);
CheckValue<IkReal> x8687 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8685))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst148*r11*x8685))+((gconst149*r10*sj0))+(((-1.0)*cj0*r01*x8686))+((cj0*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8687.valid){
continue;
}
CheckValue<IkReal> x8688=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8686)))),-1);
if(!x8688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8687.value)+(((1.5707963267949)*(x8688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8689=IKsin(j4);
IkReal x8690=IKcos(j4);
IkReal x8691=(gconst148*r11);
IkReal x8692=(sj1*sj2);
IkReal x8693=((1.0)*x8690);
IkReal x8694=(gconst149*x8690);
IkReal x8695=(gconst148*x8689);
IkReal x8696=((1.0)*cj1*cj2);
IkReal x8697=((1.0)*x8689);
evalcond[0]=(((r21*x8695))+(((-1.0)*gconst149*r20*x8697))+(((-1.0)*r22*x8693)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8697))+((x8689*x8691))+(((-1.0)*r12*x8693)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8693))+((r01*x8695))+(((-1.0)*gconst149*r00*x8697)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8693))+((r20*x8694))+(((-1.0)*r22*x8697)));
evalcond[4]=(((cj0*x8692))+(((-1.0)*cj0*x8696))+((r00*x8694))+(((-1.0)*r02*x8697))+(((-1.0)*gconst148*r01*x8693)));
evalcond[5]=((((-1.0)*x8691*x8693))+((sj0*x8692))+(((-1.0)*sj0*x8696))+((r10*x8694))+(((-1.0)*r12*x8697)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8698=((1.0)*gconst149);
CheckValue<IkReal> x8699=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8698)))),-1);
if(!x8699.valid){
continue;
}
CheckValue<IkReal> x8700 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8698))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8699.value)))+(x8700.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8701=IKsin(j4);
IkReal x8702=IKcos(j4);
IkReal x8703=(gconst148*r11);
IkReal x8704=(sj1*sj2);
IkReal x8705=((1.0)*x8702);
IkReal x8706=(gconst149*x8702);
IkReal x8707=(gconst148*x8701);
IkReal x8708=((1.0)*cj1*cj2);
IkReal x8709=((1.0)*x8701);
evalcond[0]=(((r21*x8707))+(((-1.0)*gconst149*r20*x8709))+(((-1.0)*r22*x8705)));
evalcond[1]=((((-1.0)*gconst149*r10*x8709))+cj0+((x8701*x8703))+(((-1.0)*r12*x8705)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8709))+(((-1.0)*r02*x8705))+((r01*x8707)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8705))+((cj1*sj2))+(((-1.0)*r22*x8709))+((r20*x8706)));
evalcond[4]=((((-1.0)*cj0*x8708))+(((-1.0)*gconst148*r01*x8705))+((cj0*x8704))+(((-1.0)*r02*x8709))+((r00*x8706)));
evalcond[5]=(((r10*x8706))+(((-1.0)*sj0*x8708))+(((-1.0)*r12*x8709))+(((-1.0)*x8703*x8705))+((sj0*x8704)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8710=((1.0)*gconst149);
CheckValue<IkReal> x8711=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8710))+(((-1.0)*gconst148*r00)))),-1);
if(!x8711.valid){
continue;
}
CheckValue<IkReal> x8712 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8710)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8712.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8711.value)))+(x8712.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8713=IKsin(j4);
IkReal x8714=IKcos(j4);
IkReal x8715=(gconst148*r11);
IkReal x8716=(sj1*sj2);
IkReal x8717=((1.0)*x8714);
IkReal x8718=(gconst149*x8714);
IkReal x8719=(gconst148*x8713);
IkReal x8720=((1.0)*cj1*cj2);
IkReal x8721=((1.0)*x8713);
evalcond[0]=((((-1.0)*r22*x8717))+(((-1.0)*gconst149*r20*x8721))+((r21*x8719)));
evalcond[1]=(((x8713*x8715))+(((-1.0)*gconst149*r10*x8721))+cj0+(((-1.0)*r12*x8717)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8717))+((r01*x8719))+(((-1.0)*gconst149*r00*x8721)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8717))+((cj1*sj2))+((r20*x8718))+(((-1.0)*r22*x8721)));
evalcond[4]=((((-1.0)*cj0*x8720))+((cj0*x8716))+(((-1.0)*gconst148*r01*x8717))+((r00*x8718))+(((-1.0)*r02*x8721)));
evalcond[5]=((((-1.0)*x8715*x8717))+((sj0*x8716))+(((-1.0)*sj0*x8720))+((r10*x8718))+(((-1.0)*r12*x8721)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8722=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8722;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8722);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8723=((1.0)*cj5);
IkReal x8724=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8723)));
j4eval[0]=x8724;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8723)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8724);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8725=cj5*cj5;
IkReal x8726=r01*r01;
IkReal x8727=(r01*sj5);
IkReal x8728=(cj5*r00);
IkReal x8729=((((-1.0)*(r02*r02)))+((x8725*x8726))+(((-1.0)*x8726))+(((-1.0)*x8725*(r00*r00)))+(((2.0)*x8727*x8728)));
j4eval[0]=x8729;
j4eval[1]=IKsign(x8729);
j4eval[2]=((IKabs((x8728+(((-1.0)*x8727)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8730=cj5*cj5;
IkReal x8731=r01*r01;
IkReal x8732=(r01*sj5);
IkReal x8733=(cj5*r00);
CheckValue<IkReal> x8734 = IKatan2WithCheck(IkReal((x8733+(((-1.0)*x8732)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8734.valid){
continue;
}
CheckValue<IkReal> x8735=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x8731))+(((2.0)*x8732*x8733))+((x8730*x8731))+(((-1.0)*x8730*(r00*r00))))),-1);
if(!x8735.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8734.value)+(((1.5707963267949)*(x8735.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8736=IKsin(j4);
IkReal x8737=IKcos(j4);
IkReal x8738=(cj5*r10);
IkReal x8739=(r01*sj5);
IkReal x8740=(cj5*r00);
IkReal x8741=(cj5*r20);
IkReal x8742=((1.0)*x8737);
IkReal x8743=((1.0)*x8736);
IkReal x8744=(sj5*x8736);
evalcond[0]=((((-1.0)*x8741*x8743))+(((-1.0)*r22*x8742))+((r21*x8744)));
evalcond[1]=((((-1.0)*r12*x8742))+(((-1.0)*x8738*x8743))+((r11*x8744)));
evalcond[2]=((((-1.0)*x8739*x8742))+((x8737*x8740))+(((-1.0)*r02*x8743)));
evalcond[3]=((-1.0)+(((-1.0)*x8740*x8743))+((x8736*x8739))+(((-1.0)*r02*x8742)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8742))+((cj1*sj2))+(((-1.0)*r22*x8743))+((x8737*x8741)));
evalcond[5]=((((-1.0)*r12*x8743))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8742))+((x8737*x8738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8745=((1.0)*cj5);
CheckValue<IkReal> x8746 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8745)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8746.valid){
continue;
}
CheckValue<IkReal> x8747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8745))+(((-1.0)*r10*sj5)))),-1);
if(!x8747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8746.value)+(((1.5707963267949)*(x8747.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8748=IKsin(j4);
IkReal x8749=IKcos(j4);
IkReal x8750=(cj5*r10);
IkReal x8751=(r01*sj5);
IkReal x8752=(cj5*r00);
IkReal x8753=(cj5*r20);
IkReal x8754=((1.0)*x8749);
IkReal x8755=((1.0)*x8748);
IkReal x8756=(sj5*x8748);
evalcond[0]=((((-1.0)*r22*x8754))+(((-1.0)*x8753*x8755))+((r21*x8756)));
evalcond[1]=(((r11*x8756))+(((-1.0)*x8750*x8755))+(((-1.0)*r12*x8754)));
evalcond[2]=((((-1.0)*x8751*x8754))+(((-1.0)*r02*x8755))+((x8749*x8752)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8754))+((x8748*x8751))+(((-1.0)*x8752*x8755)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8755))+((cj1*sj2))+((x8749*x8753))+(((-1.0)*r21*sj5*x8754)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8754))+((x8749*x8750))+(((-1.0)*r12*x8755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8757=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8757.valid){
continue;
}
CheckValue<IkReal> x8758 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8758.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8757.value)))+(x8758.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8759=IKsin(j4);
IkReal x8760=IKcos(j4);
IkReal x8761=(cj5*r10);
IkReal x8762=(r01*sj5);
IkReal x8763=(cj5*r00);
IkReal x8764=(cj5*r20);
IkReal x8765=((1.0)*x8760);
IkReal x8766=((1.0)*x8759);
IkReal x8767=(sj5*x8759);
evalcond[0]=((((-1.0)*r22*x8765))+((r21*x8767))+(((-1.0)*x8764*x8766)));
evalcond[1]=((((-1.0)*x8761*x8766))+(((-1.0)*r12*x8765))+((r11*x8767)));
evalcond[2]=((((-1.0)*r02*x8766))+((x8760*x8763))+(((-1.0)*x8762*x8765)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8765))+((x8759*x8762))+(((-1.0)*x8763*x8766)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8760*x8764))+(((-1.0)*r22*x8766))+(((-1.0)*r21*sj5*x8765)));
evalcond[5]=((((-1.0)*r11*sj5*x8765))+((x8760*x8761))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8766)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8768=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8768;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8769=((1.0)*cj5);
IkReal x8770=((((-1.0)*r21*x8769))+(((-1.0)*r20*sj5)));
j4eval[0]=x8770;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x8769))+((r11*sj5))))));
j4eval[2]=IKsign(x8770);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8771=cj5*cj5;
IkReal x8772=r01*r01;
IkReal x8773=(cj5*r00);
IkReal x8774=(r01*sj5);
IkReal x8775=((((-2.0)*x8773*x8774))+x8772+(((-1.0)*x8771*x8772))+(r02*r02)+((x8771*(r00*r00))));
j4eval[0]=x8775;
j4eval[1]=((IKabs((x8773+(((-1.0)*x8774)))))+(IKabs(r02)));
j4eval[2]=IKsign(x8775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8776=cj5*cj5;
IkReal x8777=r01*r01;
IkReal x8778=(r01*sj5);
IkReal x8779=(cj5*r00);
CheckValue<IkReal> x8780 = IKatan2WithCheck(IkReal((x8779+(((-1.0)*x8778)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8780.valid){
continue;
}
CheckValue<IkReal> x8781=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8776*x8777))+x8777+(((-2.0)*x8778*x8779))+((x8776*(r00*r00)))+(r02*r02))),-1);
if(!x8781.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8780.value)+(((1.5707963267949)*(x8781.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8782=IKsin(j4);
IkReal x8783=IKcos(j4);
IkReal x8784=(cj5*r10);
IkReal x8785=(r01*sj5);
IkReal x8786=(cj5*r00);
IkReal x8787=(cj5*r20);
IkReal x8788=((1.0)*x8783);
IkReal x8789=((1.0)*x8782);
IkReal x8790=(sj5*x8782);
evalcond[0]=(((r21*x8790))+(((-1.0)*x8787*x8789))+(((-1.0)*r22*x8788)));
evalcond[1]=(((r11*x8790))+(((-1.0)*x8784*x8789))+(((-1.0)*r12*x8788)));
evalcond[2]=((((-1.0)*x8785*x8788))+((x8783*x8786))+(((-1.0)*r02*x8789)));
evalcond[3]=((1.0)+(((-1.0)*x8786*x8789))+(((-1.0)*r02*x8788))+((x8782*x8785)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8783*x8787))+(((-1.0)*r22*x8789))+(((-1.0)*r21*sj5*x8788)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8783*x8784))+((cj1*cj2))+(((-1.0)*r12*x8789))+(((-1.0)*r11*sj5*x8788)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8791=((1.0)*cj5);
CheckValue<IkReal> x8792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8791))+(((-1.0)*r20*sj5)))),-1);
if(!x8792.valid){
continue;
}
CheckValue<IkReal> x8793 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x8791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8792.value)))+(x8793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8794=IKsin(j4);
IkReal x8795=IKcos(j4);
IkReal x8796=(cj5*r10);
IkReal x8797=(r01*sj5);
IkReal x8798=(cj5*r00);
IkReal x8799=(cj5*r20);
IkReal x8800=((1.0)*x8795);
IkReal x8801=((1.0)*x8794);
IkReal x8802=(sj5*x8794);
evalcond[0]=(((r21*x8802))+(((-1.0)*r22*x8800))+(((-1.0)*x8799*x8801)));
evalcond[1]=((((-1.0)*r12*x8800))+((r11*x8802))+(((-1.0)*x8796*x8801)));
evalcond[2]=(((x8795*x8798))+(((-1.0)*r02*x8801))+(((-1.0)*x8797*x8800)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8800))+(((-1.0)*x8798*x8801))+((x8794*x8797)));
evalcond[4]=(((x8795*x8799))+((cj2*sj1))+(((-1.0)*r22*x8801))+((cj1*sj2))+(((-1.0)*r21*sj5*x8800)));
evalcond[5]=(((x8795*x8796))+(((-1.0)*r12*x8801))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8803 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8803.valid){
continue;
}
CheckValue<IkReal> x8804=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8803.value)+(((1.5707963267949)*(x8804.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8805=IKsin(j4);
IkReal x8806=IKcos(j4);
IkReal x8807=(cj5*r10);
IkReal x8808=(r01*sj5);
IkReal x8809=(cj5*r00);
IkReal x8810=(cj5*r20);
IkReal x8811=((1.0)*x8806);
IkReal x8812=((1.0)*x8805);
IkReal x8813=(sj5*x8805);
evalcond[0]=(((r21*x8813))+(((-1.0)*r22*x8811))+(((-1.0)*x8810*x8812)));
evalcond[1]=((((-1.0)*r12*x8811))+(((-1.0)*x8807*x8812))+((r11*x8813)));
evalcond[2]=((((-1.0)*r02*x8812))+((x8806*x8809))+(((-1.0)*x8808*x8811)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8811))+(((-1.0)*x8809*x8812))+((x8805*x8808)));
evalcond[4]=((((-1.0)*r22*x8812))+((cj2*sj1))+((x8806*x8810))+((cj1*sj2))+(((-1.0)*r21*sj5*x8811)));
evalcond[5]=((((-1.0)*r12*x8812))+((x8806*x8807))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8814=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8814);
rxp1_1=(px*r21);
rxp1_2=(r11*x8814);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8815=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8815);
rxp1_1=(px*r21);
rxp1_2=(r11*x8815);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8816=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8816);
rxp1_1=(px*r21);
rxp1_2=(r11*x8816);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8819=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8819.valid){
continue;
}
IkReal x8817=x8819.value;
IkReal x8818=(sj0*x8817);
cj4array[0]=((((-1.0)*sj1*sj2*x8818))+((cj1*cj2*x8818)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8820=IKsin(j4);
IkReal x8821=IKcos(j4);
IkReal x8822=(r21*sj5);
IkReal x8823=(cj5*r20);
IkReal x8824=((1.0)*x8820);
IkReal x8825=((1.0)*x8821);
evalcond[0]=((-1.0)*r02*x8820);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8825)));
evalcond[2]=((((-1.0)*x8823*x8824))+((x8820*x8822)));
evalcond[3]=((((-1.0)*cj5*r10*x8824))+((r11*sj5*x8820)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8822*x8825))+((x8821*x8823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8828=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8828.valid){
continue;
}
IkReal x8826=x8828.value;
IkReal x8827=((1.0)*x8826);
cj4array[0]=((((-1.0)*cj1*sj2*x8827))+(((-1.0)*cj2*sj1*x8827)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8829=IKsin(j4);
IkReal x8830=IKcos(j4);
IkReal x8831=(r11*sj5);
IkReal x8832=((1.0)*sj0);
IkReal x8833=((1.0)*x8830);
IkReal x8834=((1.0)*cj5*x8829);
evalcond[0]=((-1.0)*r02*x8829);
evalcond[1]=((((-1.0)*r02*x8833))+(((-1.0)*x8832)));
evalcond[2]=((((-1.0)*r20*x8834))+((r21*sj5*x8829)));
evalcond[3]=((((-1.0)*r10*x8834))+((x8829*x8831)));
evalcond[4]=((((-1.0)*cj1*cj2*x8832))+((cj5*r10*x8830))+((sj0*sj1*sj2))+(((-1.0)*x8831*x8833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8835=IKPowWithIntegerCheck(r02,-1);
if(!x8835.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8835.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8836=IKsin(j4);
IkReal x8837=IKcos(j4);
IkReal x8838=(cj5*x8837);
IkReal x8839=(sj5*x8836);
IkReal x8840=((1.0)*sj5*x8837);
IkReal x8841=((1.0)*cj5*x8836);
evalcond[0]=((-1.0)*r02*x8836);
evalcond[1]=(((r21*x8839))+(((-1.0)*r20*x8841)));
evalcond[2]=((((-1.0)*r10*x8841))+((r11*x8839)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8840))+((r20*x8838)));
evalcond[4]=(((r10*x8838))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+(((-1.0)*r11*x8840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8842=((1.0)*sj0);
IkReal x8843=((1.0)*cj0);
CheckValue<IkReal> x8844=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8844.valid){
continue;
}
CheckValue<IkReal> x8845 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8843))+(((-1.0)*r12*x8842)))),IkReal((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8843))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8842)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8844.value)))+(x8845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8846=IKsin(j4);
IkReal x8847=IKcos(j4);
IkReal x8848=(cj5*r10);
IkReal x8849=(sj1*sj2);
IkReal x8850=(r01*sj5);
IkReal x8851=(cj5*r00);
IkReal x8852=(cj5*r20);
IkReal x8853=((1.0)*x8847);
IkReal x8854=((1.0)*cj1*cj2);
IkReal x8855=((1.0)*x8846);
IkReal x8856=(sj5*x8846);
evalcond[0]=((((-1.0)*x8852*x8855))+(((-1.0)*r22*x8853))+((r21*x8856)));
evalcond[1]=(cj0+(((-1.0)*x8848*x8855))+(((-1.0)*r12*x8853))+((r11*x8856)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8851*x8855))+((x8846*x8850))+(((-1.0)*r02*x8853)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8855))+((cj1*sj2))+((x8847*x8852))+(((-1.0)*r21*sj5*x8853)));
evalcond[4]=(((cj0*x8849))+(((-1.0)*x8850*x8853))+((x8847*x8851))+(((-1.0)*cj0*x8854))+(((-1.0)*r02*x8855)));
evalcond[5]=((((-1.0)*r12*x8855))+(((-1.0)*r11*sj5*x8853))+((sj0*x8849))+((x8847*x8848))+(((-1.0)*sj0*x8854)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8857=((1.0)*cj5);
CheckValue<IkReal> x8858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8857)))),-1);
if(!x8858.valid){
continue;
}
CheckValue<IkReal> x8859 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8858.value)))+(x8859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8860=IKsin(j4);
IkReal x8861=IKcos(j4);
IkReal x8862=(cj5*r10);
IkReal x8863=(sj1*sj2);
IkReal x8864=(r01*sj5);
IkReal x8865=(cj5*r00);
IkReal x8866=(cj5*r20);
IkReal x8867=((1.0)*x8861);
IkReal x8868=((1.0)*cj1*cj2);
IkReal x8869=((1.0)*x8860);
IkReal x8870=(sj5*x8860);
evalcond[0]=((((-1.0)*x8866*x8869))+(((-1.0)*r22*x8867))+((r21*x8870)));
evalcond[1]=(cj0+((r11*x8870))+(((-1.0)*r12*x8867))+(((-1.0)*x8862*x8869)));
evalcond[2]=(((x8860*x8864))+(((-1.0)*sj0))+(((-1.0)*x8865*x8869))+(((-1.0)*r02*x8867)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8869))+(((-1.0)*r21*sj5*x8867))+((x8861*x8866)));
evalcond[4]=((((-1.0)*x8864*x8867))+((x8861*x8865))+(((-1.0)*cj0*x8868))+((cj0*x8863))+(((-1.0)*r02*x8869)));
evalcond[5]=((((-1.0)*r11*sj5*x8867))+((x8861*x8862))+(((-1.0)*sj0*x8868))+((sj0*x8863))+(((-1.0)*r12*x8869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8871=((1.0)*cj5);
CheckValue<IkReal> x8872 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8872.valid){
continue;
}
CheckValue<IkReal> x8873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8871))+(((-1.0)*r00*sj5)))),-1);
if(!x8873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8872.value)+(((1.5707963267949)*(x8873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8874=IKsin(j4);
IkReal x8875=IKcos(j4);
IkReal x8876=(cj5*r10);
IkReal x8877=(sj1*sj2);
IkReal x8878=(r01*sj5);
IkReal x8879=(cj5*r00);
IkReal x8880=(cj5*r20);
IkReal x8881=((1.0)*x8875);
IkReal x8882=((1.0)*cj1*cj2);
IkReal x8883=((1.0)*x8874);
IkReal x8884=(sj5*x8874);
evalcond[0]=((((-1.0)*r22*x8881))+((r21*x8884))+(((-1.0)*x8880*x8883)));
evalcond[1]=(cj0+(((-1.0)*r12*x8881))+(((-1.0)*x8876*x8883))+((r11*x8884)));
evalcond[2]=(((x8874*x8878))+(((-1.0)*sj0))+(((-1.0)*r02*x8881))+(((-1.0)*x8879*x8883)));
evalcond[3]=((((-1.0)*r22*x8883))+((cj2*sj1))+((cj1*sj2))+((x8875*x8880))+(((-1.0)*r21*sj5*x8881)));
evalcond[4]=((((-1.0)*cj0*x8882))+(((-1.0)*x8878*x8881))+(((-1.0)*r02*x8883))+((x8875*x8879))+((cj0*x8877)));
evalcond[5]=((((-1.0)*r12*x8883))+(((-1.0)*r11*sj5*x8881))+(((-1.0)*sj0*x8882))+((x8875*x8876))+((sj0*x8877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8885=cj1*cj1;
IkReal x8886=cj2*cj2;
IkReal x8887=(sj1*sj2);
IkReal x8888=((156900000.0)*py);
IkReal x8889=(cj1*cj5);
IkReal x8890=((14850585.0)*cj2);
IkReal x8891=(r00*sj5);
IkReal x8892=((16090500.0)*cj1);
IkReal x8893=((4132419.0)*cj5);
IkReal x8894=(r10*sj5);
IkReal x8895=((170000000.0)*cj1);
IkReal x8896=((156900000.0)*px);
IkReal x8897=(cj1*cj2);
IkReal x8898=((14850585.0)*cj5);
CheckValue<IkReal> x8899=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((123088050.0)*x8885*x8886))+(((-123088050.0)*x8887*x8897))+(((-133365000.0)*cj1*x8887))+(((133365000.0)*cj2*x8885))+(((-61544025.0)*x8886))+(((10705975.0)*x8885)))),-1);
if(!x8899.valid){
continue;
}
CheckValue<IkReal> x8900 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+(((16090500.0)*r11*x8889))+(((-1.0)*r01*x8893))+(((-4132419.0)*x8891))+((py*x8895))+(((-1.0)*r11*x8887*x8898))+((x8888*x8897))+((r11*x8889*x8890))+(((-14850585.0)*x8887*x8894))+(((-1.0)*x8887*x8888))+((cj1*x8890*x8894))+((x8892*x8894)))),IkReal(((((43660000.0)*py))+((px*x8895))+((x8896*x8897))+(((-1.0)*x8887*x8896))+(((16090500.0)*r01*x8889))+((r01*x8889*x8890))+((r11*x8893))+(((-14850585.0)*x8887*x8891))+(((4132419.0)*x8894))+((cj1*x8890*x8891))+(((-1.0)*r01*x8887*x8898))+((x8891*x8892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8900.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8899.value)))+(x8900.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8901=IKcos(j0);
IkReal x8902=IKsin(j0);
IkReal x8903=((0.425)*cj1);
IkReal x8904=(cj1*cj2);
IkReal x8905=(sj1*sj2);
IkReal x8906=((0.09465)*cj5);
IkReal x8907=((0.09465)*sj5);
IkReal x8908=((0.39225)*x8902);
IkReal x8909=((0.39225)*x8901);
evalcond[0]=(((x8901*x8903))+((x8904*x8909))+(((-1.0)*px))+(((-0.10915)*x8902))+(((-1.0)*x8905*x8909))+(((-1.0)*r00*x8907))+(((-1.0)*r01*x8906)));
evalcond[1]=((((-1.0)*r10*x8907))+((x8902*x8903))+(((0.10915)*x8901))+((x8904*x8908))+(((-1.0)*py))+(((-1.0)*x8905*x8908))+(((-1.0)*r11*x8906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8910=((1.0)*cj5);
IkReal x8911=((((-1.0)*r01*x8910))+(((-1.0)*r00*sj5)));
j4eval[0]=x8911;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8910)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8911);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8912=((1.0)*cj5);
IkReal x8913=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8912)));
j4eval[0]=x8913;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8912))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8913);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8914=((1.0)*sj0);
IkReal x8915=((1.0)*cj0);
IkReal x8916=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8916;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x8914))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8915)))))+(IKabs(((((-1.0)*r02*x8915))+(((-1.0)*r12*x8914))))));
j4eval[2]=IKsign(x8916);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8917=((-1.0)*r20);
IkReal x8919 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8919)==0){
continue;
}
IkReal x8918=pow(x8919,-0.5);
CheckValue<IkReal> x8920 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8917),IKFAST_ATAN2_MAGTHRESH);
if(!x8920.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8920.value));
IkReal gconst1=(r21*x8918);
IkReal gconst2=(x8917*x8918);
CheckValue<IkReal> x8921 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8921.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8921.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8922=((-1.0)*r20);
IkReal x8923=x8918;
CheckValue<IkReal> x8925 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8922),IKFAST_ATAN2_MAGTHRESH);
if(!x8925.valid){
continue;
}
IkReal x8924=((-1.0)*(x8925.value));
sj5=gconst1;
cj5=gconst2;
j5=x8924;
IkReal gconst0=x8924;
IkReal gconst1=(r21*x8923);
IkReal gconst2=(x8922*x8923);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8926=((-1.0)*r20);
IkReal x8927=x8918;
CheckValue<IkReal> x8929 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8926),IKFAST_ATAN2_MAGTHRESH);
if(!x8929.valid){
continue;
}
IkReal x8928=((-1.0)*(x8929.value));
sj5=gconst1;
cj5=gconst2;
j5=x8928;
IkReal gconst0=x8928;
IkReal gconst1=(r21*x8927);
IkReal gconst2=(x8926*x8927);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8930=((-1.0)*r20);
IkReal x8931=x8918;
CheckValue<IkReal> x8933 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8930),IKFAST_ATAN2_MAGTHRESH);
if(!x8933.valid){
continue;
}
IkReal x8932=((-1.0)*(x8933.value));
sj5=gconst1;
cj5=gconst2;
j5=x8932;
IkReal gconst0=x8932;
IkReal gconst1=(r21*x8931);
IkReal gconst2=(x8930*x8931);
IkReal x8934=r22*r22;
CheckValue<IkReal> x8938=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8934))),-1);
if(!x8938.valid){
continue;
}
IkReal x8935=x8938.value;
IkReal x8936=(sj3*x8935);
IkReal x8937=((((2.0)*x8936*(r20*r20)*(r21*r21)))+((sj3*x8934))+((x8936*(r21*r21*r21*r21)))+((x8936*(r20*r20*r20*r20))));
j4eval[0]=x8937;
j4eval[1]=IKsign(x8937);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8939=((-1.0)*r20);
IkReal x8940=x8918;
CheckValue<IkReal> x8942 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8939),IKFAST_ATAN2_MAGTHRESH);
if(!x8942.valid){
continue;
}
IkReal x8941=((-1.0)*(x8942.value));
sj5=gconst1;
cj5=gconst2;
j5=x8941;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8941;
IkReal gconst1=(r21*x8940);
IkReal gconst2=(x8939*x8940);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8943=((-1.0)*r20);
IkReal x8944=x8918;
CheckValue<IkReal> x8946 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8943),IKFAST_ATAN2_MAGTHRESH);
if(!x8946.valid){
continue;
}
IkReal x8945=((-1.0)*(x8946.value));
sj5=gconst1;
cj5=gconst2;
j5=x8945;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8945;
IkReal gconst1=(r21*x8944);
IkReal gconst2=(x8943*x8944);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8947=((-1.0)*r20);
IkReal x8948=x8918;
CheckValue<IkReal> x8950 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8947),IKFAST_ATAN2_MAGTHRESH);
if(!x8950.valid){
continue;
}
IkReal x8949=((-1.0)*(x8950.value));
sj5=gconst1;
cj5=gconst2;
j5=x8949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8949;
IkReal gconst1=(r21*x8948);
IkReal gconst2=(x8947*x8948);
IkReal x8951=((1.0)*(r22*r22));
CheckValue<IkReal> x8955=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8951))),-1);
if(!x8955.valid){
continue;
}
IkReal x8952=x8955.value;
IkReal x8953=((1.0)*x8952);
IkReal x8954=((((-1.0)*x8953*(r20*r20*r20*r20)))+(((-2.0)*x8952*(r20*r20)*(r21*r21)))+(((-1.0)*x8953*(r21*r21*r21*r21)))+(((-1.0)*x8951)));
j4eval[0]=x8954;
j4eval[1]=IKsign(x8954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8956=((-1.0)*r20);
IkReal x8957=x8918;
CheckValue<IkReal> x8959 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8956),IKFAST_ATAN2_MAGTHRESH);
if(!x8959.valid){
continue;
}
IkReal x8958=((-1.0)*(x8959.value));
sj5=gconst1;
cj5=gconst2;
j5=x8958;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8958;
IkReal gconst1=(r21*x8957);
IkReal gconst2=(x8956*x8957);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8960=((-1.0)*r20);
IkReal x8961=x8918;
CheckValue<IkReal> x8963 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8960),IKFAST_ATAN2_MAGTHRESH);
if(!x8963.valid){
continue;
}
IkReal x8962=((-1.0)*(x8963.value));
sj5=gconst1;
cj5=gconst2;
j5=x8962;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8962;
IkReal gconst1=(r21*x8961);
IkReal gconst2=(x8960*x8961);
IkReal x8964=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8968=IKPowWithIntegerCheck(x8964,-1);
if(!x8968.valid){
continue;
}
IkReal x8965=x8968.value;
IkReal x8966=((1.0)*x8965);
IkReal x8967=((((-1.0)*x8966*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x8965))+(((-1.0)*x8966*(r10*r10)*(r20*r20))));
j4eval[0]=x8967;
j4eval[1]=r12;
j4eval[2]=x8964;
j4eval[3]=IKsign(x8967);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8969=((-1.0)*r20);
IkReal x8970=x8918;
CheckValue<IkReal> x8972 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8969),IKFAST_ATAN2_MAGTHRESH);
if(!x8972.valid){
continue;
}
IkReal x8971=((-1.0)*(x8972.value));
sj5=gconst1;
cj5=gconst2;
j5=x8971;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8971;
IkReal gconst1=(r21*x8970);
IkReal gconst2=(x8969*x8970);
IkReal x8973=r22*r22;
IkReal x8974=(cj1*r12*sj2);
IkReal x8975=(cj2*r12*sj1);
CheckValue<IkReal> x8979=IKPowWithIntegerCheck(((-1.0)+x8973),-1);
if(!x8979.valid){
continue;
}
IkReal x8976=x8979.value;
if((((1.0)+(((-1.0)*x8973)))) < -0.00001)
continue;
IkReal x8977=IKsqrt(((1.0)+(((-1.0)*x8973))));
IkReal x8978=(r22*x8976*x8977);
j4eval[0]=((IKabs(((((-1.0)*x8974))+(((-1.0)*x8975)))))+(IKabs((((x8975*x8978))+((x8974*x8978))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8980=(cj1*sj2);
IkReal x8981=(cj2*sj1);
IkReal x8982=((1.0)*r12);
IkReal x8983=(gconst1*r11);
IkReal x8984=((1.0)*gconst2*r10);
CheckValue<IkReal> x8985 = IKatan2WithCheck(IkReal(((((-1.0)*x8980*x8984))+(((-1.0)*x8981*x8984))+((x8981*x8983))+((x8980*x8983)))),IkReal(((((-1.0)*x8980*x8982))+(((-1.0)*x8981*x8982)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8985.valid){
continue;
}
CheckValue<IkReal> x8986=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x8986.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8985.value)+(((1.5707963267949)*(x8986.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8987=IKcos(j4);
IkReal x8988=IKsin(j4);
IkReal x8989=((1.0)*x8987);
IkReal x8990=(gconst1*x8987);
IkReal x8991=(gconst1*x8988);
IkReal x8992=((1.0)*gconst2*x8988);
evalcond[0]=(((r11*x8990))+(((-1.0)*gconst2*r10*x8989))+((r12*x8988)));
evalcond[1]=(((r21*x8991))+(((-1.0)*r22*x8989))+(((-1.0)*r20*x8992)));
evalcond[2]=((((-1.0)*r02*x8989))+((r01*x8991))+(((-1.0)*r00*x8992)));
evalcond[3]=((1.0)+((r11*x8991))+(((-1.0)*r10*x8992))+(((-1.0)*r12*x8989)));
evalcond[4]=((((-1.0)*gconst2*r20*x8989))+((cj2*sj1))+((r22*x8988))+((r21*x8990))+((cj1*sj2)));
evalcond[5]=(((r02*x8988))+(((-1.0)*gconst2*r00*x8989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x8990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8993=(gconst2*r10);
IkReal x8994=(gconst1*r11);
CheckValue<IkReal> x8995=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x8993*x8993)))+(((-1.0)*(x8994*x8994)))+(((2.0)*x8993*x8994))+(((-1.0)*(r12*r12))))),-1);
if(!x8995.valid){
continue;
}
CheckValue<IkReal> x8996 = IKatan2WithCheck(IkReal((x8994+(((-1.0)*x8993)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x8996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8995.value)))+(x8996.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8997=IKcos(j4);
IkReal x8998=IKsin(j4);
IkReal x8999=((1.0)*x8997);
IkReal x9000=(gconst1*x8997);
IkReal x9001=(gconst1*x8998);
IkReal x9002=((1.0)*gconst2*x8998);
evalcond[0]=(((r12*x8998))+((r11*x9000))+(((-1.0)*gconst2*r10*x8999)));
evalcond[1]=(((r21*x9001))+(((-1.0)*r22*x8999))+(((-1.0)*r20*x9002)));
evalcond[2]=((((-1.0)*r00*x9002))+(((-1.0)*r02*x8999))+((r01*x9001)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8999))+(((-1.0)*r10*x9002))+((r11*x9001)));
evalcond[4]=(((cj2*sj1))+((r21*x9000))+((cj1*sj2))+(((-1.0)*gconst2*r20*x8999))+((r22*x8998)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x8999))+((r02*x8998))+((r01*x9000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9003=((1.0)*gconst2);
CheckValue<IkReal> x9004 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9003)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9004.valid){
continue;
}
CheckValue<IkReal> x9005=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9003)))),-1);
if(!x9005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9004.value)+(((1.5707963267949)*(x9005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9006=IKcos(j4);
IkReal x9007=IKsin(j4);
IkReal x9008=((1.0)*x9006);
IkReal x9009=(gconst1*x9006);
IkReal x9010=(gconst1*x9007);
IkReal x9011=((1.0)*gconst2*x9007);
evalcond[0]=((((-1.0)*gconst2*r10*x9008))+((r11*x9009))+((r12*x9007)));
evalcond[1]=((((-1.0)*r22*x9008))+(((-1.0)*r20*x9011))+((r21*x9010)));
evalcond[2]=((((-1.0)*r02*x9008))+(((-1.0)*r00*x9011))+((r01*x9010)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9011))+(((-1.0)*r12*x9008))+((r11*x9010)));
evalcond[4]=(((cj2*sj1))+((r21*x9009))+((r22*x9007))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9008)));
evalcond[5]=(((r02*x9007))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9008))+((r01*x9009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9012=((-1.0)*r20);
IkReal x9013=x8918;
CheckValue<IkReal> x9015 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9012),IKFAST_ATAN2_MAGTHRESH);
if(!x9015.valid){
continue;
}
IkReal x9014=((-1.0)*(x9015.value));
sj5=gconst1;
cj5=gconst2;
j5=x9014;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9014;
IkReal gconst1=(r21*x9013);
IkReal gconst2=(x9012*x9013);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9016=((-1.0)*r20);
IkReal x9017=x8918;
CheckValue<IkReal> x9019 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9016),IKFAST_ATAN2_MAGTHRESH);
if(!x9019.valid){
continue;
}
IkReal x9018=((-1.0)*(x9019.value));
sj5=gconst1;
cj5=gconst2;
j5=x9018;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9018;
IkReal gconst1=(r21*x9017);
IkReal gconst2=(x9016*x9017);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9020=((-1.0)*r20);
IkReal x9021=x8918;
CheckValue<IkReal> x9023 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9020),IKFAST_ATAN2_MAGTHRESH);
if(!x9023.valid){
continue;
}
IkReal x9022=((-1.0)*(x9023.value));
sj5=gconst1;
cj5=gconst2;
j5=x9022;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9022;
IkReal gconst1=(r21*x9021);
IkReal gconst2=(x9020*x9021);
IkReal x9024=r22*r22;
IkReal x9025=(cj1*r12*sj2);
IkReal x9026=(cj2*r12*sj1);
CheckValue<IkReal> x9030=IKPowWithIntegerCheck(((-1.0)+x9024),-1);
if(!x9030.valid){
continue;
}
IkReal x9027=x9030.value;
if((((1.0)+(((-1.0)*x9024)))) < -0.00001)
continue;
IkReal x9028=IKsqrt(((1.0)+(((-1.0)*x9024))));
IkReal x9029=(r22*x9027*x9028);
j4eval[0]=((IKabs((((x9026*x9029))+((x9025*x9029)))))+(IKabs(((((-1.0)*x9026))+(((-1.0)*x9025))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9031=(cj1*sj2);
IkReal x9032=(cj2*sj1);
IkReal x9033=((1.0)*r12);
IkReal x9034=(gconst1*r11);
IkReal x9035=((1.0)*gconst2*r10);
CheckValue<IkReal> x9036=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9036.valid){
continue;
}
CheckValue<IkReal> x9037 = IKatan2WithCheck(IkReal((((x9031*x9034))+(((-1.0)*x9031*x9035))+(((-1.0)*x9032*x9035))+((x9032*x9034)))),IkReal(((((-1.0)*x9031*x9033))+(((-1.0)*x9032*x9033)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9037.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9036.value)))+(x9037.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9038=IKcos(j4);
IkReal x9039=IKsin(j4);
IkReal x9040=((1.0)*x9038);
IkReal x9041=(gconst1*x9038);
IkReal x9042=(gconst1*x9039);
IkReal x9043=((1.0)*gconst2*x9039);
evalcond[0]=(((r11*x9041))+((r12*x9039))+(((-1.0)*gconst2*r10*x9040)));
evalcond[1]=((((-1.0)*r22*x9040))+(((-1.0)*r20*x9043))+((r21*x9042)));
evalcond[2]=(((r01*x9042))+(((-1.0)*r00*x9043))+(((-1.0)*r02*x9040)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9043))+(((-1.0)*r12*x9040))+((r11*x9042)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9039))+((r21*x9041))+(((-1.0)*gconst2*r20*x9040)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9041))+((r02*x9039))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9044=(gconst1*r11);
IkReal x9045=(gconst2*r10);
CheckValue<IkReal> x9046=IKPowWithIntegerCheck(IKsign(((x9045*x9045)+(r12*r12)+(((-2.0)*x9044*x9045))+(x9044*x9044))),-1);
if(!x9046.valid){
continue;
}
CheckValue<IkReal> x9047 = IKatan2WithCheck(IkReal(((((-1.0)*x9045))+x9044)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9047.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9046.value)))+(x9047.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9048=IKcos(j4);
IkReal x9049=IKsin(j4);
IkReal x9050=((1.0)*x9048);
IkReal x9051=(gconst1*x9048);
IkReal x9052=(gconst1*x9049);
IkReal x9053=((1.0)*gconst2*x9049);
evalcond[0]=((((-1.0)*gconst2*r10*x9050))+((r12*x9049))+((r11*x9051)));
evalcond[1]=((((-1.0)*r22*x9050))+(((-1.0)*r20*x9053))+((r21*x9052)));
evalcond[2]=((((-1.0)*r02*x9050))+(((-1.0)*r00*x9053))+((r01*x9052)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9053))+(((-1.0)*r12*x9050))+((r11*x9052)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9049))+(((-1.0)*gconst2*r20*x9050))+((r21*x9051)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9051))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9050))+((r02*x9049)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9054 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9054.valid){
continue;
}
CheckValue<IkReal> x9055=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9055.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9054.value)+(((1.5707963267949)*(x9055.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9056=IKcos(j4);
IkReal x9057=IKsin(j4);
IkReal x9058=((1.0)*x9056);
IkReal x9059=(gconst1*x9056);
IkReal x9060=(gconst1*x9057);
IkReal x9061=((1.0)*gconst2*x9057);
evalcond[0]=((((-1.0)*gconst2*r10*x9058))+((r12*x9057))+((r11*x9059)));
evalcond[1]=((((-1.0)*r20*x9061))+(((-1.0)*r22*x9058))+((r21*x9060)));
evalcond[2]=((((-1.0)*r02*x9058))+((r01*x9060))+(((-1.0)*r00*x9061)));
evalcond[3]=((-1.0)+((r11*x9060))+(((-1.0)*r10*x9061))+(((-1.0)*r12*x9058)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9057))+(((-1.0)*gconst2*r20*x9058))+((r21*x9059)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9059))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9058))+((r02*x9057)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9062=((-1.0)*r20);
IkReal x9063=x8918;
CheckValue<IkReal> x9065 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9062),IKFAST_ATAN2_MAGTHRESH);
if(!x9065.valid){
continue;
}
IkReal x9064=((-1.0)*(x9065.value));
sj5=gconst1;
cj5=gconst2;
j5=x9064;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9064;
IkReal gconst1=(r21*x9063);
IkReal gconst2=(x9062*x9063);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9066=((-1.0)*r20);
IkReal x9067=x8918;
CheckValue<IkReal> x9069 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9066),IKFAST_ATAN2_MAGTHRESH);
if(!x9069.valid){
continue;
}
IkReal x9068=((-1.0)*(x9069.value));
sj5=gconst1;
cj5=gconst2;
j5=x9068;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9068;
IkReal gconst1=(r21*x9067);
IkReal gconst2=(x9066*x9067);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9070=((-1.0)*r20);
IkReal x9071=x8918;
CheckValue<IkReal> x9073 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9070),IKFAST_ATAN2_MAGTHRESH);
if(!x9073.valid){
continue;
}
IkReal x9072=((-1.0)*(x9073.value));
sj5=gconst1;
cj5=gconst2;
j5=x9072;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9072;
IkReal gconst1=(r21*x9071);
IkReal gconst2=(x9070*x9071);
IkReal x9074=r22*r22;
IkReal x9075=((1.0)*r02);
IkReal x9076=(cj1*sj2);
IkReal x9077=(cj2*sj1);
CheckValue<IkReal> x9081=IKPowWithIntegerCheck(((-1.0)+x9074),-1);
if(!x9081.valid){
continue;
}
IkReal x9078=x9081.value;
if((((1.0)+(((-1.0)*x9074)))) < -0.00001)
continue;
IkReal x9079=IKsqrt(((1.0)+(((-1.0)*x9074))));
IkReal x9080=(r02*r22*x9078*x9079);
j4eval[0]=((IKabs((((x9077*x9080))+((x9076*x9080)))))+(IKabs(((((-1.0)*x9075*x9077))+(((-1.0)*x9075*x9076))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9082=(cj1*sj2);
IkReal x9083=(gconst1*r01);
IkReal x9084=((1.0)*r02);
IkReal x9085=(cj2*sj1);
IkReal x9086=((1.0)*gconst2*r00);
CheckValue<IkReal> x9087 = IKatan2WithCheck(IkReal((((x9082*x9083))+((x9083*x9085))+(((-1.0)*x9082*x9086))+(((-1.0)*x9085*x9086)))),IkReal(((((-1.0)*x9084*x9085))+(((-1.0)*x9082*x9084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9087.valid){
continue;
}
CheckValue<IkReal> x9088=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9087.value)+(((1.5707963267949)*(x9088.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9089=IKcos(j4);
IkReal x9090=IKsin(j4);
IkReal x9091=((1.0)*x9089);
IkReal x9092=(gconst1*x9089);
IkReal x9093=(gconst1*x9090);
IkReal x9094=((1.0)*gconst2*x9090);
evalcond[0]=((((-1.0)*gconst2*r00*x9091))+((r01*x9092))+((r02*x9090)));
evalcond[1]=((((-1.0)*r20*x9094))+((r21*x9093))+(((-1.0)*r22*x9091)));
evalcond[2]=(((r11*x9093))+(((-1.0)*r10*x9094))+(((-1.0)*r12*x9091)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x9094))+((r01*x9093))+(((-1.0)*r02*x9091)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9091))+((cj1*sj2))+((r21*x9092))+((r22*x9090)));
evalcond[5]=(((r11*x9092))+((r12*x9090))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9095=(gconst1*r01);
IkReal x9096=(gconst2*r00);
CheckValue<IkReal> x9097 = IKatan2WithCheck(IkReal((x9095+(((-1.0)*x9096)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9097.valid){
continue;
}
CheckValue<IkReal> x9098=IKPowWithIntegerCheck(IKsign(((x9096*x9096)+(((-2.0)*x9095*x9096))+(x9095*x9095)+(r02*r02))),-1);
if(!x9098.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9097.value)+(((1.5707963267949)*(x9098.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9099=IKcos(j4);
IkReal x9100=IKsin(j4);
IkReal x9101=((1.0)*x9099);
IkReal x9102=(gconst1*x9099);
IkReal x9103=(gconst1*x9100);
IkReal x9104=((1.0)*gconst2*x9100);
evalcond[0]=(((r02*x9100))+(((-1.0)*gconst2*r00*x9101))+((r01*x9102)));
evalcond[1]=((((-1.0)*r22*x9101))+((r21*x9103))+(((-1.0)*r20*x9104)));
evalcond[2]=((((-1.0)*r10*x9104))+(((-1.0)*r12*x9101))+((r11*x9103)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9101))+(((-1.0)*r00*x9104))+((r01*x9103)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9100))+((r21*x9102))+(((-1.0)*gconst2*r20*x9101)));
evalcond[5]=((((-1.0)*gconst2*r10*x9101))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9100))+((r11*x9102)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9105=((1.0)*gconst2);
CheckValue<IkReal> x9106=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9105)))),-1);
if(!x9106.valid){
continue;
}
CheckValue<IkReal> x9107 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9105))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9106.value)))+(x9107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9108=IKcos(j4);
IkReal x9109=IKsin(j4);
IkReal x9110=((1.0)*x9108);
IkReal x9111=(gconst1*x9108);
IkReal x9112=(gconst1*x9109);
IkReal x9113=((1.0)*gconst2*x9109);
evalcond[0]=((((-1.0)*gconst2*r00*x9110))+((r01*x9111))+((r02*x9109)));
evalcond[1]=(((r21*x9112))+(((-1.0)*r22*x9110))+(((-1.0)*r20*x9113)));
evalcond[2]=((((-1.0)*r10*x9113))+((r11*x9112))+(((-1.0)*r12*x9110)));
evalcond[3]=((-1.0)+((r01*x9112))+(((-1.0)*r02*x9110))+(((-1.0)*r00*x9113)));
evalcond[4]=(((r21*x9111))+((cj2*sj1))+((cj1*sj2))+((r22*x9109))+(((-1.0)*gconst2*r20*x9110)));
evalcond[5]=(((r11*x9111))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9109))+(((-1.0)*gconst2*r10*x9110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9114=((-1.0)*r20);
IkReal x9115=x8918;
CheckValue<IkReal> x9117 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9114),IKFAST_ATAN2_MAGTHRESH);
if(!x9117.valid){
continue;
}
IkReal x9116=((-1.0)*(x9117.value));
sj5=gconst1;
cj5=gconst2;
j5=x9116;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9116;
IkReal gconst1=(r21*x9115);
IkReal gconst2=(x9114*x9115);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9118=((-1.0)*r20);
IkReal x9119=x8918;
CheckValue<IkReal> x9121 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9118),IKFAST_ATAN2_MAGTHRESH);
if(!x9121.valid){
continue;
}
IkReal x9120=((-1.0)*(x9121.value));
sj5=gconst1;
cj5=gconst2;
j5=x9120;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9120;
IkReal gconst1=(r21*x9119);
IkReal gconst2=(x9118*x9119);
IkReal x9122=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9126=IKPowWithIntegerCheck(x9122,-1);
if(!x9126.valid){
continue;
}
IkReal x9123=x9126.value;
IkReal x9124=((1.0)*x9123);
IkReal x9125=((((-2.0)*r00*r01*r20*r21*x9123))+(((-1.0)*x9124*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x9124*(r01*r01)*(r21*r21))));
j4eval[0]=x9125;
j4eval[1]=IKsign(x9125);
j4eval[2]=r02;
j4eval[3]=x9122;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9127=((-1.0)*r20);
IkReal x9128=x8918;
CheckValue<IkReal> x9130 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9127),IKFAST_ATAN2_MAGTHRESH);
if(!x9130.valid){
continue;
}
IkReal x9129=((-1.0)*(x9130.value));
sj5=gconst1;
cj5=gconst2;
j5=x9129;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9129;
IkReal gconst1=(r21*x9128);
IkReal gconst2=(x9127*x9128);
IkReal x9131=r22*r22;
IkReal x9132=((1.0)*r02);
IkReal x9133=(cj1*sj2);
IkReal x9134=(cj2*sj1);
CheckValue<IkReal> x9138=IKPowWithIntegerCheck(((-1.0)+x9131),-1);
if(!x9138.valid){
continue;
}
IkReal x9135=x9138.value;
if((((1.0)+(((-1.0)*x9131)))) < -0.00001)
continue;
IkReal x9136=IKsqrt(((1.0)+(((-1.0)*x9131))));
IkReal x9137=(r02*r22*x9135*x9136);
j4eval[0]=((IKabs((((x9134*x9137))+((x9133*x9137)))))+(IKabs(((((-1.0)*x9132*x9134))+(((-1.0)*x9132*x9133))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9139=(cj1*sj2);
IkReal x9140=(gconst1*r01);
IkReal x9141=((1.0)*r02);
IkReal x9142=(cj2*sj1);
IkReal x9143=((1.0)*gconst2*r00);
CheckValue<IkReal> x9144 = IKatan2WithCheck(IkReal(((((-1.0)*x9142*x9143))+((x9140*x9142))+((x9139*x9140))+(((-1.0)*x9139*x9143)))),IkReal(((((-1.0)*x9141*x9142))+(((-1.0)*x9139*x9141)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9144.valid){
continue;
}
CheckValue<IkReal> x9145=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9144.value)+(((1.5707963267949)*(x9145.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9146=IKcos(j4);
IkReal x9147=IKsin(j4);
IkReal x9148=((1.0)*x9146);
IkReal x9149=(gconst1*x9146);
IkReal x9150=(gconst1*x9147);
IkReal x9151=((1.0)*gconst2*x9147);
evalcond[0]=((((-1.0)*gconst2*r00*x9148))+((r01*x9149))+((r02*x9147)));
evalcond[1]=((((-1.0)*r20*x9151))+(((-1.0)*r22*x9148))+((r21*x9150)));
evalcond[2]=(((r11*x9150))+(((-1.0)*r10*x9151))+(((-1.0)*r12*x9148)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9148))+((r01*x9150))+(((-1.0)*r00*x9151)));
evalcond[4]=((((-1.0)*gconst2*r20*x9148))+((cj2*sj1))+((cj1*sj2))+((r21*x9149))+((r22*x9147)));
evalcond[5]=((((-1.0)*gconst2*r10*x9148))+(((-1.0)*sj1*sj2))+((r12*x9147))+((cj1*cj2))+((r11*x9149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9152=(gconst1*r01);
IkReal x9153=(gconst2*r00);
CheckValue<IkReal> x9154=IKPowWithIntegerCheck(IKsign(((((2.0)*x9152*x9153))+(((-1.0)*(r02*r02)))+(((-1.0)*(x9153*x9153)))+(((-1.0)*(x9152*x9152))))),-1);
if(!x9154.valid){
continue;
}
CheckValue<IkReal> x9155 = IKatan2WithCheck(IkReal((x9152+(((-1.0)*x9153)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9154.value)))+(x9155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9156=IKcos(j4);
IkReal x9157=IKsin(j4);
IkReal x9158=((1.0)*x9156);
IkReal x9159=(gconst1*x9156);
IkReal x9160=(gconst1*x9157);
IkReal x9161=((1.0)*gconst2*x9157);
evalcond[0]=(((r02*x9157))+(((-1.0)*gconst2*r00*x9158))+((r01*x9159)));
evalcond[1]=((((-1.0)*r22*x9158))+((r21*x9160))+(((-1.0)*r20*x9161)));
evalcond[2]=((((-1.0)*r12*x9158))+(((-1.0)*r10*x9161))+((r11*x9160)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9158))+((r01*x9160))+(((-1.0)*r00*x9161)));
evalcond[4]=(((cj2*sj1))+((r22*x9157))+(((-1.0)*gconst2*r20*x9158))+((cj1*sj2))+((r21*x9159)));
evalcond[5]=(((r11*x9159))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9158))+((cj1*cj2))+((r12*x9157)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9162 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9162.valid){
continue;
}
CheckValue<IkReal> x9163=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9163.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9162.value)+(((1.5707963267949)*(x9163.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9164=IKcos(j4);
IkReal x9165=IKsin(j4);
IkReal x9166=((1.0)*x9164);
IkReal x9167=(gconst1*x9164);
IkReal x9168=(gconst1*x9165);
IkReal x9169=((1.0)*gconst2*x9165);
evalcond[0]=(((r01*x9167))+((r02*x9165))+(((-1.0)*gconst2*r00*x9166)));
evalcond[1]=((((-1.0)*r22*x9166))+((r21*x9168))+(((-1.0)*r20*x9169)));
evalcond[2]=((((-1.0)*r12*x9166))+(((-1.0)*r10*x9169))+((r11*x9168)));
evalcond[3]=((1.0)+((r01*x9168))+(((-1.0)*r02*x9166))+(((-1.0)*r00*x9169)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9165))+((r21*x9167))+(((-1.0)*gconst2*r20*x9166)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9166))+((r11*x9167))+((r12*x9165))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9170=((-1.0)*r20);
IkReal x9171=((-1.0)*px);
CheckValue<IkReal> x9173 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9170),IKFAST_ATAN2_MAGTHRESH);
if(!x9173.valid){
continue;
}
IkReal x9172=((-1.0)*(x9173.value));
sj5=gconst1;
cj5=gconst2;
j5=x9172;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9171);
rxp1_1=(px*r21);
rxp1_2=(r11*x9171);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9172;
IkReal gconst1=r21;
IkReal gconst2=x9170;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9174=((-1.0)*r20);
IkReal x9175=((-1.0)*px);
CheckValue<IkReal> x9177 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9174),IKFAST_ATAN2_MAGTHRESH);
if(!x9177.valid){
continue;
}
IkReal x9176=((-1.0)*(x9177.value));
sj5=gconst1;
cj5=gconst2;
j5=x9176;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9175);
rxp1_1=(px*r21);
rxp1_2=(r11*x9175);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9176;
IkReal gconst1=r21;
IkReal gconst2=x9174;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9178=((-1.0)*r20);
IkReal x9179=((-1.0)*px);
CheckValue<IkReal> x9181 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9178),IKFAST_ATAN2_MAGTHRESH);
if(!x9181.valid){
continue;
}
IkReal x9180=((-1.0)*(x9181.value));
sj5=gconst1;
cj5=gconst2;
j5=x9180;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9179);
rxp1_1=(px*r21);
rxp1_2=(r11*x9179);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9180;
IkReal gconst1=r21;
IkReal gconst2=x9178;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9184=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9184.valid){
continue;
}
IkReal x9182=x9184.value;
IkReal x9183=(sj0*x9182);
cj4array[0]=(((cj1*cj2*x9183))+(((-1.0)*sj1*sj2*x9183)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9185=IKsin(j4);
IkReal x9186=IKcos(j4);
IkReal x9187=((1.0)*gconst2);
IkReal x9188=(gconst1*r21);
evalcond[0]=(r02*x9185);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9186)));
evalcond[2]=((((-1.0)*r20*x9185*x9187))+((x9185*x9188)));
evalcond[3]=(((gconst1*r11*x9185))+(((-1.0)*r10*x9185*x9187)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x9186*x9187))+((x9186*x9188)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9191=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9191.valid){
continue;
}
IkReal x9189=x9191.value;
IkReal x9190=((1.0)*x9189);
cj4array[0]=((((-1.0)*cj2*sj1*x9190))+(((-1.0)*cj1*sj2*x9190)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9192=IKsin(j4);
IkReal x9193=IKcos(j4);
IkReal x9194=((1.0)*sj0);
IkReal x9195=(gconst1*x9192);
IkReal x9196=((1.0)*x9193);
IkReal x9197=((1.0)*gconst2*x9192);
evalcond[0]=(r02*x9192);
evalcond[1]=((((-1.0)*r02*x9196))+(((-1.0)*x9194)));
evalcond[2]=((((-1.0)*r20*x9197))+((r21*x9195)));
evalcond[3]=((((-1.0)*r10*x9197))+((r11*x9195)));
evalcond[4]=((((-1.0)*gconst2*r10*x9196))+((gconst1*r11*x9193))+((sj0*sj1*sj2))+(((-1.0)*cj1*cj2*x9194)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9198=IKPowWithIntegerCheck(r02,-1);
if(!x9198.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9198.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9199=IKsin(j4);
IkReal x9200=IKcos(j4);
IkReal x9201=(gconst1*r21);
IkReal x9202=(gconst1*r11);
IkReal x9203=((1.0)*gconst2*r10);
IkReal x9204=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9199);
evalcond[1]=((((-1.0)*x9199*x9204))+((x9199*x9201)));
evalcond[2]=((((-1.0)*x9199*x9203))+((x9199*x9202)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x9200*x9201))+(((-1.0)*x9200*x9204)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x9200*x9202))+(((-1.0)*x9200*x9203))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9205=(cj2*sj1);
IkReal x9206=(cj1*sj2);
IkReal x9207=(gconst1*r21);
IkReal x9208=((1.0)*gconst2*r20);
CheckValue<IkReal> x9209=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r20*x9208))+(((2.0)*gconst2*r20*x9207))+(((-1.0)*(x9207*x9207)))+(((-1.0)*(r22*r22))))),-1);
if(!x9209.valid){
continue;
}
CheckValue<IkReal> x9210 = IKatan2WithCheck(IkReal((((r22*x9205))+((r22*x9206)))),IkReal((((x9205*x9207))+(((-1.0)*x9205*x9208))+((x9206*x9207))+(((-1.0)*x9206*x9208)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9210.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9209.value)))+(x9210.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9211=IKsin(j4);
IkReal x9212=IKcos(j4);
IkReal x9213=(sj1*sj2);
IkReal x9214=(gconst2*r10);
IkReal x9215=(gconst2*r00);
IkReal x9216=(gconst2*r20);
IkReal x9217=((1.0)*x9212);
IkReal x9218=(gconst1*x9212);
IkReal x9219=((1.0)*cj1*cj2);
IkReal x9220=(gconst1*x9211);
IkReal x9221=((1.0)*x9211);
evalcond[0]=((((-1.0)*x9216*x9221))+((r21*x9220))+(((-1.0)*r22*x9217)));
evalcond[1]=(cj0+((r11*x9220))+(((-1.0)*r12*x9217))+(((-1.0)*x9214*x9221)));
evalcond[2]=(((r01*x9220))+(((-1.0)*r02*x9217))+(((-1.0)*sj0))+(((-1.0)*x9215*x9221)));
evalcond[3]=(((cj2*sj1))+((r21*x9218))+(((-1.0)*x9216*x9217))+((cj1*sj2))+((r22*x9211)));
evalcond[4]=((((-1.0)*cj0*x9219))+((r02*x9211))+((cj0*x9213))+((r01*x9218))+(((-1.0)*x9215*x9217)));
evalcond[5]=(((r12*x9211))+((sj0*x9213))+((r11*x9218))+(((-1.0)*sj0*x9219))+(((-1.0)*x9214*x9217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9222=((1.0)*gconst2);
CheckValue<IkReal> x9223 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9222))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9223.valid){
continue;
}
CheckValue<IkReal> x9224=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9222)))),-1);
if(!x9224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9223.value)+(((1.5707963267949)*(x9224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9225=IKsin(j4);
IkReal x9226=IKcos(j4);
IkReal x9227=(sj1*sj2);
IkReal x9228=(gconst2*r10);
IkReal x9229=(gconst2*r00);
IkReal x9230=(gconst2*r20);
IkReal x9231=((1.0)*x9226);
IkReal x9232=(gconst1*x9226);
IkReal x9233=((1.0)*cj1*cj2);
IkReal x9234=(gconst1*x9225);
IkReal x9235=((1.0)*x9225);
evalcond[0]=(((r21*x9234))+(((-1.0)*r22*x9231))+(((-1.0)*x9230*x9235)));
evalcond[1]=(cj0+(((-1.0)*r12*x9231))+((r11*x9234))+(((-1.0)*x9228*x9235)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9234))+(((-1.0)*r02*x9231))+(((-1.0)*x9229*x9235)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9232))+((r22*x9225))+(((-1.0)*x9230*x9231)));
evalcond[4]=((((-1.0)*cj0*x9233))+((r02*x9225))+((cj0*x9227))+((r01*x9232))+(((-1.0)*x9229*x9231)));
evalcond[5]=((((-1.0)*sj0*x9233))+((r12*x9225))+((sj0*x9227))+((r11*x9232))+(((-1.0)*x9228*x9231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9236=((1.0)*gconst2);
CheckValue<IkReal> x9237 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9236))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9237.valid){
continue;
}
CheckValue<IkReal> x9238=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9236)))),-1);
if(!x9238.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9237.value)+(((1.5707963267949)*(x9238.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9239=IKsin(j4);
IkReal x9240=IKcos(j4);
IkReal x9241=(sj1*sj2);
IkReal x9242=(gconst2*r10);
IkReal x9243=(gconst2*r00);
IkReal x9244=(gconst2*r20);
IkReal x9245=((1.0)*x9240);
IkReal x9246=(gconst1*x9240);
IkReal x9247=((1.0)*cj1*cj2);
IkReal x9248=(gconst1*x9239);
IkReal x9249=((1.0)*x9239);
evalcond[0]=((((-1.0)*r22*x9245))+(((-1.0)*x9244*x9249))+((r21*x9248)));
evalcond[1]=(cj0+(((-1.0)*r12*x9245))+((r11*x9248))+(((-1.0)*x9242*x9249)));
evalcond[2]=((((-1.0)*sj0))+((r01*x9248))+(((-1.0)*r02*x9245))+(((-1.0)*x9243*x9249)));
evalcond[3]=((((-1.0)*x9244*x9245))+((cj2*sj1))+((cj1*sj2))+((r21*x9246))+((r22*x9239)));
evalcond[4]=(((cj0*x9241))+((r02*x9239))+((r01*x9246))+(((-1.0)*cj0*x9247))+(((-1.0)*x9243*x9245)));
evalcond[5]=(((sj0*x9241))+((r12*x9239))+((r11*x9246))+(((-1.0)*x9242*x9245))+(((-1.0)*sj0*x9247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9250=((-1.0)*r20);
IkReal x9251=x8918;
CheckValue<IkReal> x9253 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9250),IKFAST_ATAN2_MAGTHRESH);
if(!x9253.valid){
continue;
}
IkReal x9252=((-1.0)*(x9253.value));
sj5=gconst1;
cj5=gconst2;
j5=x9252;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9252;
IkReal gconst1=(r21*x9251);
IkReal gconst2=(x9250*x9251);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9254=((-1.0)*r20);
IkReal x9255=x8918;
CheckValue<IkReal> x9257 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9254),IKFAST_ATAN2_MAGTHRESH);
if(!x9257.valid){
continue;
}
IkReal x9256=((-1.0)*(x9257.value));
sj5=gconst1;
cj5=gconst2;
j5=x9256;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9256;
IkReal gconst1=(r21*x9255);
IkReal gconst2=(x9254*x9255);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9258=((-1.0)*r20);
IkReal x9259=x8918;
CheckValue<IkReal> x9261 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9258),IKFAST_ATAN2_MAGTHRESH);
if(!x9261.valid){
continue;
}
IkReal x9260=((-1.0)*(x9261.value));
sj5=gconst1;
cj5=gconst2;
j5=x9260;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9260;
IkReal gconst1=(r21*x9259);
IkReal gconst2=(x9258*x9259);
IkReal x9262=r22*r22;
CheckValue<IkReal> x9265=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9262))),-1);
if(!x9265.valid){
continue;
}
IkReal x9263=x9265.value;
IkReal x9264=((((2.0)*x9263*(r20*r20)*(r21*r21)))+x9262+((x9263*(r20*r20*r20*r20)))+((x9263*(r21*r21*r21*r21))));
j4eval[0]=x9264;
j4eval[1]=IKsign(x9264);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9266=((-1.0)*r20);
IkReal x9267=x8918;
CheckValue<IkReal> x9269 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9266),IKFAST_ATAN2_MAGTHRESH);
if(!x9269.valid){
continue;
}
IkReal x9268=((-1.0)*(x9269.value));
sj5=gconst1;
cj5=gconst2;
j5=x9268;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9268;
IkReal gconst1=(r21*x9267);
IkReal gconst2=(x9266*x9267);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9270=((-1.0)*r20);
IkReal x9271=x8918;
CheckValue<IkReal> x9273 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9270),IKFAST_ATAN2_MAGTHRESH);
if(!x9273.valid){
continue;
}
IkReal x9272=((-1.0)*(x9273.value));
sj5=gconst1;
cj5=gconst2;
j5=x9272;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9272;
IkReal gconst1=(r21*x9271);
IkReal gconst2=(x9270*x9271);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9274=((-1.0)*r20);
IkReal x9275=x8918;
CheckValue<IkReal> x9277 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9274),IKFAST_ATAN2_MAGTHRESH);
if(!x9277.valid){
continue;
}
IkReal x9276=((-1.0)*(x9277.value));
sj5=gconst1;
cj5=gconst2;
j5=x9276;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9276;
IkReal gconst1=(r21*x9275);
IkReal gconst2=(x9274*x9275);
IkReal x9278=r22*r22;
IkReal x9279=(cj1*r12*sj2);
IkReal x9280=(cj2*r12*sj1);
CheckValue<IkReal> x9284=IKPowWithIntegerCheck(((-1.0)+x9278),-1);
if(!x9284.valid){
continue;
}
IkReal x9281=x9284.value;
if((((1.0)+(((-1.0)*x9278)))) < -0.00001)
continue;
IkReal x9282=IKsqrt(((1.0)+(((-1.0)*x9278))));
IkReal x9283=((1.0)*r22*x9281*x9282);
j4eval[0]=((IKabs(((((-1.0)*x9279*x9283))+(((-1.0)*x9280*x9283)))))+(IKabs((x9280+x9279))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9285=((1.0)*gconst1);
IkReal x9286=(cj2*sj1);
IkReal x9287=(gconst2*r10);
IkReal x9288=(cj1*sj2);
CheckValue<IkReal> x9289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9285)))),-1);
if(!x9289.valid){
continue;
}
CheckValue<IkReal> x9290 = IKatan2WithCheck(IkReal((((x9287*x9288))+((x9286*x9287))+(((-1.0)*r11*x9285*x9288))+(((-1.0)*r11*x9285*x9286)))),IkReal((((r12*x9286))+((r12*x9288)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9290.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9289.value)))+(x9290.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9291=IKsin(j4);
IkReal x9292=IKcos(j4);
IkReal x9293=((1.0)*x9292);
IkReal x9294=(gconst2*x9292);
IkReal x9295=(gconst1*x9291);
IkReal x9296=((1.0)*x9291);
evalcond[0]=((((-1.0)*gconst2*r20*x9296))+(((-1.0)*r22*x9293))+((r21*x9295)));
evalcond[1]=((((-1.0)*gconst2*r00*x9296))+((r01*x9295))+(((-1.0)*r02*x9293)));
evalcond[2]=((((-1.0)*gconst1*r11*x9293))+((r10*x9294))+(((-1.0)*r12*x9296)));
evalcond[3]=((1.0)+((r11*x9295))+(((-1.0)*gconst2*r10*x9296))+(((-1.0)*r12*x9293)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9293))+((cj1*sj2))+(((-1.0)*r22*x9296))+((r20*x9294)));
evalcond[5]=(((r00*x9294))+(((-1.0)*gconst1*r01*x9293))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9297=(gconst1*r11);
IkReal x9298=(gconst2*r10);
CheckValue<IkReal> x9299=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x9297*x9298))+(x9298*x9298)+(x9297*x9297))),-1);
if(!x9299.valid){
continue;
}
CheckValue<IkReal> x9300 = IKatan2WithCheck(IkReal((x9298+(((-1.0)*x9297)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9299.value)))+(x9300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9301=IKsin(j4);
IkReal x9302=IKcos(j4);
IkReal x9303=((1.0)*x9302);
IkReal x9304=(gconst2*x9302);
IkReal x9305=(gconst1*x9301);
IkReal x9306=((1.0)*x9301);
evalcond[0]=(((r21*x9305))+(((-1.0)*r22*x9303))+(((-1.0)*gconst2*r20*x9306)));
evalcond[1]=((((-1.0)*gconst2*r00*x9306))+((r01*x9305))+(((-1.0)*r02*x9303)));
evalcond[2]=((((-1.0)*gconst1*r11*x9303))+((r10*x9304))+(((-1.0)*r12*x9306)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9306))+((r11*x9305))+(((-1.0)*r12*x9303)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9303))+((cj1*sj2))+((r20*x9304))+(((-1.0)*r22*x9306)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r01*x9303))+(((-1.0)*r02*x9306))+((r00*x9304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9307=((1.0)*gconst2);
CheckValue<IkReal> x9308 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9307))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9308.valid){
continue;
}
CheckValue<IkReal> x9309=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9307)))),-1);
if(!x9309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9308.value)+(((1.5707963267949)*(x9309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9310=IKsin(j4);
IkReal x9311=IKcos(j4);
IkReal x9312=((1.0)*x9311);
IkReal x9313=(gconst2*x9311);
IkReal x9314=(gconst1*x9310);
IkReal x9315=((1.0)*x9310);
evalcond[0]=(((r21*x9314))+(((-1.0)*r22*x9312))+(((-1.0)*gconst2*r20*x9315)));
evalcond[1]=((((-1.0)*gconst2*r00*x9315))+((r01*x9314))+(((-1.0)*r02*x9312)));
evalcond[2]=((((-1.0)*gconst1*r11*x9312))+((r10*x9313))+(((-1.0)*r12*x9315)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9315))+((r11*x9314))+(((-1.0)*r12*x9312)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9312))+((cj1*sj2))+((r20*x9313))+(((-1.0)*r22*x9315)));
evalcond[5]=((((-1.0)*gconst1*r01*x9312))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9315))+((r00*x9313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9316=((-1.0)*r20);
IkReal x9317=x8918;
CheckValue<IkReal> x9319 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9316),IKFAST_ATAN2_MAGTHRESH);
if(!x9319.valid){
continue;
}
IkReal x9318=((-1.0)*(x9319.value));
sj5=gconst1;
cj5=gconst2;
j5=x9318;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9318;
IkReal gconst1=(r21*x9317);
IkReal gconst2=(x9316*x9317);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9320=((-1.0)*r20);
IkReal x9321=x8918;
CheckValue<IkReal> x9323 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9320),IKFAST_ATAN2_MAGTHRESH);
if(!x9323.valid){
continue;
}
IkReal x9322=((-1.0)*(x9323.value));
sj5=gconst1;
cj5=gconst2;
j5=x9322;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9322;
IkReal gconst1=(r21*x9321);
IkReal gconst2=(x9320*x9321);
IkReal x9324=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9328=IKPowWithIntegerCheck(x9324,-1);
if(!x9328.valid){
continue;
}
IkReal x9325=x9328.value;
IkReal x9326=((1.0)*x9325);
IkReal x9327=((((-1.0)*x9326*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9325))+(((-1.0)*x9326*(r10*r10)*(r20*r20))));
j4eval[0]=x9327;
j4eval[1]=r12;
j4eval[2]=x9324;
j4eval[3]=IKsign(x9327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9329=((-1.0)*r20);
IkReal x9330=x8918;
CheckValue<IkReal> x9332 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9329),IKFAST_ATAN2_MAGTHRESH);
if(!x9332.valid){
continue;
}
IkReal x9331=((-1.0)*(x9332.value));
sj5=gconst1;
cj5=gconst2;
j5=x9331;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9331;
IkReal gconst1=(r21*x9330);
IkReal gconst2=(x9329*x9330);
IkReal x9333=r22*r22;
IkReal x9334=(cj1*r12*sj2);
IkReal x9335=(cj2*r12*sj1);
CheckValue<IkReal> x9339=IKPowWithIntegerCheck(((-1.0)+x9333),-1);
if(!x9339.valid){
continue;
}
IkReal x9336=x9339.value;
if((((1.0)+(((-1.0)*x9333)))) < -0.00001)
continue;
IkReal x9337=IKsqrt(((1.0)+(((-1.0)*x9333))));
IkReal x9338=((1.0)*r22*x9336*x9337);
j4eval[0]=((IKabs((x9335+x9334)))+(IKabs(((((-1.0)*x9334*x9338))+(((-1.0)*x9335*x9338))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9340=((1.0)*gconst1);
IkReal x9341=(cj2*sj1);
IkReal x9342=(gconst2*r10);
IkReal x9343=(cj1*sj2);
CheckValue<IkReal> x9344=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9340)))),-1);
if(!x9344.valid){
continue;
}
CheckValue<IkReal> x9345 = IKatan2WithCheck(IkReal((((x9341*x9342))+((x9342*x9343))+(((-1.0)*r11*x9340*x9341))+(((-1.0)*r11*x9340*x9343)))),IkReal((((r12*x9341))+((r12*x9343)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9345.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9344.value)))+(x9345.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9346=IKsin(j4);
IkReal x9347=IKcos(j4);
IkReal x9348=((1.0)*x9347);
IkReal x9349=(gconst2*x9347);
IkReal x9350=(gconst1*x9346);
IkReal x9351=((1.0)*x9346);
evalcond[0]=((((-1.0)*r22*x9348))+(((-1.0)*gconst2*r20*x9351))+((r21*x9350)));
evalcond[1]=(((r01*x9350))+(((-1.0)*r02*x9348))+(((-1.0)*gconst2*r00*x9351)));
evalcond[2]=(((r10*x9349))+(((-1.0)*r12*x9351))+(((-1.0)*gconst1*r11*x9348)));
evalcond[3]=((-1.0)+((r11*x9350))+(((-1.0)*r12*x9348))+(((-1.0)*gconst2*r10*x9351)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9351))+((cj1*sj2))+((r20*x9349))+(((-1.0)*gconst1*r21*x9348)));
evalcond[5]=((((-1.0)*gconst1*r01*x9348))+(((-1.0)*r02*x9351))+((r00*x9349))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9352=(gconst1*r11);
IkReal x9353=(gconst2*r10);
CheckValue<IkReal> x9354=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9352*x9352)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9353*x9353)))+(((2.0)*x9352*x9353)))),-1);
if(!x9354.valid){
continue;
}
CheckValue<IkReal> x9355 = IKatan2WithCheck(IkReal((x9353+(((-1.0)*x9352)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9354.value)))+(x9355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9356=IKsin(j4);
IkReal x9357=IKcos(j4);
IkReal x9358=((1.0)*x9357);
IkReal x9359=(gconst2*x9357);
IkReal x9360=(gconst1*x9356);
IkReal x9361=((1.0)*x9356);
evalcond[0]=(((r21*x9360))+(((-1.0)*r22*x9358))+(((-1.0)*gconst2*r20*x9361)));
evalcond[1]=((((-1.0)*r02*x9358))+((r01*x9360))+(((-1.0)*gconst2*r00*x9361)));
evalcond[2]=(((r10*x9359))+(((-1.0)*gconst1*r11*x9358))+(((-1.0)*r12*x9361)));
evalcond[3]=((-1.0)+((r11*x9360))+(((-1.0)*r12*x9358))+(((-1.0)*gconst2*r10*x9361)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9359))+(((-1.0)*gconst1*r21*x9358))+(((-1.0)*r22*x9361)));
evalcond[5]=((((-1.0)*gconst1*r01*x9358))+(((-1.0)*sj1*sj2))+((r00*x9359))+(((-1.0)*r02*x9361))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9362 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9362.valid){
continue;
}
CheckValue<IkReal> x9363=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9363.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9362.value)+(((1.5707963267949)*(x9363.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9364=IKsin(j4);
IkReal x9365=IKcos(j4);
IkReal x9366=((1.0)*x9365);
IkReal x9367=(gconst2*x9365);
IkReal x9368=(gconst1*x9364);
IkReal x9369=((1.0)*x9364);
evalcond[0]=(((r21*x9368))+(((-1.0)*r22*x9366))+(((-1.0)*gconst2*r20*x9369)));
evalcond[1]=((((-1.0)*r02*x9366))+((r01*x9368))+(((-1.0)*gconst2*r00*x9369)));
evalcond[2]=((((-1.0)*gconst1*r11*x9366))+(((-1.0)*r12*x9369))+((r10*x9367)));
evalcond[3]=((-1.0)+((r11*x9368))+(((-1.0)*gconst2*r10*x9369))+(((-1.0)*r12*x9366)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9366))+((cj1*sj2))+(((-1.0)*r22*x9369))+((r20*x9367)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9369))+(((-1.0)*gconst1*r01*x9366))+((cj1*cj2))+((r00*x9367)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9370=((-1.0)*r20);
IkReal x9371=x8918;
CheckValue<IkReal> x9373 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9370),IKFAST_ATAN2_MAGTHRESH);
if(!x9373.valid){
continue;
}
IkReal x9372=((-1.0)*(x9373.value));
sj5=gconst1;
cj5=gconst2;
j5=x9372;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9372;
IkReal gconst1=(r21*x9371);
IkReal gconst2=(x9370*x9371);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9374=((-1.0)*r20);
IkReal x9375=x8918;
CheckValue<IkReal> x9377 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9374),IKFAST_ATAN2_MAGTHRESH);
if(!x9377.valid){
continue;
}
IkReal x9376=((-1.0)*(x9377.value));
sj5=gconst1;
cj5=gconst2;
j5=x9376;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9376;
IkReal gconst1=(r21*x9375);
IkReal gconst2=(x9374*x9375);
IkReal x9378=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9382=IKPowWithIntegerCheck(x9378,-1);
if(!x9382.valid){
continue;
}
IkReal x9379=x9382.value;
IkReal x9380=((1.0)*x9379);
IkReal x9381=((((-2.0)*r00*r01*r20*r21*x9379))+(((-1.0)*(r02*r02)))+(((-1.0)*x9380*(r00*r00)*(r20*r20)))+(((-1.0)*x9380*(r01*r01)*(r21*r21))));
j4eval[0]=x9381;
j4eval[1]=IKsign(x9381);
j4eval[2]=r02;
j4eval[3]=x9378;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9383=((-1.0)*r20);
IkReal x9384=x8918;
CheckValue<IkReal> x9386 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9383),IKFAST_ATAN2_MAGTHRESH);
if(!x9386.valid){
continue;
}
IkReal x9385=((-1.0)*(x9386.value));
sj5=gconst1;
cj5=gconst2;
j5=x9385;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9385;
IkReal gconst1=(r21*x9384);
IkReal gconst2=(x9383*x9384);
IkReal x9387=r22*r22;
IkReal x9388=(cj1*r02*sj2);
IkReal x9389=(cj2*r02*sj1);
CheckValue<IkReal> x9393=IKPowWithIntegerCheck(((-1.0)+x9387),-1);
if(!x9393.valid){
continue;
}
IkReal x9390=x9393.value;
if((((1.0)+(((-1.0)*x9387)))) < -0.00001)
continue;
IkReal x9391=IKsqrt(((1.0)+(((-1.0)*x9387))));
IkReal x9392=((1.0)*r22*x9390*x9391);
j4eval[0]=((IKabs(((((-1.0)*x9388*x9392))+(((-1.0)*x9389*x9392)))))+(IKabs((x9388+x9389))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9394=(cj2*sj1);
IkReal x9395=(cj1*sj2);
IkReal x9396=(gconst2*r00);
IkReal x9397=((1.0)*gconst1*r01);
CheckValue<IkReal> x9398=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9398.valid){
continue;
}
CheckValue<IkReal> x9399 = IKatan2WithCheck(IkReal((((x9395*x9396))+((x9394*x9396))+(((-1.0)*x9394*x9397))+(((-1.0)*x9395*x9397)))),IkReal((((r02*x9395))+((r02*x9394)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9398.value)))+(x9399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9400=IKsin(j4);
IkReal x9401=IKcos(j4);
IkReal x9402=(gconst1*r11);
IkReal x9403=(gconst1*r21);
IkReal x9404=(gconst1*r01);
IkReal x9405=((1.0)*x9401);
IkReal x9406=(gconst2*x9401);
IkReal x9407=((1.0)*x9400);
evalcond[0]=((((-1.0)*r22*x9405))+((x9400*x9403))+(((-1.0)*gconst2*r20*x9407)));
evalcond[1]=((((-1.0)*gconst2*r10*x9407))+((x9400*x9402))+(((-1.0)*r12*x9405)));
evalcond[2]=((((-1.0)*x9404*x9405))+(((-1.0)*r02*x9407))+((r00*x9406)));
evalcond[3]=((-1.0)+((x9400*x9404))+(((-1.0)*r02*x9405))+(((-1.0)*gconst2*r00*x9407)));
evalcond[4]=((((-1.0)*r22*x9407))+((cj2*sj1))+((cj1*sj2))+((r20*x9406))+(((-1.0)*x9403*x9405)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9407))+((r10*x9406))+(((-1.0)*x9402*x9405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9408=(gconst2*r00);
IkReal x9409=(gconst1*r01);
CheckValue<IkReal> x9410 = IKatan2WithCheck(IkReal(((((-1.0)*x9409))+x9408)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9410.valid){
continue;
}
CheckValue<IkReal> x9411=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x9408*x9409))+(((-1.0)*(x9408*x9408)))+(((-1.0)*(x9409*x9409))))),-1);
if(!x9411.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9410.value)+(((1.5707963267949)*(x9411.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9412=IKsin(j4);
IkReal x9413=IKcos(j4);
IkReal x9414=(gconst1*r11);
IkReal x9415=(gconst1*r21);
IkReal x9416=(gconst1*r01);
IkReal x9417=((1.0)*x9413);
IkReal x9418=(gconst2*x9413);
IkReal x9419=((1.0)*x9412);
evalcond[0]=(((x9412*x9415))+(((-1.0)*gconst2*r20*x9419))+(((-1.0)*r22*x9417)));
evalcond[1]=(((x9412*x9414))+(((-1.0)*r12*x9417))+(((-1.0)*gconst2*r10*x9419)));
evalcond[2]=((((-1.0)*r02*x9419))+((r00*x9418))+(((-1.0)*x9416*x9417)));
evalcond[3]=((-1.0)+((x9412*x9416))+(((-1.0)*r02*x9417))+(((-1.0)*gconst2*r00*x9419)));
evalcond[4]=(((r20*x9418))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9415*x9417))+(((-1.0)*r22*x9419)));
evalcond[5]=((((-1.0)*r12*x9419))+((r10*x9418))+(((-1.0)*x9414*x9417))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9420=((1.0)*gconst2);
CheckValue<IkReal> x9421=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9420)))),-1);
if(!x9421.valid){
continue;
}
CheckValue<IkReal> x9422 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9420))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9422.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9421.value)))+(x9422.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9423=IKsin(j4);
IkReal x9424=IKcos(j4);
IkReal x9425=(gconst1*r11);
IkReal x9426=(gconst1*r21);
IkReal x9427=(gconst1*r01);
IkReal x9428=((1.0)*x9424);
IkReal x9429=(gconst2*x9424);
IkReal x9430=((1.0)*x9423);
evalcond[0]=(((x9423*x9426))+(((-1.0)*r22*x9428))+(((-1.0)*gconst2*r20*x9430)));
evalcond[1]=((((-1.0)*gconst2*r10*x9430))+((x9423*x9425))+(((-1.0)*r12*x9428)));
evalcond[2]=(((r00*x9429))+(((-1.0)*r02*x9430))+(((-1.0)*x9427*x9428)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r00*x9430))+((x9423*x9427))+(((-1.0)*r02*x9428)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9429))+(((-1.0)*x9426*x9428))+(((-1.0)*r22*x9430)));
evalcond[5]=((((-1.0)*x9425*x9428))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9430))+((r10*x9429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9431=((-1.0)*r20);
IkReal x9432=x8918;
CheckValue<IkReal> x9434 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9431),IKFAST_ATAN2_MAGTHRESH);
if(!x9434.valid){
continue;
}
IkReal x9433=((-1.0)*(x9434.value));
sj5=gconst1;
cj5=gconst2;
j5=x9433;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9433;
IkReal gconst1=(r21*x9432);
IkReal gconst2=(x9431*x9432);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9435=((-1.0)*r20);
IkReal x9436=x8918;
CheckValue<IkReal> x9438 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9435),IKFAST_ATAN2_MAGTHRESH);
if(!x9438.valid){
continue;
}
IkReal x9437=((-1.0)*(x9438.value));
sj5=gconst1;
cj5=gconst2;
j5=x9437;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9437;
IkReal gconst1=(r21*x9436);
IkReal gconst2=(x9435*x9436);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9439=((-1.0)*r20);
IkReal x9440=x8918;
CheckValue<IkReal> x9442 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9439),IKFAST_ATAN2_MAGTHRESH);
if(!x9442.valid){
continue;
}
IkReal x9441=((-1.0)*(x9442.value));
sj5=gconst1;
cj5=gconst2;
j5=x9441;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9441;
IkReal gconst1=(r21*x9440);
IkReal gconst2=(x9439*x9440);
IkReal x9443=r22*r22;
IkReal x9444=(cj1*r02*sj2);
IkReal x9445=(cj2*r02*sj1);
CheckValue<IkReal> x9449=IKPowWithIntegerCheck(((-1.0)+x9443),-1);
if(!x9449.valid){
continue;
}
IkReal x9446=x9449.value;
if((((1.0)+(((-1.0)*x9443)))) < -0.00001)
continue;
IkReal x9447=IKsqrt(((1.0)+(((-1.0)*x9443))));
IkReal x9448=((1.0)*r22*x9446*x9447);
j4eval[0]=((IKabs(((((-1.0)*x9445*x9448))+(((-1.0)*x9444*x9448)))))+(IKabs((x9445+x9444))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9450=(cj2*sj1);
IkReal x9451=(cj1*sj2);
IkReal x9452=(gconst2*r00);
IkReal x9453=((1.0)*gconst1*r01);
CheckValue<IkReal> x9454 = IKatan2WithCheck(IkReal(((((-1.0)*x9450*x9453))+((x9451*x9452))+(((-1.0)*x9451*x9453))+((x9450*x9452)))),IkReal((((r02*x9450))+((r02*x9451)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9454.valid){
continue;
}
CheckValue<IkReal> x9455=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9454.value)+(((1.5707963267949)*(x9455.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9456=IKsin(j4);
IkReal x9457=IKcos(j4);
IkReal x9458=(gconst1*r11);
IkReal x9459=(gconst1*r21);
IkReal x9460=(gconst1*r01);
IkReal x9461=((1.0)*x9457);
IkReal x9462=(gconst2*x9457);
IkReal x9463=((1.0)*x9456);
evalcond[0]=((((-1.0)*gconst2*r20*x9463))+(((-1.0)*r22*x9461))+((x9456*x9459)));
evalcond[1]=((((-1.0)*r12*x9461))+(((-1.0)*gconst2*r10*x9463))+((x9456*x9458)));
evalcond[2]=(((r00*x9462))+(((-1.0)*x9460*x9461))+(((-1.0)*r02*x9463)));
evalcond[3]=((1.0)+((x9456*x9460))+(((-1.0)*gconst2*r00*x9463))+(((-1.0)*r02*x9461)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9459*x9461))+(((-1.0)*r22*x9463))+((r20*x9462)));
evalcond[5]=(((r10*x9462))+(((-1.0)*sj1*sj2))+(((-1.0)*x9458*x9461))+(((-1.0)*r12*x9463))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9464=(gconst1*r01);
IkReal x9465=(gconst2*r00);
CheckValue<IkReal> x9466=IKPowWithIntegerCheck(IKsign(((x9464*x9464)+(x9465*x9465)+(r02*r02)+(((-2.0)*x9464*x9465)))),-1);
if(!x9466.valid){
continue;
}
CheckValue<IkReal> x9467 = IKatan2WithCheck(IkReal((x9465+(((-1.0)*x9464)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9466.value)))+(x9467.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9468=IKsin(j4);
IkReal x9469=IKcos(j4);
IkReal x9470=(gconst1*r11);
IkReal x9471=(gconst1*r21);
IkReal x9472=(gconst1*r01);
IkReal x9473=((1.0)*x9469);
IkReal x9474=(gconst2*x9469);
IkReal x9475=((1.0)*x9468);
evalcond[0]=(((x9468*x9471))+(((-1.0)*gconst2*r20*x9475))+(((-1.0)*r22*x9473)));
evalcond[1]=(((x9468*x9470))+(((-1.0)*r12*x9473))+(((-1.0)*gconst2*r10*x9475)));
evalcond[2]=((((-1.0)*r02*x9475))+((r00*x9474))+(((-1.0)*x9472*x9473)));
evalcond[3]=((1.0)+((x9468*x9472))+(((-1.0)*r02*x9473))+(((-1.0)*gconst2*r00*x9475)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9471*x9473))+((cj1*sj2))+(((-1.0)*r22*x9475))+((r20*x9474)));
evalcond[5]=((((-1.0)*x9470*x9473))+((r10*x9474))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9475))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9476 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9476.valid){
continue;
}
CheckValue<IkReal> x9477=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9477.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9476.value)+(((1.5707963267949)*(x9477.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9478=IKsin(j4);
IkReal x9479=IKcos(j4);
IkReal x9480=(gconst1*r11);
IkReal x9481=(gconst1*r21);
IkReal x9482=(gconst1*r01);
IkReal x9483=((1.0)*x9479);
IkReal x9484=(gconst2*x9479);
IkReal x9485=((1.0)*x9478);
evalcond[0]=(((x9478*x9481))+(((-1.0)*r22*x9483))+(((-1.0)*gconst2*r20*x9485)));
evalcond[1]=(((x9478*x9480))+(((-1.0)*gconst2*r10*x9485))+(((-1.0)*r12*x9483)));
evalcond[2]=(((r00*x9484))+(((-1.0)*r02*x9485))+(((-1.0)*x9482*x9483)));
evalcond[3]=((1.0)+((x9478*x9482))+(((-1.0)*gconst2*r00*x9485))+(((-1.0)*r02*x9483)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9481*x9483))+((r20*x9484))+(((-1.0)*r22*x9485)));
evalcond[5]=((((-1.0)*x9480*x9483))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r10*x9484))+(((-1.0)*r12*x9485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9486=((-1.0)*r20);
IkReal x9487=((-1.0)*px);
CheckValue<IkReal> x9489 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9486),IKFAST_ATAN2_MAGTHRESH);
if(!x9489.valid){
continue;
}
IkReal x9488=((-1.0)*(x9489.value));
sj5=gconst1;
cj5=gconst2;
j5=x9488;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9487);
rxp1_1=(px*r21);
rxp1_2=(r11*x9487);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9488;
IkReal gconst1=r21;
IkReal gconst2=x9486;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9490=((-1.0)*r20);
IkReal x9491=((-1.0)*px);
CheckValue<IkReal> x9493 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9490),IKFAST_ATAN2_MAGTHRESH);
if(!x9493.valid){
continue;
}
IkReal x9492=((-1.0)*(x9493.value));
sj5=gconst1;
cj5=gconst2;
j5=x9492;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9491);
rxp1_1=(px*r21);
rxp1_2=(r11*x9491);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9492;
IkReal gconst1=r21;
IkReal gconst2=x9490;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9494=((-1.0)*r20);
IkReal x9495=((-1.0)*px);
CheckValue<IkReal> x9497 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9494),IKFAST_ATAN2_MAGTHRESH);
if(!x9497.valid){
continue;
}
IkReal x9496=((-1.0)*(x9497.value));
sj5=gconst1;
cj5=gconst2;
j5=x9496;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9495);
rxp1_1=(px*r21);
rxp1_2=(r11*x9495);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9496;
IkReal gconst1=r21;
IkReal gconst2=x9494;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9500=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9500.valid){
continue;
}
IkReal x9498=x9500.value;
IkReal x9499=(sj0*x9498);
cj4array[0]=((((-1.0)*sj1*sj2*x9499))+((cj1*cj2*x9499)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9501=IKsin(j4);
IkReal x9502=IKcos(j4);
IkReal x9503=(gconst1*x9501);
IkReal x9504=((1.0)*x9502);
IkReal x9505=((1.0)*gconst2*x9501);
evalcond[0]=((-1.0)*r02*x9501);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9504)));
evalcond[2]=(((r21*x9503))+(((-1.0)*r20*x9505)));
evalcond[3]=(((r11*x9503))+(((-1.0)*r10*x9505)));
evalcond[4]=((((-1.0)*gconst1*r21*x9504))+((cj2*sj1))+((cj1*sj2))+((gconst2*r20*x9502)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9508=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9508.valid){
continue;
}
IkReal x9506=x9508.value;
IkReal x9507=((1.0)*x9506);
cj4array[0]=((((-1.0)*cj2*sj1*x9507))+(((-1.0)*cj1*sj2*x9507)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9509=IKsin(j4);
IkReal x9510=IKcos(j4);
IkReal x9511=(gconst2*r10);
IkReal x9512=((1.0)*sj0);
IkReal x9513=(gconst1*r11);
IkReal x9514=((1.0)*x9509);
IkReal x9515=((1.0)*x9510);
evalcond[0]=((-1.0)*r02*x9509);
evalcond[1]=((((-1.0)*r02*x9515))+(((-1.0)*x9512)));
evalcond[2]=((((-1.0)*gconst2*r20*x9514))+((gconst1*r21*x9509)));
evalcond[3]=((((-1.0)*x9511*x9514))+((x9509*x9513)));
evalcond[4]=((((-1.0)*cj1*cj2*x9512))+(((-1.0)*x9513*x9515))+((x9510*x9511))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9516=IKPowWithIntegerCheck(r02,-1);
if(!x9516.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9516.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9517=IKsin(j4);
IkReal x9518=IKcos(j4);
IkReal x9519=(gconst2*r10);
IkReal x9520=(gconst1*r11);
IkReal x9521=(gconst1*r21);
IkReal x9522=(gconst2*r20);
IkReal x9523=((1.0)*x9517);
IkReal x9524=((1.0)*x9518);
evalcond[0]=((-1.0)*r02*x9517);
evalcond[1]=(((x9517*x9521))+(((-1.0)*x9522*x9523)));
evalcond[2]=(((x9517*x9520))+(((-1.0)*x9519*x9523)));
evalcond[3]=(((cj2*sj1))+((x9518*x9522))+(((-1.0)*x9521*x9524))+((cj1*sj2)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+(((-1.0)*x9520*x9524))+((sj0*sj1*sj2))+((x9518*x9519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9525=(cj2*sj1);
IkReal x9526=(cj1*sj2);
IkReal x9527=(gconst1*r21);
IkReal x9528=((1.0)*gconst2*r20);
CheckValue<IkReal> x9529=IKPowWithIntegerCheck(IKsign(((x9527*x9527)+(r22*r22)+(((gconst2*gconst2)*(r20*r20)))+(((-2.0)*gconst2*r20*x9527)))),-1);
if(!x9529.valid){
continue;
}
CheckValue<IkReal> x9530 = IKatan2WithCheck(IkReal((((r22*x9525))+((r22*x9526)))),IkReal(((((-1.0)*x9525*x9528))+(((-1.0)*x9526*x9528))+((x9526*x9527))+((x9525*x9527)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9529.value)))+(x9530.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9531=IKsin(j4);
IkReal x9532=IKcos(j4);
IkReal x9533=(gconst1*r11);
IkReal x9534=(sj1*sj2);
IkReal x9535=(gconst1*r21);
IkReal x9536=(gconst1*r01);
IkReal x9537=((1.0)*x9532);
IkReal x9538=(gconst2*x9532);
IkReal x9539=((1.0)*cj1*cj2);
IkReal x9540=((1.0)*x9531);
evalcond[0]=((((-1.0)*r22*x9537))+((x9531*x9535))+(((-1.0)*gconst2*r20*x9540)));
evalcond[1]=(cj0+(((-1.0)*gconst2*r10*x9540))+((x9531*x9533))+(((-1.0)*r12*x9537)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x9537))+((x9531*x9536))+(((-1.0)*gconst2*r00*x9540)));
evalcond[3]=(((cj2*sj1))+((r20*x9538))+((cj1*sj2))+(((-1.0)*r22*x9540))+(((-1.0)*x9535*x9537)));
evalcond[4]=((((-1.0)*x9536*x9537))+(((-1.0)*r02*x9540))+(((-1.0)*cj0*x9539))+((cj0*x9534))+((r00*x9538)));
evalcond[5]=((((-1.0)*r12*x9540))+((r10*x9538))+(((-1.0)*x9533*x9537))+((sj0*x9534))+(((-1.0)*sj0*x9539)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9541=((1.0)*gconst2);
CheckValue<IkReal> x9542 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9541))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9542.valid){
continue;
}
CheckValue<IkReal> x9543=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9541)))),-1);
if(!x9543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9542.value)+(((1.5707963267949)*(x9543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9544=IKsin(j4);
IkReal x9545=IKcos(j4);
IkReal x9546=(gconst1*r11);
IkReal x9547=(sj1*sj2);
IkReal x9548=(gconst1*r21);
IkReal x9549=(gconst1*r01);
IkReal x9550=((1.0)*x9545);
IkReal x9551=(gconst2*x9545);
IkReal x9552=((1.0)*cj1*cj2);
IkReal x9553=((1.0)*x9544);
evalcond[0]=(((x9544*x9548))+(((-1.0)*r22*x9550))+(((-1.0)*gconst2*r20*x9553)));
evalcond[1]=(((x9544*x9546))+cj0+(((-1.0)*gconst2*r10*x9553))+(((-1.0)*r12*x9550)));
evalcond[2]=((((-1.0)*sj0))+((x9544*x9549))+(((-1.0)*r02*x9550))+(((-1.0)*gconst2*r00*x9553)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9553))+((cj1*sj2))+((r20*x9551))+(((-1.0)*x9548*x9550)));
evalcond[4]=((((-1.0)*cj0*x9552))+(((-1.0)*r02*x9553))+((cj0*x9547))+(((-1.0)*x9549*x9550))+((r00*x9551)));
evalcond[5]=((((-1.0)*sj0*x9552))+(((-1.0)*x9546*x9550))+((r10*x9551))+(((-1.0)*r12*x9553))+((sj0*x9547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9554=((1.0)*gconst2);
CheckValue<IkReal> x9555=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9554)))),-1);
if(!x9555.valid){
continue;
}
CheckValue<IkReal> x9556 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9554)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9556.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9555.value)))+(x9556.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9557=IKsin(j4);
IkReal x9558=IKcos(j4);
IkReal x9559=(gconst1*r11);
IkReal x9560=(sj1*sj2);
IkReal x9561=(gconst1*r21);
IkReal x9562=(gconst1*r01);
IkReal x9563=((1.0)*x9558);
IkReal x9564=(gconst2*x9558);
IkReal x9565=((1.0)*cj1*cj2);
IkReal x9566=((1.0)*x9557);
evalcond[0]=((((-1.0)*gconst2*r20*x9566))+(((-1.0)*r22*x9563))+((x9557*x9561)));
evalcond[1]=(cj0+((x9557*x9559))+(((-1.0)*gconst2*r10*x9566))+(((-1.0)*r12*x9563)));
evalcond[2]=((((-1.0)*gconst2*r00*x9566))+(((-1.0)*sj0))+((x9557*x9562))+(((-1.0)*r02*x9563)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9566))+(((-1.0)*x9561*x9563))+((r20*x9564)));
evalcond[4]=(((cj0*x9560))+((r00*x9564))+(((-1.0)*cj0*x9565))+(((-1.0)*x9562*x9563))+(((-1.0)*r02*x9566)));
evalcond[5]=(((sj0*x9560))+(((-1.0)*r12*x9566))+(((-1.0)*x9559*x9563))+(((-1.0)*sj0*x9565))+((r10*x9564)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9567=((-1.0)*r20);
IkReal x9568=x8918;
CheckValue<IkReal> x9570 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9567),IKFAST_ATAN2_MAGTHRESH);
if(!x9570.valid){
continue;
}
IkReal x9569=((-1.0)*(x9570.value));
sj5=gconst1;
cj5=gconst2;
j5=x9569;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9569;
IkReal gconst1=(r21*x9568);
IkReal gconst2=(x9567*x9568);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9571=((-1.0)*r20);
IkReal x9572=x8918;
CheckValue<IkReal> x9574 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9571),IKFAST_ATAN2_MAGTHRESH);
if(!x9574.valid){
continue;
}
IkReal x9573=((-1.0)*(x9574.value));
sj5=gconst1;
cj5=gconst2;
j5=x9573;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9573;
IkReal gconst1=(r21*x9572);
IkReal gconst2=(x9571*x9572);
CheckValue<IkReal> x9582=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9582.valid){
continue;
}
IkReal x9575=x9582.value;
IkReal x9576=(sj3*x9575);
IkReal x9577=(r11*x9576);
IkReal x9578=(r00*x9576);
IkReal x9579=(r01*x9576);
IkReal x9580=(r10*x9576);
IkReal x9581=(r20*r21*x9576);
j4eval[0]=IKsign((((r10*x9578*(r20*r20)))+((r02*r12*sj3))+((r10*r20*r21*x9579))+((r00*r20*r21*x9577))+((r01*x9577*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9583=gconst2*gconst2;
IkReal x9584=gconst1*gconst1;
IkReal x9585=((1.0)*cj3);
IkReal x9586=((1.0)*sj3);
IkReal x9587=(r11*sj3);
IkReal x9588=(r10*sj3);
IkReal x9589=(gconst1*gconst2*r00);
IkReal x9590=(gconst1*gconst2*r01);
IkReal x9591=(r00*x9583);
IkReal x9592=(r01*x9584);
CheckValue<IkReal> x9593=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9585*x9592))+(((-1.0)*r02*r12*x9585))+(((-1.0)*r10*x9585*x9591))+((cj3*r11*x9589))+((cj3*r10*x9590)))),-1);
if(!x9593.valid){
continue;
}
CheckValue<IkReal> x9594 = IKatan2WithCheck(IkReal((((gconst2*r02*x9587))+((gconst1*r02*x9588)))),IkReal(((((-1.0)*r11*x9586*x9591))+(((-1.0)*r10*x9586*x9589))+((x9587*x9590))+((x9588*x9592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9593.value)))+(x9594.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9595=IKsin(j4);
IkReal x9596=IKcos(j4);
IkReal x9597=(sj1*sj2);
IkReal x9598=(gconst1*sj3);
IkReal x9599=(cj3*gconst1);
IkReal x9600=(cj3*gconst2);
IkReal x9601=((1.0)*cj2);
IkReal x9602=(cj1*sj2);
IkReal x9603=(gconst2*sj3);
IkReal x9604=(cj1*x9601);
IkReal x9605=((1.0)*x9596);
IkReal x9606=((1.0)*x9595);
IkReal x9607=(gconst1*x9595);
IkReal x9608=(cj3*x9595);
IkReal x9609=(x9596*x9603);
evalcond[0]=((((-1.0)*r22*x9605))+((r21*x9607))+(((-1.0)*gconst2*r20*x9606)));
evalcond[1]=(((r01*x9607))+(((-1.0)*r02*x9605))+(((-1.0)*gconst2*r00*x9606)));
evalcond[2]=((1.0)+((r11*x9607))+(((-1.0)*r12*x9605))+(((-1.0)*gconst2*r10*x9606)));
evalcond[3]=(((r11*x9596*x9599))+((r12*x9608))+((r11*x9603))+((r10*x9598))+(((-1.0)*r10*x9600*x9605)));
evalcond[4]=(((r10*x9609))+((r11*x9600))+(((-1.0)*r12*sj3*x9606))+((r10*x9599))+(((-1.0)*r11*x9598*x9605)));
evalcond[5]=(((r20*x9598))+((cj2*sj1))+((r21*x9603))+(((-1.0)*r20*x9600*x9605))+x9602+((r21*x9596*x9599))+((r22*x9608)));
evalcond[6]=((((-1.0)*x9604))+((r00*x9598))+((r01*x9596*x9599))+((r01*x9603))+x9597+(((-1.0)*r00*x9600*x9605))+((r02*x9608)));
evalcond[7]=(((r20*x9599))+((r21*x9600))+(((-1.0)*r21*x9598*x9605))+(((-1.0)*x9604))+((r20*x9609))+x9597+(((-1.0)*r22*sj3*x9606)));
evalcond[8]=((((-1.0)*r02*sj3*x9606))+(((-1.0)*sj1*x9601))+((r00*x9609))+((r00*x9599))+(((-1.0)*r01*x9598*x9605))+((r01*x9600))+(((-1.0)*x9602)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9610=gconst2*gconst2;
IkReal x9611=gconst1*gconst1;
IkReal x9612=(gconst2*r11);
IkReal x9613=(cj3*r02);
IkReal x9614=(gconst1*r01);
IkReal x9615=(cj3*r10);
IkReal x9616=(r10*sj3);
IkReal x9617=((1.0)*gconst1*r00);
IkReal x9618=(r01*x9611);
IkReal x9619=(r00*x9610);
CheckValue<IkReal> x9620 = IKatan2WithCheck(IkReal((((x9612*x9613))+((gconst1*r10*x9613)))),IkReal(((((-1.0)*gconst2*x9615*x9617))+((x9615*x9618))+(((-1.0)*cj3*r11*x9619))+((cj3*x9612*x9614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9620.valid){
continue;
}
CheckValue<IkReal> x9621=IKPowWithIntegerCheck(IKsign((((x9616*x9619))+((r02*r12*sj3))+(((-1.0)*sj3*x9612*x9617))+(((-1.0)*gconst2*x9614*x9616))+((r11*sj3*x9618)))),-1);
if(!x9621.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9620.value)+(((1.5707963267949)*(x9621.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9622=IKsin(j4);
IkReal x9623=IKcos(j4);
IkReal x9624=(sj1*sj2);
IkReal x9625=(gconst1*sj3);
IkReal x9626=(cj3*gconst1);
IkReal x9627=(cj3*gconst2);
IkReal x9628=((1.0)*cj2);
IkReal x9629=(cj1*sj2);
IkReal x9630=(gconst2*sj3);
IkReal x9631=(cj1*x9628);
IkReal x9632=((1.0)*x9623);
IkReal x9633=((1.0)*x9622);
IkReal x9634=(gconst1*x9622);
IkReal x9635=(cj3*x9622);
IkReal x9636=(x9623*x9630);
evalcond[0]=((((-1.0)*r22*x9632))+((r21*x9634))+(((-1.0)*gconst2*r20*x9633)));
evalcond[1]=(((r01*x9634))+(((-1.0)*gconst2*r00*x9633))+(((-1.0)*r02*x9632)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r10*x9633))+(((-1.0)*r12*x9632))+((r11*x9634)));
evalcond[3]=(((r10*x9625))+((r11*x9623*x9626))+((r12*x9635))+((r11*x9630))+(((-1.0)*r10*x9627*x9632)));
evalcond[4]=(((r10*x9636))+((r10*x9626))+(((-1.0)*r12*sj3*x9633))+((r11*x9627))+(((-1.0)*r11*x9625*x9632)));
evalcond[5]=(((cj2*sj1))+((r20*x9625))+(((-1.0)*r20*x9627*x9632))+((r21*x9630))+((r22*x9635))+x9629+((r21*x9623*x9626)));
evalcond[6]=(((r01*x9630))+((r00*x9625))+((r01*x9623*x9626))+x9624+((r02*x9635))+(((-1.0)*r00*x9627*x9632))+(((-1.0)*x9631)));
evalcond[7]=((((-1.0)*r21*x9625*x9632))+((r20*x9626))+((r20*x9636))+((r21*x9627))+(((-1.0)*r22*sj3*x9633))+x9624+(((-1.0)*x9631)));
evalcond[8]=(((r01*x9627))+((r00*x9636))+((r00*x9626))+(((-1.0)*x9629))+(((-1.0)*r02*sj3*x9633))+(((-1.0)*sj1*x9628))+(((-1.0)*r01*x9625*x9632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9637=((1.0)*gconst2);
CheckValue<IkReal> x9638 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9637)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9638.valid){
continue;
}
CheckValue<IkReal> x9639=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9637)))),-1);
if(!x9639.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9638.value)+(((1.5707963267949)*(x9639.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9640=IKsin(j4);
IkReal x9641=IKcos(j4);
IkReal x9642=(sj1*sj2);
IkReal x9643=(gconst1*sj3);
IkReal x9644=(cj3*gconst1);
IkReal x9645=(cj3*gconst2);
IkReal x9646=((1.0)*cj2);
IkReal x9647=(cj1*sj2);
IkReal x9648=(gconst2*sj3);
IkReal x9649=(cj1*x9646);
IkReal x9650=((1.0)*x9641);
IkReal x9651=((1.0)*x9640);
IkReal x9652=(gconst1*x9640);
IkReal x9653=(cj3*x9640);
IkReal x9654=(x9641*x9648);
evalcond[0]=((((-1.0)*gconst2*r20*x9651))+((r21*x9652))+(((-1.0)*r22*x9650)));
evalcond[1]=(((r01*x9652))+(((-1.0)*gconst2*r00*x9651))+(((-1.0)*r02*x9650)));
evalcond[2]=((1.0)+((r11*x9652))+(((-1.0)*r12*x9650))+(((-1.0)*gconst2*r10*x9651)));
evalcond[3]=((((-1.0)*r10*x9645*x9650))+((r11*x9648))+((r12*x9653))+((r10*x9643))+((r11*x9641*x9644)));
evalcond[4]=(((r11*x9645))+(((-1.0)*r11*x9643*x9650))+((r10*x9644))+((r10*x9654))+(((-1.0)*r12*sj3*x9651)));
evalcond[5]=(((cj2*sj1))+((r21*x9641*x9644))+(((-1.0)*r20*x9645*x9650))+x9647+((r20*x9643))+((r22*x9653))+((r21*x9648)));
evalcond[6]=(((r01*x9641*x9644))+(((-1.0)*x9649))+((r00*x9643))+((r01*x9648))+x9642+((r02*x9653))+(((-1.0)*r00*x9645*x9650)));
evalcond[7]=(((r20*x9654))+(((-1.0)*r21*x9643*x9650))+(((-1.0)*x9649))+x9642+((r20*x9644))+(((-1.0)*r22*sj3*x9651))+((r21*x9645)));
evalcond[8]=((((-1.0)*r01*x9643*x9650))+(((-1.0)*sj1*x9646))+(((-1.0)*r02*sj3*x9651))+((r00*x9654))+((r00*x9644))+((r01*x9645))+(((-1.0)*x9647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9655=((-1.0)*r20);
IkReal x9656=x8918;
CheckValue<IkReal> x9658 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9655),IKFAST_ATAN2_MAGTHRESH);
if(!x9658.valid){
continue;
}
IkReal x9657=((-1.0)*(x9658.value));
sj5=gconst1;
cj5=gconst2;
j5=x9657;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9657;
IkReal gconst1=(r21*x9656);
IkReal gconst2=(x9655*x9656);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9659=((-1.0)*r20);
IkReal x9660=x8918;
CheckValue<IkReal> x9662 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9659),IKFAST_ATAN2_MAGTHRESH);
if(!x9662.valid){
continue;
}
IkReal x9661=((-1.0)*(x9662.value));
sj5=gconst1;
cj5=gconst2;
j5=x9661;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9661;
IkReal gconst1=(r21*x9660);
IkReal gconst2=(x9659*x9660);
CheckValue<IkReal> x9670=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9670.valid){
continue;
}
IkReal x9663=x9670.value;
IkReal x9664=(sj3*x9663);
IkReal x9665=(r11*x9664);
IkReal x9666=(r00*x9664);
IkReal x9667=(r01*x9664);
IkReal x9668=(r10*x9664);
IkReal x9669=(r20*r21*x9664);
j4eval[0]=IKsign((((r02*r12*sj3))+((r01*x9665*(r21*r21)))+((r00*r20*r21*x9665))+((r10*r20*r21*x9667))+((r10*x9666*(r20*r20)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9671=gconst2*gconst2;
IkReal x9672=gconst1*gconst1;
IkReal x9673=((1.0)*cj3);
IkReal x9674=((1.0)*sj3);
IkReal x9675=(r11*sj3);
IkReal x9676=(r10*sj3);
IkReal x9677=(gconst1*gconst2*r00);
IkReal x9678=(gconst1*gconst2*r01);
IkReal x9679=(r00*x9671);
IkReal x9680=(r01*x9672);
CheckValue<IkReal> x9681 = IKatan2WithCheck(IkReal((((gconst1*r02*x9676))+((gconst2*r02*x9675)))),IkReal(((((-1.0)*r10*x9674*x9677))+((x9676*x9680))+((x9675*x9678))+(((-1.0)*r11*x9674*x9679)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9681.valid){
continue;
}
CheckValue<IkReal> x9682=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x9673*x9679))+(((-1.0)*r02*r12*x9673))+(((-1.0)*r11*x9673*x9680))+((cj3*r11*x9677))+((cj3*r10*x9678)))),-1);
if(!x9682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9681.value)+(((1.5707963267949)*(x9682.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9683=IKsin(j4);
IkReal x9684=IKcos(j4);
IkReal x9685=(cj2*sj1);
IkReal x9686=(cj1*sj2);
IkReal x9687=(gconst1*sj3);
IkReal x9688=(cj3*gconst1);
IkReal x9689=(sj1*sj2);
IkReal x9690=(cj3*gconst2);
IkReal x9691=(cj1*cj2);
IkReal x9692=(gconst2*sj3);
IkReal x9693=((1.0)*x9684);
IkReal x9694=((1.0)*x9683);
IkReal x9695=(gconst1*x9683);
IkReal x9696=(cj3*x9683);
IkReal x9697=(x9685+x9686);
IkReal x9698=(x9684*x9692);
evalcond[0]=(((r21*x9695))+(((-1.0)*r22*x9693))+(((-1.0)*gconst2*r20*x9694)));
evalcond[1]=((((-1.0)*gconst2*r00*x9694))+(((-1.0)*r02*x9693))+((r01*x9695)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r10*x9694))+(((-1.0)*r12*x9693))+((r11*x9695)));
evalcond[3]=(((r11*x9684*x9688))+(((-1.0)*r10*x9690*x9693))+((r12*x9696))+((r11*x9692))+((r10*x9687)));
evalcond[4]=((((-1.0)*r11*x9687*x9693))+((r11*x9690))+((r10*x9698))+(((-1.0)*r12*sj3*x9694))+((r10*x9688)));
evalcond[5]=(((r22*x9696))+((r21*x9692))+x9697+(((-1.0)*r20*x9690*x9693))+((r21*x9684*x9688))+((r20*x9687)));
evalcond[6]=((((-1.0)*x9689))+(((-1.0)*r00*x9690*x9693))+((r02*x9696))+x9691+((r01*x9684*x9688))+((r01*x9692))+((r00*x9687)));
evalcond[7]=((((-1.0)*r02*sj3*x9694))+x9697+(((-1.0)*r01*x9687*x9693))+((r00*x9698))+((r01*x9690))+((r00*x9688)));
evalcond[8]=((((-1.0)*x9691))+(((-1.0)*r22*sj3*x9694))+((r21*x9690))+(((-1.0)*r21*x9687*x9693))+x9689+((r20*x9688))+((r20*x9698)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9699=gconst2*gconst2;
IkReal x9700=gconst1*gconst1;
IkReal x9701=(gconst2*r11);
IkReal x9702=(cj3*r02);
IkReal x9703=(gconst1*r01);
IkReal x9704=(cj3*r10);
IkReal x9705=(r10*sj3);
IkReal x9706=((1.0)*gconst1*r00);
IkReal x9707=(r01*x9700);
IkReal x9708=(r00*x9699);
CheckValue<IkReal> x9709 = IKatan2WithCheck(IkReal((((gconst1*r10*x9702))+((x9701*x9702)))),IkReal((((x9704*x9707))+(((-1.0)*cj3*r11*x9708))+((cj3*x9701*x9703))+(((-1.0)*gconst2*x9704*x9706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9709.valid){
continue;
}
CheckValue<IkReal> x9710=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((x9705*x9708))+(((-1.0)*sj3*x9701*x9706))+((r11*sj3*x9707))+(((-1.0)*gconst2*x9703*x9705)))),-1);
if(!x9710.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9709.value)+(((1.5707963267949)*(x9710.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9711=IKsin(j4);
IkReal x9712=IKcos(j4);
IkReal x9713=(cj2*sj1);
IkReal x9714=(cj1*sj2);
IkReal x9715=(gconst1*sj3);
IkReal x9716=(cj3*gconst1);
IkReal x9717=(sj1*sj2);
IkReal x9718=(cj3*gconst2);
IkReal x9719=(cj1*cj2);
IkReal x9720=(gconst2*sj3);
IkReal x9721=((1.0)*x9712);
IkReal x9722=((1.0)*x9711);
IkReal x9723=(gconst1*x9711);
IkReal x9724=(cj3*x9711);
IkReal x9725=(x9713+x9714);
IkReal x9726=(x9712*x9720);
evalcond[0]=((((-1.0)*gconst2*r20*x9722))+(((-1.0)*r22*x9721))+((r21*x9723)));
evalcond[1]=(((r01*x9723))+(((-1.0)*r02*x9721))+(((-1.0)*gconst2*r00*x9722)));
evalcond[2]=((-1.0)+((r11*x9723))+(((-1.0)*r12*x9721))+(((-1.0)*gconst2*r10*x9722)));
evalcond[3]=(((r11*x9720))+((r11*x9712*x9716))+((r12*x9724))+((r10*x9715))+(((-1.0)*r10*x9718*x9721)));
evalcond[4]=((((-1.0)*r12*sj3*x9722))+((r11*x9718))+(((-1.0)*r11*x9715*x9721))+((r10*x9716))+((r10*x9726)));
evalcond[5]=((((-1.0)*r20*x9718*x9721))+x9725+((r20*x9715))+((r21*x9712*x9716))+((r21*x9720))+((r22*x9724)));
evalcond[6]=(((r01*x9720))+(((-1.0)*r00*x9718*x9721))+((r02*x9724))+((r01*x9712*x9716))+x9719+((r00*x9715))+(((-1.0)*x9717)));
evalcond[7]=((((-1.0)*r02*sj3*x9722))+x9725+(((-1.0)*r01*x9715*x9721))+((r01*x9718))+((r00*x9716))+((r00*x9726)));
evalcond[8]=((((-1.0)*r21*x9715*x9721))+x9717+((r20*x9726))+((r20*x9716))+(((-1.0)*r22*sj3*x9722))+((r21*x9718))+(((-1.0)*x9719)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9727 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9727.valid){
continue;
}
CheckValue<IkReal> x9728=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9728.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9727.value)+(((1.5707963267949)*(x9728.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9729=IKsin(j4);
IkReal x9730=IKcos(j4);
IkReal x9731=(cj2*sj1);
IkReal x9732=(cj1*sj2);
IkReal x9733=(gconst1*sj3);
IkReal x9734=(cj3*gconst1);
IkReal x9735=(sj1*sj2);
IkReal x9736=(cj3*gconst2);
IkReal x9737=(cj1*cj2);
IkReal x9738=(gconst2*sj3);
IkReal x9739=((1.0)*x9730);
IkReal x9740=((1.0)*x9729);
IkReal x9741=(gconst1*x9729);
IkReal x9742=(cj3*x9729);
IkReal x9743=(x9731+x9732);
IkReal x9744=(x9730*x9738);
evalcond[0]=(((r21*x9741))+(((-1.0)*r22*x9739))+(((-1.0)*gconst2*r20*x9740)));
evalcond[1]=((((-1.0)*r02*x9739))+(((-1.0)*gconst2*r00*x9740))+((r01*x9741)));
evalcond[2]=((-1.0)+((r11*x9741))+(((-1.0)*r12*x9739))+(((-1.0)*gconst2*r10*x9740)));
evalcond[3]=(((r11*x9738))+((r11*x9730*x9734))+(((-1.0)*r10*x9736*x9739))+((r12*x9742))+((r10*x9733)));
evalcond[4]=(((r11*x9736))+((r10*x9744))+(((-1.0)*r12*sj3*x9740))+(((-1.0)*r11*x9733*x9739))+((r10*x9734)));
evalcond[5]=(((r22*x9742))+((r20*x9733))+((r21*x9730*x9734))+x9743+((r21*x9738))+(((-1.0)*r20*x9736*x9739)));
evalcond[6]=((((-1.0)*r00*x9736*x9739))+((r01*x9730*x9734))+((r02*x9742))+x9737+((r01*x9738))+(((-1.0)*x9735))+((r00*x9733)));
evalcond[7]=((((-1.0)*r01*x9733*x9739))+(((-1.0)*r02*sj3*x9740))+x9743+((r00*x9744))+((r01*x9736))+((r00*x9734)));
evalcond[8]=(((r20*x9734))+x9735+(((-1.0)*r21*x9733*x9739))+((r20*x9744))+((r21*x9736))+(((-1.0)*r22*sj3*x9740))+(((-1.0)*x9737)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9745=((-1.0)*r20);
IkReal x9746=x8918;
CheckValue<IkReal> x9748 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9745),IKFAST_ATAN2_MAGTHRESH);
if(!x9748.valid){
continue;
}
IkReal x9747=((-1.0)*(x9748.value));
sj5=gconst1;
cj5=gconst2;
j5=x9747;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9747;
IkReal gconst1=(r21*x9746);
IkReal gconst2=(x9745*x9746);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9749=((-1.0)*r20);
IkReal x9750=x8918;
CheckValue<IkReal> x9752 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9749),IKFAST_ATAN2_MAGTHRESH);
if(!x9752.valid){
continue;
}
IkReal x9751=((-1.0)*(x9752.value));
sj5=gconst1;
cj5=gconst2;
j5=x9751;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9751;
IkReal gconst1=(r21*x9750);
IkReal gconst2=(x9749*x9750);
CheckValue<IkReal> x9760=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9760.valid){
continue;
}
IkReal x9753=x9760.value;
IkReal x9754=(sj3*x9753);
IkReal x9755=(r11*x9754);
IkReal x9756=(r00*x9754);
IkReal x9757=(r01*x9754);
IkReal x9758=(r10*x9754);
IkReal x9759=(r20*r21*x9754);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9755))+((r10*x9756*(r20*r20)))+((r10*r20*r21*x9757))+((r01*x9755*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9761=gconst1*gconst1;
IkReal x9762=gconst2*gconst2;
IkReal x9763=((1.0)*cj3);
IkReal x9764=(gconst2*r10);
IkReal x9765=(r01*sj3);
IkReal x9766=(gconst1*r00*sj3);
IkReal x9767=(gconst1*gconst2*r11);
IkReal x9768=(r10*x9762);
IkReal x9769=(r11*x9761);
CheckValue<IkReal> x9770=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9767))+(((-1.0)*r01*x9763*x9769))+(((-1.0)*r00*x9763*x9768))+(((-1.0)*r02*r12*x9763))+((cj3*gconst1*r01*x9764)))),-1);
if(!x9770.valid){
continue;
}
CheckValue<IkReal> x9771 = IKatan2WithCheck(IkReal((((r12*x9766))+((gconst2*r12*x9765)))),IkReal((((r00*sj3*x9769))+((x9765*x9767))+(((-1.0)*x9764*x9766))+(((-1.0)*x9765*x9768)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9771.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9770.value)))+(x9771.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9772=IKsin(j4);
IkReal x9773=IKcos(j4);
IkReal x9774=(sj1*sj2);
IkReal x9775=(gconst1*sj3);
IkReal x9776=(cj3*gconst1);
IkReal x9777=(cj3*gconst2);
IkReal x9778=((1.0)*cj2);
IkReal x9779=(cj1*sj2);
IkReal x9780=(gconst2*sj3);
IkReal x9781=(cj1*x9778);
IkReal x9782=((1.0)*x9773);
IkReal x9783=((1.0)*x9772);
IkReal x9784=(gconst1*x9772);
IkReal x9785=(cj3*x9772);
IkReal x9786=(x9773*x9780);
evalcond[0]=(((r21*x9784))+(((-1.0)*gconst2*r20*x9783))+(((-1.0)*r22*x9782)));
evalcond[1]=((((-1.0)*r12*x9782))+((r11*x9784))+(((-1.0)*gconst2*r10*x9783)));
evalcond[2]=((-1.0)+((r01*x9784))+(((-1.0)*gconst2*r00*x9783))+(((-1.0)*r02*x9782)));
evalcond[3]=((((-1.0)*r00*x9777*x9782))+((r01*x9780))+((r00*x9775))+((r01*x9773*x9776))+((r02*x9785)));
evalcond[4]=(((r00*x9786))+(((-1.0)*r02*sj3*x9783))+((r01*x9777))+((r00*x9776))+(((-1.0)*r01*x9775*x9782)));
evalcond[5]=(((cj2*sj1))+((r21*x9780))+(((-1.0)*r20*x9777*x9782))+((r22*x9785))+((r21*x9773*x9776))+x9779+((r20*x9775)));
evalcond[6]=(((r10*x9775))+x9774+((r11*x9780))+((r11*x9773*x9776))+((r12*x9785))+(((-1.0)*x9781))+(((-1.0)*r10*x9777*x9782)));
evalcond[7]=((((-1.0)*r21*x9775*x9782))+(((-1.0)*r22*sj3*x9783))+x9774+((r21*x9777))+((r20*x9776))+((r20*x9786))+(((-1.0)*x9781)));
evalcond[8]=(((r10*x9776))+(((-1.0)*x9779))+(((-1.0)*r12*sj3*x9783))+((r10*x9786))+(((-1.0)*sj1*x9778))+(((-1.0)*r11*x9775*x9782))+((r11*x9777)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9787=gconst2*gconst2;
IkReal x9788=gconst1*gconst1;
IkReal x9789=(gconst1*r00);
IkReal x9790=(r11*sj3);
IkReal x9791=((1.0)*gconst2);
IkReal x9792=(cj3*r12);
IkReal x9793=(cj3*r11);
IkReal x9794=(gconst2*r01);
IkReal x9795=(cj3*r10);
IkReal x9796=(r10*sj3);
CheckValue<IkReal> x9797=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9787*x9796))+(((-1.0)*gconst1*r01*x9791*x9796))+(((-1.0)*x9789*x9790*x9791))+((r01*x9788*x9790)))),-1);
if(!x9797.valid){
continue;
}
CheckValue<IkReal> x9798 = IKatan2WithCheck(IkReal((((x9792*x9794))+((x9789*x9792)))),IkReal(((((-1.0)*r01*x9787*x9795))+(((-1.0)*x9789*x9791*x9795))+((r00*x9788*x9793))+((gconst1*x9793*x9794)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9797.value)))+(x9798.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9799=IKsin(j4);
IkReal x9800=IKcos(j4);
IkReal x9801=(sj1*sj2);
IkReal x9802=(gconst1*sj3);
IkReal x9803=(cj3*gconst1);
IkReal x9804=(cj3*gconst2);
IkReal x9805=((1.0)*cj2);
IkReal x9806=(cj1*sj2);
IkReal x9807=(gconst2*sj3);
IkReal x9808=(cj1*x9805);
IkReal x9809=((1.0)*x9800);
IkReal x9810=((1.0)*x9799);
IkReal x9811=(gconst1*x9799);
IkReal x9812=(cj3*x9799);
IkReal x9813=(x9800*x9807);
evalcond[0]=(((r21*x9811))+(((-1.0)*r22*x9809))+(((-1.0)*gconst2*r20*x9810)));
evalcond[1]=((((-1.0)*gconst2*r10*x9810))+((r11*x9811))+(((-1.0)*r12*x9809)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9810))+(((-1.0)*r02*x9809))+((r01*x9811)));
evalcond[3]=(((r00*x9802))+(((-1.0)*r00*x9804*x9809))+((r02*x9812))+((r01*x9800*x9803))+((r01*x9807)));
evalcond[4]=(((r00*x9803))+(((-1.0)*r01*x9802*x9809))+(((-1.0)*r02*sj3*x9810))+((r01*x9804))+((r00*x9813)));
evalcond[5]=(((cj2*sj1))+((r21*x9807))+((r22*x9812))+(((-1.0)*r20*x9804*x9809))+((r21*x9800*x9803))+((r20*x9802))+x9806);
evalcond[6]=(((r10*x9802))+(((-1.0)*x9808))+((r12*x9812))+((r11*x9807))+((r11*x9800*x9803))+(((-1.0)*r10*x9804*x9809))+x9801);
evalcond[7]=(((r21*x9804))+(((-1.0)*x9808))+(((-1.0)*r21*x9802*x9809))+(((-1.0)*r22*sj3*x9810))+((r20*x9803))+x9801+((r20*x9813)));
evalcond[8]=(((r10*x9803))+(((-1.0)*x9806))+((r11*x9804))+(((-1.0)*r12*sj3*x9810))+(((-1.0)*sj1*x9805))+(((-1.0)*r11*x9802*x9809))+((r10*x9813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9814=((1.0)*gconst2);
CheckValue<IkReal> x9815 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst1*r21))+(((-1.0)*r20*x9814)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9815.valid){
continue;
}
CheckValue<IkReal> x9816=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9814)))),-1);
if(!x9816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9815.value)+(((1.5707963267949)*(x9816.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9817=IKsin(j4);
IkReal x9818=IKcos(j4);
IkReal x9819=(sj1*sj2);
IkReal x9820=(gconst1*sj3);
IkReal x9821=(cj3*gconst1);
IkReal x9822=(cj3*gconst2);
IkReal x9823=((1.0)*cj2);
IkReal x9824=(cj1*sj2);
IkReal x9825=(gconst2*sj3);
IkReal x9826=(cj1*x9823);
IkReal x9827=((1.0)*x9818);
IkReal x9828=((1.0)*x9817);
IkReal x9829=(gconst1*x9817);
IkReal x9830=(cj3*x9817);
IkReal x9831=(x9818*x9825);
evalcond[0]=((((-1.0)*gconst2*r20*x9828))+((r21*x9829))+(((-1.0)*r22*x9827)));
evalcond[1]=(((r11*x9829))+(((-1.0)*r12*x9827))+(((-1.0)*gconst2*r10*x9828)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9828))+(((-1.0)*r02*x9827))+((r01*x9829)));
evalcond[3]=(((r00*x9820))+((r01*x9825))+((r02*x9830))+(((-1.0)*r00*x9822*x9827))+((r01*x9818*x9821)));
evalcond[4]=(((r00*x9831))+((r00*x9821))+((r01*x9822))+(((-1.0)*r02*sj3*x9828))+(((-1.0)*r01*x9820*x9827)));
evalcond[5]=(((r20*x9820))+((cj2*sj1))+((r21*x9818*x9821))+((r22*x9830))+(((-1.0)*r20*x9822*x9827))+((r21*x9825))+x9824);
evalcond[6]=(((r11*x9818*x9821))+((r11*x9825))+(((-1.0)*r10*x9822*x9827))+(((-1.0)*x9826))+((r12*x9830))+x9819+((r10*x9820)));
evalcond[7]=(((r20*x9821))+(((-1.0)*x9826))+(((-1.0)*r22*sj3*x9828))+((r21*x9822))+(((-1.0)*r21*x9820*x9827))+((r20*x9831))+x9819);
evalcond[8]=(((r10*x9831))+((r11*x9822))+(((-1.0)*r11*x9820*x9827))+(((-1.0)*r12*sj3*x9828))+(((-1.0)*x9824))+((r10*x9821))+(((-1.0)*sj1*x9823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9832=((-1.0)*r20);
IkReal x9833=x8918;
CheckValue<IkReal> x9835 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9832),IKFAST_ATAN2_MAGTHRESH);
if(!x9835.valid){
continue;
}
IkReal x9834=((-1.0)*(x9835.value));
sj5=gconst1;
cj5=gconst2;
j5=x9834;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9834;
IkReal gconst1=(r21*x9833);
IkReal gconst2=(x9832*x9833);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9836=((-1.0)*r20);
IkReal x9837=x8918;
CheckValue<IkReal> x9839 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9836),IKFAST_ATAN2_MAGTHRESH);
if(!x9839.valid){
continue;
}
IkReal x9838=((-1.0)*(x9839.value));
sj5=gconst1;
cj5=gconst2;
j5=x9838;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9838;
IkReal gconst1=(r21*x9837);
IkReal gconst2=(x9836*x9837);
CheckValue<IkReal> x9847=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9847.valid){
continue;
}
IkReal x9840=x9847.value;
IkReal x9841=(sj3*x9840);
IkReal x9842=(r11*x9841);
IkReal x9843=(r00*x9841);
IkReal x9844=(r01*x9841);
IkReal x9845=(r10*x9841);
IkReal x9846=(r20*r21*x9841);
j4eval[0]=IKsign((((r00*r20*r21*x9842))+((r02*r12*sj3))+((r10*x9843*(r20*r20)))+((r10*r20*r21*x9844))+((r01*x9842*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9848=gconst1*gconst1;
IkReal x9849=gconst2*gconst2;
IkReal x9850=((1.0)*cj3);
IkReal x9851=(gconst2*r10);
IkReal x9852=(r01*sj3);
IkReal x9853=(gconst1*r00*sj3);
IkReal x9854=(gconst1*gconst2*r11);
IkReal x9855=(r10*x9849);
IkReal x9856=(r11*x9848);
CheckValue<IkReal> x9857=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9854))+(((-1.0)*r00*x9850*x9855))+(((-1.0)*r02*r12*x9850))+(((-1.0)*r01*x9850*x9856))+((cj3*gconst1*r01*x9851)))),-1);
if(!x9857.valid){
continue;
}
CheckValue<IkReal> x9858 = IKatan2WithCheck(IkReal((((gconst2*r12*x9852))+((r12*x9853)))),IkReal(((((-1.0)*x9851*x9853))+(((-1.0)*x9852*x9855))+((x9852*x9854))+((r00*sj3*x9856)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9858.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9857.value)))+(x9858.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9859=IKsin(j4);
IkReal x9860=IKcos(j4);
IkReal x9861=(cj2*sj1);
IkReal x9862=(cj1*sj2);
IkReal x9863=(gconst1*sj3);
IkReal x9864=(cj3*gconst1);
IkReal x9865=(sj1*sj2);
IkReal x9866=(cj3*gconst2);
IkReal x9867=(cj1*cj2);
IkReal x9868=(gconst2*sj3);
IkReal x9869=((1.0)*x9860);
IkReal x9870=((1.0)*x9859);
IkReal x9871=(gconst1*x9859);
IkReal x9872=(cj3*x9859);
IkReal x9873=(x9861+x9862);
IkReal x9874=(x9860*x9868);
evalcond[0]=((((-1.0)*r22*x9869))+(((-1.0)*gconst2*r20*x9870))+((r21*x9871)));
evalcond[1]=((((-1.0)*r12*x9869))+(((-1.0)*gconst2*r10*x9870))+((r11*x9871)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9870))+((r01*x9871))+(((-1.0)*r02*x9869)));
evalcond[3]=(((r02*x9872))+((r01*x9860*x9864))+((r00*x9863))+((r01*x9868))+(((-1.0)*r00*x9866*x9869)));
evalcond[4]=(((r00*x9864))+(((-1.0)*r02*sj3*x9870))+(((-1.0)*r01*x9863*x9869))+((r01*x9866))+((r00*x9874)));
evalcond[5]=((((-1.0)*r20*x9866*x9869))+((r21*x9860*x9864))+((r22*x9872))+((r21*x9868))+((r20*x9863))+x9873);
evalcond[6]=(((r12*x9872))+((r11*x9868))+(((-1.0)*x9865))+(((-1.0)*r10*x9866*x9869))+((r10*x9863))+((r11*x9860*x9864))+x9867);
evalcond[7]=((((-1.0)*r12*sj3*x9870))+((r10*x9874))+((r11*x9866))+(((-1.0)*r11*x9863*x9869))+((r10*x9864))+x9873);
evalcond[8]=((((-1.0)*r21*x9863*x9869))+((r20*x9874))+(((-1.0)*x9867))+(((-1.0)*r22*sj3*x9870))+((r21*x9866))+((r20*x9864))+x9865);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9875=gconst2*gconst2;
IkReal x9876=gconst1*gconst1;
IkReal x9877=(gconst1*r00);
IkReal x9878=(r11*sj3);
IkReal x9879=((1.0)*gconst2);
IkReal x9880=(cj3*r12);
IkReal x9881=(cj3*r11);
IkReal x9882=(gconst2*r01);
IkReal x9883=(cj3*r10);
IkReal x9884=(r10*sj3);
CheckValue<IkReal> x9885=IKPowWithIntegerCheck(IKsign((((r00*x9875*x9884))+((r02*r12*sj3))+(((-1.0)*x9877*x9878*x9879))+((r01*x9876*x9878))+(((-1.0)*gconst1*r01*x9879*x9884)))),-1);
if(!x9885.valid){
continue;
}
CheckValue<IkReal> x9886 = IKatan2WithCheck(IkReal((((x9877*x9880))+((x9880*x9882)))),IkReal((((gconst1*x9881*x9882))+((r00*x9876*x9881))+(((-1.0)*x9877*x9879*x9883))+(((-1.0)*r01*x9875*x9883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9885.value)))+(x9886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9887=IKsin(j4);
IkReal x9888=IKcos(j4);
IkReal x9889=(cj2*sj1);
IkReal x9890=(cj1*sj2);
IkReal x9891=(gconst1*sj3);
IkReal x9892=(cj3*gconst1);
IkReal x9893=(sj1*sj2);
IkReal x9894=(cj3*gconst2);
IkReal x9895=(cj1*cj2);
IkReal x9896=(gconst2*sj3);
IkReal x9897=((1.0)*x9888);
IkReal x9898=((1.0)*x9887);
IkReal x9899=(gconst1*x9887);
IkReal x9900=(cj3*x9887);
IkReal x9901=(x9890+x9889);
IkReal x9902=(x9888*x9896);
evalcond[0]=(((r21*x9899))+(((-1.0)*gconst2*r20*x9898))+(((-1.0)*r22*x9897)));
evalcond[1]=((((-1.0)*r12*x9897))+((r11*x9899))+(((-1.0)*gconst2*r10*x9898)));
evalcond[2]=((1.0)+((r01*x9899))+(((-1.0)*gconst2*r00*x9898))+(((-1.0)*r02*x9897)));
evalcond[3]=(((r02*x9900))+((r01*x9896))+(((-1.0)*r00*x9894*x9897))+((r00*x9891))+((r01*x9888*x9892)));
evalcond[4]=(((r01*x9894))+((r00*x9892))+((r00*x9902))+(((-1.0)*r01*x9891*x9897))+(((-1.0)*r02*sj3*x9898)));
evalcond[5]=(((r21*x9888*x9892))+((r22*x9900))+(((-1.0)*r20*x9894*x9897))+((r21*x9896))+((r20*x9891))+x9901);
evalcond[6]=(((r12*x9900))+((r11*x9896))+(((-1.0)*x9893))+(((-1.0)*r10*x9894*x9897))+((r10*x9891))+x9895+((r11*x9888*x9892)));
evalcond[7]=((((-1.0)*r11*x9891*x9897))+((r11*x9894))+x9901+((r10*x9892))+((r10*x9902))+(((-1.0)*r12*sj3*x9898)));
evalcond[8]=(((r20*x9902))+(((-1.0)*r21*x9891*x9897))+((r21*x9894))+(((-1.0)*x9895))+((r20*x9892))+x9893+(((-1.0)*r22*sj3*x9898)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9903 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9903.valid){
continue;
}
CheckValue<IkReal> x9904=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9903.value)+(((1.5707963267949)*(x9904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9905=IKsin(j4);
IkReal x9906=IKcos(j4);
IkReal x9907=(cj2*sj1);
IkReal x9908=(cj1*sj2);
IkReal x9909=(gconst1*sj3);
IkReal x9910=(cj3*gconst1);
IkReal x9911=(sj1*sj2);
IkReal x9912=(cj3*gconst2);
IkReal x9913=(cj1*cj2);
IkReal x9914=(gconst2*sj3);
IkReal x9915=((1.0)*x9906);
IkReal x9916=((1.0)*x9905);
IkReal x9917=(gconst1*x9905);
IkReal x9918=(cj3*x9905);
IkReal x9919=(x9907+x9908);
IkReal x9920=(x9906*x9914);
evalcond[0]=((((-1.0)*gconst2*r20*x9916))+(((-1.0)*r22*x9915))+((r21*x9917)));
evalcond[1]=((((-1.0)*gconst2*r10*x9916))+(((-1.0)*r12*x9915))+((r11*x9917)));
evalcond[2]=((1.0)+((r01*x9917))+(((-1.0)*r02*x9915))+(((-1.0)*gconst2*r00*x9916)));
evalcond[3]=(((r01*x9914))+((r00*x9909))+(((-1.0)*r00*x9912*x9915))+((r01*x9906*x9910))+((r02*x9918)));
evalcond[4]=(((r01*x9912))+((r00*x9910))+(((-1.0)*r01*x9909*x9915))+((r00*x9920))+(((-1.0)*r02*sj3*x9916)));
evalcond[5]=(((r20*x9909))+(((-1.0)*r20*x9912*x9915))+((r22*x9918))+((r21*x9914))+x9919+((r21*x9906*x9910)));
evalcond[6]=(((r12*x9918))+(((-1.0)*x9911))+((r11*x9906*x9910))+((r11*x9914))+x9913+((r10*x9909))+(((-1.0)*r10*x9912*x9915)));
evalcond[7]=(((r10*x9920))+((r11*x9912))+(((-1.0)*r11*x9909*x9915))+x9919+((r10*x9910))+(((-1.0)*r12*sj3*x9916)));
evalcond[8]=((((-1.0)*r22*sj3*x9916))+((r20*x9910))+(((-1.0)*x9913))+(((-1.0)*r21*x9909*x9915))+((r20*x9920))+((r21*x9912))+x9911);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9921=((-1.0)*r20);
IkReal x9922=((-1.0)*px);
CheckValue<IkReal> x9924 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9921),IKFAST_ATAN2_MAGTHRESH);
if(!x9924.valid){
continue;
}
IkReal x9923=((-1.0)*(x9924.value));
sj5=gconst1;
cj5=gconst2;
j5=x9923;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9922);
rxp1_1=(px*r21);
rxp1_2=(r11*x9922);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9923;
IkReal gconst1=r21;
IkReal gconst2=x9921;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9925=((-1.0)*r20);
IkReal x9926=((-1.0)*px);
CheckValue<IkReal> x9928 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9925),IKFAST_ATAN2_MAGTHRESH);
if(!x9928.valid){
continue;
}
IkReal x9927=((-1.0)*(x9928.value));
sj5=gconst1;
cj5=gconst2;
j5=x9927;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9926);
rxp1_1=(px*r21);
rxp1_2=(r11*x9926);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9927;
IkReal gconst1=r21;
IkReal gconst2=x9925;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9929=((-1.0)*r20);
IkReal x9930=((-1.0)*px);
CheckValue<IkReal> x9932 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9929),IKFAST_ATAN2_MAGTHRESH);
if(!x9932.valid){
continue;
}
IkReal x9931=((-1.0)*(x9932.value));
sj5=gconst1;
cj5=gconst2;
j5=x9931;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9930);
rxp1_1=(px*r21);
rxp1_2=(r11*x9930);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9931;
IkReal gconst1=r21;
IkReal gconst2=x9929;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9933=((-1.0)*r20);
IkReal x9934=((-1.0)*px);
CheckValue<IkReal> x9936 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9933),IKFAST_ATAN2_MAGTHRESH);
if(!x9936.valid){
continue;
}
IkReal x9935=((-1.0)*(x9936.value));
sj5=gconst1;
cj5=gconst2;
j5=x9935;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9934);
rxp1_1=(px*r21);
rxp1_2=(r11*x9934);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9935;
IkReal gconst1=r21;
IkReal gconst2=x9933;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9937=((-1.0)*r20);
IkReal x9938=((-1.0)*px);
CheckValue<IkReal> x9940 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9937),IKFAST_ATAN2_MAGTHRESH);
if(!x9940.valid){
continue;
}
IkReal x9939=((-1.0)*(x9940.value));
sj5=gconst1;
cj5=gconst2;
j5=x9939;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9938);
rxp1_1=(px*r21);
rxp1_2=(r11*x9938);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9939;
IkReal gconst1=r21;
IkReal gconst2=x9937;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9941=((-1.0)*r20);
IkReal x9942=((-1.0)*px);
CheckValue<IkReal> x9944 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9941),IKFAST_ATAN2_MAGTHRESH);
if(!x9944.valid){
continue;
}
IkReal x9943=((-1.0)*(x9944.value));
sj5=gconst1;
cj5=gconst2;
j5=x9943;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9942);
rxp1_1=(px*r21);
rxp1_2=(r11*x9942);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9943;
IkReal gconst1=r21;
IkReal gconst2=x9941;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9947=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9947.valid){
continue;
}
IkReal x9945=x9947.value;
IkReal x9946=(sj0*x9945);
cj4array[0]=(((cj1*sj2*x9946))+((cj2*sj1*x9946)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9948=IKsin(j4);
IkReal x9949=IKcos(j4);
IkReal x9950=(gconst1*x9948);
IkReal x9951=((1.0)*x9949);
IkReal x9952=((1.0)*gconst2*x9948);
evalcond[0]=((-1.0)*r02*x9948);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9951)));
evalcond[2]=((((-1.0)*r20*x9952))+((r21*x9950)));
evalcond[3]=(((r11*x9950))+(((-1.0)*r10*x9952)));
evalcond[4]=((((-1.0)*gconst1*r21*x9951))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((gconst2*r20*x9949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9954=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9954.valid){
continue;
}
IkReal x9953=x9954.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9953))+((cj1*cj2*x9953)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9955=IKsin(j4);
IkReal x9956=IKcos(j4);
IkReal x9957=(gconst2*r10);
IkReal x9958=((1.0)*sj0);
IkReal x9959=((1.0)*x9955);
IkReal x9960=(gconst1*x9955);
IkReal x9961=((1.0)*x9956);
evalcond[0]=((-1.0)*r02*x9955);
evalcond[1]=((((-1.0)*r02*x9961))+(((-1.0)*x9958)));
evalcond[2]=((((-1.0)*gconst2*r20*x9959))+((r21*x9960)));
evalcond[3]=((((-1.0)*x9957*x9959))+((r11*x9960)));
evalcond[4]=(((x9956*x9957))+(((-1.0)*gconst1*r11*x9961))+(((-1.0)*cj2*sj1*x9958))+(((-1.0)*cj1*sj2*x9958)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9962=IKPowWithIntegerCheck(r02,-1);
if(!x9962.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9962.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9963=IKsin(j4);
IkReal x9964=IKcos(j4);
IkReal x9965=(gconst2*r10);
IkReal x9966=((1.0)*sj0);
IkReal x9967=(gconst1*r11);
IkReal x9968=(gconst1*r21);
IkReal x9969=(gconst2*r20);
IkReal x9970=((1.0)*x9963);
IkReal x9971=((1.0)*x9964);
evalcond[0]=((-1.0)*r02*x9963);
evalcond[1]=(((x9963*x9968))+(((-1.0)*x9969*x9970)));
evalcond[2]=(((x9963*x9967))+(((-1.0)*x9965*x9970)));
evalcond[3]=(((x9964*x9969))+(((-1.0)*x9968*x9971))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x9967*x9971))+(((-1.0)*cj2*sj1*x9966))+(((-1.0)*cj1*sj2*x9966))+((x9964*x9965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9972=((-1.0)*r20);
IkReal x9973=((-1.0)*px);
CheckValue<IkReal> x9975 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9972),IKFAST_ATAN2_MAGTHRESH);
if(!x9975.valid){
continue;
}
IkReal x9974=((-1.0)*(x9975.value));
sj5=gconst1;
cj5=gconst2;
j5=x9974;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9973);
rxp1_1=(px*r21);
rxp1_2=(r11*x9973);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9974;
IkReal gconst1=r21;
IkReal gconst2=x9972;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9976=((-1.0)*r20);
IkReal x9977=((-1.0)*px);
CheckValue<IkReal> x9979 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9976),IKFAST_ATAN2_MAGTHRESH);
if(!x9979.valid){
continue;
}
IkReal x9978=((-1.0)*(x9979.value));
sj5=gconst1;
cj5=gconst2;
j5=x9978;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9977);
rxp1_1=(px*r21);
rxp1_2=(r11*x9977);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9978;
IkReal gconst1=r21;
IkReal gconst2=x9976;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9980=((-1.0)*r20);
IkReal x9981=((-1.0)*px);
CheckValue<IkReal> x9983 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9980),IKFAST_ATAN2_MAGTHRESH);
if(!x9983.valid){
continue;
}
IkReal x9982=((-1.0)*(x9983.value));
sj5=gconst1;
cj5=gconst2;
j5=x9982;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9981);
rxp1_1=(px*r21);
rxp1_2=(r11*x9981);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9982;
IkReal gconst1=r21;
IkReal gconst2=x9980;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9986=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9986.valid){
continue;
}
IkReal x9984=x9986.value;
IkReal x9985=(sj0*x9984);
cj4array[0]=(((cj1*sj2*x9985))+((cj2*sj1*x9985)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9987=IKsin(j4);
IkReal x9988=IKcos(j4);
IkReal x9989=((1.0)*gconst2);
IkReal x9990=(gconst1*r21);
evalcond[0]=(r02*x9987);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9988)));
evalcond[2]=(((x9987*x9990))+(((-1.0)*r20*x9987*x9989)));
evalcond[3]=(((gconst1*r11*x9987))+(((-1.0)*r10*x9987*x9989)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r20*x9988*x9989))+((x9988*x9990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9992=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9992.valid){
continue;
}
IkReal x9991=x9992.value;
cj4array[0]=(((cj1*cj2*x9991))+(((-1.0)*sj1*sj2*x9991)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9993=IKsin(j4);
IkReal x9994=IKcos(j4);
IkReal x9995=((1.0)*sj0);
IkReal x9996=(gconst1*x9993);
IkReal x9997=((1.0)*x9994);
IkReal x9998=((1.0)*gconst2*x9993);
evalcond[0]=(r02*x9993);
evalcond[1]=((((-1.0)*r02*x9997))+(((-1.0)*x9995)));
evalcond[2]=(((r21*x9996))+(((-1.0)*r20*x9998)));
evalcond[3]=((((-1.0)*r10*x9998))+((r11*x9996)));
evalcond[4]=((((-1.0)*gconst2*r10*x9997))+((gconst1*r11*x9994))+(((-1.0)*cj2*sj1*x9995))+(((-1.0)*cj1*sj2*x9995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9999=IKPowWithIntegerCheck(r02,-1);
if(!x9999.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9999.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10000=IKsin(j4);
IkReal x10001=IKcos(j4);
IkReal x10002=(gconst1*r21);
IkReal x10003=((1.0)*sj0);
IkReal x10004=(gconst1*r11);
IkReal x10005=((1.0)*gconst2*r10);
IkReal x10006=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10000);
evalcond[1]=(((x10000*x10002))+(((-1.0)*x10000*x10006)));
evalcond[2]=(((x10000*x10004))+(((-1.0)*x10000*x10005)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10001*x10002))+(((-1.0)*x10001*x10006)));
evalcond[4]=((((-1.0)*cj2*sj1*x10003))+(((-1.0)*cj1*sj2*x10003))+((x10001*x10004))+(((-1.0)*x10001*x10005)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10008=IKPowWithIntegerCheck(r02,-1);
if(!x10008.valid){
continue;
}
IkReal x10007=x10008.value;
CheckValue<IkReal> x10009=IKPowWithIntegerCheck(cj3,-1);
if(!x10009.valid){
continue;
}
if( IKabs((x10007*(x10009.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10007)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10007*(x10009.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10007))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10007*(x10009.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10007));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10010=IKsin(j4);
IkReal x10011=IKcos(j4);
IkReal x10012=(gconst2*r10);
IkReal x10013=(gconst1*r11);
IkReal x10014=(sj1*sj2);
IkReal x10015=(gconst2*r20);
IkReal x10016=(cj2*sj1);
IkReal x10017=((1.0)*sj0);
IkReal x10018=(gconst1*r20);
IkReal x10019=(gconst2*r11);
IkReal x10020=(gconst1*r21);
IkReal x10021=((1.0)*cj0);
IkReal x10022=(gconst1*r10);
IkReal x10023=(cj1*sj2);
IkReal x10024=(gconst2*r21);
IkReal x10025=(sj3*x10011);
IkReal x10026=((1.0)*cj1*cj2);
IkReal x10027=(cj3*x10011);
IkReal x10028=(r02*x10010);
IkReal x10029=((1.0)*x10010);
evalcond[0]=((((-1.0)*r02*x10011))+(((-1.0)*x10017)));
evalcond[1]=(((x10010*x10020))+(((-1.0)*x10015*x10029)));
evalcond[2]=(cj0+((x10010*x10013))+(((-1.0)*x10012*x10029)));
evalcond[3]=(((cj0*x10014))+(((-1.0)*cj1*cj2*x10021))+((cj3*x10028)));
evalcond[4]=((((-1.0)*sj3*x10028))+(((-1.0)*x10016*x10021))+(((-1.0)*x10021*x10023)));
evalcond[5]=(((x10020*x10027))+((sj3*x10024))+x10023+x10016+((sj3*x10018))+(((-1.0)*x10015*x10027)));
evalcond[6]=((((-1.0)*x10020*x10025))+((cj3*x10018))+x10014+(((-1.0)*x10026))+((cj3*x10024))+((x10015*x10025)));
evalcond[7]=(((x10013*x10027))+(((-1.0)*x10012*x10027))+((sj3*x10022))+(((-1.0)*cj1*cj2*x10017))+((sj3*x10019))+((sj0*x10014)));
evalcond[8]=((((-1.0)*x10017*x10023))+(((-1.0)*x10013*x10025))+((cj3*x10019))+((cj3*x10022))+(((-1.0)*x10016*x10017))+((x10012*x10025)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10030=((1.0)*sj3);
IkReal x10031=((1.0)*gconst2);
CheckValue<IkReal> x10032=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10031))),-1);
if(!x10032.valid){
continue;
}
CheckValue<IkReal> x10033=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10031))),-1);
if(!x10033.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10032.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10033.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10030))+(((-1.0)*gconst2*r21*x10030)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10032.value)))+IKsqr(((x10033.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10030))+(((-1.0)*gconst2*r21*x10030))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10032.value)), ((x10033.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10030))+(((-1.0)*gconst2*r21*x10030))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10034=IKsin(j4);
IkReal x10035=IKcos(j4);
IkReal x10036=(gconst2*r10);
IkReal x10037=(gconst1*r11);
IkReal x10038=(sj1*sj2);
IkReal x10039=(gconst2*r20);
IkReal x10040=(cj2*sj1);
IkReal x10041=((1.0)*sj0);
IkReal x10042=(gconst1*r20);
IkReal x10043=(gconst2*r11);
IkReal x10044=(gconst1*r21);
IkReal x10045=((1.0)*cj0);
IkReal x10046=(gconst1*r10);
IkReal x10047=(cj1*sj2);
IkReal x10048=(gconst2*r21);
IkReal x10049=(sj3*x10035);
IkReal x10050=((1.0)*cj1*cj2);
IkReal x10051=(cj3*x10035);
IkReal x10052=(r02*x10034);
IkReal x10053=((1.0)*x10034);
evalcond[0]=((((-1.0)*r02*x10035))+(((-1.0)*x10041)));
evalcond[1]=((((-1.0)*x10039*x10053))+((x10034*x10044)));
evalcond[2]=(((x10034*x10037))+cj0+(((-1.0)*x10036*x10053)));
evalcond[3]=(((cj0*x10038))+(((-1.0)*cj1*cj2*x10045))+((cj3*x10052)));
evalcond[4]=((((-1.0)*x10045*x10047))+(((-1.0)*sj3*x10052))+(((-1.0)*x10040*x10045)));
evalcond[5]=(((x10044*x10051))+((sj3*x10048))+((sj3*x10042))+x10040+x10047+(((-1.0)*x10039*x10051)));
evalcond[6]=((((-1.0)*x10050))+((x10039*x10049))+x10038+((cj3*x10048))+((cj3*x10042))+(((-1.0)*x10044*x10049)));
evalcond[7]=(((sj0*x10038))+((x10037*x10051))+((sj3*x10046))+((sj3*x10043))+(((-1.0)*cj1*cj2*x10041))+(((-1.0)*x10036*x10051)));
evalcond[8]=((((-1.0)*x10041*x10047))+(((-1.0)*x10037*x10049))+((x10036*x10049))+((cj3*x10043))+((cj3*x10046))+(((-1.0)*x10040*x10041)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10054=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10054.valid){
continue;
}
CheckValue<IkReal> x10055=IKPowWithIntegerCheck(r02,-1);
if(!x10055.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10054.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10055.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10054.value)))+IKsqr(((-1.0)*sj0*(x10055.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10054.value)), ((-1.0)*sj0*(x10055.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10056=IKsin(j4);
IkReal x10057=IKcos(j4);
IkReal x10058=(gconst2*r10);
IkReal x10059=(gconst1*r11);
IkReal x10060=(sj1*sj2);
IkReal x10061=(gconst2*r20);
IkReal x10062=(cj2*sj1);
IkReal x10063=((1.0)*sj0);
IkReal x10064=(gconst1*r20);
IkReal x10065=(gconst2*r11);
IkReal x10066=(gconst1*r21);
IkReal x10067=((1.0)*cj0);
IkReal x10068=(gconst1*r10);
IkReal x10069=(cj1*sj2);
IkReal x10070=(gconst2*r21);
IkReal x10071=(sj3*x10057);
IkReal x10072=((1.0)*cj1*cj2);
IkReal x10073=(cj3*x10057);
IkReal x10074=(r02*x10056);
IkReal x10075=((1.0)*x10056);
evalcond[0]=((((-1.0)*x10063))+(((-1.0)*r02*x10057)));
evalcond[1]=((((-1.0)*x10061*x10075))+((x10056*x10066)));
evalcond[2]=(cj0+((x10056*x10059))+(((-1.0)*x10058*x10075)));
evalcond[3]=((((-1.0)*cj1*cj2*x10067))+((cj0*x10060))+((cj3*x10074)));
evalcond[4]=((((-1.0)*x10067*x10069))+(((-1.0)*x10062*x10067))+(((-1.0)*sj3*x10074)));
evalcond[5]=(((sj3*x10064))+((sj3*x10070))+((x10066*x10073))+(((-1.0)*x10061*x10073))+x10062+x10069);
evalcond[6]=((((-1.0)*x10072))+x10060+((x10061*x10071))+(((-1.0)*x10066*x10071))+((cj3*x10064))+((cj3*x10070)));
evalcond[7]=((((-1.0)*x10058*x10073))+((sj3*x10065))+((sj3*x10068))+(((-1.0)*cj1*cj2*x10063))+((sj0*x10060))+((x10059*x10073)));
evalcond[8]=((((-1.0)*x10062*x10063))+((x10058*x10071))+((cj3*x10065))+((cj3*x10068))+(((-1.0)*x10059*x10071))+(((-1.0)*x10063*x10069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10076=gconst1*gconst1;
IkReal x10077=r21*r21;
IkReal x10078=gconst2*gconst2;
IkReal x10079=r20*r20;
IkReal x10080=(gconst2*r20);
IkReal x10081=(cj1*cj2);
IkReal x10082=(sj1*sj2);
IkReal x10083=(gconst1*r21);
IkReal x10084=(cj3*gconst2);
IkReal x10085=(cj3*r20);
CheckValue<IkReal> x10086=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10078*x10079))+(((-2.0)*sj3*x10080*x10083))+((sj3*x10076*x10077)))),-1);
if(!x10086.valid){
continue;
}
CheckValue<IkReal> x10087 = IKatan2WithCheck(IkReal((((gconst1*r22*x10085))+((r21*r22*x10084))+(((-1.0)*r22*x10081))+((r22*x10082)))),IkReal(((((-1.0)*x10080*x10082))+((r21*x10076*x10085))+(((-1.0)*r21*x10078*x10085))+((x10082*x10083))+((x10080*x10081))+(((-1.0)*gconst1*x10079*x10084))+(((-1.0)*x10081*x10083))+((gconst1*x10077*x10084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10086.value)))+(x10087.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10088=IKsin(j4);
IkReal x10089=IKcos(j4);
IkReal x10090=(cj3*gconst1);
IkReal x10091=(gconst1*r01);
IkReal x10092=(gconst1*r11);
IkReal x10093=(sj1*sj2);
IkReal x10094=(cj3*gconst2);
IkReal x10095=(gconst1*sj3);
IkReal x10096=(gconst2*sj3);
IkReal x10097=((1.0)*sj0);
IkReal x10098=(cj1*sj2);
IkReal x10099=((1.0)*x10089);
IkReal x10100=((1.0)*x10088);
IkReal x10101=((1.0)*cj1*cj2);
IkReal x10102=(cj3*x10088);
IkReal x10103=((1.0)*cj2*sj1);
IkReal x10104=(x10089*x10096);
evalcond[0]=((((-1.0)*gconst2*r20*x10100))+((gconst1*r21*x10088))+(((-1.0)*r22*x10099)));
evalcond[1]=(cj0+(((-1.0)*r12*x10099))+(((-1.0)*gconst2*r10*x10100))+((x10088*x10092)));
evalcond[2]=((((-1.0)*r02*x10099))+(((-1.0)*gconst2*r00*x10100))+((x10088*x10091))+(((-1.0)*x10097)));
evalcond[3]=(((cj2*sj1))+((r21*x10089*x10090))+x10098+((r21*x10096))+(((-1.0)*r20*x10094*x10099))+((r20*x10095))+((r22*x10102)));
evalcond[4]=(((r20*x10104))+(((-1.0)*r21*x10095*x10099))+x10093+((r21*x10094))+(((-1.0)*r22*sj3*x10100))+((r20*x10090))+(((-1.0)*x10101)));
evalcond[5]=(((r01*x10089*x10090))+(((-1.0)*cj0*x10101))+((cj0*x10093))+((r02*x10102))+(((-1.0)*r00*x10094*x10099))+((r01*x10096))+((r00*x10095)));
evalcond[6]=(((r11*x10096))+((r11*x10089*x10090))+(((-1.0)*r10*x10094*x10099))+((sj0*x10093))+((r10*x10095))+((r12*x10102))+(((-1.0)*cj1*cj2*x10097)));
evalcond[7]=(((r00*x10104))+(((-1.0)*cj0*x10103))+(((-1.0)*r02*sj3*x10100))+(((-1.0)*sj3*x10091*x10099))+(((-1.0)*cj0*x10098))+((r01*x10094))+((r00*x10090)));
evalcond[8]=((((-1.0)*r12*sj3*x10100))+((r11*x10094))+(((-1.0)*cj2*sj1*x10097))+(((-1.0)*x10097*x10098))+((r10*x10104))+((r10*x10090))+(((-1.0)*sj3*x10092*x10099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10105=((1.0)*gconst2);
CheckValue<IkReal> x10106=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10105))+(((-1.0)*gconst1*r10)))),-1);
if(!x10106.valid){
continue;
}
CheckValue<IkReal> x10107 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10105))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10107.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10106.value)))+(x10107.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10108=IKsin(j4);
IkReal x10109=IKcos(j4);
IkReal x10110=(cj3*gconst1);
IkReal x10111=(gconst1*r01);
IkReal x10112=(gconst1*r11);
IkReal x10113=(sj1*sj2);
IkReal x10114=(cj3*gconst2);
IkReal x10115=(gconst1*sj3);
IkReal x10116=(gconst2*sj3);
IkReal x10117=((1.0)*sj0);
IkReal x10118=(cj1*sj2);
IkReal x10119=((1.0)*x10109);
IkReal x10120=((1.0)*x10108);
IkReal x10121=((1.0)*cj1*cj2);
IkReal x10122=(cj3*x10108);
IkReal x10123=((1.0)*cj2*sj1);
IkReal x10124=(x10109*x10116);
evalcond[0]=((((-1.0)*r22*x10119))+((gconst1*r21*x10108))+(((-1.0)*gconst2*r20*x10120)));
evalcond[1]=((((-1.0)*r12*x10119))+cj0+((x10108*x10112))+(((-1.0)*gconst2*r10*x10120)));
evalcond[2]=((((-1.0)*gconst2*r00*x10120))+((x10108*x10111))+(((-1.0)*r02*x10119))+(((-1.0)*x10117)));
evalcond[3]=(((r21*x10116))+((cj2*sj1))+((r20*x10115))+x10118+((r21*x10109*x10110))+((r22*x10122))+(((-1.0)*r20*x10114*x10119)));
evalcond[4]=(((r21*x10114))+(((-1.0)*r21*x10115*x10119))+((r20*x10124))+((r20*x10110))+(((-1.0)*r22*sj3*x10120))+x10113+(((-1.0)*x10121)));
evalcond[5]=(((r01*x10116))+((cj0*x10113))+((r00*x10115))+(((-1.0)*r00*x10114*x10119))+((r02*x10122))+((r01*x10109*x10110))+(((-1.0)*cj0*x10121)));
evalcond[6]=(((r11*x10109*x10110))+(((-1.0)*cj1*cj2*x10117))+((r11*x10116))+(((-1.0)*r10*x10114*x10119))+((sj0*x10113))+((r10*x10115))+((r12*x10122)));
evalcond[7]=(((r01*x10114))+((r00*x10110))+(((-1.0)*sj3*x10111*x10119))+((r00*x10124))+(((-1.0)*cj0*x10123))+(((-1.0)*cj0*x10118))+(((-1.0)*r02*sj3*x10120)));
evalcond[8]=((((-1.0)*sj3*x10112*x10119))+(((-1.0)*x10117*x10118))+((r10*x10124))+(((-1.0)*cj2*sj1*x10117))+((r11*x10114))+(((-1.0)*r12*sj3*x10120))+((r10*x10110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10125=((1.0)*gconst2);
CheckValue<IkReal> x10126 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x10125))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10126.valid){
continue;
}
CheckValue<IkReal> x10127=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10125)))),-1);
if(!x10127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10126.value)+(((1.5707963267949)*(x10127.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10128=IKsin(j4);
IkReal x10129=IKcos(j4);
IkReal x10130=(cj3*gconst1);
IkReal x10131=(gconst1*r01);
IkReal x10132=(gconst1*r11);
IkReal x10133=(sj1*sj2);
IkReal x10134=(cj3*gconst2);
IkReal x10135=(gconst1*sj3);
IkReal x10136=(gconst2*sj3);
IkReal x10137=((1.0)*sj0);
IkReal x10138=(cj1*sj2);
IkReal x10139=((1.0)*x10129);
IkReal x10140=((1.0)*x10128);
IkReal x10141=((1.0)*cj1*cj2);
IkReal x10142=(cj3*x10128);
IkReal x10143=((1.0)*cj2*sj1);
IkReal x10144=(x10129*x10136);
evalcond[0]=(((gconst1*r21*x10128))+(((-1.0)*gconst2*r20*x10140))+(((-1.0)*r22*x10139)));
evalcond[1]=(cj0+((x10128*x10132))+(((-1.0)*r12*x10139))+(((-1.0)*gconst2*r10*x10140)));
evalcond[2]=((((-1.0)*r02*x10139))+((x10128*x10131))+(((-1.0)*x10137))+(((-1.0)*gconst2*r00*x10140)));
evalcond[3]=(((cj2*sj1))+((r20*x10135))+((r21*x10136))+((r21*x10129*x10130))+x10138+((r22*x10142))+(((-1.0)*r20*x10134*x10139)));
evalcond[4]=(((r20*x10130))+((r21*x10134))+x10133+(((-1.0)*r22*sj3*x10140))+(((-1.0)*x10141))+(((-1.0)*r21*x10135*x10139))+((r20*x10144)));
evalcond[5]=(((r02*x10142))+((cj0*x10133))+((r01*x10136))+((r00*x10135))+((r01*x10129*x10130))+(((-1.0)*r00*x10134*x10139))+(((-1.0)*cj0*x10141)));
evalcond[6]=(((r11*x10136))+((r12*x10142))+((r11*x10129*x10130))+((r10*x10135))+(((-1.0)*r10*x10134*x10139))+((sj0*x10133))+(((-1.0)*cj1*cj2*x10137)));
evalcond[7]=((((-1.0)*r02*sj3*x10140))+(((-1.0)*cj0*x10138))+(((-1.0)*sj3*x10131*x10139))+((r01*x10134))+((r00*x10130))+((r00*x10144))+(((-1.0)*cj0*x10143)));
evalcond[8]=(((r11*x10134))+((r10*x10130))+(((-1.0)*sj3*x10132*x10139))+((r10*x10144))+(((-1.0)*cj2*sj1*x10137))+(((-1.0)*r12*sj3*x10140))+(((-1.0)*x10137*x10138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10145=((-1.0)*r21);
IkReal x10147 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10147)==0){
continue;
}
IkReal x10146=pow(x10147,-0.5);
CheckValue<IkReal> x10148 = IKatan2WithCheck(IkReal(x10145),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10148.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10148.value))));
IkReal gconst4=(x10145*x10146);
IkReal gconst5=((1.0)*r20*x10146);
CheckValue<IkReal> x10149 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10149.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10149.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10150=((-1.0)*r21);
CheckValue<IkReal> x10153 = IKatan2WithCheck(IkReal(x10150),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10153.valid){
continue;
}
IkReal x10151=((1.0)*(x10153.value));
IkReal x10152=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10151)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10151)));
IkReal gconst4=(x10150*x10152);
IkReal gconst5=((1.0)*r20*x10152);
IkReal x10154=r22*r22;
IkReal x10155=((1.0)*x10154);
CheckValue<IkReal> x10159=IKPowWithIntegerCheck(((-1.0)+x10154),-1);
if(!x10159.valid){
continue;
}
IkReal x10156=x10159.value;
if((((1.0)+(((-1.0)*x10155)))) < -0.00001)
continue;
IkReal x10157=IKsqrt(((1.0)+(((-1.0)*x10155))));
IkReal x10158=(cj0*x10156*x10157);
j4eval[0]=((IKabs((x10158+(((-1.0)*x10155*x10158)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10160=((-1.0)*r21);
CheckValue<IkReal> x10163 = IKatan2WithCheck(IkReal(x10160),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10163.valid){
continue;
}
IkReal x10161=((1.0)*(x10163.value));
IkReal x10162=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10161)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10161)));
IkReal gconst4=(x10160*x10162);
IkReal gconst5=((1.0)*r20*x10162);
IkReal x10164=r22*r22;
IkReal x10165=((1.0)*x10164);
CheckValue<IkReal> x10169=IKPowWithIntegerCheck(((-1.0)+x10164),-1);
if(!x10169.valid){
continue;
}
IkReal x10166=x10169.value;
if((((1.0)+(((-1.0)*x10165)))) < -0.00001)
continue;
IkReal x10167=IKsqrt(((1.0)+(((-1.0)*x10165))));
IkReal x10168=(sj0*x10166*x10167);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x10168+(((-1.0)*x10165*x10168))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10170=((-1.0)*r21);
CheckValue<IkReal> x10173 = IKatan2WithCheck(IkReal(x10170),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10173.valid){
continue;
}
IkReal x10171=((1.0)*(x10173.value));
IkReal x10172=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10171)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10171)));
IkReal gconst4=(x10170*x10172);
IkReal gconst5=((1.0)*r20*x10172);
IkReal x10174=r22*r22;
IkReal x10175=(r12*sj0);
IkReal x10176=(cj0*r02);
CheckValue<IkReal> x10180=IKPowWithIntegerCheck(((-1.0)+x10174),-1);
if(!x10180.valid){
continue;
}
IkReal x10177=x10180.value;
if((((1.0)+(((-1.0)*x10174)))) < -0.00001)
continue;
IkReal x10178=IKsqrt(((1.0)+(((-1.0)*x10174))));
IkReal x10179=(r22*x10177*x10178);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10176*x10179))+((x10175*x10179)))))+(IKabs(((((-1.0)*x10175))+(((-1.0)*x10176))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10181=((-1.0)*r21);
CheckValue<IkReal> x10184 = IKatan2WithCheck(IkReal(x10181),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10184.valid){
continue;
}
IkReal x10182=((1.0)*(x10184.value));
IkReal x10183=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10182)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10182)));
IkReal gconst4=(x10181*x10183);
IkReal gconst5=((1.0)*r20*x10183);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10185=((-1.0)*r21);
CheckValue<IkReal> x10188 = IKatan2WithCheck(IkReal(x10185),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10188.valid){
continue;
}
IkReal x10186=((1.0)*(x10188.value));
IkReal x10187=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10186)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10186)));
IkReal gconst4=(x10185*x10187);
IkReal gconst5=((1.0)*r20*x10187);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10189=((-1.0)*r21);
CheckValue<IkReal> x10192 = IKatan2WithCheck(IkReal(x10189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10192.valid){
continue;
}
IkReal x10190=((1.0)*(x10192.value));
IkReal x10191=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10190)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10190)));
IkReal gconst4=(x10189*x10191);
IkReal gconst5=((1.0)*r20*x10191);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10193=((-1.0)*r21);
CheckValue<IkReal> x10196 = IKatan2WithCheck(IkReal(x10193),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10196.valid){
continue;
}
IkReal x10194=((1.0)*(x10196.value));
IkReal x10195=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10194)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10194)));
IkReal gconst4=(x10193*x10195);
IkReal gconst5=((1.0)*r20*x10195);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10197=((-1.0)*r21);
CheckValue<IkReal> x10200 = IKatan2WithCheck(IkReal(x10197),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10200.valid){
continue;
}
IkReal x10198=((1.0)*(x10200.value));
IkReal x10199=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10198)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10198)));
IkReal gconst4=(x10197*x10199);
IkReal gconst5=((1.0)*r20*x10199);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10201=((-1.0)*r21);
CheckValue<IkReal> x10204 = IKatan2WithCheck(IkReal(x10201),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10204.valid){
continue;
}
IkReal x10202=((1.0)*(x10204.value));
IkReal x10203=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10202)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10202)));
IkReal gconst4=(x10201*x10203);
IkReal gconst5=((1.0)*r20*x10203);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10205=(gconst5*r10);
IkReal x10206=(gconst4*r11);
CheckValue<IkReal> x10207=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10206*x10206)+(x10205*x10205)+(((-2.0)*x10205*x10206)))),-1);
if(!x10207.valid){
continue;
}
CheckValue<IkReal> x10208 = IKatan2WithCheck(IkReal(((((-1.0)*x10206))+x10205)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10208.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10207.value)))+(x10208.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10209=IKsin(j4);
IkReal x10210=IKcos(j4);
IkReal x10211=(gconst4*r11);
IkReal x10212=((1.0)*cj1);
IkReal x10213=(gconst5*r10);
IkReal x10214=(gconst4*r01);
IkReal x10215=(gconst5*r00);
IkReal x10216=(gconst4*r21);
IkReal x10217=(gconst5*r20);
IkReal x10218=((1.0)*x10210);
IkReal x10219=((1.0)*x10209);
evalcond[0]=((((-1.0)*r22*x10218))+(((-1.0)*x10217*x10219))+((x10209*x10216)));
evalcond[1]=((((-1.0)*x10215*x10219))+((x10209*x10214))+(((-1.0)*r02*x10218)));
evalcond[2]=((((-1.0)*x10211*x10218))+(((-1.0)*r12*x10219))+((x10210*x10213)));
evalcond[3]=((1.0)+(((-1.0)*x10213*x10219))+(((-1.0)*r12*x10218))+((x10209*x10211)));
evalcond[4]=((((-1.0)*r22*x10219))+((sj1*sj2))+(((-1.0)*x10216*x10218))+(((-1.0)*cj2*x10212))+((x10210*x10217)));
evalcond[5]=((((-1.0)*sj2*x10212))+(((-1.0)*x10214*x10218))+(((-1.0)*cj2*sj1))+((x10210*x10215))+(((-1.0)*r02*x10219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10220=((1.0)*gconst5);
CheckValue<IkReal> x10221=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10220)))),-1);
if(!x10221.valid){
continue;
}
CheckValue<IkReal> x10222 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10220))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10222.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10221.value)))+(x10222.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10223=IKsin(j4);
IkReal x10224=IKcos(j4);
IkReal x10225=(gconst4*r11);
IkReal x10226=((1.0)*cj1);
IkReal x10227=(gconst5*r10);
IkReal x10228=(gconst4*r01);
IkReal x10229=(gconst5*r00);
IkReal x10230=(gconst4*r21);
IkReal x10231=(gconst5*r20);
IkReal x10232=((1.0)*x10224);
IkReal x10233=((1.0)*x10223);
evalcond[0]=(((x10223*x10230))+(((-1.0)*r22*x10232))+(((-1.0)*x10231*x10233)));
evalcond[1]=(((x10223*x10228))+(((-1.0)*x10229*x10233))+(((-1.0)*r02*x10232)));
evalcond[2]=((((-1.0)*x10225*x10232))+((x10224*x10227))+(((-1.0)*r12*x10233)));
evalcond[3]=((1.0)+((x10223*x10225))+(((-1.0)*x10227*x10233))+(((-1.0)*r12*x10232)));
evalcond[4]=((((-1.0)*x10230*x10232))+(((-1.0)*cj2*x10226))+((sj1*sj2))+(((-1.0)*r22*x10233))+((x10224*x10231)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10224*x10229))+(((-1.0)*sj2*x10226))+(((-1.0)*x10228*x10232))+(((-1.0)*r02*x10233)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10234 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10234.valid){
continue;
}
CheckValue<IkReal> x10235=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10234.value)+(((1.5707963267949)*(x10235.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10236=IKsin(j4);
IkReal x10237=IKcos(j4);
IkReal x10238=(gconst4*r11);
IkReal x10239=((1.0)*cj1);
IkReal x10240=(gconst5*r10);
IkReal x10241=(gconst4*r01);
IkReal x10242=(gconst5*r00);
IkReal x10243=(gconst4*r21);
IkReal x10244=(gconst5*r20);
IkReal x10245=((1.0)*x10237);
IkReal x10246=((1.0)*x10236);
evalcond[0]=(((x10236*x10243))+(((-1.0)*r22*x10245))+(((-1.0)*x10244*x10246)));
evalcond[1]=(((x10236*x10241))+(((-1.0)*x10242*x10246))+(((-1.0)*r02*x10245)));
evalcond[2]=(((x10237*x10240))+(((-1.0)*x10238*x10245))+(((-1.0)*r12*x10246)));
evalcond[3]=((1.0)+(((-1.0)*x10240*x10246))+(((-1.0)*r12*x10245))+((x10236*x10238)));
evalcond[4]=(((x10237*x10244))+((sj1*sj2))+(((-1.0)*cj2*x10239))+(((-1.0)*r22*x10246))+(((-1.0)*x10243*x10245)));
evalcond[5]=((((-1.0)*x10241*x10245))+((x10237*x10242))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10239))+(((-1.0)*r02*x10246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10247=((-1.0)*r21);
CheckValue<IkReal> x10250 = IKatan2WithCheck(IkReal(x10247),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10250.valid){
continue;
}
IkReal x10248=((1.0)*(x10250.value));
IkReal x10249=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10248)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10248)));
IkReal gconst4=(x10247*x10249);
IkReal gconst5=((1.0)*r20*x10249);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10251=((-1.0)*r21);
CheckValue<IkReal> x10254 = IKatan2WithCheck(IkReal(x10251),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10254.valid){
continue;
}
IkReal x10252=((1.0)*(x10254.value));
IkReal x10253=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10252)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10252)));
IkReal gconst4=(x10251*x10253);
IkReal gconst5=((1.0)*r20*x10253);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10255=((-1.0)*r21);
CheckValue<IkReal> x10258 = IKatan2WithCheck(IkReal(x10255),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10258.valid){
continue;
}
IkReal x10256=((1.0)*(x10258.value));
IkReal x10257=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10256)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10256)));
IkReal gconst4=(x10255*x10257);
IkReal gconst5=((1.0)*r20*x10257);
IkReal x10259=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10263=IKPowWithIntegerCheck(x10259,-1);
if(!x10263.valid){
continue;
}
IkReal x10260=x10263.value;
IkReal x10261=((1.0)*x10260);
IkReal x10262=((((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10260))+(((-1.0)*x10261*(r11*r11)*(r21*r21)))+(((-1.0)*x10261*(r10*r10)*(r20*r20))));
j4eval[0]=x10262;
j4eval[1]=r12;
j4eval[2]=x10259;
j4eval[3]=IKsign(x10262);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10264=(gconst5*r10);
IkReal x10265=(gconst4*r11);
CheckValue<IkReal> x10266=IKPowWithIntegerCheck(IKsign(((((2.0)*x10264*x10265))+(((-1.0)*(x10264*x10264)))+(((-1.0)*(x10265*x10265)))+(((-1.0)*(r12*r12))))),-1);
if(!x10266.valid){
continue;
}
CheckValue<IkReal> x10267 = IKatan2WithCheck(IkReal(((((-1.0)*x10264))+x10265)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10266.value)))+(x10267.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10268=IKcos(j4);
IkReal x10269=IKsin(j4);
IkReal x10270=(gconst4*r11);
IkReal x10271=(gconst5*r10);
IkReal x10272=((1.0)*cj1);
IkReal x10273=(gconst5*r00);
IkReal x10274=(gconst5*r20);
IkReal x10275=((1.0)*x10268);
IkReal x10276=(gconst4*x10268);
IkReal x10277=((1.0)*x10269);
IkReal x10278=(gconst4*x10269);
evalcond[0]=(((r12*x10269))+((x10268*x10270))+(((-1.0)*x10271*x10275)));
evalcond[1]=((((-1.0)*x10274*x10277))+(((-1.0)*r22*x10275))+((r21*x10278)));
evalcond[2]=(((r01*x10278))+(((-1.0)*x10273*x10277))+(((-1.0)*r02*x10275)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10275))+(((-1.0)*x10271*x10277))+((x10269*x10270)));
evalcond[4]=(((r22*x10269))+(((-1.0)*x10274*x10275))+((sj1*sj2))+((r21*x10276))+(((-1.0)*cj2*x10272)));
evalcond[5]=(((r02*x10269))+((r01*x10276))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10272))+(((-1.0)*x10273*x10275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10279=((1.0)*gconst5);
CheckValue<IkReal> x10280 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10279)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10280.valid){
continue;
}
CheckValue<IkReal> x10281=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10279)))),-1);
if(!x10281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10280.value)+(((1.5707963267949)*(x10281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10282=IKcos(j4);
IkReal x10283=IKsin(j4);
IkReal x10284=(gconst4*r11);
IkReal x10285=(gconst5*r10);
IkReal x10286=((1.0)*cj1);
IkReal x10287=(gconst5*r00);
IkReal x10288=(gconst5*r20);
IkReal x10289=((1.0)*x10282);
IkReal x10290=(gconst4*x10282);
IkReal x10291=((1.0)*x10283);
IkReal x10292=(gconst4*x10283);
evalcond[0]=(((r12*x10283))+(((-1.0)*x10285*x10289))+((x10282*x10284)));
evalcond[1]=((((-1.0)*r22*x10289))+((r21*x10292))+(((-1.0)*x10288*x10291)));
evalcond[2]=((((-1.0)*r02*x10289))+((r01*x10292))+(((-1.0)*x10287*x10291)));
evalcond[3]=((1.0)+((x10283*x10284))+(((-1.0)*r12*x10289))+(((-1.0)*x10285*x10291)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10288*x10289))+((r22*x10283))+((r21*x10290))+(((-1.0)*cj2*x10286)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r02*x10283))+(((-1.0)*x10287*x10289))+((r01*x10290))+(((-1.0)*sj2*x10286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10293 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10293.valid){
continue;
}
CheckValue<IkReal> x10294=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10293.value)+(((1.5707963267949)*(x10294.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10295=IKcos(j4);
IkReal x10296=IKsin(j4);
IkReal x10297=(gconst4*r11);
IkReal x10298=(gconst5*r10);
IkReal x10299=((1.0)*cj1);
IkReal x10300=(gconst5*r00);
IkReal x10301=(gconst5*r20);
IkReal x10302=((1.0)*x10295);
IkReal x10303=(gconst4*x10295);
IkReal x10304=((1.0)*x10296);
IkReal x10305=(gconst4*x10296);
evalcond[0]=(((r12*x10296))+(((-1.0)*x10298*x10302))+((x10295*x10297)));
evalcond[1]=((((-1.0)*x10301*x10304))+(((-1.0)*r22*x10302))+((r21*x10305)));
evalcond[2]=((((-1.0)*r02*x10302))+(((-1.0)*x10300*x10304))+((r01*x10305)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10302))+((x10296*x10297))+(((-1.0)*x10298*x10304)));
evalcond[4]=((((-1.0)*x10301*x10302))+((sj1*sj2))+((r21*x10303))+((r22*x10296))+(((-1.0)*cj2*x10299)));
evalcond[5]=((((-1.0)*sj2*x10299))+(((-1.0)*x10300*x10302))+(((-1.0)*cj2*sj1))+((r01*x10303))+((r02*x10296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10306=((-1.0)*r21);
CheckValue<IkReal> x10309 = IKatan2WithCheck(IkReal(x10306),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10309.valid){
continue;
}
IkReal x10307=((1.0)*(x10309.value));
IkReal x10308=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10307)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10307)));
IkReal gconst4=(x10306*x10308);
IkReal gconst5=((1.0)*r20*x10308);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10310=((-1.0)*r21);
CheckValue<IkReal> x10313 = IKatan2WithCheck(IkReal(x10310),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10313.valid){
continue;
}
IkReal x10311=((1.0)*(x10313.value));
IkReal x10312=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10311)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10311)));
IkReal gconst4=(x10310*x10312);
IkReal gconst5=((1.0)*r20*x10312);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10314=((-1.0)*r21);
CheckValue<IkReal> x10317 = IKatan2WithCheck(IkReal(x10314),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10317.valid){
continue;
}
IkReal x10315=((1.0)*(x10317.value));
IkReal x10316=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10315)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10315)));
IkReal gconst4=(x10314*x10316);
IkReal gconst5=((1.0)*r20*x10316);
IkReal x10318=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10322=IKPowWithIntegerCheck(x10318,-1);
if(!x10322.valid){
continue;
}
IkReal x10319=x10322.value;
IkReal x10320=((1.0)*x10319);
IkReal x10321=((((-1.0)*x10320*(r11*r11)*(r21*r21)))+(((-1.0)*x10320*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10319))+(((-1.0)*(r12*r12))));
j4eval[0]=x10321;
j4eval[1]=r12;
j4eval[2]=x10318;
j4eval[3]=IKsign(x10321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10323=(gconst5*r10);
IkReal x10324=(gconst4*r11);
CheckValue<IkReal> x10325 = IKatan2WithCheck(IkReal(((((-1.0)*x10323))+x10324)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10325.valid){
continue;
}
CheckValue<IkReal> x10326=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10324*x10324)))+(((-1.0)*(r12*r12)))+(((2.0)*x10323*x10324))+(((-1.0)*(x10323*x10323))))),-1);
if(!x10326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10325.value)+(((1.5707963267949)*(x10326.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10327=IKcos(j4);
IkReal x10328=IKsin(j4);
IkReal x10329=(gconst4*r11);
IkReal x10330=(gconst5*r10);
IkReal x10331=(gconst5*r00);
IkReal x10332=(gconst5*r20);
IkReal x10333=((1.0)*x10327);
IkReal x10334=(gconst4*x10327);
IkReal x10335=((1.0)*x10328);
IkReal x10336=(gconst4*x10328);
evalcond[0]=(((x10327*x10329))+(((-1.0)*x10330*x10333))+((r12*x10328)));
evalcond[1]=((((-1.0)*r22*x10333))+((r21*x10336))+(((-1.0)*x10332*x10335)));
evalcond[2]=(((r01*x10336))+(((-1.0)*x10331*x10335))+(((-1.0)*r02*x10333)));
evalcond[3]=((1.0)+((x10328*x10329))+(((-1.0)*r12*x10333))+(((-1.0)*x10330*x10335)));
evalcond[4]=(((cj2*sj1))+((r22*x10328))+((cj1*sj2))+((r21*x10334))+(((-1.0)*x10332*x10333)));
evalcond[5]=(((r02*x10328))+((r01*x10334))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10331*x10333)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10337=((1.0)*gconst5);
CheckValue<IkReal> x10338=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10337)))),-1);
if(!x10338.valid){
continue;
}
CheckValue<IkReal> x10339 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10337)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10338.value)))+(x10339.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10340=IKcos(j4);
IkReal x10341=IKsin(j4);
IkReal x10342=(gconst4*r11);
IkReal x10343=(gconst5*r10);
IkReal x10344=(gconst5*r00);
IkReal x10345=(gconst5*r20);
IkReal x10346=((1.0)*x10340);
IkReal x10347=(gconst4*x10340);
IkReal x10348=((1.0)*x10341);
IkReal x10349=(gconst4*x10341);
evalcond[0]=((((-1.0)*x10343*x10346))+((r12*x10341))+((x10340*x10342)));
evalcond[1]=(((r21*x10349))+(((-1.0)*r22*x10346))+(((-1.0)*x10345*x10348)));
evalcond[2]=(((r01*x10349))+(((-1.0)*x10344*x10348))+(((-1.0)*r02*x10346)));
evalcond[3]=((1.0)+((x10341*x10342))+(((-1.0)*x10343*x10348))+(((-1.0)*r12*x10346)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10341))+((r21*x10347))+(((-1.0)*x10345*x10346)));
evalcond[5]=(((r01*x10347))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10344*x10346))+((r02*x10341)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10350 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10350.valid){
continue;
}
CheckValue<IkReal> x10351=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10350.value)+(((1.5707963267949)*(x10351.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10352=IKcos(j4);
IkReal x10353=IKsin(j4);
IkReal x10354=(gconst4*r11);
IkReal x10355=(gconst5*r10);
IkReal x10356=(gconst5*r00);
IkReal x10357=(gconst5*r20);
IkReal x10358=((1.0)*x10352);
IkReal x10359=(gconst4*x10352);
IkReal x10360=((1.0)*x10353);
IkReal x10361=(gconst4*x10353);
evalcond[0]=(((x10352*x10354))+(((-1.0)*x10355*x10358))+((r12*x10353)));
evalcond[1]=(((r21*x10361))+(((-1.0)*x10357*x10360))+(((-1.0)*r22*x10358)));
evalcond[2]=(((r01*x10361))+(((-1.0)*x10356*x10360))+(((-1.0)*r02*x10358)));
evalcond[3]=((1.0)+(((-1.0)*x10355*x10360))+((x10353*x10354))+(((-1.0)*r12*x10358)));
evalcond[4]=(((r21*x10359))+((cj2*sj1))+(((-1.0)*x10357*x10358))+((cj1*sj2))+((r22*x10353)));
evalcond[5]=((((-1.0)*x10356*x10358))+((r01*x10359))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10353)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10362=((-1.0)*r21);
CheckValue<IkReal> x10365 = IKatan2WithCheck(IkReal(x10362),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10365.valid){
continue;
}
IkReal x10363=((1.0)*(x10365.value));
IkReal x10364=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10363)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10363)));
IkReal gconst4=(x10362*x10364);
IkReal gconst5=((1.0)*r20*x10364);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10366=((-1.0)*r21);
CheckValue<IkReal> x10369 = IKatan2WithCheck(IkReal(x10366),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10369.valid){
continue;
}
IkReal x10367=((1.0)*(x10369.value));
IkReal x10368=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10367)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10367)));
IkReal gconst4=(x10366*x10368);
IkReal gconst5=((1.0)*r20*x10368);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10370=((-1.0)*r21);
CheckValue<IkReal> x10373 = IKatan2WithCheck(IkReal(x10370),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10373.valid){
continue;
}
IkReal x10371=((1.0)*(x10373.value));
IkReal x10372=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10371)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10371)));
IkReal gconst4=(x10370*x10372);
IkReal gconst5=((1.0)*r20*x10372);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10374=(gconst5*r10);
IkReal x10375=(gconst4*r11);
CheckValue<IkReal> x10376=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10374*x10375))+(x10374*x10374)+(x10375*x10375))),-1);
if(!x10376.valid){
continue;
}
CheckValue<IkReal> x10377 = IKatan2WithCheck(IkReal((x10374+(((-1.0)*x10375)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10376.value)))+(x10377.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10378=IKsin(j4);
IkReal x10379=IKcos(j4);
IkReal x10380=(gconst4*r11);
IkReal x10381=(gconst5*r10);
IkReal x10382=(gconst4*r01);
IkReal x10383=(gconst5*r00);
IkReal x10384=(gconst4*r21);
IkReal x10385=(gconst5*r20);
IkReal x10386=((1.0)*x10379);
IkReal x10387=((1.0)*x10378);
evalcond[0]=((((-1.0)*x10385*x10387))+((x10378*x10384))+(((-1.0)*r22*x10386)));
evalcond[1]=((((-1.0)*r02*x10386))+((x10378*x10382))+(((-1.0)*x10383*x10387)));
evalcond[2]=(((x10379*x10381))+(((-1.0)*x10380*x10386))+(((-1.0)*r12*x10387)));
evalcond[3]=((1.0)+(((-1.0)*x10381*x10387))+((x10378*x10380))+(((-1.0)*r12*x10386)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10384*x10386))+((x10379*x10385))+((cj1*sj2))+(((-1.0)*r22*x10387)));
evalcond[5]=(((x10379*x10383))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10387))+(((-1.0)*x10382*x10386)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10388=((1.0)*gconst5);
CheckValue<IkReal> x10389 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10388))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10389.valid){
continue;
}
CheckValue<IkReal> x10390=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10388)))),-1);
if(!x10390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10389.value)+(((1.5707963267949)*(x10390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10391=IKsin(j4);
IkReal x10392=IKcos(j4);
IkReal x10393=(gconst4*r11);
IkReal x10394=(gconst5*r10);
IkReal x10395=(gconst4*r01);
IkReal x10396=(gconst5*r00);
IkReal x10397=(gconst4*r21);
IkReal x10398=(gconst5*r20);
IkReal x10399=((1.0)*x10392);
IkReal x10400=((1.0)*x10391);
evalcond[0]=((((-1.0)*x10398*x10400))+(((-1.0)*r22*x10399))+((x10391*x10397)));
evalcond[1]=((((-1.0)*x10396*x10400))+(((-1.0)*r02*x10399))+((x10391*x10395)));
evalcond[2]=(((x10392*x10394))+(((-1.0)*x10393*x10399))+(((-1.0)*r12*x10400)));
evalcond[3]=((1.0)+(((-1.0)*x10394*x10400))+(((-1.0)*r12*x10399))+((x10391*x10393)));
evalcond[4]=(((cj2*sj1))+((x10392*x10398))+((cj1*sj2))+(((-1.0)*r22*x10400))+(((-1.0)*x10397*x10399)));
evalcond[5]=(((x10392*x10396))+(((-1.0)*x10395*x10399))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10400)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10401 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10401.valid){
continue;
}
CheckValue<IkReal> x10402=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10401.value)+(((1.5707963267949)*(x10402.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10403=IKsin(j4);
IkReal x10404=IKcos(j4);
IkReal x10405=(gconst4*r11);
IkReal x10406=(gconst5*r10);
IkReal x10407=(gconst4*r01);
IkReal x10408=(gconst5*r00);
IkReal x10409=(gconst4*r21);
IkReal x10410=(gconst5*r20);
IkReal x10411=((1.0)*x10404);
IkReal x10412=((1.0)*x10403);
evalcond[0]=((((-1.0)*r22*x10411))+((x10403*x10409))+(((-1.0)*x10410*x10412)));
evalcond[1]=((((-1.0)*r02*x10411))+((x10403*x10407))+(((-1.0)*x10408*x10412)));
evalcond[2]=((((-1.0)*x10405*x10411))+(((-1.0)*r12*x10412))+((x10404*x10406)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10411))+((x10403*x10405))+(((-1.0)*x10406*x10412)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10409*x10411))+((cj1*sj2))+((x10404*x10410))+(((-1.0)*r22*x10412)));
evalcond[5]=((((-1.0)*r02*x10412))+(((-1.0)*x10407*x10411))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10404*x10408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10413=gconst4*gconst4;
IkReal x10414=gconst5*gconst5;
IkReal x10415=(r10*r21);
IkReal x10416=((1.0)*cj3);
IkReal x10417=(r11*r21);
IkReal x10418=(r11*r20);
IkReal x10419=(r22*sj3);
IkReal x10420=(gconst4*r10);
IkReal x10421=((1.0)*sj3);
IkReal x10422=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10423 = IKatan2WithCheck(IkReal((((x10419*x10420))+((gconst5*r11*x10419)))),IkReal(((((-1.0)*x10414*x10418*x10421))+(((-1.0)*gconst5*r20*x10420*x10421))+((gconst4*gconst5*sj3*x10417))+((sj3*x10413*x10415)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10423.valid){
continue;
}
CheckValue<IkReal> x10424=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10416))+((x10415*x10422))+(((-1.0)*x10413*x10416*x10417))+(((-1.0)*r10*r20*x10414*x10416))+((x10418*x10422)))),-1);
if(!x10424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10423.value)+(((1.5707963267949)*(x10424.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10425=IKsin(j4);
IkReal x10426=IKcos(j4);
IkReal x10427=(sj1*sj2);
IkReal x10428=(gconst5*sj3);
IkReal x10429=(cj3*gconst5);
IkReal x10430=(gconst4*r11);
IkReal x10431=((1.0)*cj1);
IkReal x10432=(gconst4*r01);
IkReal x10433=(cj2*sj1);
IkReal x10434=(gconst4*r21);
IkReal x10435=(gconst4*sj3);
IkReal x10436=(cj3*gconst4);
IkReal x10437=(cj2*x10431);
IkReal x10438=((1.0)*x10426);
IkReal x10439=((1.0)*x10425);
IkReal x10440=(cj3*x10425);
IkReal x10441=(cj3*x10426);
evalcond[0]=(((x10425*x10434))+(((-1.0)*gconst5*r20*x10439))+(((-1.0)*r22*x10438)));
evalcond[1]=((((-1.0)*gconst5*r00*x10439))+((x10425*x10432))+(((-1.0)*r02*x10438)));
evalcond[2]=((1.0)+((x10425*x10430))+(((-1.0)*gconst5*r10*x10439))+(((-1.0)*r12*x10438)));
evalcond[3]=(((x10430*x10441))+((r12*x10440))+(((-1.0)*r10*x10429*x10438))+((r10*x10435))+((r11*x10428)));
evalcond[4]=((((-1.0)*r12*sj3*x10439))+((r10*x10426*x10428))+((r10*x10436))+((r11*x10429))+(((-1.0)*sj3*x10430*x10438)));
evalcond[5]=(((r22*x10440))+((x10434*x10441))+((cj1*sj2))+x10433+(((-1.0)*r20*x10429*x10438))+((r20*x10435))+((r21*x10428)));
evalcond[6]=(((r01*x10428))+((r02*x10440))+((x10432*x10441))+(((-1.0)*r00*x10429*x10438))+x10427+(((-1.0)*x10437))+((r00*x10435)));
evalcond[7]=((((-1.0)*r22*sj3*x10439))+((r20*x10426*x10428))+x10427+(((-1.0)*x10437))+(((-1.0)*sj3*x10434*x10438))+((r20*x10436))+((r21*x10429)));
evalcond[8]=(((r01*x10429))+((r00*x10426*x10428))+(((-1.0)*sj3*x10432*x10438))+(((-1.0)*sj2*x10431))+(((-1.0)*x10433))+(((-1.0)*r02*sj3*x10439))+((r00*x10436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10442=((1.0)*gconst5);
CheckValue<IkReal> x10443 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10442))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10443.valid){
continue;
}
CheckValue<IkReal> x10444=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10442)))),-1);
if(!x10444.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10443.value)+(((1.5707963267949)*(x10444.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10445=IKsin(j4);
IkReal x10446=IKcos(j4);
IkReal x10447=(sj1*sj2);
IkReal x10448=(gconst5*sj3);
IkReal x10449=(cj3*gconst5);
IkReal x10450=(gconst4*r11);
IkReal x10451=((1.0)*cj1);
IkReal x10452=(gconst4*r01);
IkReal x10453=(cj2*sj1);
IkReal x10454=(gconst4*r21);
IkReal x10455=(gconst4*sj3);
IkReal x10456=(cj3*gconst4);
IkReal x10457=(cj2*x10451);
IkReal x10458=((1.0)*x10446);
IkReal x10459=((1.0)*x10445);
IkReal x10460=(cj3*x10445);
IkReal x10461=(cj3*x10446);
evalcond[0]=((((-1.0)*gconst5*r20*x10459))+(((-1.0)*r22*x10458))+((x10445*x10454)));
evalcond[1]=((((-1.0)*gconst5*r00*x10459))+(((-1.0)*r02*x10458))+((x10445*x10452)));
evalcond[2]=((1.0)+((x10445*x10450))+(((-1.0)*r12*x10458))+(((-1.0)*gconst5*r10*x10459)));
evalcond[3]=(((r10*x10455))+((r12*x10460))+((r11*x10448))+(((-1.0)*r10*x10449*x10458))+((x10450*x10461)));
evalcond[4]=((((-1.0)*sj3*x10450*x10458))+((r10*x10456))+((r10*x10446*x10448))+((r11*x10449))+(((-1.0)*r12*sj3*x10459)));
evalcond[5]=(((cj1*sj2))+((r22*x10460))+((r21*x10448))+((x10454*x10461))+x10453+(((-1.0)*r20*x10449*x10458))+((r20*x10455)));
evalcond[6]=((((-1.0)*r00*x10449*x10458))+((x10452*x10461))+((r00*x10455))+x10447+((r01*x10448))+((r02*x10460))+(((-1.0)*x10457)));
evalcond[7]=((((-1.0)*sj3*x10454*x10458))+(((-1.0)*r22*sj3*x10459))+((r21*x10449))+x10447+(((-1.0)*x10457))+((r20*x10456))+((r20*x10446*x10448)));
evalcond[8]=((((-1.0)*x10453))+((r00*x10456))+(((-1.0)*r02*sj3*x10459))+(((-1.0)*sj2*x10451))+((r01*x10449))+((r00*x10446*x10448))+(((-1.0)*sj3*x10452*x10458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10462 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10462.valid){
continue;
}
CheckValue<IkReal> x10463=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10463.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10462.value)+(((1.5707963267949)*(x10463.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10464=IKsin(j4);
IkReal x10465=IKcos(j4);
IkReal x10466=(sj1*sj2);
IkReal x10467=(gconst5*sj3);
IkReal x10468=(cj3*gconst5);
IkReal x10469=(gconst4*r11);
IkReal x10470=((1.0)*cj1);
IkReal x10471=(gconst4*r01);
IkReal x10472=(cj2*sj1);
IkReal x10473=(gconst4*r21);
IkReal x10474=(gconst4*sj3);
IkReal x10475=(cj3*gconst4);
IkReal x10476=(cj2*x10470);
IkReal x10477=((1.0)*x10465);
IkReal x10478=((1.0)*x10464);
IkReal x10479=(cj3*x10464);
IkReal x10480=(cj3*x10465);
evalcond[0]=(((x10464*x10473))+(((-1.0)*gconst5*r20*x10478))+(((-1.0)*r22*x10477)));
evalcond[1]=((((-1.0)*r02*x10477))+((x10464*x10471))+(((-1.0)*gconst5*r00*x10478)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10478))+((x10464*x10469))+(((-1.0)*r12*x10477)));
evalcond[3]=(((x10469*x10480))+((r12*x10479))+(((-1.0)*r10*x10468*x10477))+((r11*x10467))+((r10*x10474)));
evalcond[4]=(((r11*x10468))+(((-1.0)*sj3*x10469*x10477))+((r10*x10465*x10467))+(((-1.0)*r12*sj3*x10478))+((r10*x10475)));
evalcond[5]=((((-1.0)*r20*x10468*x10477))+((r20*x10474))+((x10473*x10480))+((cj1*sj2))+((r22*x10479))+((r21*x10467))+x10472);
evalcond[6]=((((-1.0)*r00*x10468*x10477))+((r01*x10467))+((r00*x10474))+x10466+((x10471*x10480))+((r02*x10479))+(((-1.0)*x10476)));
evalcond[7]=(((r20*x10475))+((r20*x10465*x10467))+(((-1.0)*r22*sj3*x10478))+(((-1.0)*sj3*x10473*x10477))+((r21*x10468))+x10466+(((-1.0)*x10476)));
evalcond[8]=((((-1.0)*x10472))+((r00*x10465*x10467))+((r01*x10468))+((r00*x10475))+(((-1.0)*sj3*x10471*x10477))+(((-1.0)*r02*sj3*x10478))+(((-1.0)*sj2*x10470)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10481=((-1.0)*r21);
CheckValue<IkReal> x10484 = IKatan2WithCheck(IkReal(x10481),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10484.valid){
continue;
}
IkReal x10482=((1.0)*(x10484.value));
IkReal x10483=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10482)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10482)));
IkReal gconst4=(x10481*x10483);
IkReal gconst5=((1.0)*r20*x10483);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10485=((-1.0)*r21);
CheckValue<IkReal> x10488 = IKatan2WithCheck(IkReal(x10485),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10488.valid){
continue;
}
IkReal x10486=((1.0)*(x10488.value));
IkReal x10487=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10486)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10486)));
IkReal gconst4=(x10485*x10487);
IkReal gconst5=((1.0)*r20*x10487);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10489=((-1.0)*r21);
CheckValue<IkReal> x10492 = IKatan2WithCheck(IkReal(x10489),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10492.valid){
continue;
}
IkReal x10490=((1.0)*(x10492.value));
IkReal x10491=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10490)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10490)));
IkReal gconst4=(x10489*x10491);
IkReal gconst5=((1.0)*r20*x10491);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10493=((-1.0)*r21);
CheckValue<IkReal> x10496 = IKatan2WithCheck(IkReal(x10493),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10496.valid){
continue;
}
IkReal x10494=((1.0)*(x10496.value));
IkReal x10495=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10494)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10494)));
IkReal gconst4=(x10493*x10495);
IkReal gconst5=((1.0)*r20*x10495);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10497=((-1.0)*r21);
CheckValue<IkReal> x10500 = IKatan2WithCheck(IkReal(x10497),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10500.valid){
continue;
}
IkReal x10498=((1.0)*(x10500.value));
IkReal x10499=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10498)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10498)));
IkReal gconst4=(x10497*x10499);
IkReal gconst5=((1.0)*r20*x10499);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10501=((-1.0)*r21);
CheckValue<IkReal> x10504 = IKatan2WithCheck(IkReal(x10501),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10504.valid){
continue;
}
IkReal x10502=((1.0)*(x10504.value));
IkReal x10503=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10502)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10502)));
IkReal gconst4=(x10501*x10503);
IkReal gconst5=((1.0)*r20*x10503);
IkReal x10505=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10509=IKPowWithIntegerCheck(x10505,-1);
if(!x10509.valid){
continue;
}
IkReal x10506=x10509.value;
IkReal x10507=((1.0)*x10506);
IkReal x10508=((((-1.0)*(r12*r12)))+(((-1.0)*x10507*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10506))+(((-1.0)*x10507*(r11*r11)*(r21*r21))));
j4eval[0]=x10508;
j4eval[1]=r12;
j4eval[2]=x10505;
j4eval[3]=IKsign(x10508);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10510=(gconst5*r10);
IkReal x10511=(gconst4*r11);
CheckValue<IkReal> x10512=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10511*x10511)))+(((-1.0)*(x10510*x10510)))+(((-1.0)*(r12*r12)))+(((2.0)*x10510*x10511)))),-1);
if(!x10512.valid){
continue;
}
CheckValue<IkReal> x10513 = IKatan2WithCheck(IkReal(((((-1.0)*x10511))+x10510)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10512.value)))+(x10513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10514=IKsin(j4);
IkReal x10515=IKcos(j4);
IkReal x10516=(gconst4*r11);
IkReal x10517=(gconst5*r10);
IkReal x10518=(gconst4*r01);
IkReal x10519=(gconst5*r00);
IkReal x10520=(gconst4*r21);
IkReal x10521=(gconst5*r20);
IkReal x10522=((1.0)*x10515);
IkReal x10523=((1.0)*x10514);
evalcond[0]=((((-1.0)*x10521*x10523))+(((-1.0)*r22*x10522))+((x10514*x10520)));
evalcond[1]=((((-1.0)*r02*x10522))+((x10514*x10518))+(((-1.0)*x10519*x10523)));
evalcond[2]=((((-1.0)*r12*x10523))+((x10515*x10517))+(((-1.0)*x10516*x10522)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10522))+(((-1.0)*x10517*x10523))+((x10514*x10516)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10518*x10522))+(((-1.0)*r02*x10523))+((x10515*x10519)));
evalcond[5]=((((-1.0)*x10520*x10522))+(((-1.0)*r22*x10523))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10515*x10521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10524=((1.0)*gconst5);
CheckValue<IkReal> x10525 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10524)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10525.valid){
continue;
}
CheckValue<IkReal> x10526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10524))+(((-1.0)*gconst4*r20)))),-1);
if(!x10526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10525.value)+(((1.5707963267949)*(x10526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10527=IKsin(j4);
IkReal x10528=IKcos(j4);
IkReal x10529=(gconst4*r11);
IkReal x10530=(gconst5*r10);
IkReal x10531=(gconst4*r01);
IkReal x10532=(gconst5*r00);
IkReal x10533=(gconst4*r21);
IkReal x10534=(gconst5*r20);
IkReal x10535=((1.0)*x10528);
IkReal x10536=((1.0)*x10527);
evalcond[0]=((((-1.0)*r22*x10535))+((x10527*x10533))+(((-1.0)*x10534*x10536)));
evalcond[1]=((((-1.0)*r02*x10535))+((x10527*x10531))+(((-1.0)*x10532*x10536)));
evalcond[2]=(((x10528*x10530))+(((-1.0)*r12*x10536))+(((-1.0)*x10529*x10535)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10535))+(((-1.0)*x10530*x10536))+((x10527*x10529)));
evalcond[4]=(((cj2*sj1))+((x10528*x10532))+((cj1*sj2))+(((-1.0)*r02*x10536))+(((-1.0)*x10531*x10535)));
evalcond[5]=((((-1.0)*r22*x10536))+((x10528*x10534))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10533*x10535)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10537=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10537.valid){
continue;
}
CheckValue<IkReal> x10538 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10538.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10537.value)))+(x10538.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10539=IKsin(j4);
IkReal x10540=IKcos(j4);
IkReal x10541=(gconst4*r11);
IkReal x10542=(gconst5*r10);
IkReal x10543=(gconst4*r01);
IkReal x10544=(gconst5*r00);
IkReal x10545=(gconst4*r21);
IkReal x10546=(gconst5*r20);
IkReal x10547=((1.0)*x10540);
IkReal x10548=((1.0)*x10539);
evalcond[0]=(((x10539*x10545))+(((-1.0)*x10546*x10548))+(((-1.0)*r22*x10547)));
evalcond[1]=((((-1.0)*x10544*x10548))+((x10539*x10543))+(((-1.0)*r02*x10547)));
evalcond[2]=(((x10540*x10542))+(((-1.0)*x10541*x10547))+(((-1.0)*r12*x10548)));
evalcond[3]=((-1.0)+(((-1.0)*x10542*x10548))+((x10539*x10541))+(((-1.0)*r12*x10547)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10543*x10547))+((x10540*x10544))+((cj1*sj2))+(((-1.0)*r02*x10548)));
evalcond[5]=(((x10540*x10546))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10548))+(((-1.0)*x10545*x10547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10549=((-1.0)*r21);
CheckValue<IkReal> x10552 = IKatan2WithCheck(IkReal(x10549),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10552.valid){
continue;
}
IkReal x10550=((1.0)*(x10552.value));
IkReal x10551=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10550)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10550)));
IkReal gconst4=(x10549*x10551);
IkReal gconst5=((1.0)*r20*x10551);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10553=((-1.0)*r21);
CheckValue<IkReal> x10556 = IKatan2WithCheck(IkReal(x10553),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10556.valid){
continue;
}
IkReal x10554=((1.0)*(x10556.value));
IkReal x10555=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10554)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10554)));
IkReal gconst4=(x10553*x10555);
IkReal gconst5=((1.0)*r20*x10555);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10557=((-1.0)*r21);
CheckValue<IkReal> x10560 = IKatan2WithCheck(IkReal(x10557),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10560.valid){
continue;
}
IkReal x10558=((1.0)*(x10560.value));
IkReal x10559=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10558)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10558)));
IkReal gconst4=(x10557*x10559);
IkReal gconst5=((1.0)*r20*x10559);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10561=(gconst5*r10);
IkReal x10562=(gconst4*r11);
CheckValue<IkReal> x10563=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10562*x10562)+(((-2.0)*x10561*x10562))+(x10561*x10561))),-1);
if(!x10563.valid){
continue;
}
CheckValue<IkReal> x10564 = IKatan2WithCheck(IkReal(((((-1.0)*x10561))+x10562)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10563.value)))+(x10564.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10565=IKcos(j4);
IkReal x10566=IKsin(j4);
IkReal x10567=(gconst4*r11);
IkReal x10568=(gconst5*r10);
IkReal x10569=(gconst5*r00);
IkReal x10570=(gconst5*r20);
IkReal x10571=((1.0)*x10565);
IkReal x10572=(gconst4*x10565);
IkReal x10573=((1.0)*x10566);
IkReal x10574=(gconst4*x10566);
evalcond[0]=((((-1.0)*x10568*x10571))+((r12*x10566))+((x10565*x10567)));
evalcond[1]=((((-1.0)*r22*x10571))+((r21*x10574))+(((-1.0)*x10570*x10573)));
evalcond[2]=((((-1.0)*x10569*x10573))+((r01*x10574))+(((-1.0)*r02*x10571)));
evalcond[3]=((-1.0)+((x10566*x10567))+(((-1.0)*r12*x10571))+(((-1.0)*x10568*x10573)));
evalcond[4]=((((-1.0)*x10569*x10571))+((cj2*sj1))+((r01*x10572))+((cj1*sj2))+((r02*x10566)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10572))+((r22*x10566))+(((-1.0)*x10570*x10571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10575=((1.0)*gconst5);
CheckValue<IkReal> x10576=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10575)))),-1);
if(!x10576.valid){
continue;
}
CheckValue<IkReal> x10577 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10575))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10577.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10576.value)))+(x10577.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10578=IKcos(j4);
IkReal x10579=IKsin(j4);
IkReal x10580=(gconst4*r11);
IkReal x10581=(gconst5*r10);
IkReal x10582=(gconst5*r00);
IkReal x10583=(gconst5*r20);
IkReal x10584=((1.0)*x10578);
IkReal x10585=(gconst4*x10578);
IkReal x10586=((1.0)*x10579);
IkReal x10587=(gconst4*x10579);
evalcond[0]=((((-1.0)*x10581*x10584))+((x10578*x10580))+((r12*x10579)));
evalcond[1]=((((-1.0)*r22*x10584))+((r21*x10587))+(((-1.0)*x10583*x10586)));
evalcond[2]=((((-1.0)*x10582*x10586))+(((-1.0)*r02*x10584))+((r01*x10587)));
evalcond[3]=((-1.0)+((x10579*x10580))+(((-1.0)*x10581*x10586))+(((-1.0)*r12*x10584)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10582*x10584))+((cj1*sj2))+((r02*x10579))+((r01*x10585)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10585))+((r22*x10579))+(((-1.0)*x10583*x10584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10588=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10588.valid){
continue;
}
CheckValue<IkReal> x10589 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10588.value)))+(x10589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10590=IKcos(j4);
IkReal x10591=IKsin(j4);
IkReal x10592=(gconst4*r11);
IkReal x10593=(gconst5*r10);
IkReal x10594=(gconst5*r00);
IkReal x10595=(gconst5*r20);
IkReal x10596=((1.0)*x10590);
IkReal x10597=(gconst4*x10590);
IkReal x10598=((1.0)*x10591);
IkReal x10599=(gconst4*x10591);
evalcond[0]=(((r12*x10591))+(((-1.0)*x10593*x10596))+((x10590*x10592)));
evalcond[1]=(((r21*x10599))+(((-1.0)*r22*x10596))+(((-1.0)*x10595*x10598)));
evalcond[2]=((((-1.0)*r02*x10596))+((r01*x10599))+(((-1.0)*x10594*x10598)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10596))+(((-1.0)*x10593*x10598))+((x10591*x10592)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r01*x10597))+(((-1.0)*x10594*x10596))+((r02*x10591)));
evalcond[5]=(((r21*x10597))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10595*x10596))+((r22*x10591)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10600=((-1.0)*r21);
CheckValue<IkReal> x10603 = IKatan2WithCheck(IkReal(x10600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10603.valid){
continue;
}
IkReal x10601=((1.0)*(x10603.value));
IkReal x10602=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10601)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10601)));
IkReal gconst4=(x10600*x10602);
IkReal gconst5=((1.0)*r20*x10602);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10604=((-1.0)*r21);
CheckValue<IkReal> x10607 = IKatan2WithCheck(IkReal(x10604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10607.valid){
continue;
}
IkReal x10605=((1.0)*(x10607.value));
IkReal x10606=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10605)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10605)));
IkReal gconst4=(x10604*x10606);
IkReal gconst5=((1.0)*r20*x10606);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10608=((-1.0)*r21);
CheckValue<IkReal> x10611 = IKatan2WithCheck(IkReal(x10608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10611.valid){
continue;
}
IkReal x10609=((1.0)*(x10611.value));
IkReal x10610=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10609)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10609)));
IkReal gconst4=(x10608*x10610);
IkReal gconst5=((1.0)*r20*x10610);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10612=(gconst5*r10);
IkReal x10613=(gconst4*r11);
CheckValue<IkReal> x10614=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10612*x10613))+(x10612*x10612)+(x10613*x10613))),-1);
if(!x10614.valid){
continue;
}
CheckValue<IkReal> x10615 = IKatan2WithCheck(IkReal(((((-1.0)*x10612))+x10613)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10615.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10614.value)))+(x10615.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10616=IKcos(j4);
IkReal x10617=IKsin(j4);
IkReal x10618=(gconst5*r10);
IkReal x10619=(gconst5*r00);
IkReal x10620=(gconst5*r20);
IkReal x10621=((1.0)*x10616);
IkReal x10622=(gconst4*x10617);
IkReal x10623=(gconst4*x10616);
IkReal x10624=((1.0)*x10617);
evalcond[0]=(((r12*x10617))+(((-1.0)*x10618*x10621))+((r11*x10623)));
evalcond[1]=(((r21*x10622))+(((-1.0)*r22*x10621))+(((-1.0)*x10620*x10624)));
evalcond[2]=((((-1.0)*r02*x10621))+((r01*x10622))+(((-1.0)*x10619*x10624)));
evalcond[3]=((-1.0)+(((-1.0)*x10618*x10624))+(((-1.0)*r12*x10621))+((r11*x10622)));
evalcond[4]=(((r21*x10623))+((cj2*sj1))+((r22*x10617))+((cj1*sj2))+(((-1.0)*x10620*x10621)));
evalcond[5]=(((r02*x10617))+(((-1.0)*sj1*sj2))+((r01*x10623))+(((-1.0)*x10619*x10621))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10625=((1.0)*gconst5);
CheckValue<IkReal> x10626=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10625))+(((-1.0)*gconst4*r20)))),-1);
if(!x10626.valid){
continue;
}
CheckValue<IkReal> x10627 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10625))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10627.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10626.value)))+(x10627.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10628=IKcos(j4);
IkReal x10629=IKsin(j4);
IkReal x10630=(gconst5*r10);
IkReal x10631=(gconst5*r00);
IkReal x10632=(gconst5*r20);
IkReal x10633=((1.0)*x10628);
IkReal x10634=(gconst4*x10629);
IkReal x10635=(gconst4*x10628);
IkReal x10636=((1.0)*x10629);
evalcond[0]=((((-1.0)*x10630*x10633))+((r11*x10635))+((r12*x10629)));
evalcond[1]=((((-1.0)*x10632*x10636))+(((-1.0)*r22*x10633))+((r21*x10634)));
evalcond[2]=((((-1.0)*r02*x10633))+((r01*x10634))+(((-1.0)*x10631*x10636)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10633))+(((-1.0)*x10630*x10636))+((r11*x10634)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10632*x10633))+((r22*x10629))+((r21*x10635)));
evalcond[5]=(((r01*x10635))+(((-1.0)*sj1*sj2))+(((-1.0)*x10631*x10633))+((r02*x10629))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10637=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10637.valid){
continue;
}
CheckValue<IkReal> x10638 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10637.value)))+(x10638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10639=IKcos(j4);
IkReal x10640=IKsin(j4);
IkReal x10641=(gconst5*r10);
IkReal x10642=(gconst5*r00);
IkReal x10643=(gconst5*r20);
IkReal x10644=((1.0)*x10639);
IkReal x10645=(gconst4*x10640);
IkReal x10646=(gconst4*x10639);
IkReal x10647=((1.0)*x10640);
evalcond[0]=((((-1.0)*x10641*x10644))+((r11*x10646))+((r12*x10640)));
evalcond[1]=(((r21*x10645))+(((-1.0)*r22*x10644))+(((-1.0)*x10643*x10647)));
evalcond[2]=((((-1.0)*r02*x10644))+((r01*x10645))+(((-1.0)*x10642*x10647)));
evalcond[3]=((-1.0)+(((-1.0)*x10641*x10647))+(((-1.0)*r12*x10644))+((r11*x10645)));
evalcond[4]=(((r21*x10646))+((cj2*sj1))+((cj1*sj2))+((r22*x10640))+(((-1.0)*x10643*x10644)));
evalcond[5]=(((r01*x10646))+(((-1.0)*sj1*sj2))+((r02*x10640))+((cj1*cj2))+(((-1.0)*x10642*x10644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10648=((-1.0)*r21);
CheckValue<IkReal> x10651 = IKatan2WithCheck(IkReal(x10648),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10651.valid){
continue;
}
IkReal x10649=((1.0)*(x10651.value));
IkReal x10650=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10649)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10649)));
IkReal gconst4=(x10648*x10650);
IkReal gconst5=((1.0)*r20*x10650);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10652=((-1.0)*r21);
CheckValue<IkReal> x10655 = IKatan2WithCheck(IkReal(x10652),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10655.valid){
continue;
}
IkReal x10653=((1.0)*(x10655.value));
IkReal x10654=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10653)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10653)));
IkReal gconst4=(x10652*x10654);
IkReal gconst5=((1.0)*r20*x10654);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10656=((-1.0)*r21);
CheckValue<IkReal> x10659 = IKatan2WithCheck(IkReal(x10656),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10659.valid){
continue;
}
IkReal x10657=((1.0)*(x10659.value));
IkReal x10658=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10657)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10657)));
IkReal gconst4=(x10656*x10658);
IkReal gconst5=((1.0)*r20*x10658);
IkReal x10660=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10664=IKPowWithIntegerCheck(x10660,-1);
if(!x10664.valid){
continue;
}
IkReal x10661=x10664.value;
IkReal x10662=((1.0)*x10661);
IkReal x10663=((((-1.0)*x10662*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10662*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x10661)));
j4eval[0]=x10663;
j4eval[1]=r12;
j4eval[2]=x10660;
j4eval[3]=IKsign(x10663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10665=(gconst5*r10);
IkReal x10666=(gconst4*r11);
CheckValue<IkReal> x10667 = IKatan2WithCheck(IkReal(((((-1.0)*x10666))+x10665)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10667.valid){
continue;
}
CheckValue<IkReal> x10668=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10666*x10666)))+(((-1.0)*(r12*r12)))+(((2.0)*x10665*x10666))+(((-1.0)*(x10665*x10665))))),-1);
if(!x10668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10667.value)+(((1.5707963267949)*(x10668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10669=IKsin(j4);
IkReal x10670=IKcos(j4);
IkReal x10671=(gconst4*r11);
IkReal x10672=(gconst5*r10);
IkReal x10673=(gconst5*r00);
IkReal x10674=(gconst5*r20);
IkReal x10675=((1.0)*x10670);
IkReal x10676=(gconst4*x10669);
IkReal x10677=((1.0)*x10669);
evalcond[0]=((((-1.0)*x10674*x10677))+(((-1.0)*r22*x10675))+((r21*x10676)));
evalcond[1]=((((-1.0)*r02*x10675))+(((-1.0)*x10673*x10677))+((r01*x10676)));
evalcond[2]=(((x10670*x10672))+(((-1.0)*x10671*x10675))+(((-1.0)*r12*x10677)));
evalcond[3]=((-1.0)+((x10669*x10671))+(((-1.0)*x10672*x10677))+(((-1.0)*r12*x10675)));
evalcond[4]=(((cj2*sj1))+((x10670*x10674))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10675))+(((-1.0)*r22*x10677)));
evalcond[5]=(((x10670*x10673))+(((-1.0)*r02*x10677))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*gconst4*r01*x10675)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10678=((1.0)*gconst5);
CheckValue<IkReal> x10679 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10678)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10679.valid){
continue;
}
CheckValue<IkReal> x10680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10678))+(((-1.0)*gconst4*r20)))),-1);
if(!x10680.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10679.value)+(((1.5707963267949)*(x10680.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10681=IKsin(j4);
IkReal x10682=IKcos(j4);
IkReal x10683=(gconst4*r11);
IkReal x10684=(gconst5*r10);
IkReal x10685=(gconst5*r00);
IkReal x10686=(gconst5*r20);
IkReal x10687=((1.0)*x10682);
IkReal x10688=(gconst4*x10681);
IkReal x10689=((1.0)*x10681);
evalcond[0]=((((-1.0)*r22*x10687))+(((-1.0)*x10686*x10689))+((r21*x10688)));
evalcond[1]=((((-1.0)*r02*x10687))+((r01*x10688))+(((-1.0)*x10685*x10689)));
evalcond[2]=((((-1.0)*x10683*x10687))+(((-1.0)*r12*x10689))+((x10682*x10684)));
evalcond[3]=((-1.0)+((x10681*x10683))+(((-1.0)*x10684*x10689))+(((-1.0)*r12*x10687)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x10689))+((cj1*sj2))+(((-1.0)*gconst4*r21*x10687))+((x10682*x10686)));
evalcond[5]=((((-1.0)*gconst4*r01*x10687))+(((-1.0)*r02*x10689))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((x10682*x10685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10690=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10690.valid){
continue;
}
CheckValue<IkReal> x10691 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10691.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10690.value)))+(x10691.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10692=IKsin(j4);
IkReal x10693=IKcos(j4);
IkReal x10694=(gconst4*r11);
IkReal x10695=(gconst5*r10);
IkReal x10696=(gconst5*r00);
IkReal x10697=(gconst5*r20);
IkReal x10698=((1.0)*x10693);
IkReal x10699=(gconst4*x10692);
IkReal x10700=((1.0)*x10692);
evalcond[0]=(((r21*x10699))+(((-1.0)*x10697*x10700))+(((-1.0)*r22*x10698)));
evalcond[1]=((((-1.0)*x10696*x10700))+(((-1.0)*r02*x10698))+((r01*x10699)));
evalcond[2]=((((-1.0)*r12*x10700))+(((-1.0)*x10694*x10698))+((x10693*x10695)));
evalcond[3]=((-1.0)+((x10692*x10694))+(((-1.0)*r12*x10698))+(((-1.0)*x10695*x10700)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10698))+((cj1*sj2))+(((-1.0)*r22*x10700))+((x10693*x10697)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x10693*x10696))+(((-1.0)*r02*x10700))+(((-1.0)*gconst4*r01*x10698))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10701=((-1.0)*r21);
IkReal x10702=((-1.0)*px);
CheckValue<IkReal> x10704 = IKatan2WithCheck(IkReal(x10701),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10704.valid){
continue;
}
IkReal x10703=((1.0)*(x10704.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10703)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10702);
rxp1_1=(px*r21);
rxp1_2=(r11*x10702);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10703)));
IkReal gconst4=x10701;
IkReal gconst5=((1.0)*r20);
IkReal x10705=((1.0)*cj3);
IkReal x10706=(r10*r20);
IkReal x10707=(r11*r21);
j4eval[0]=((((-1.0)*x10707))+(((-1.0)*x10706)));
j4eval[1]=((((-1.0)*x10705*x10707))+(((-1.0)*x10705*x10706)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10708=((-1.0)*r21);
IkReal x10709=((-1.0)*px);
CheckValue<IkReal> x10711 = IKatan2WithCheck(IkReal(x10708),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10711.valid){
continue;
}
IkReal x10710=((1.0)*(x10711.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10710)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10709);
rxp1_1=(px*r21);
rxp1_2=(r11*x10709);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10710)));
IkReal gconst4=x10708;
IkReal gconst5=((1.0)*r20);
IkReal x10712=((1.0)*r11*r21);
IkReal x10713=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10713))+(((-1.0)*x10712)));
j4eval[1]=(((sj3*x10712))+((sj3*x10713)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10714=((-1.0)*r21);
IkReal x10715=((-1.0)*px);
CheckValue<IkReal> x10717 = IKatan2WithCheck(IkReal(x10714),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10717.valid){
continue;
}
IkReal x10716=((1.0)*(x10717.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10716)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10715);
rxp1_1=(px*r21);
rxp1_2=(r11*x10715);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10716)));
IkReal gconst4=x10714;
IkReal gconst5=((1.0)*r20);
IkReal x10718=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10718))+(((-1.0)*r11*r21*x10718)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10719=((1.0)*r10);
CheckValue<IkReal> x10720=IKPowWithIntegerCheck(cj3,-1);
if(!x10720.valid){
continue;
}
CheckValue<IkReal> x10721=IKPowWithIntegerCheck(r02,-1);
if(!x10721.valid){
continue;
}
CheckValue<IkReal> x10722=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst5*x10719))+((cj3*gconst4*r11))),-1);
if(!x10722.valid){
continue;
}
if( IKabs(((x10720.value)*(x10721.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10722.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10719)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10720.value)*(x10721.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10722.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10719))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10720.value)*(x10721.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10722.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10719))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10723=IKsin(j4);
IkReal x10724=IKcos(j4);
IkReal x10725=(cj2*sj1);
IkReal x10726=(cj1*sj2);
IkReal x10727=(gconst5*sj3);
IkReal x10728=(gconst4*r11);
IkReal x10729=(sj1*sj2);
IkReal x10730=((1.0)*gconst5);
IkReal x10731=(cj1*cj2);
IkReal x10732=(gconst4*r21);
IkReal x10733=(cj3*gconst4);
IkReal x10734=(gconst4*sj3);
IkReal x10735=(cj3*gconst5);
IkReal x10736=(r20*x10724);
IkReal x10737=(r10*x10724);
IkReal x10738=(cj3*x10724);
IkReal x10739=(r02*x10723);
IkReal x10740=(x10726+x10725);
IkReal x10741=((1.0)*sj3*x10724);
evalcond[0]=((-1.0)*r02*x10724);
evalcond[1]=((((-1.0)*r20*x10723*x10730))+((x10723*x10732)));
evalcond[2]=((((-1.0)*x10729))+x10731+((cj3*x10739)));
evalcond[3]=((((-1.0)*sj3*x10739))+x10740);
evalcond[4]=((-1.0)+((x10723*x10728))+(((-1.0)*r10*x10723*x10730)));
evalcond[5]=(((r10*x10734))+(((-1.0)*cj3*x10730*x10737))+((x10728*x10738))+((r11*x10727)));
evalcond[6]=(((r10*x10733))+(((-1.0)*x10728*x10741))+((x10727*x10737))+((r11*x10735)));
evalcond[7]=(((r21*x10727))+(((-1.0)*cj3*x10730*x10736))+((x10732*x10738))+((r20*x10734))+x10740);
evalcond[8]=(((r21*x10735))+(((-1.0)*x10732*x10741))+((r20*x10733))+(((-1.0)*x10731))+x10729+((x10727*x10736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10742=((1.0)*gconst5);
IkReal x10743=(gconst4*r11);
CheckValue<IkReal> x10744=IKPowWithIntegerCheck(((((-1.0)*r10*x10742))+x10743),-1);
if(!x10744.valid){
continue;
}
CheckValue<IkReal> x10745=IKPowWithIntegerCheck(((((-1.0)*sj3*x10743))+((gconst5*r10*sj3))),-1);
if(!x10745.valid){
continue;
}
if( IKabs(x10744.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10745.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10742)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10744.value)+IKsqr(((x10745.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10742))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10744.value, ((x10745.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10742))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10746=IKsin(j4);
IkReal x10747=IKcos(j4);
IkReal x10748=(cj2*sj1);
IkReal x10749=(cj1*sj2);
IkReal x10750=(gconst5*sj3);
IkReal x10751=(gconst4*r11);
IkReal x10752=(sj1*sj2);
IkReal x10753=((1.0)*gconst5);
IkReal x10754=(cj1*cj2);
IkReal x10755=(gconst4*r21);
IkReal x10756=(cj3*gconst4);
IkReal x10757=(gconst4*sj3);
IkReal x10758=(cj3*gconst5);
IkReal x10759=(r20*x10747);
IkReal x10760=(r10*x10747);
IkReal x10761=(cj3*x10747);
IkReal x10762=(r02*x10746);
IkReal x10763=(x10749+x10748);
IkReal x10764=((1.0)*sj3*x10747);
evalcond[0]=((-1.0)*r02*x10747);
evalcond[1]=(((x10746*x10755))+(((-1.0)*r20*x10746*x10753)));
evalcond[2]=(((cj3*x10762))+x10754+(((-1.0)*x10752)));
evalcond[3]=((((-1.0)*sj3*x10762))+x10763);
evalcond[4]=((-1.0)+((x10746*x10751))+(((-1.0)*r10*x10746*x10753)));
evalcond[5]=(((r10*x10757))+(((-1.0)*cj3*x10753*x10760))+((r11*x10750))+((x10751*x10761)));
evalcond[6]=((((-1.0)*x10751*x10764))+((x10750*x10760))+((r10*x10756))+((r11*x10758)));
evalcond[7]=((((-1.0)*cj3*x10753*x10759))+((r20*x10757))+((x10755*x10761))+x10763+((r21*x10750)));
evalcond[8]=((((-1.0)*x10755*x10764))+((r20*x10756))+x10752+((x10750*x10759))+((r21*x10758))+(((-1.0)*x10754)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10765=((1.0)*sj3);
IkReal x10766=(gconst4*r11);
IkReal x10767=((1.0)*gconst5*r10);
CheckValue<IkReal> x10768=IKPowWithIntegerCheck(((((-1.0)*x10767))+x10766),-1);
if(!x10768.valid){
continue;
}
CheckValue<IkReal> x10769=IKPowWithIntegerCheck(((((-1.0)*cj3*x10767))+((cj3*x10766))),-1);
if(!x10769.valid){
continue;
}
if( IKabs(x10768.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10769.value)*(((((-1.0)*gconst5*r11*x10765))+(((-1.0)*gconst4*r10*x10765)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10768.value)+IKsqr(((x10769.value)*(((((-1.0)*gconst5*r11*x10765))+(((-1.0)*gconst4*r10*x10765))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10768.value, ((x10769.value)*(((((-1.0)*gconst5*r11*x10765))+(((-1.0)*gconst4*r10*x10765))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10770=IKsin(j4);
IkReal x10771=IKcos(j4);
IkReal x10772=(cj2*sj1);
IkReal x10773=(cj1*sj2);
IkReal x10774=(gconst5*sj3);
IkReal x10775=(gconst4*r11);
IkReal x10776=(sj1*sj2);
IkReal x10777=((1.0)*gconst5);
IkReal x10778=(cj1*cj2);
IkReal x10779=(gconst4*r21);
IkReal x10780=(cj3*gconst4);
IkReal x10781=(gconst4*sj3);
IkReal x10782=(cj3*gconst5);
IkReal x10783=(r20*x10771);
IkReal x10784=(r10*x10771);
IkReal x10785=(cj3*x10771);
IkReal x10786=(r02*x10770);
IkReal x10787=(x10772+x10773);
IkReal x10788=((1.0)*sj3*x10771);
evalcond[0]=((-1.0)*r02*x10771);
evalcond[1]=((((-1.0)*r20*x10770*x10777))+((x10770*x10779)));
evalcond[2]=((((-1.0)*x10776))+x10778+((cj3*x10786)));
evalcond[3]=((((-1.0)*sj3*x10786))+x10787);
evalcond[4]=((-1.0)+((x10770*x10775))+(((-1.0)*r10*x10770*x10777)));
evalcond[5]=(((r11*x10774))+(((-1.0)*cj3*x10777*x10784))+((x10775*x10785))+((r10*x10781)));
evalcond[6]=(((r11*x10782))+(((-1.0)*x10775*x10788))+((x10774*x10784))+((r10*x10780)));
evalcond[7]=(((x10779*x10785))+(((-1.0)*cj3*x10777*x10783))+((r20*x10781))+((r21*x10774))+x10787);
evalcond[8]=(((r21*x10782))+(((-1.0)*x10779*x10788))+(((-1.0)*x10778))+((x10774*x10783))+((r20*x10780))+x10776);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10789=gconst4*gconst4;
IkReal x10790=gconst5*gconst5;
IkReal x10791=(r10*r21);
IkReal x10792=((1.0)*cj3);
IkReal x10793=(r11*r21);
IkReal x10794=(r11*r20);
IkReal x10795=(r22*sj3);
IkReal x10796=(gconst4*r10);
IkReal x10797=((1.0)*sj3);
IkReal x10798=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10799 = IKatan2WithCheck(IkReal((((x10795*x10796))+((gconst5*r11*x10795)))),IkReal(((((-1.0)*gconst5*r20*x10796*x10797))+((sj3*x10789*x10791))+(((-1.0)*x10790*x10794*x10797))+((gconst4*gconst5*sj3*x10793)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10799.valid){
continue;
}
CheckValue<IkReal> x10800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x10792))+(((-1.0)*r10*r20*x10790*x10792))+((x10794*x10798))+(((-1.0)*x10789*x10792*x10793))+((x10791*x10798)))),-1);
if(!x10800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10799.value)+(((1.5707963267949)*(x10800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10801=IKsin(j4);
IkReal x10802=IKcos(j4);
IkReal x10803=(cj2*sj1);
IkReal x10804=(cj1*sj2);
IkReal x10805=(gconst5*sj3);
IkReal x10806=(gconst4*r11);
IkReal x10807=(sj1*sj2);
IkReal x10808=(gconst5*r10);
IkReal x10809=(cj1*cj2);
IkReal x10810=(gconst4*r01);
IkReal x10811=(gconst4*r21);
IkReal x10812=(gconst5*r00);
IkReal x10813=(gconst4*sj3);
IkReal x10814=(cj3*gconst5);
IkReal x10815=(cj3*gconst4);
IkReal x10816=((1.0)*x10802);
IkReal x10817=((1.0)*x10801);
IkReal x10818=(cj3*x10801);
IkReal x10819=(cj3*x10802);
IkReal x10820=(x10804+x10803);
evalcond[0]=((((-1.0)*gconst5*r20*x10817))+(((-1.0)*r22*x10816))+((x10801*x10811)));
evalcond[1]=((((-1.0)*r02*x10816))+(((-1.0)*x10812*x10817))+((x10801*x10810)));
evalcond[2]=((-1.0)+(((-1.0)*x10808*x10817))+((x10801*x10806))+(((-1.0)*r12*x10816)));
evalcond[3]=(((x10806*x10819))+((r11*x10805))+((r10*x10813))+(((-1.0)*cj3*x10808*x10816))+((r12*x10818)));
evalcond[4]=((((-1.0)*sj3*x10806*x10816))+((r10*x10815))+((r10*x10802*x10805))+(((-1.0)*r12*sj3*x10817))+((r11*x10814)));
evalcond[5]=(((r22*x10818))+((x10811*x10819))+((r20*x10813))+((r21*x10805))+(((-1.0)*r20*x10814*x10816))+x10820);
evalcond[6]=(((r02*x10818))+((x10810*x10819))+((r01*x10805))+(((-1.0)*cj3*x10812*x10816))+(((-1.0)*x10807))+((r00*x10813))+x10809);
evalcond[7]=((((-1.0)*r02*sj3*x10817))+((r00*x10802*x10805))+(((-1.0)*sj3*x10810*x10816))+((r01*x10814))+((r00*x10815))+x10820);
evalcond[8]=(((r20*x10802*x10805))+(((-1.0)*r22*sj3*x10817))+((r20*x10815))+(((-1.0)*x10809))+(((-1.0)*sj3*x10811*x10816))+((r21*x10814))+x10807);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10821=((1.0)*gconst5);
CheckValue<IkReal> x10822=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10821))+(((-1.0)*gconst4*r20)))),-1);
if(!x10822.valid){
continue;
}
CheckValue<IkReal> x10823 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10821)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10823.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10822.value)))+(x10823.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10824=IKsin(j4);
IkReal x10825=IKcos(j4);
IkReal x10826=(cj2*sj1);
IkReal x10827=(cj1*sj2);
IkReal x10828=(gconst5*sj3);
IkReal x10829=(gconst4*r11);
IkReal x10830=(sj1*sj2);
IkReal x10831=(gconst5*r10);
IkReal x10832=(cj1*cj2);
IkReal x10833=(gconst4*r01);
IkReal x10834=(gconst4*r21);
IkReal x10835=(gconst5*r00);
IkReal x10836=(gconst4*sj3);
IkReal x10837=(cj3*gconst5);
IkReal x10838=(cj3*gconst4);
IkReal x10839=((1.0)*x10825);
IkReal x10840=((1.0)*x10824);
IkReal x10841=(cj3*x10824);
IkReal x10842=(cj3*x10825);
IkReal x10843=(x10826+x10827);
evalcond[0]=(((x10824*x10834))+(((-1.0)*gconst5*r20*x10840))+(((-1.0)*r22*x10839)));
evalcond[1]=(((x10824*x10833))+(((-1.0)*x10835*x10840))+(((-1.0)*r02*x10839)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10839))+((x10824*x10829))+(((-1.0)*x10831*x10840)));
evalcond[3]=(((x10829*x10842))+((r10*x10836))+(((-1.0)*cj3*x10831*x10839))+((r12*x10841))+((r11*x10828)));
evalcond[4]=((((-1.0)*sj3*x10829*x10839))+((r10*x10838))+(((-1.0)*r12*sj3*x10840))+((r10*x10825*x10828))+((r11*x10837)));
evalcond[5]=(((r21*x10828))+((r22*x10841))+((r20*x10836))+((x10834*x10842))+(((-1.0)*r20*x10837*x10839))+x10843);
evalcond[6]=((((-1.0)*x10830))+((x10833*x10842))+((r02*x10841))+(((-1.0)*cj3*x10835*x10839))+((r00*x10836))+((r01*x10828))+x10832);
evalcond[7]=((((-1.0)*sj3*x10833*x10839))+(((-1.0)*r02*sj3*x10840))+((r01*x10837))+((r00*x10838))+((r00*x10825*x10828))+x10843);
evalcond[8]=((((-1.0)*x10832))+(((-1.0)*r22*sj3*x10840))+((r20*x10838))+((r20*x10825*x10828))+((r21*x10837))+(((-1.0)*sj3*x10834*x10839))+x10830);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10844=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10844.valid){
continue;
}
CheckValue<IkReal> x10845 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10844.value)))+(x10845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10846=IKsin(j4);
IkReal x10847=IKcos(j4);
IkReal x10848=(cj2*sj1);
IkReal x10849=(cj1*sj2);
IkReal x10850=(gconst5*sj3);
IkReal x10851=(gconst4*r11);
IkReal x10852=(sj1*sj2);
IkReal x10853=(gconst5*r10);
IkReal x10854=(cj1*cj2);
IkReal x10855=(gconst4*r01);
IkReal x10856=(gconst4*r21);
IkReal x10857=(gconst5*r00);
IkReal x10858=(gconst4*sj3);
IkReal x10859=(cj3*gconst5);
IkReal x10860=(cj3*gconst4);
IkReal x10861=((1.0)*x10847);
IkReal x10862=((1.0)*x10846);
IkReal x10863=(cj3*x10846);
IkReal x10864=(cj3*x10847);
IkReal x10865=(x10848+x10849);
evalcond[0]=((((-1.0)*r22*x10861))+((x10846*x10856))+(((-1.0)*gconst5*r20*x10862)));
evalcond[1]=(((x10846*x10855))+(((-1.0)*x10857*x10862))+(((-1.0)*r02*x10861)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x10861))+((x10846*x10851))+(((-1.0)*x10853*x10862)));
evalcond[3]=((((-1.0)*cj3*x10853*x10861))+((r11*x10850))+((r12*x10863))+((r10*x10858))+((x10851*x10864)));
evalcond[4]=(((r11*x10859))+((r10*x10860))+(((-1.0)*r12*sj3*x10862))+((r10*x10847*x10850))+(((-1.0)*sj3*x10851*x10861)));
evalcond[5]=((((-1.0)*r20*x10859*x10861))+((x10856*x10864))+((r21*x10850))+((r20*x10858))+((r22*x10863))+x10865);
evalcond[6]=(((x10855*x10864))+(((-1.0)*cj3*x10857*x10861))+((r01*x10850))+((r00*x10858))+(((-1.0)*x10852))+((r02*x10863))+x10854);
evalcond[7]=((((-1.0)*sj3*x10855*x10861))+((r00*x10847*x10850))+((r01*x10859))+((r00*x10860))+(((-1.0)*r02*sj3*x10862))+x10865);
evalcond[8]=((((-1.0)*r22*sj3*x10862))+((r21*x10859))+((r20*x10860))+((r20*x10847*x10850))+(((-1.0)*sj3*x10856*x10861))+(((-1.0)*x10854))+x10852);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10866=((-1.0)*r21);
CheckValue<IkReal> x10869 = IKatan2WithCheck(IkReal(x10866),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10869.valid){
continue;
}
IkReal x10867=((1.0)*(x10869.value));
IkReal x10868=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10867)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10867)));
IkReal gconst4=(x10866*x10868);
IkReal gconst5=((1.0)*r20*x10868);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10870=((-1.0)*r21);
CheckValue<IkReal> x10873 = IKatan2WithCheck(IkReal(x10870),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10873.valid){
continue;
}
IkReal x10871=((1.0)*(x10873.value));
IkReal x10872=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10871)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10871)));
IkReal gconst4=(x10870*x10872);
IkReal gconst5=((1.0)*r20*x10872);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10874=((-1.0)*r21);
CheckValue<IkReal> x10877 = IKatan2WithCheck(IkReal(x10874),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10877.valid){
continue;
}
IkReal x10875=((1.0)*(x10877.value));
IkReal x10876=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10875)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10875)));
IkReal gconst4=(x10874*x10876);
IkReal gconst5=((1.0)*r20*x10876);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10878=((-1.0)*r21);
CheckValue<IkReal> x10881 = IKatan2WithCheck(IkReal(x10878),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10881.valid){
continue;
}
IkReal x10879=((1.0)*(x10881.value));
IkReal x10880=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10879)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10879)));
IkReal gconst4=(x10878*x10880);
IkReal gconst5=((1.0)*r20*x10880);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10882=((-1.0)*r21);
CheckValue<IkReal> x10885 = IKatan2WithCheck(IkReal(x10882),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10885.valid){
continue;
}
IkReal x10883=((1.0)*(x10885.value));
IkReal x10884=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10883)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10883)));
IkReal gconst4=(x10882*x10884);
IkReal gconst5=((1.0)*r20*x10884);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10886=((-1.0)*r21);
CheckValue<IkReal> x10889 = IKatan2WithCheck(IkReal(x10886),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10889.valid){
continue;
}
IkReal x10887=((1.0)*(x10889.value));
IkReal x10888=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10887)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10887)));
IkReal gconst4=(x10886*x10888);
IkReal gconst5=((1.0)*r20*x10888);
IkReal x10890=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10894=IKPowWithIntegerCheck(x10890,-1);
if(!x10894.valid){
continue;
}
IkReal x10891=x10894.value;
IkReal x10892=((1.0)*x10891);
IkReal x10893=((((-1.0)*(r02*r02)))+(((-1.0)*x10892*(r01*r01)*(r21*r21)))+(((-1.0)*x10892*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10891)));
j4eval[0]=x10893;
j4eval[1]=r02;
j4eval[2]=x10890;
j4eval[3]=IKsign(x10893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10895=(gconst5*r00);
IkReal x10896=(gconst4*r01);
CheckValue<IkReal> x10897=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x10895*x10896))+(((-1.0)*(x10896*x10896)))+(((-1.0)*(x10895*x10895))))),-1);
if(!x10897.valid){
continue;
}
CheckValue<IkReal> x10898 = IKatan2WithCheck(IkReal(((((-1.0)*x10896))+x10895)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10897.value)))+(x10898.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10899=IKsin(j4);
IkReal x10900=IKcos(j4);
IkReal x10901=(gconst4*r11);
IkReal x10902=((1.0)*cj1);
IkReal x10903=(gconst5*r10);
IkReal x10904=(gconst4*r01);
IkReal x10905=(gconst5*r00);
IkReal x10906=(gconst4*r21);
IkReal x10907=(gconst5*r20);
IkReal x10908=((1.0)*x10900);
IkReal x10909=((1.0)*x10899);
evalcond[0]=((((-1.0)*r22*x10908))+(((-1.0)*x10907*x10909))+((x10899*x10906)));
evalcond[1]=((((-1.0)*x10903*x10909))+(((-1.0)*r12*x10908))+((x10899*x10901)));
evalcond[2]=(((x10900*x10905))+(((-1.0)*x10904*x10908))+(((-1.0)*r02*x10909)));
evalcond[3]=((-1.0)+((x10899*x10904))+(((-1.0)*x10905*x10909))+(((-1.0)*r02*x10908)));
evalcond[4]=(((x10900*x10907))+((sj1*sj2))+(((-1.0)*r22*x10909))+(((-1.0)*cj2*x10902))+(((-1.0)*x10906*x10908)));
evalcond[5]=(((x10900*x10903))+(((-1.0)*cj2*sj1))+(((-1.0)*x10901*x10908))+(((-1.0)*sj2*x10902))+(((-1.0)*r12*x10909)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10910=((1.0)*gconst5);
CheckValue<IkReal> x10911=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10910))+(((-1.0)*gconst4*r10)))),-1);
if(!x10911.valid){
continue;
}
CheckValue<IkReal> x10912 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10910))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10912.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10911.value)))+(x10912.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10913=IKsin(j4);
IkReal x10914=IKcos(j4);
IkReal x10915=(gconst4*r11);
IkReal x10916=((1.0)*cj1);
IkReal x10917=(gconst5*r10);
IkReal x10918=(gconst4*r01);
IkReal x10919=(gconst5*r00);
IkReal x10920=(gconst4*r21);
IkReal x10921=(gconst5*r20);
IkReal x10922=((1.0)*x10914);
IkReal x10923=((1.0)*x10913);
evalcond[0]=(((x10913*x10920))+(((-1.0)*r22*x10922))+(((-1.0)*x10921*x10923)));
evalcond[1]=(((x10913*x10915))+(((-1.0)*r12*x10922))+(((-1.0)*x10917*x10923)));
evalcond[2]=((((-1.0)*r02*x10923))+(((-1.0)*x10918*x10922))+((x10914*x10919)));
evalcond[3]=((-1.0)+((x10913*x10918))+(((-1.0)*r02*x10922))+(((-1.0)*x10919*x10923)));
evalcond[4]=((((-1.0)*x10920*x10922))+(((-1.0)*r22*x10923))+((sj1*sj2))+((x10914*x10921))+(((-1.0)*cj2*x10916)));
evalcond[5]=((((-1.0)*sj2*x10916))+(((-1.0)*r12*x10923))+(((-1.0)*cj2*sj1))+(((-1.0)*x10915*x10922))+((x10914*x10917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10924 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10924.valid){
continue;
}
CheckValue<IkReal> x10925=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10924.value)+(((1.5707963267949)*(x10925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10926=IKsin(j4);
IkReal x10927=IKcos(j4);
IkReal x10928=(gconst4*r11);
IkReal x10929=((1.0)*cj1);
IkReal x10930=(gconst5*r10);
IkReal x10931=(gconst4*r01);
IkReal x10932=(gconst5*r00);
IkReal x10933=(gconst4*r21);
IkReal x10934=(gconst5*r20);
IkReal x10935=((1.0)*x10927);
IkReal x10936=((1.0)*x10926);
evalcond[0]=((((-1.0)*r22*x10935))+((x10926*x10933))+(((-1.0)*x10934*x10936)));
evalcond[1]=((((-1.0)*r12*x10935))+((x10926*x10928))+(((-1.0)*x10930*x10936)));
evalcond[2]=((((-1.0)*x10931*x10935))+((x10927*x10932))+(((-1.0)*r02*x10936)));
evalcond[3]=((-1.0)+((x10926*x10931))+(((-1.0)*r02*x10935))+(((-1.0)*x10932*x10936)));
evalcond[4]=((((-1.0)*r22*x10936))+((x10927*x10934))+((sj1*sj2))+(((-1.0)*cj2*x10929))+(((-1.0)*x10933*x10935)));
evalcond[5]=((((-1.0)*sj2*x10929))+(((-1.0)*r12*x10936))+((x10927*x10930))+(((-1.0)*cj2*sj1))+(((-1.0)*x10928*x10935)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10937=((-1.0)*r21);
CheckValue<IkReal> x10940 = IKatan2WithCheck(IkReal(x10937),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10940.valid){
continue;
}
IkReal x10938=((1.0)*(x10940.value));
IkReal x10939=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10938)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10938)));
IkReal gconst4=(x10937*x10939);
IkReal gconst5=((1.0)*r20*x10939);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10941=((-1.0)*r21);
CheckValue<IkReal> x10944 = IKatan2WithCheck(IkReal(x10941),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10944.valid){
continue;
}
IkReal x10942=((1.0)*(x10944.value));
IkReal x10943=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10942)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10942)));
IkReal gconst4=(x10941*x10943);
IkReal gconst5=((1.0)*r20*x10943);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10945=((-1.0)*r21);
CheckValue<IkReal> x10948 = IKatan2WithCheck(IkReal(x10945),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10948.valid){
continue;
}
IkReal x10946=((1.0)*(x10948.value));
IkReal x10947=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10946)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10946)));
IkReal gconst4=(x10945*x10947);
IkReal gconst5=((1.0)*r20*x10947);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10949=(gconst4*r01);
IkReal x10950=(gconst5*r00);
CheckValue<IkReal> x10951=IKPowWithIntegerCheck(IKsign(((((-2.0)*x10949*x10950))+(x10950*x10950)+(r02*r02)+(x10949*x10949))),-1);
if(!x10951.valid){
continue;
}
CheckValue<IkReal> x10952 = IKatan2WithCheck(IkReal(((((-1.0)*x10950))+x10949)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10951.value)))+(x10952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10953=IKcos(j4);
IkReal x10954=IKsin(j4);
IkReal x10955=(gconst4*r11);
IkReal x10956=(gconst5*r10);
IkReal x10957=((1.0)*cj1);
IkReal x10958=(gconst5*r00);
IkReal x10959=(gconst5*r20);
IkReal x10960=((1.0)*x10953);
IkReal x10961=(gconst4*x10953);
IkReal x10962=((1.0)*x10954);
IkReal x10963=(gconst4*x10954);
evalcond[0]=(((r02*x10954))+((r01*x10961))+(((-1.0)*x10958*x10960)));
evalcond[1]=((((-1.0)*x10959*x10962))+(((-1.0)*r22*x10960))+((r21*x10963)));
evalcond[2]=(((x10954*x10955))+(((-1.0)*x10956*x10962))+(((-1.0)*r12*x10960)));
evalcond[3]=((-1.0)+((r01*x10963))+(((-1.0)*x10958*x10962))+(((-1.0)*r02*x10960)));
evalcond[4]=((((-1.0)*cj2*x10957))+((r22*x10954))+(((-1.0)*x10959*x10960))+((sj1*sj2))+((r21*x10961)));
evalcond[5]=((((-1.0)*cj2*sj1))+((x10953*x10955))+(((-1.0)*sj2*x10957))+(((-1.0)*x10956*x10960))+((r12*x10954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10964=((1.0)*gconst5);
CheckValue<IkReal> x10965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10964))+(((-1.0)*gconst4*r10)))),-1);
if(!x10965.valid){
continue;
}
CheckValue<IkReal> x10966 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10964))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10965.value)))+(x10966.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10967=IKcos(j4);
IkReal x10968=IKsin(j4);
IkReal x10969=(gconst4*r11);
IkReal x10970=(gconst5*r10);
IkReal x10971=((1.0)*cj1);
IkReal x10972=(gconst5*r00);
IkReal x10973=(gconst5*r20);
IkReal x10974=((1.0)*x10967);
IkReal x10975=(gconst4*x10967);
IkReal x10976=((1.0)*x10968);
IkReal x10977=(gconst4*x10968);
evalcond[0]=(((r02*x10968))+((r01*x10975))+(((-1.0)*x10972*x10974)));
evalcond[1]=((((-1.0)*x10973*x10976))+(((-1.0)*r22*x10974))+((r21*x10977)));
evalcond[2]=((((-1.0)*x10970*x10976))+((x10968*x10969))+(((-1.0)*r12*x10974)));
evalcond[3]=((-1.0)+((r01*x10977))+(((-1.0)*x10972*x10976))+(((-1.0)*r02*x10974)));
evalcond[4]=((((-1.0)*cj2*x10971))+(((-1.0)*x10973*x10974))+((r22*x10968))+((sj1*sj2))+((r21*x10975)));
evalcond[5]=((((-1.0)*x10970*x10974))+(((-1.0)*cj2*sj1))+((x10967*x10969))+(((-1.0)*sj2*x10971))+((r12*x10968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10978 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10978.valid){
continue;
}
CheckValue<IkReal> x10979=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10978.value)+(((1.5707963267949)*(x10979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10980=IKcos(j4);
IkReal x10981=IKsin(j4);
IkReal x10982=(gconst4*r11);
IkReal x10983=(gconst5*r10);
IkReal x10984=((1.0)*cj1);
IkReal x10985=(gconst5*r00);
IkReal x10986=(gconst5*r20);
IkReal x10987=((1.0)*x10980);
IkReal x10988=(gconst4*x10980);
IkReal x10989=((1.0)*x10981);
IkReal x10990=(gconst4*x10981);
evalcond[0]=(((r01*x10988))+(((-1.0)*x10985*x10987))+((r02*x10981)));
evalcond[1]=(((r21*x10990))+(((-1.0)*r22*x10987))+(((-1.0)*x10986*x10989)));
evalcond[2]=((((-1.0)*x10983*x10989))+(((-1.0)*r12*x10987))+((x10981*x10982)));
evalcond[3]=((-1.0)+((r01*x10990))+(((-1.0)*x10985*x10989))+(((-1.0)*r02*x10987)));
evalcond[4]=(((r22*x10981))+((r21*x10988))+(((-1.0)*cj2*x10984))+(((-1.0)*x10986*x10987))+((sj1*sj2)));
evalcond[5]=((((-1.0)*x10983*x10987))+((r12*x10981))+(((-1.0)*sj2*x10984))+((x10980*x10982))+(((-1.0)*cj2*sj1)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10991=((-1.0)*r21);
CheckValue<IkReal> x10994 = IKatan2WithCheck(IkReal(x10991),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10994.valid){
continue;
}
IkReal x10992=((1.0)*(x10994.value));
IkReal x10993=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10992)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10992)));
IkReal gconst4=(x10991*x10993);
IkReal gconst5=((1.0)*r20*x10993);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10995=((-1.0)*r21);
CheckValue<IkReal> x10998 = IKatan2WithCheck(IkReal(x10995),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10998.valid){
continue;
}
IkReal x10996=((1.0)*(x10998.value));
IkReal x10997=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10996)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10996)));
IkReal gconst4=(x10995*x10997);
IkReal gconst5=((1.0)*r20*x10997);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10999=((-1.0)*r21);
CheckValue<IkReal> x11002 = IKatan2WithCheck(IkReal(x10999),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11002.valid){
continue;
}
IkReal x11000=((1.0)*(x11002.value));
IkReal x11001=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11000)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11000)));
IkReal gconst4=(x10999*x11001);
IkReal gconst5=((1.0)*r20*x11001);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11003=(gconst4*r01);
IkReal x11004=(gconst5*r00);
CheckValue<IkReal> x11005 = IKatan2WithCheck(IkReal((x11003+(((-1.0)*x11004)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11005.valid){
continue;
}
CheckValue<IkReal> x11006=IKPowWithIntegerCheck(IKsign(((x11003*x11003)+(((-2.0)*x11003*x11004))+(r02*r02)+(x11004*x11004))),-1);
if(!x11006.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11005.value)+(((1.5707963267949)*(x11006.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11007=IKcos(j4);
IkReal x11008=IKsin(j4);
IkReal x11009=(gconst4*r11);
IkReal x11010=(gconst5*r10);
IkReal x11011=(gconst5*r00);
IkReal x11012=(gconst5*r20);
IkReal x11013=((1.0)*x11007);
IkReal x11014=(gconst4*x11007);
IkReal x11015=((1.0)*x11008);
IkReal x11016=(gconst4*x11008);
evalcond[0]=(((r02*x11008))+(((-1.0)*x11011*x11013))+((r01*x11014)));
evalcond[1]=((((-1.0)*r22*x11013))+(((-1.0)*x11012*x11015))+((r21*x11016)));
evalcond[2]=(((x11008*x11009))+(((-1.0)*x11010*x11015))+(((-1.0)*r12*x11013)));
evalcond[3]=((-1.0)+(((-1.0)*x11011*x11015))+(((-1.0)*r02*x11013))+((r01*x11016)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11012*x11013))+((cj1*sj2))+((r21*x11014))+((r22*x11008)));
evalcond[5]=(((x11007*x11009))+(((-1.0)*x11010*x11013))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11017=((1.0)*gconst5);
CheckValue<IkReal> x11018=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11017))+(((-1.0)*gconst4*r10)))),-1);
if(!x11018.valid){
continue;
}
CheckValue<IkReal> x11019 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x11017)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11019.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11018.value)))+(x11019.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11020=IKcos(j4);
IkReal x11021=IKsin(j4);
IkReal x11022=(gconst4*r11);
IkReal x11023=(gconst5*r10);
IkReal x11024=(gconst5*r00);
IkReal x11025=(gconst5*r20);
IkReal x11026=((1.0)*x11020);
IkReal x11027=(gconst4*x11020);
IkReal x11028=((1.0)*x11021);
IkReal x11029=(gconst4*x11021);
evalcond[0]=(((r01*x11027))+((r02*x11021))+(((-1.0)*x11024*x11026)));
evalcond[1]=(((r21*x11029))+(((-1.0)*r22*x11026))+(((-1.0)*x11025*x11028)));
evalcond[2]=(((x11021*x11022))+(((-1.0)*x11023*x11028))+(((-1.0)*r12*x11026)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11026))+((r01*x11029))+(((-1.0)*x11024*x11028)));
evalcond[4]=(((cj2*sj1))+((r21*x11027))+((cj1*sj2))+((r22*x11021))+(((-1.0)*x11025*x11026)));
evalcond[5]=(((x11020*x11022))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11023*x11026))+((r12*x11021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11030 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11030.valid){
continue;
}
CheckValue<IkReal> x11031=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11031.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11030.value)+(((1.5707963267949)*(x11031.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11032=IKcos(j4);
IkReal x11033=IKsin(j4);
IkReal x11034=(gconst4*r11);
IkReal x11035=(gconst5*r10);
IkReal x11036=(gconst5*r00);
IkReal x11037=(gconst5*r20);
IkReal x11038=((1.0)*x11032);
IkReal x11039=(gconst4*x11032);
IkReal x11040=((1.0)*x11033);
IkReal x11041=(gconst4*x11033);
evalcond[0]=(((r01*x11039))+(((-1.0)*x11036*x11038))+((r02*x11033)));
evalcond[1]=((((-1.0)*x11037*x11040))+(((-1.0)*r22*x11038))+((r21*x11041)));
evalcond[2]=(((x11033*x11034))+(((-1.0)*x11035*x11040))+(((-1.0)*r12*x11038)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11038))+((r01*x11041))+(((-1.0)*x11036*x11040)));
evalcond[4]=(((cj2*sj1))+((r21*x11039))+((cj1*sj2))+((r22*x11033))+(((-1.0)*x11037*x11038)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11033))+(((-1.0)*x11035*x11038))+((x11032*x11034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11042=((-1.0)*r21);
CheckValue<IkReal> x11045 = IKatan2WithCheck(IkReal(x11042),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11045.valid){
continue;
}
IkReal x11043=((1.0)*(x11045.value));
IkReal x11044=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11043)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11043)));
IkReal gconst4=(x11042*x11044);
IkReal gconst5=((1.0)*r20*x11044);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11046=((-1.0)*r21);
CheckValue<IkReal> x11049 = IKatan2WithCheck(IkReal(x11046),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11049.valid){
continue;
}
IkReal x11047=((1.0)*(x11049.value));
IkReal x11048=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11047)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11047)));
IkReal gconst4=(x11046*x11048);
IkReal gconst5=((1.0)*r20*x11048);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11050=((-1.0)*r21);
CheckValue<IkReal> x11053 = IKatan2WithCheck(IkReal(x11050),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11053.valid){
continue;
}
IkReal x11051=((1.0)*(x11053.value));
IkReal x11052=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11051)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11051)));
IkReal gconst4=(x11050*x11052);
IkReal gconst5=((1.0)*r20*x11052);
IkReal x11054=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11058=IKPowWithIntegerCheck(x11054,-1);
if(!x11058.valid){
continue;
}
IkReal x11055=x11058.value;
IkReal x11056=((1.0)*x11055);
IkReal x11057=((((-1.0)*(r02*r02)))+(((-1.0)*x11056*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x11055))+(((-1.0)*x11056*(r00*r00)*(r20*r20))));
j4eval[0]=x11057;
j4eval[1]=r02;
j4eval[2]=x11054;
j4eval[3]=IKsign(x11057);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11059=(gconst5*r00);
IkReal x11060=(gconst4*r01);
CheckValue<IkReal> x11061=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11059*x11060))+(((-1.0)*(x11059*x11059)))+(((-1.0)*(x11060*x11060))))),-1);
if(!x11061.valid){
continue;
}
CheckValue<IkReal> x11062 = IKatan2WithCheck(IkReal((x11059+(((-1.0)*x11060)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11061.value)))+(x11062.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11063=IKsin(j4);
IkReal x11064=IKcos(j4);
IkReal x11065=(gconst4*r11);
IkReal x11066=(gconst5*r10);
IkReal x11067=(gconst4*r01);
IkReal x11068=(gconst5*r00);
IkReal x11069=(gconst4*r21);
IkReal x11070=(gconst5*r20);
IkReal x11071=((1.0)*x11064);
IkReal x11072=((1.0)*x11063);
evalcond[0]=(((x11063*x11069))+(((-1.0)*x11070*x11072))+(((-1.0)*r22*x11071)));
evalcond[1]=(((x11063*x11065))+(((-1.0)*x11066*x11072))+(((-1.0)*r12*x11071)));
evalcond[2]=(((x11064*x11068))+(((-1.0)*x11067*x11071))+(((-1.0)*r02*x11072)));
evalcond[3]=((-1.0)+((x11063*x11067))+(((-1.0)*r02*x11071))+(((-1.0)*x11068*x11072)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11064*x11070))+(((-1.0)*r22*x11072))+(((-1.0)*x11069*x11071)));
evalcond[5]=(((x11064*x11066))+(((-1.0)*x11065*x11071))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11073=((1.0)*gconst5);
CheckValue<IkReal> x11074=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11073))+(((-1.0)*gconst4*r10)))),-1);
if(!x11074.valid){
continue;
}
CheckValue<IkReal> x11075 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11073))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11074.value)))+(x11075.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11076=IKsin(j4);
IkReal x11077=IKcos(j4);
IkReal x11078=(gconst4*r11);
IkReal x11079=(gconst5*r10);
IkReal x11080=(gconst4*r01);
IkReal x11081=(gconst5*r00);
IkReal x11082=(gconst4*r21);
IkReal x11083=(gconst5*r20);
IkReal x11084=((1.0)*x11077);
IkReal x11085=((1.0)*x11076);
evalcond[0]=((((-1.0)*r22*x11084))+((x11076*x11082))+(((-1.0)*x11083*x11085)));
evalcond[1]=((((-1.0)*r12*x11084))+((x11076*x11078))+(((-1.0)*x11079*x11085)));
evalcond[2]=((((-1.0)*x11080*x11084))+(((-1.0)*r02*x11085))+((x11077*x11081)));
evalcond[3]=((-1.0)+(((-1.0)*x11081*x11085))+(((-1.0)*r02*x11084))+((x11076*x11080)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11082*x11084))+(((-1.0)*r22*x11085))+((x11077*x11083)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11078*x11084))+((x11077*x11079))+(((-1.0)*r12*x11085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11086 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11086.valid){
continue;
}
CheckValue<IkReal> x11087=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11086.value)+(((1.5707963267949)*(x11087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11088=IKsin(j4);
IkReal x11089=IKcos(j4);
IkReal x11090=(gconst4*r11);
IkReal x11091=(gconst5*r10);
IkReal x11092=(gconst4*r01);
IkReal x11093=(gconst5*r00);
IkReal x11094=(gconst4*r21);
IkReal x11095=(gconst5*r20);
IkReal x11096=((1.0)*x11089);
IkReal x11097=((1.0)*x11088);
evalcond[0]=((((-1.0)*r22*x11096))+(((-1.0)*x11095*x11097))+((x11088*x11094)));
evalcond[1]=((((-1.0)*r12*x11096))+(((-1.0)*x11091*x11097))+((x11088*x11090)));
evalcond[2]=((((-1.0)*x11092*x11096))+(((-1.0)*r02*x11097))+((x11089*x11093)));
evalcond[3]=((-1.0)+(((-1.0)*x11093*x11097))+(((-1.0)*r02*x11096))+((x11088*x11092)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11094*x11096))+(((-1.0)*r22*x11097))+((cj1*sj2))+((x11089*x11095)));
evalcond[5]=((((-1.0)*r12*x11097))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11089*x11091))+(((-1.0)*x11090*x11096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11098=gconst4*gconst4;
IkReal x11099=gconst5*gconst5;
IkReal x11100=(r01*r20);
IkReal x11101=(gconst4*sj3);
IkReal x11102=(r01*r21);
IkReal x11103=((1.0)*cj3);
IkReal x11104=(r00*r21);
IkReal x11105=(r00*r20);
IkReal x11106=(cj3*gconst4*gconst5);
IkReal x11107=((1.0)*x11099);
CheckValue<IkReal> x11108 = IKatan2WithCheck(IkReal((((r00*r22*x11101))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*gconst5*x11101*x11105))+((sj3*x11098*x11104))+(((-1.0)*sj3*x11100*x11107))+((gconst5*x11101*x11102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11108.valid){
continue;
}
CheckValue<IkReal> x11109=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11099*x11103*x11105))+((x11104*x11106))+((x11100*x11106))+(((-1.0)*r02*r22*x11103))+(((-1.0)*x11098*x11102*x11103)))),-1);
if(!x11109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11108.value)+(((1.5707963267949)*(x11109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11110=IKsin(j4);
IkReal x11111=IKcos(j4);
IkReal x11112=(sj1*sj2);
IkReal x11113=(gconst5*sj3);
IkReal x11114=(gconst4*r11);
IkReal x11115=(gconst5*r10);
IkReal x11116=((1.0)*cj1);
IkReal x11117=(gconst4*r01);
IkReal x11118=(cj2*sj1);
IkReal x11119=(gconst5*r00);
IkReal x11120=(gconst4*sj3);
IkReal x11121=(cj3*gconst5);
IkReal x11122=(cj3*gconst4);
IkReal x11123=(gconst4*r21);
IkReal x11124=(cj2*x11116);
IkReal x11125=((1.0)*x11111);
IkReal x11126=((1.0)*x11110);
IkReal x11127=(cj3*x11110);
IkReal x11128=(cj3*x11111);
evalcond[0]=((((-1.0)*gconst5*r20*x11126))+((x11110*x11123))+(((-1.0)*r22*x11125)));
evalcond[1]=((((-1.0)*r12*x11125))+(((-1.0)*x11115*x11126))+((x11110*x11114)));
evalcond[2]=((-1.0)+(((-1.0)*x11119*x11126))+((x11110*x11117))+(((-1.0)*r02*x11125)));
evalcond[3]=(((x11117*x11128))+((r02*x11127))+((r00*x11120))+(((-1.0)*cj3*x11119*x11125))+((r01*x11113)));
evalcond[4]=((((-1.0)*r02*sj3*x11126))+((r00*x11111*x11113))+(((-1.0)*sj3*x11117*x11125))+((r00*x11122))+((r01*x11121)));
evalcond[5]=((((-1.0)*r20*x11121*x11125))+((cj1*sj2))+((r22*x11127))+x11118+((r21*x11113))+((r21*x11111*x11122))+((r20*x11120)));
evalcond[6]=(((x11114*x11128))+(((-1.0)*x11124))+(((-1.0)*cj3*x11115*x11125))+((r12*x11127))+((r10*x11120))+x11112+((r11*x11113)));
evalcond[7]=(((r20*x11111*x11113))+(((-1.0)*r21*x11120*x11125))+(((-1.0)*x11124))+((r21*x11121))+x11112+(((-1.0)*r22*sj3*x11126))+((r20*x11122)));
evalcond[8]=((((-1.0)*x11118))+(((-1.0)*r12*sj3*x11126))+(((-1.0)*sj3*x11114*x11125))+((r10*x11122))+((r11*x11121))+(((-1.0)*sj2*x11116))+((r10*x11111*x11113)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11129=((1.0)*gconst5);
CheckValue<IkReal> x11130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11129))+(((-1.0)*gconst4*r10)))),-1);
if(!x11130.valid){
continue;
}
CheckValue<IkReal> x11131 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11129))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11130.value)))+(x11131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11132=IKsin(j4);
IkReal x11133=IKcos(j4);
IkReal x11134=(sj1*sj2);
IkReal x11135=(gconst5*sj3);
IkReal x11136=(gconst4*r11);
IkReal x11137=(gconst5*r10);
IkReal x11138=((1.0)*cj1);
IkReal x11139=(gconst4*r01);
IkReal x11140=(cj2*sj1);
IkReal x11141=(gconst5*r00);
IkReal x11142=(gconst4*sj3);
IkReal x11143=(cj3*gconst5);
IkReal x11144=(cj3*gconst4);
IkReal x11145=(gconst4*r21);
IkReal x11146=(cj2*x11138);
IkReal x11147=((1.0)*x11133);
IkReal x11148=((1.0)*x11132);
IkReal x11149=(cj3*x11132);
IkReal x11150=(cj3*x11133);
evalcond[0]=((((-1.0)*r22*x11147))+(((-1.0)*gconst5*r20*x11148))+((x11132*x11145)));
evalcond[1]=(((x11132*x11136))+(((-1.0)*x11137*x11148))+(((-1.0)*r12*x11147)));
evalcond[2]=((-1.0)+(((-1.0)*x11141*x11148))+(((-1.0)*r02*x11147))+((x11132*x11139)));
evalcond[3]=(((r00*x11142))+((r02*x11149))+(((-1.0)*cj3*x11141*x11147))+((r01*x11135))+((x11139*x11150)));
evalcond[4]=(((r01*x11143))+((r00*x11144))+(((-1.0)*sj3*x11139*x11147))+((r00*x11133*x11135))+(((-1.0)*r02*sj3*x11148)));
evalcond[5]=((((-1.0)*r20*x11143*x11147))+((r22*x11149))+((cj1*sj2))+((r21*x11135))+x11140+((r20*x11142))+((r21*x11133*x11144)));
evalcond[6]=((((-1.0)*cj3*x11137*x11147))+x11134+((r12*x11149))+((x11136*x11150))+((r10*x11142))+((r11*x11135))+(((-1.0)*x11146)));
evalcond[7]=(((r20*x11133*x11135))+((r21*x11143))+x11134+(((-1.0)*r21*x11142*x11147))+((r20*x11144))+(((-1.0)*r22*sj3*x11148))+(((-1.0)*x11146)));
evalcond[8]=((((-1.0)*sj3*x11136*x11147))+(((-1.0)*x11140))+((r11*x11143))+(((-1.0)*r12*sj3*x11148))+((r10*x11133*x11135))+((r10*x11144))+(((-1.0)*sj2*x11138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11151 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11151.valid){
continue;
}
CheckValue<IkReal> x11152=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11151.value)+(((1.5707963267949)*(x11152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11153=IKsin(j4);
IkReal x11154=IKcos(j4);
IkReal x11155=(sj1*sj2);
IkReal x11156=(gconst5*sj3);
IkReal x11157=(gconst4*r11);
IkReal x11158=(gconst5*r10);
IkReal x11159=((1.0)*cj1);
IkReal x11160=(gconst4*r01);
IkReal x11161=(cj2*sj1);
IkReal x11162=(gconst5*r00);
IkReal x11163=(gconst4*sj3);
IkReal x11164=(cj3*gconst5);
IkReal x11165=(cj3*gconst4);
IkReal x11166=(gconst4*r21);
IkReal x11167=(cj2*x11159);
IkReal x11168=((1.0)*x11154);
IkReal x11169=((1.0)*x11153);
IkReal x11170=(cj3*x11153);
IkReal x11171=(cj3*x11154);
evalcond[0]=((((-1.0)*r22*x11168))+((x11153*x11166))+(((-1.0)*gconst5*r20*x11169)));
evalcond[1]=((((-1.0)*x11158*x11169))+(((-1.0)*r12*x11168))+((x11153*x11157)));
evalcond[2]=((-1.0)+((x11153*x11160))+(((-1.0)*x11162*x11169))+(((-1.0)*r02*x11168)));
evalcond[3]=(((r01*x11156))+((x11160*x11171))+((r00*x11163))+((r02*x11170))+(((-1.0)*cj3*x11162*x11168)));
evalcond[4]=(((r01*x11164))+((r00*x11165))+(((-1.0)*r02*sj3*x11169))+((r00*x11154*x11156))+(((-1.0)*sj3*x11160*x11168)));
evalcond[5]=(((r20*x11163))+(((-1.0)*r20*x11164*x11168))+((r21*x11156))+((cj1*sj2))+((r21*x11154*x11165))+x11161+((r22*x11170)));
evalcond[6]=((((-1.0)*cj3*x11158*x11168))+((r12*x11170))+(((-1.0)*x11167))+((r11*x11156))+x11155+((x11157*x11171))+((r10*x11163)));
evalcond[7]=((((-1.0)*r21*x11163*x11168))+((r20*x11165))+(((-1.0)*x11167))+x11155+((r21*x11164))+((r20*x11154*x11156))+(((-1.0)*r22*sj3*x11169)));
evalcond[8]=(((r10*x11154*x11156))+((r11*x11164))+(((-1.0)*x11161))+(((-1.0)*sj3*x11157*x11168))+(((-1.0)*r12*sj3*x11169))+(((-1.0)*sj2*x11159))+((r10*x11165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11172=((-1.0)*r21);
CheckValue<IkReal> x11175 = IKatan2WithCheck(IkReal(x11172),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11175.valid){
continue;
}
IkReal x11173=((1.0)*(x11175.value));
IkReal x11174=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11173)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11173)));
IkReal gconst4=(x11172*x11174);
IkReal gconst5=((1.0)*r20*x11174);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11176=((-1.0)*r21);
CheckValue<IkReal> x11179 = IKatan2WithCheck(IkReal(x11176),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11179.valid){
continue;
}
IkReal x11177=((1.0)*(x11179.value));
IkReal x11178=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11177)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11177)));
IkReal gconst4=(x11176*x11178);
IkReal gconst5=((1.0)*r20*x11178);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11180=((-1.0)*r21);
CheckValue<IkReal> x11183 = IKatan2WithCheck(IkReal(x11180),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11183.valid){
continue;
}
IkReal x11181=((1.0)*(x11183.value));
IkReal x11182=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11181)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11181)));
IkReal gconst4=(x11180*x11182);
IkReal gconst5=((1.0)*r20*x11182);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11184=((-1.0)*r21);
CheckValue<IkReal> x11187 = IKatan2WithCheck(IkReal(x11184),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11187.valid){
continue;
}
IkReal x11185=((1.0)*(x11187.value));
IkReal x11186=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11185)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11185)));
IkReal gconst4=(x11184*x11186);
IkReal gconst5=((1.0)*r20*x11186);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11188=((-1.0)*r21);
CheckValue<IkReal> x11191 = IKatan2WithCheck(IkReal(x11188),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11191.valid){
continue;
}
IkReal x11189=((1.0)*(x11191.value));
IkReal x11190=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11189)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11189)));
IkReal gconst4=(x11188*x11190);
IkReal gconst5=((1.0)*r20*x11190);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11192=((-1.0)*r21);
CheckValue<IkReal> x11195 = IKatan2WithCheck(IkReal(x11192),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11195.valid){
continue;
}
IkReal x11193=((1.0)*(x11195.value));
IkReal x11194=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11193)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11193)));
IkReal gconst4=(x11192*x11194);
IkReal gconst5=((1.0)*r20*x11194);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11196=(gconst5*r00);
IkReal x11197=(gconst4*r01);
CheckValue<IkReal> x11198=IKPowWithIntegerCheck(IKsign(((((-2.0)*x11196*x11197))+(r02*r02)+(x11197*x11197)+(x11196*x11196))),-1);
if(!x11198.valid){
continue;
}
CheckValue<IkReal> x11199 = IKatan2WithCheck(IkReal((x11196+(((-1.0)*x11197)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11198.value)))+(x11199.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11200=IKsin(j4);
IkReal x11201=IKcos(j4);
IkReal x11202=(gconst4*r11);
IkReal x11203=(gconst5*r10);
IkReal x11204=(gconst4*r01);
IkReal x11205=(gconst5*r00);
IkReal x11206=(gconst4*r21);
IkReal x11207=(gconst5*r20);
IkReal x11208=((1.0)*x11201);
IkReal x11209=((1.0)*x11200);
evalcond[0]=((((-1.0)*r22*x11208))+((x11200*x11206))+(((-1.0)*x11207*x11209)));
evalcond[1]=((((-1.0)*x11203*x11209))+((x11200*x11202))+(((-1.0)*r12*x11208)));
evalcond[2]=(((x11201*x11205))+(((-1.0)*r02*x11209))+(((-1.0)*x11204*x11208)));
evalcond[3]=((1.0)+((x11200*x11204))+(((-1.0)*r02*x11208))+(((-1.0)*x11205*x11209)));
evalcond[4]=(((cj2*sj1))+((x11201*x11203))+((cj1*sj2))+(((-1.0)*r12*x11209))+(((-1.0)*x11202*x11208)));
evalcond[5]=((((-1.0)*r22*x11209))+(((-1.0)*x11206*x11208))+((x11201*x11207))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11210=((1.0)*gconst5);
CheckValue<IkReal> x11211 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11210)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11211.valid){
continue;
}
CheckValue<IkReal> x11212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11210))+(((-1.0)*gconst4*r20)))),-1);
if(!x11212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11211.value)+(((1.5707963267949)*(x11212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11213=IKsin(j4);
IkReal x11214=IKcos(j4);
IkReal x11215=(gconst4*r11);
IkReal x11216=(gconst5*r10);
IkReal x11217=(gconst4*r01);
IkReal x11218=(gconst5*r00);
IkReal x11219=(gconst4*r21);
IkReal x11220=(gconst5*r20);
IkReal x11221=((1.0)*x11214);
IkReal x11222=((1.0)*x11213);
evalcond[0]=((((-1.0)*x11220*x11222))+((x11213*x11219))+(((-1.0)*r22*x11221)));
evalcond[1]=((((-1.0)*x11216*x11222))+((x11213*x11215))+(((-1.0)*r12*x11221)));
evalcond[2]=((((-1.0)*x11217*x11221))+((x11214*x11218))+(((-1.0)*r02*x11222)));
evalcond[3]=((1.0)+(((-1.0)*x11218*x11222))+((x11213*x11217))+(((-1.0)*r02*x11221)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11215*x11221))+((x11214*x11216))+(((-1.0)*r12*x11222)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11219*x11221))+((x11214*x11220))+(((-1.0)*r22*x11222)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11223=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11223.valid){
continue;
}
CheckValue<IkReal> x11224 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11223.value)))+(x11224.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11225=IKsin(j4);
IkReal x11226=IKcos(j4);
IkReal x11227=(gconst4*r11);
IkReal x11228=(gconst5*r10);
IkReal x11229=(gconst4*r01);
IkReal x11230=(gconst5*r00);
IkReal x11231=(gconst4*r21);
IkReal x11232=(gconst5*r20);
IkReal x11233=((1.0)*x11226);
IkReal x11234=((1.0)*x11225);
evalcond[0]=(((x11225*x11231))+(((-1.0)*x11232*x11234))+(((-1.0)*r22*x11233)));
evalcond[1]=((((-1.0)*x11228*x11234))+(((-1.0)*r12*x11233))+((x11225*x11227)));
evalcond[2]=((((-1.0)*r02*x11234))+((x11226*x11230))+(((-1.0)*x11229*x11233)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11233))+(((-1.0)*x11230*x11234))+((x11225*x11229)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11226*x11228))+(((-1.0)*r12*x11234))+(((-1.0)*x11227*x11233)));
evalcond[5]=((((-1.0)*x11231*x11233))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11226*x11232))+(((-1.0)*r22*x11234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11235=((-1.0)*r21);
CheckValue<IkReal> x11238 = IKatan2WithCheck(IkReal(x11235),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11238.valid){
continue;
}
IkReal x11236=((1.0)*(x11238.value));
IkReal x11237=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11236)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11236)));
IkReal gconst4=(x11235*x11237);
IkReal gconst5=((1.0)*r20*x11237);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11239=((-1.0)*r21);
CheckValue<IkReal> x11242 = IKatan2WithCheck(IkReal(x11239),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11242.valid){
continue;
}
IkReal x11240=((1.0)*(x11242.value));
IkReal x11241=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11240)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11240)));
IkReal gconst4=(x11239*x11241);
IkReal gconst5=((1.0)*r20*x11241);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11243=((-1.0)*r21);
CheckValue<IkReal> x11246 = IKatan2WithCheck(IkReal(x11243),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11246.valid){
continue;
}
IkReal x11244=((1.0)*(x11246.value));
IkReal x11245=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11244)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11244)));
IkReal gconst4=(x11243*x11245);
IkReal gconst5=((1.0)*r20*x11245);
IkReal x11247=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11251=IKPowWithIntegerCheck(x11247,-1);
if(!x11251.valid){
continue;
}
IkReal x11248=x11251.value;
IkReal x11249=((1.0)*x11248);
IkReal x11250=((((-2.0)*r00*r01*r20*r21*x11248))+(((-1.0)*x11249*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-1.0)*x11249*(r01*r01)*(r21*r21))));
j4eval[0]=x11250;
j4eval[1]=IKsign(x11250);
j4eval[2]=r02;
j4eval[3]=x11247;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11252=(gconst4*r01);
IkReal x11253=(gconst5*r00);
CheckValue<IkReal> x11254=IKPowWithIntegerCheck(IKsign(((((2.0)*x11252*x11253))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11253*x11253)))+(((-1.0)*(x11252*x11252))))),-1);
if(!x11254.valid){
continue;
}
CheckValue<IkReal> x11255 = IKatan2WithCheck(IkReal(((((-1.0)*x11253))+x11252)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11254.value)))+(x11255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11256=IKcos(j4);
IkReal x11257=IKsin(j4);
IkReal x11258=(gconst4*r11);
IkReal x11259=(gconst5*r10);
IkReal x11260=(gconst5*r00);
IkReal x11261=(gconst5*r20);
IkReal x11262=((1.0)*x11256);
IkReal x11263=(gconst4*x11256);
IkReal x11264=((1.0)*x11257);
IkReal x11265=(gconst4*x11257);
evalcond[0]=((((-1.0)*x11260*x11262))+((r02*x11257))+((r01*x11263)));
evalcond[1]=(((r21*x11265))+(((-1.0)*x11261*x11264))+(((-1.0)*r22*x11262)));
evalcond[2]=(((x11257*x11258))+(((-1.0)*r12*x11262))+(((-1.0)*x11259*x11264)));
evalcond[3]=((1.0)+(((-1.0)*x11260*x11264))+(((-1.0)*r02*x11262))+((r01*x11265)));
evalcond[4]=(((cj2*sj1))+((x11256*x11258))+((cj1*sj2))+((r12*x11257))+(((-1.0)*x11259*x11262)));
evalcond[5]=(((r22*x11257))+((r21*x11263))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11261*x11262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11266=((1.0)*gconst5);
CheckValue<IkReal> x11267 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11266))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11267.valid){
continue;
}
CheckValue<IkReal> x11268=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11266))+(((-1.0)*gconst4*r20)))),-1);
if(!x11268.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11267.value)+(((1.5707963267949)*(x11268.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11269=IKcos(j4);
IkReal x11270=IKsin(j4);
IkReal x11271=(gconst4*r11);
IkReal x11272=(gconst5*r10);
IkReal x11273=(gconst5*r00);
IkReal x11274=(gconst5*r20);
IkReal x11275=((1.0)*x11269);
IkReal x11276=(gconst4*x11269);
IkReal x11277=((1.0)*x11270);
IkReal x11278=(gconst4*x11270);
evalcond[0]=(((r01*x11276))+((r02*x11270))+(((-1.0)*x11273*x11275)));
evalcond[1]=((((-1.0)*x11274*x11277))+((r21*x11278))+(((-1.0)*r22*x11275)));
evalcond[2]=((((-1.0)*r12*x11275))+((x11270*x11271))+(((-1.0)*x11272*x11277)));
evalcond[3]=((1.0)+((r01*x11278))+(((-1.0)*r02*x11275))+(((-1.0)*x11273*x11277)));
evalcond[4]=(((cj2*sj1))+((r12*x11270))+((cj1*sj2))+((x11269*x11271))+(((-1.0)*x11272*x11275)));
evalcond[5]=(((r22*x11270))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11274*x11275))+((r21*x11276)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11279=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11279.valid){
continue;
}
CheckValue<IkReal> x11280 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11279.value)))+(x11280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11281=IKcos(j4);
IkReal x11282=IKsin(j4);
IkReal x11283=(gconst4*r11);
IkReal x11284=(gconst5*r10);
IkReal x11285=(gconst5*r00);
IkReal x11286=(gconst5*r20);
IkReal x11287=((1.0)*x11281);
IkReal x11288=(gconst4*x11281);
IkReal x11289=((1.0)*x11282);
IkReal x11290=(gconst4*x11282);
evalcond[0]=(((r02*x11282))+(((-1.0)*x11285*x11287))+((r01*x11288)));
evalcond[1]=((((-1.0)*r22*x11287))+((r21*x11290))+(((-1.0)*x11286*x11289)));
evalcond[2]=((((-1.0)*r12*x11287))+(((-1.0)*x11284*x11289))+((x11282*x11283)));
evalcond[3]=((1.0)+((r01*x11290))+(((-1.0)*r02*x11287))+(((-1.0)*x11285*x11289)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11284*x11287))+((cj1*sj2))+((r12*x11282))+((x11281*x11283)));
evalcond[5]=(((r22*x11282))+((r21*x11288))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11286*x11287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11291=((-1.0)*r21);
CheckValue<IkReal> x11294 = IKatan2WithCheck(IkReal(x11291),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11294.valid){
continue;
}
IkReal x11292=((1.0)*(x11294.value));
IkReal x11293=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11292)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11292)));
IkReal gconst4=(x11291*x11293);
IkReal gconst5=((1.0)*r20*x11293);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11295=((-1.0)*r21);
CheckValue<IkReal> x11298 = IKatan2WithCheck(IkReal(x11295),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11298.valid){
continue;
}
IkReal x11296=((1.0)*(x11298.value));
IkReal x11297=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11296)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11296)));
IkReal gconst4=(x11295*x11297);
IkReal gconst5=((1.0)*r20*x11297);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11299=((-1.0)*r21);
CheckValue<IkReal> x11302 = IKatan2WithCheck(IkReal(x11299),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11302.valid){
continue;
}
IkReal x11300=((1.0)*(x11302.value));
IkReal x11301=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11300)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11300)));
IkReal gconst4=(x11299*x11301);
IkReal gconst5=((1.0)*r20*x11301);
IkReal x11303=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11307=IKPowWithIntegerCheck(x11303,-1);
if(!x11307.valid){
continue;
}
IkReal x11304=x11307.value;
IkReal x11305=((1.0)*x11304);
IkReal x11306=((((-1.0)*(r02*r02)))+(((-1.0)*x11305*(r01*r01)*(r21*r21)))+(((-1.0)*x11305*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x11304)));
j4eval[0]=x11306;
j4eval[1]=IKsign(x11306);
j4eval[2]=r02;
j4eval[3]=x11303;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11308=(gconst4*r01);
IkReal x11309=(gconst5*r00);
CheckValue<IkReal> x11310 = IKatan2WithCheck(IkReal((x11308+(((-1.0)*x11309)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11310.valid){
continue;
}
CheckValue<IkReal> x11311=IKPowWithIntegerCheck(IKsign(((((2.0)*x11308*x11309))+(((-1.0)*(r02*r02)))+(((-1.0)*(x11308*x11308)))+(((-1.0)*(x11309*x11309))))),-1);
if(!x11311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11310.value)+(((1.5707963267949)*(x11311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11312=IKcos(j4);
IkReal x11313=IKsin(j4);
IkReal x11314=(gconst5*r10);
IkReal x11315=(gconst5*r00);
IkReal x11316=(gconst5*r20);
IkReal x11317=((1.0)*x11312);
IkReal x11318=(gconst4*x11313);
IkReal x11319=(gconst4*x11312);
IkReal x11320=((1.0)*x11313);
evalcond[0]=(((r02*x11313))+(((-1.0)*x11315*x11317))+((r01*x11319)));
evalcond[1]=((((-1.0)*r22*x11317))+((r21*x11318))+(((-1.0)*x11316*x11320)));
evalcond[2]=(((r11*x11318))+(((-1.0)*r12*x11317))+(((-1.0)*x11314*x11320)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11317))+(((-1.0)*x11315*x11320))+((r01*x11318)));
evalcond[4]=(((cj2*sj1))+((r22*x11313))+((cj1*sj2))+((r21*x11319))+(((-1.0)*x11316*x11317)));
evalcond[5]=(((r11*x11319))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11314*x11317))+((r12*x11313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11321=((1.0)*gconst5);
CheckValue<IkReal> x11322 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11321)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11322.valid){
continue;
}
CheckValue<IkReal> x11323=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11321))+(((-1.0)*gconst4*r20)))),-1);
if(!x11323.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11322.value)+(((1.5707963267949)*(x11323.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11324=IKcos(j4);
IkReal x11325=IKsin(j4);
IkReal x11326=(gconst5*r10);
IkReal x11327=(gconst5*r00);
IkReal x11328=(gconst5*r20);
IkReal x11329=((1.0)*x11324);
IkReal x11330=(gconst4*x11325);
IkReal x11331=(gconst4*x11324);
IkReal x11332=((1.0)*x11325);
evalcond[0]=((((-1.0)*x11327*x11329))+((r02*x11325))+((r01*x11331)));
evalcond[1]=((((-1.0)*r22*x11329))+((r21*x11330))+(((-1.0)*x11328*x11332)));
evalcond[2]=(((r11*x11330))+(((-1.0)*r12*x11329))+(((-1.0)*x11326*x11332)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11329))+((r01*x11330))+(((-1.0)*x11327*x11332)));
evalcond[4]=(((cj2*sj1))+((r22*x11325))+((cj1*sj2))+(((-1.0)*x11328*x11329))+((r21*x11331)));
evalcond[5]=(((r11*x11331))+(((-1.0)*x11326*x11329))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x11325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11333=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11333.valid){
continue;
}
CheckValue<IkReal> x11334 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11334.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11333.value)))+(x11334.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11335=IKcos(j4);
IkReal x11336=IKsin(j4);
IkReal x11337=(gconst5*r10);
IkReal x11338=(gconst5*r00);
IkReal x11339=(gconst5*r20);
IkReal x11340=((1.0)*x11335);
IkReal x11341=(gconst4*x11336);
IkReal x11342=(gconst4*x11335);
IkReal x11343=((1.0)*x11336);
evalcond[0]=((((-1.0)*x11338*x11340))+((r01*x11342))+((r02*x11336)));
evalcond[1]=((((-1.0)*r22*x11340))+(((-1.0)*x11339*x11343))+((r21*x11341)));
evalcond[2]=(((r11*x11341))+(((-1.0)*x11337*x11343))+(((-1.0)*r12*x11340)));
evalcond[3]=((1.0)+(((-1.0)*x11338*x11343))+((r01*x11341))+(((-1.0)*r02*x11340)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11339*x11340))+((r22*x11336))+((r21*x11342)));
evalcond[5]=(((r11*x11342))+((r12*x11336))+(((-1.0)*sj1*sj2))+(((-1.0)*x11337*x11340))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11344=((-1.0)*r21);
CheckValue<IkReal> x11347 = IKatan2WithCheck(IkReal(x11344),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11347.valid){
continue;
}
IkReal x11345=((1.0)*(x11347.value));
IkReal x11346=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11345)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11345)));
IkReal gconst4=(x11344*x11346);
IkReal gconst5=((1.0)*r20*x11346);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11348=((-1.0)*r21);
CheckValue<IkReal> x11351 = IKatan2WithCheck(IkReal(x11348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11351.valid){
continue;
}
IkReal x11349=((1.0)*(x11351.value));
IkReal x11350=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11349)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11349)));
IkReal gconst4=(x11348*x11350);
IkReal gconst5=((1.0)*r20*x11350);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11352=((-1.0)*r21);
CheckValue<IkReal> x11355 = IKatan2WithCheck(IkReal(x11352),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11355.valid){
continue;
}
IkReal x11353=((1.0)*(x11355.value));
IkReal x11354=x10146;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11353)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11353)));
IkReal gconst4=(x11352*x11354);
IkReal gconst5=((1.0)*r20*x11354);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11356=(gconst5*r00);
IkReal x11357=(gconst4*r01);
CheckValue<IkReal> x11358 = IKatan2WithCheck(IkReal((x11356+(((-1.0)*x11357)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11358.valid){
continue;
}
CheckValue<IkReal> x11359=IKPowWithIntegerCheck(IKsign(((x11357*x11357)+(((-2.0)*x11356*x11357))+(r02*r02)+(x11356*x11356))),-1);
if(!x11359.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11358.value)+(((1.5707963267949)*(x11359.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11360=IKsin(j4);
IkReal x11361=IKcos(j4);
IkReal x11362=(gconst4*r11);
IkReal x11363=(gconst5*r10);
IkReal x11364=(gconst5*r00);
IkReal x11365=(gconst5*r20);
IkReal x11366=((1.0)*x11361);
IkReal x11367=(gconst4*x11360);
IkReal x11368=((1.0)*x11360);
evalcond[0]=(((r21*x11367))+(((-1.0)*r22*x11366))+(((-1.0)*x11365*x11368)));
evalcond[1]=((((-1.0)*x11363*x11368))+(((-1.0)*r12*x11366))+((x11360*x11362)));
evalcond[2]=(((x11361*x11364))+(((-1.0)*gconst4*r01*x11366))+(((-1.0)*r02*x11368)));
evalcond[3]=((1.0)+((r01*x11367))+(((-1.0)*r02*x11366))+(((-1.0)*x11364*x11368)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x11368))+((x11361*x11365))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11366)));
evalcond[5]=((((-1.0)*x11362*x11366))+((x11361*x11363))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11368))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11369=((1.0)*gconst5);
CheckValue<IkReal> x11370 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11369))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11370.valid){
continue;
}
CheckValue<IkReal> x11371=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11369))+(((-1.0)*gconst4*r20)))),-1);
if(!x11371.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11370.value)+(((1.5707963267949)*(x11371.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11372=IKsin(j4);
IkReal x11373=IKcos(j4);
IkReal x11374=(gconst4*r11);
IkReal x11375=(gconst5*r10);
IkReal x11376=(gconst5*r00);
IkReal x11377=(gconst5*r20);
IkReal x11378=((1.0)*x11373);
IkReal x11379=(gconst4*x11372);
IkReal x11380=((1.0)*x11372);
evalcond[0]=(((r21*x11379))+(((-1.0)*r22*x11378))+(((-1.0)*x11377*x11380)));
evalcond[1]=((((-1.0)*x11375*x11380))+(((-1.0)*r12*x11378))+((x11372*x11374)));
evalcond[2]=((((-1.0)*gconst4*r01*x11378))+(((-1.0)*r02*x11380))+((x11373*x11376)));
evalcond[3]=((1.0)+((r01*x11379))+(((-1.0)*r02*x11378))+(((-1.0)*x11376*x11380)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11380))+((x11373*x11377))+(((-1.0)*gconst4*r21*x11378)));
evalcond[5]=((((-1.0)*x11374*x11378))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11380))+((x11373*x11375))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11381=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11381.valid){
continue;
}
CheckValue<IkReal> x11382 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11382.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11381.value)))+(x11382.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11383=IKsin(j4);
IkReal x11384=IKcos(j4);
IkReal x11385=(gconst4*r11);
IkReal x11386=(gconst5*r10);
IkReal x11387=(gconst5*r00);
IkReal x11388=(gconst5*r20);
IkReal x11389=((1.0)*x11384);
IkReal x11390=(gconst4*x11383);
IkReal x11391=((1.0)*x11383);
evalcond[0]=((((-1.0)*r22*x11389))+((r21*x11390))+(((-1.0)*x11388*x11391)));
evalcond[1]=(((x11383*x11385))+(((-1.0)*r12*x11389))+(((-1.0)*x11386*x11391)));
evalcond[2]=(((x11384*x11387))+(((-1.0)*r02*x11391))+(((-1.0)*gconst4*r01*x11389)));
evalcond[3]=((1.0)+((r01*x11390))+(((-1.0)*r02*x11389))+(((-1.0)*x11387*x11391)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11389))+((x11384*x11388))+((cj1*sj2))+(((-1.0)*r22*x11391)));
evalcond[5]=(((x11384*x11386))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r12*x11391))+(((-1.0)*x11385*x11389)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11392=((-1.0)*r21);
IkReal x11393=((-1.0)*r20);
CheckValue<IkReal> x11395 = IKatan2WithCheck(IkReal(x11392),IkReal(x11393),IKFAST_ATAN2_MAGTHRESH);
if(!x11395.valid){
continue;
}
IkReal x11394=((1.0)*(x11395.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11394)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11393);
rxp0_2=(py*r00);
rxp1_0=(py*x11392);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11394)));
IkReal gconst4=x11392;
IkReal gconst5=((1.0)*r20);
IkReal x11396=((1.0)*r01*r21);
IkReal x11397=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11396))+(((-1.0)*x11397)));
j4eval[1]=((((-1.0)*cj3*x11397))+(((-1.0)*cj3*x11396)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11398=((-1.0)*r21);
IkReal x11399=((-1.0)*r20);
CheckValue<IkReal> x11401 = IKatan2WithCheck(IkReal(x11398),IkReal(x11399),IKFAST_ATAN2_MAGTHRESH);
if(!x11401.valid){
continue;
}
IkReal x11400=((1.0)*(x11401.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11400)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11399);
rxp0_2=(py*r00);
rxp1_0=(py*x11398);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11400)));
IkReal gconst4=x11398;
IkReal gconst5=((1.0)*r20);
IkReal x11402=((1.0)*r01*r21);
IkReal x11403=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11402))+(((-1.0)*x11403)));
j4eval[1]=(((sj3*x11402))+((sj3*x11403)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11404=((-1.0)*r21);
IkReal x11405=((-1.0)*r20);
CheckValue<IkReal> x11407 = IKatan2WithCheck(IkReal(x11404),IkReal(x11405),IKFAST_ATAN2_MAGTHRESH);
if(!x11407.valid){
continue;
}
IkReal x11406=((1.0)*(x11407.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11406)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11405);
rxp0_2=(py*r00);
rxp1_0=(py*x11404);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11406)));
IkReal gconst4=x11404;
IkReal gconst5=((1.0)*r20);
IkReal x11408=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r00*r20*x11408))+(((-1.0)*r01*r21*x11408)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11409=((1.0)*gconst5);
CheckValue<IkReal> x11410=IKPowWithIntegerCheck(cj3,-1);
if(!x11410.valid){
continue;
}
CheckValue<IkReal> x11411=IKPowWithIntegerCheck(r12,-1);
if(!x11411.valid){
continue;
}
CheckValue<IkReal> x11412=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11409))+((cj3*gconst4*r01))),-1);
if(!x11412.valid){
continue;
}
if( IKabs(((x11410.value)*(x11411.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11412.value)*(((((-1.0)*r01*sj3*x11409))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11410.value)*(x11411.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11412.value)*(((((-1.0)*r01*sj3*x11409))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11410.value)*(x11411.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11412.value)*(((((-1.0)*r01*sj3*x11409))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11413=IKsin(j4);
IkReal x11414=IKcos(j4);
IkReal x11415=(cj2*sj1);
IkReal x11416=(cj1*sj2);
IkReal x11417=(sj1*sj2);
IkReal x11418=(gconst5*sj3);
IkReal x11419=(gconst5*r00);
IkReal x11420=(cj3*gconst5);
IkReal x11421=(gconst4*sj3);
IkReal x11422=(cj3*gconst4);
IkReal x11423=(cj1*cj2);
IkReal x11424=((1.0)*x11413);
IkReal x11425=(gconst4*x11413);
IkReal x11426=((1.0)*x11414);
IkReal x11427=(x11416+x11415);
IkReal x11428=(x11414*x11418);
IkReal x11429=(x11414*x11422);
evalcond[0]=((-1.0)*r12*x11414);
evalcond[1]=(((r21*x11425))+(((-1.0)*gconst5*r20*x11424)));
evalcond[2]=(((cj3*r12*x11413))+x11423+(((-1.0)*x11417)));
evalcond[3]=(x11427+(((-1.0)*r12*sj3*x11424)));
evalcond[4]=((1.0)+(((-1.0)*x11419*x11424))+((r01*x11425)));
evalcond[5]=((((-1.0)*cj3*x11419*x11426))+((r01*x11418))+((r01*x11429))+((r00*x11421)));
evalcond[6]=(((r01*x11420))+((r00*x11422))+((r00*x11428))+(((-1.0)*r01*x11421*x11426)));
evalcond[7]=(((r20*x11421))+x11427+((r21*x11418))+((r21*x11429))+(((-1.0)*r20*x11420*x11426)));
evalcond[8]=(((r20*x11422))+((r20*x11428))+x11417+(((-1.0)*r21*x11421*x11426))+((r21*x11420))+(((-1.0)*x11423)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11430=((1.0)*gconst4);
IkReal x11431=(gconst5*r00);
CheckValue<IkReal> x11432=IKPowWithIntegerCheck((((gconst4*r01))+(((-1.0)*x11431))),-1);
if(!x11432.valid){
continue;
}
CheckValue<IkReal> x11433=IKPowWithIntegerCheck(((((-1.0)*r01*sj3*x11430))+((sj3*x11431))),-1);
if(!x11433.valid){
continue;
}
if( IKabs(((-1.0)*(x11432.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11433.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11430)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11432.value)))+IKsqr(((x11433.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11430))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11432.value)), ((x11433.value)*(((((-1.0)*cj3*gconst5*r01))+(((-1.0)*cj3*r00*x11430))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11434=IKsin(j4);
IkReal x11435=IKcos(j4);
IkReal x11436=(cj2*sj1);
IkReal x11437=(cj1*sj2);
IkReal x11438=(sj1*sj2);
IkReal x11439=(gconst5*sj3);
IkReal x11440=(gconst5*r00);
IkReal x11441=(cj3*gconst5);
IkReal x11442=(gconst4*sj3);
IkReal x11443=(cj3*gconst4);
IkReal x11444=(cj1*cj2);
IkReal x11445=((1.0)*x11434);
IkReal x11446=(gconst4*x11434);
IkReal x11447=((1.0)*x11435);
IkReal x11448=(x11436+x11437);
IkReal x11449=(x11435*x11439);
IkReal x11450=(x11435*x11443);
evalcond[0]=((-1.0)*r12*x11435);
evalcond[1]=((((-1.0)*gconst5*r20*x11445))+((r21*x11446)));
evalcond[2]=(x11444+((cj3*r12*x11434))+(((-1.0)*x11438)));
evalcond[3]=(x11448+(((-1.0)*r12*sj3*x11445)));
evalcond[4]=((1.0)+(((-1.0)*x11440*x11445))+((r01*x11446)));
evalcond[5]=(((r00*x11442))+(((-1.0)*cj3*x11440*x11447))+((r01*x11450))+((r01*x11439)));
evalcond[6]=(((r00*x11449))+((r00*x11443))+((r01*x11441))+(((-1.0)*r01*x11442*x11447)));
evalcond[7]=(x11448+((r21*x11450))+((r21*x11439))+((r20*x11442))+(((-1.0)*r20*x11441*x11447)));
evalcond[8]=((((-1.0)*x11444))+x11438+((r20*x11449))+((r20*x11443))+((r21*x11441))+(((-1.0)*r21*x11442*x11447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11451=((1.0)*gconst5);
IkReal x11452=(gconst4*r01);
CheckValue<IkReal> x11453=IKPowWithIntegerCheck(((((-1.0)*r00*x11451))+x11452),-1);
if(!x11453.valid){
continue;
}
CheckValue<IkReal> x11454=IKPowWithIntegerCheck((((cj3*x11452))+(((-1.0)*cj3*r00*x11451))),-1);
if(!x11454.valid){
continue;
}
if( IKabs(((-1.0)*(x11453.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11454.value)*(((((-1.0)*r01*sj3*x11451))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11453.value)))+IKsqr(((x11454.value)*(((((-1.0)*r01*sj3*x11451))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11453.value)), ((x11454.value)*(((((-1.0)*r01*sj3*x11451))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11455=IKsin(j4);
IkReal x11456=IKcos(j4);
IkReal x11457=(cj2*sj1);
IkReal x11458=(cj1*sj2);
IkReal x11459=(sj1*sj2);
IkReal x11460=(gconst5*sj3);
IkReal x11461=(gconst5*r00);
IkReal x11462=(cj3*gconst5);
IkReal x11463=(gconst4*sj3);
IkReal x11464=(cj3*gconst4);
IkReal x11465=(cj1*cj2);
IkReal x11466=((1.0)*x11455);
IkReal x11467=(gconst4*x11455);
IkReal x11468=((1.0)*x11456);
IkReal x11469=(x11458+x11457);
IkReal x11470=(x11456*x11460);
IkReal x11471=(x11456*x11464);
evalcond[0]=((-1.0)*r12*x11456);
evalcond[1]=((((-1.0)*gconst5*r20*x11466))+((r21*x11467)));
evalcond[2]=(x11465+(((-1.0)*x11459))+((cj3*r12*x11455)));
evalcond[3]=(x11469+(((-1.0)*r12*sj3*x11466)));
evalcond[4]=((1.0)+((r01*x11467))+(((-1.0)*x11461*x11466)));
evalcond[5]=(((r01*x11460))+(((-1.0)*cj3*x11461*x11468))+((r00*x11463))+((r01*x11471)));
evalcond[6]=(((r00*x11470))+((r01*x11462))+(((-1.0)*r01*x11463*x11468))+((r00*x11464)));
evalcond[7]=((((-1.0)*r20*x11462*x11468))+x11469+((r20*x11463))+((r21*x11471))+((r21*x11460)));
evalcond[8]=(x11459+(((-1.0)*r21*x11463*x11468))+((r20*x11470))+((r20*x11464))+((r21*x11462))+(((-1.0)*x11465)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11472=gconst4*gconst4;
IkReal x11473=gconst5*gconst5;
IkReal x11474=(r01*r20);
IkReal x11475=(gconst4*sj3);
IkReal x11476=(r01*r21);
IkReal x11477=((1.0)*cj3);
IkReal x11478=(r00*r21);
IkReal x11479=(r00*r20);
IkReal x11480=(cj3*gconst4*gconst5);
IkReal x11481=((1.0)*x11473);
CheckValue<IkReal> x11482 = IKatan2WithCheck(IkReal((((r00*r22*x11475))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11475*x11476))+((sj3*x11472*x11478))+(((-1.0)*gconst5*x11475*x11479))+(((-1.0)*sj3*x11474*x11481)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11482.valid){
continue;
}
CheckValue<IkReal> x11483=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11473*x11477*x11479))+(((-1.0)*x11472*x11476*x11477))+(((-1.0)*r02*r22*x11477))+((x11474*x11480))+((x11478*x11480)))),-1);
if(!x11483.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11482.value)+(((1.5707963267949)*(x11483.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11484=IKsin(j4);
IkReal x11485=IKcos(j4);
IkReal x11486=(cj2*sj1);
IkReal x11487=(cj1*sj2);
IkReal x11488=(gconst5*sj3);
IkReal x11489=(gconst4*r11);
IkReal x11490=(sj1*sj2);
IkReal x11491=(gconst5*r10);
IkReal x11492=(cj1*cj2);
IkReal x11493=(gconst4*r01);
IkReal x11494=(gconst5*r00);
IkReal x11495=(gconst4*sj3);
IkReal x11496=(cj3*gconst5);
IkReal x11497=(cj3*gconst4);
IkReal x11498=(gconst4*r21);
IkReal x11499=((1.0)*x11485);
IkReal x11500=((1.0)*x11484);
IkReal x11501=(cj3*x11484);
IkReal x11502=(cj3*x11485);
IkReal x11503=(x11487+x11486);
evalcond[0]=((((-1.0)*gconst5*r20*x11500))+(((-1.0)*r22*x11499))+((x11484*x11498)));
evalcond[1]=(((x11484*x11489))+(((-1.0)*x11491*x11500))+(((-1.0)*r12*x11499)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11499))+(((-1.0)*x11494*x11500))+((x11484*x11493)));
evalcond[3]=(((r00*x11495))+(((-1.0)*cj3*x11494*x11499))+((r01*x11488))+((x11493*x11502))+((r02*x11501)));
evalcond[4]=(((r00*x11497))+(((-1.0)*r02*sj3*x11500))+(((-1.0)*sj3*x11493*x11499))+((r00*x11485*x11488))+((r01*x11496)));
evalcond[5]=(x11503+((r20*x11495))+((r21*x11485*x11497))+(((-1.0)*r20*x11496*x11499))+((r21*x11488))+((r22*x11501)));
evalcond[6]=(((x11489*x11502))+x11492+((r12*x11501))+((r10*x11495))+((r11*x11488))+(((-1.0)*cj3*x11491*x11499))+(((-1.0)*x11490)));
evalcond[7]=((((-1.0)*r12*sj3*x11500))+x11503+((r11*x11496))+((r10*x11497))+(((-1.0)*sj3*x11489*x11499))+((r10*x11485*x11488)));
evalcond[8]=(x11490+((r21*x11496))+((r20*x11497))+(((-1.0)*r22*sj3*x11500))+((r20*x11485*x11488))+(((-1.0)*x11492))+(((-1.0)*r21*x11495*x11499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11504=((1.0)*gconst5);
CheckValue<IkReal> x11505 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11504))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11505.valid){
continue;
}
CheckValue<IkReal> x11506=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11504))+(((-1.0)*gconst4*r20)))),-1);
if(!x11506.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11505.value)+(((1.5707963267949)*(x11506.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11507=IKsin(j4);
IkReal x11508=IKcos(j4);
IkReal x11509=(cj2*sj1);
IkReal x11510=(cj1*sj2);
IkReal x11511=(gconst5*sj3);
IkReal x11512=(gconst4*r11);
IkReal x11513=(sj1*sj2);
IkReal x11514=(gconst5*r10);
IkReal x11515=(cj1*cj2);
IkReal x11516=(gconst4*r01);
IkReal x11517=(gconst5*r00);
IkReal x11518=(gconst4*sj3);
IkReal x11519=(cj3*gconst5);
IkReal x11520=(cj3*gconst4);
IkReal x11521=(gconst4*r21);
IkReal x11522=((1.0)*x11508);
IkReal x11523=((1.0)*x11507);
IkReal x11524=(cj3*x11507);
IkReal x11525=(cj3*x11508);
IkReal x11526=(x11509+x11510);
evalcond[0]=((((-1.0)*gconst5*r20*x11523))+((x11507*x11521))+(((-1.0)*r22*x11522)));
evalcond[1]=((((-1.0)*x11514*x11523))+((x11507*x11512))+(((-1.0)*r12*x11522)));
evalcond[2]=((1.0)+(((-1.0)*r02*x11522))+(((-1.0)*x11517*x11523))+((x11507*x11516)));
evalcond[3]=(((r01*x11511))+((x11516*x11525))+(((-1.0)*cj3*x11517*x11522))+((r02*x11524))+((r00*x11518)));
evalcond[4]=(((r01*x11519))+(((-1.0)*sj3*x11516*x11522))+(((-1.0)*r02*sj3*x11523))+((r00*x11520))+((r00*x11508*x11511)));
evalcond[5]=(((r21*x11508*x11520))+x11526+((r20*x11518))+(((-1.0)*r20*x11519*x11522))+((r21*x11511))+((r22*x11524)));
evalcond[6]=(((x11512*x11525))+(((-1.0)*x11513))+x11515+((r12*x11524))+((r10*x11518))+((r11*x11511))+(((-1.0)*cj3*x11514*x11522)));
evalcond[7]=(x11526+(((-1.0)*r12*sj3*x11523))+(((-1.0)*sj3*x11512*x11522))+((r10*x11508*x11511))+((r10*x11520))+((r11*x11519)));
evalcond[8]=((((-1.0)*r21*x11518*x11522))+(((-1.0)*x11515))+x11513+((r20*x11520))+((r21*x11519))+(((-1.0)*r22*sj3*x11523))+((r20*x11508*x11511)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11527=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11527.valid){
continue;
}
CheckValue<IkReal> x11528 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11528.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11527.value)))+(x11528.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11529=IKsin(j4);
IkReal x11530=IKcos(j4);
IkReal x11531=(cj2*sj1);
IkReal x11532=(cj1*sj2);
IkReal x11533=(gconst5*sj3);
IkReal x11534=(gconst4*r11);
IkReal x11535=(sj1*sj2);
IkReal x11536=(gconst5*r10);
IkReal x11537=(cj1*cj2);
IkReal x11538=(gconst4*r01);
IkReal x11539=(gconst5*r00);
IkReal x11540=(gconst4*sj3);
IkReal x11541=(cj3*gconst5);
IkReal x11542=(cj3*gconst4);
IkReal x11543=(gconst4*r21);
IkReal x11544=((1.0)*x11530);
IkReal x11545=((1.0)*x11529);
IkReal x11546=(cj3*x11529);
IkReal x11547=(cj3*x11530);
IkReal x11548=(x11531+x11532);
evalcond[0]=((((-1.0)*gconst5*r20*x11545))+((x11529*x11543))+(((-1.0)*r22*x11544)));
evalcond[1]=(((x11529*x11534))+(((-1.0)*x11536*x11545))+(((-1.0)*r12*x11544)));
evalcond[2]=((1.0)+((x11529*x11538))+(((-1.0)*x11539*x11545))+(((-1.0)*r02*x11544)));
evalcond[3]=(((r00*x11540))+((x11538*x11547))+((r01*x11533))+(((-1.0)*cj3*x11539*x11544))+((r02*x11546)));
evalcond[4]=(((r00*x11542))+((r01*x11541))+(((-1.0)*sj3*x11538*x11544))+(((-1.0)*r02*sj3*x11545))+((r00*x11530*x11533)));
evalcond[5]=(x11548+(((-1.0)*r20*x11541*x11544))+((r21*x11533))+((r20*x11540))+((r21*x11530*x11542))+((r22*x11546)));
evalcond[6]=(((r10*x11540))+x11537+(((-1.0)*cj3*x11536*x11544))+((r11*x11533))+((r12*x11546))+(((-1.0)*x11535))+((x11534*x11547)));
evalcond[7]=(((r10*x11542))+x11548+(((-1.0)*sj3*x11534*x11544))+((r10*x11530*x11533))+((r11*x11541))+(((-1.0)*r12*sj3*x11545)));
evalcond[8]=(x11535+((r20*x11542))+(((-1.0)*r22*sj3*x11545))+(((-1.0)*r21*x11540*x11544))+((r20*x11530*x11533))+((r21*x11541))+(((-1.0)*x11537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11549=((-1.0)*r21);
IkReal x11550=((-1.0)*px);
CheckValue<IkReal> x11552 = IKatan2WithCheck(IkReal(x11549),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11552.valid){
continue;
}
IkReal x11551=((1.0)*(x11552.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11551)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11550);
rxp1_1=(px*r21);
rxp1_2=(r11*x11550);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11551)));
IkReal gconst4=x11549;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11553=((-1.0)*r21);
IkReal x11554=((-1.0)*px);
CheckValue<IkReal> x11556 = IKatan2WithCheck(IkReal(x11553),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11556.valid){
continue;
}
IkReal x11555=((1.0)*(x11556.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11555)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11554);
rxp1_1=(px*r21);
rxp1_2=(r11*x11554);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11555)));
IkReal gconst4=x11553;
IkReal gconst5=((1.0)*r20);
IkReal x11557=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=((((-1.0)*x11557*(r21*r21)))+(((-1.0)*x11557))+((x11557*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11558=((-1.0)*r21);
IkReal x11559=((-1.0)*px);
CheckValue<IkReal> x11561 = IKatan2WithCheck(IkReal(x11558),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11561.valid){
continue;
}
IkReal x11560=((1.0)*(x11561.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11560)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11559);
rxp1_1=(px*r21);
rxp1_2=(r11*x11559);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11560)));
IkReal gconst4=x11558;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11562=((-1.0)*r21);
IkReal x11563=((-1.0)*px);
CheckValue<IkReal> x11565 = IKatan2WithCheck(IkReal(x11562),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11565.valid){
continue;
}
IkReal x11564=((1.0)*(x11565.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11564)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11563);
rxp1_1=(px*r21);
rxp1_2=(r11*x11563);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11564)));
IkReal gconst4=x11562;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11566=((-1.0)*r21);
IkReal x11567=((-1.0)*px);
CheckValue<IkReal> x11569 = IKatan2WithCheck(IkReal(x11566),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11569.valid){
continue;
}
IkReal x11568=((1.0)*(x11569.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11568)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11567);
rxp1_1=(px*r21);
rxp1_2=(r11*x11567);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11568)));
IkReal gconst4=x11566;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11570=((-1.0)*r21);
IkReal x11571=((-1.0)*px);
CheckValue<IkReal> x11573 = IKatan2WithCheck(IkReal(x11570),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11573.valid){
continue;
}
IkReal x11572=((1.0)*(x11573.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11572)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11571);
rxp1_1=(px*r21);
rxp1_2=(r11*x11571);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11572)));
IkReal gconst4=x11570;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11576=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11576.valid){
continue;
}
IkReal x11574=x11576.value;
IkReal x11575=(sj0*x11574);
cj4array[0]=(((cj1*sj2*x11575))+((cj2*sj1*x11575)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11577=IKsin(j4);
IkReal x11578=IKcos(j4);
IkReal x11579=(gconst5*r20);
IkReal x11580=(gconst4*x11577);
IkReal x11581=((1.0)*x11578);
IkReal x11582=((1.0)*x11577);
evalcond[0]=((-1.0)*r02*x11577);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11581)));
evalcond[2]=((((-1.0)*x11579*x11582))+((r21*x11580)));
evalcond[3]=((((-1.0)*gconst5*r10*x11582))+((r11*x11580)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11578*x11579))+(((-1.0)*gconst4*r21*x11581)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11584=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11584.valid){
continue;
}
IkReal x11583=x11584.value;
cj4array[0]=(((cj1*cj2*x11583))+(((-1.0)*sj1*sj2*x11583)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11585=IKsin(j4);
IkReal x11586=IKcos(j4);
IkReal x11587=(gconst5*r10);
IkReal x11588=((1.0)*sj0);
IkReal x11589=(gconst4*x11585);
IkReal x11590=((1.0)*x11586);
IkReal x11591=((1.0)*x11585);
evalcond[0]=((-1.0)*r02*x11585);
evalcond[1]=((((-1.0)*x11588))+(((-1.0)*r02*x11590)));
evalcond[2]=((((-1.0)*gconst5*r20*x11591))+((r21*x11589)));
evalcond[3]=((((-1.0)*x11587*x11591))+((r11*x11589)));
evalcond[4]=((((-1.0)*cj2*sj1*x11588))+((x11586*x11587))+(((-1.0)*cj1*sj2*x11588))+(((-1.0)*gconst4*r11*x11590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11592=IKPowWithIntegerCheck(r02,-1);
if(!x11592.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11592.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11593=IKsin(j4);
IkReal x11594=IKcos(j4);
IkReal x11595=((1.0)*sj0);
IkReal x11596=(gconst5*x11594);
IkReal x11597=(gconst4*x11593);
IkReal x11598=((1.0)*gconst4*x11594);
IkReal x11599=((1.0)*gconst5*x11593);
evalcond[0]=((-1.0)*r02*x11593);
evalcond[1]=(((r21*x11597))+(((-1.0)*r20*x11599)));
evalcond[2]=(((r11*x11597))+(((-1.0)*r10*x11599)));
evalcond[3]=(((r20*x11596))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11598)));
evalcond[4]=(((r10*x11596))+(((-1.0)*cj2*sj1*x11595))+(((-1.0)*cj1*sj2*x11595))+(((-1.0)*r11*x11598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11600=((-1.0)*r21);
IkReal x11601=((-1.0)*px);
CheckValue<IkReal> x11603 = IKatan2WithCheck(IkReal(x11600),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11603.valid){
continue;
}
IkReal x11602=((1.0)*(x11603.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11602)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11601);
rxp1_1=(px*r21);
rxp1_2=(r11*x11601);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11602)));
IkReal gconst4=x11600;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11604=((-1.0)*r21);
IkReal x11605=((-1.0)*px);
CheckValue<IkReal> x11607 = IKatan2WithCheck(IkReal(x11604),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11607.valid){
continue;
}
IkReal x11606=((1.0)*(x11607.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11606)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11605);
rxp1_1=(px*r21);
rxp1_2=(r11*x11605);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11606)));
IkReal gconst4=x11604;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11608=((-1.0)*r21);
IkReal x11609=((-1.0)*px);
CheckValue<IkReal> x11611 = IKatan2WithCheck(IkReal(x11608),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11611.valid){
continue;
}
IkReal x11610=((1.0)*(x11611.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11610)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11609);
rxp1_1=(px*r21);
rxp1_2=(r11*x11609);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11610)));
IkReal gconst4=x11608;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11614=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11614.valid){
continue;
}
IkReal x11612=x11614.value;
IkReal x11613=(sj0*x11612);
cj4array[0]=(((cj1*sj2*x11613))+((cj2*sj1*x11613)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11615=IKsin(j4);
IkReal x11616=IKcos(j4);
IkReal x11617=(gconst5*r20);
IkReal x11618=(gconst4*x11615);
IkReal x11619=((1.0)*x11616);
IkReal x11620=((1.0)*x11615);
evalcond[0]=(r02*x11615);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11619)));
evalcond[2]=(((r21*x11618))+(((-1.0)*x11617*x11620)));
evalcond[3]=(((r11*x11618))+(((-1.0)*gconst5*r10*x11620)));
evalcond[4]=(((gconst4*r21*x11616))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11617*x11619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11622=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11622.valid){
continue;
}
IkReal x11621=x11622.value;
cj4array[0]=(((cj1*cj2*x11621))+(((-1.0)*sj1*sj2*x11621)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11623=IKsin(j4);
IkReal x11624=IKcos(j4);
IkReal x11625=(gconst4*r11);
IkReal x11626=((1.0)*sj0);
IkReal x11627=(gconst5*r10);
IkReal x11628=((1.0)*x11624);
IkReal x11629=((1.0)*x11623);
evalcond[0]=(r02*x11623);
evalcond[1]=((((-1.0)*x11626))+(((-1.0)*r02*x11628)));
evalcond[2]=(((gconst4*r21*x11623))+(((-1.0)*gconst5*r20*x11629)));
evalcond[3]=(((x11623*x11625))+(((-1.0)*x11627*x11629)));
evalcond[4]=(((x11624*x11625))+(((-1.0)*cj1*sj2*x11626))+(((-1.0)*x11627*x11628))+(((-1.0)*cj2*sj1*x11626)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11630=IKPowWithIntegerCheck(r02,-1);
if(!x11630.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11630.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11631=IKsin(j4);
IkReal x11632=IKcos(j4);
IkReal x11633=(gconst4*r11);
IkReal x11634=((1.0)*cj1);
IkReal x11635=(gconst4*r21);
IkReal x11636=((1.0)*gconst5*x11632);
IkReal x11637=((1.0)*gconst5*x11631);
evalcond[0]=(r02*x11631);
evalcond[1]=(((x11631*x11635))+(((-1.0)*r20*x11637)));
evalcond[2]=((((-1.0)*r10*x11637))+((x11631*x11633)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r20*x11636))+((x11632*x11635))+(((-1.0)*cj2*x11634)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11636))+(((-1.0)*sj0*sj2*x11634))+((x11632*x11633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11639=IKPowWithIntegerCheck(r02,-1);
if(!x11639.valid){
continue;
}
IkReal x11638=x11639.value;
CheckValue<IkReal> x11640=IKPowWithIntegerCheck(cj3,-1);
if(!x11640.valid){
continue;
}
if( IKabs((x11638*(x11640.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11638)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11638*(x11640.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11638))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11638*(x11640.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11638));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11641=IKsin(j4);
IkReal x11642=IKcos(j4);
IkReal x11643=(gconst5*sj3);
IkReal x11644=(gconst4*r11);
IkReal x11645=(sj1*sj2);
IkReal x11646=((1.0)*gconst5);
IkReal x11647=(cj2*sj1);
IkReal x11648=((1.0)*sj0);
IkReal x11649=((1.0)*cj0);
IkReal x11650=(gconst4*r21);
IkReal x11651=(cj1*sj2);
IkReal x11652=(cj3*gconst4);
IkReal x11653=(gconst4*sj3);
IkReal x11654=(cj3*gconst5);
IkReal x11655=(r20*x11642);
IkReal x11656=((1.0)*cj1*cj2);
IkReal x11657=(r10*x11642);
IkReal x11658=(cj3*x11642);
IkReal x11659=(r02*x11641);
IkReal x11660=((1.0)*sj3*x11642);
evalcond[0]=((((-1.0)*r02*x11642))+(((-1.0)*x11648)));
evalcond[1]=(((x11641*x11650))+(((-1.0)*r20*x11641*x11646)));
evalcond[2]=(cj0+((x11641*x11644))+(((-1.0)*r10*x11641*x11646)));
evalcond[3]=((((-1.0)*cj1*cj2*x11649))+((cj3*x11659))+((cj0*x11645)));
evalcond[4]=((((-1.0)*sj3*x11659))+(((-1.0)*x11647*x11649))+(((-1.0)*x11649*x11651)));
evalcond[5]=(x11647+x11651+(((-1.0)*cj3*x11646*x11655))+((r21*x11643))+((x11650*x11658))+((r20*x11653)));
evalcond[6]=((((-1.0)*x11656))+x11645+((x11643*x11655))+((r21*x11654))+((r20*x11652))+(((-1.0)*x11650*x11660)));
evalcond[7]=(((r11*x11643))+(((-1.0)*cj1*cj2*x11648))+((r10*x11653))+((x11644*x11658))+((sj0*x11645))+(((-1.0)*cj3*x11646*x11657)));
evalcond[8]=(((r11*x11654))+((r10*x11652))+(((-1.0)*x11647*x11648))+((x11643*x11657))+(((-1.0)*x11644*x11660))+(((-1.0)*x11648*x11651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11661=((1.0)*gconst5);
CheckValue<IkReal> x11662=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11661))),-1);
if(!x11662.valid){
continue;
}
CheckValue<IkReal> x11663=IKPowWithIntegerCheck((((cj3*gconst4*r21))+(((-1.0)*cj3*r20*x11661))),-1);
if(!x11663.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11662.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11663.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11661)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11662.value)))+IKsqr(((x11663.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11661))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11662.value)), ((x11663.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11661))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11664=IKsin(j4);
IkReal x11665=IKcos(j4);
IkReal x11666=(gconst5*sj3);
IkReal x11667=(gconst4*r11);
IkReal x11668=(sj1*sj2);
IkReal x11669=((1.0)*gconst5);
IkReal x11670=(cj2*sj1);
IkReal x11671=((1.0)*sj0);
IkReal x11672=((1.0)*cj0);
IkReal x11673=(gconst4*r21);
IkReal x11674=(cj1*sj2);
IkReal x11675=(cj3*gconst4);
IkReal x11676=(gconst4*sj3);
IkReal x11677=(cj3*gconst5);
IkReal x11678=(r20*x11665);
IkReal x11679=((1.0)*cj1*cj2);
IkReal x11680=(r10*x11665);
IkReal x11681=(cj3*x11665);
IkReal x11682=(r02*x11664);
IkReal x11683=((1.0)*sj3*x11665);
evalcond[0]=((((-1.0)*r02*x11665))+(((-1.0)*x11671)));
evalcond[1]=((((-1.0)*r20*x11664*x11669))+((x11664*x11673)));
evalcond[2]=((((-1.0)*r10*x11664*x11669))+cj0+((x11664*x11667)));
evalcond[3]=(((cj0*x11668))+((cj3*x11682))+(((-1.0)*cj1*cj2*x11672)));
evalcond[4]=((((-1.0)*x11670*x11672))+(((-1.0)*x11672*x11674))+(((-1.0)*sj3*x11682)));
evalcond[5]=(((r21*x11666))+x11670+x11674+((r20*x11676))+(((-1.0)*cj3*x11669*x11678))+((x11673*x11681)));
evalcond[6]=(x11668+((x11666*x11678))+((r20*x11675))+((r21*x11677))+(((-1.0)*x11673*x11683))+(((-1.0)*x11679)));
evalcond[7]=((((-1.0)*cj3*x11669*x11680))+((x11667*x11681))+((r11*x11666))+(((-1.0)*cj1*cj2*x11671))+((r10*x11676))+((sj0*x11668)));
evalcond[8]=((((-1.0)*x11667*x11683))+(((-1.0)*x11671*x11674))+(((-1.0)*x11670*x11671))+((r11*x11677))+((r10*x11675))+((x11666*x11680)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11684=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11684.valid){
continue;
}
CheckValue<IkReal> x11685=IKPowWithIntegerCheck(r02,-1);
if(!x11685.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11684.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11685.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11684.value)))+IKsqr(((-1.0)*sj0*(x11685.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11684.value)), ((-1.0)*sj0*(x11685.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11686=IKsin(j4);
IkReal x11687=IKcos(j4);
IkReal x11688=(gconst5*sj3);
IkReal x11689=(gconst4*r11);
IkReal x11690=(sj1*sj2);
IkReal x11691=((1.0)*gconst5);
IkReal x11692=(cj2*sj1);
IkReal x11693=((1.0)*sj0);
IkReal x11694=((1.0)*cj0);
IkReal x11695=(gconst4*r21);
IkReal x11696=(cj1*sj2);
IkReal x11697=(cj3*gconst4);
IkReal x11698=(gconst4*sj3);
IkReal x11699=(cj3*gconst5);
IkReal x11700=(r20*x11687);
IkReal x11701=((1.0)*cj1*cj2);
IkReal x11702=(r10*x11687);
IkReal x11703=(cj3*x11687);
IkReal x11704=(r02*x11686);
IkReal x11705=((1.0)*sj3*x11687);
evalcond[0]=((((-1.0)*r02*x11687))+(((-1.0)*x11693)));
evalcond[1]=((((-1.0)*r20*x11686*x11691))+((x11686*x11695)));
evalcond[2]=(((x11686*x11689))+cj0+(((-1.0)*r10*x11686*x11691)));
evalcond[3]=(((cj0*x11690))+((cj3*x11704))+(((-1.0)*cj1*cj2*x11694)));
evalcond[4]=((((-1.0)*sj3*x11704))+(((-1.0)*x11692*x11694))+(((-1.0)*x11694*x11696)));
evalcond[5]=(x11696+x11692+((r20*x11698))+((r21*x11688))+(((-1.0)*cj3*x11691*x11700))+((x11695*x11703)));
evalcond[6]=(x11690+((x11688*x11700))+((r20*x11697))+(((-1.0)*x11701))+(((-1.0)*x11695*x11705))+((r21*x11699)));
evalcond[7]=(((r11*x11688))+(((-1.0)*cj3*x11691*x11702))+((r10*x11698))+((x11689*x11703))+((sj0*x11690))+(((-1.0)*cj1*cj2*x11693)));
evalcond[8]=(((x11688*x11702))+(((-1.0)*x11693*x11696))+(((-1.0)*x11692*x11693))+((r10*x11697))+((r11*x11699))+(((-1.0)*x11689*x11705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11706=((1.0)*sj0);
IkReal x11707=((1.0)*gconst4);
CheckValue<IkReal> x11708 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11706)))),IkReal(((((-1.0)*cj0*r01*x11707))+((cj0*gconst5*r00))+((gconst5*r10*sj0))+(((-1.0)*gconst4*r11*x11706)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11708.valid){
continue;
}
CheckValue<IkReal> x11709=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11707))+(((-1.0)*gconst5*r21)))),-1);
if(!x11709.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11708.value)+(((1.5707963267949)*(x11709.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11710=IKsin(j4);
IkReal x11711=IKcos(j4);
IkReal x11712=(gconst5*sj3);
IkReal x11713=(cj3*gconst5);
IkReal x11714=(gconst4*r11);
IkReal x11715=(sj1*sj2);
IkReal x11716=(cj2*sj1);
IkReal x11717=((1.0)*sj0);
IkReal x11718=(gconst4*r01);
IkReal x11719=(gconst4*r21);
IkReal x11720=((1.0)*cj0);
IkReal x11721=(cj1*sj2);
IkReal x11722=(gconst4*sj3);
IkReal x11723=(cj3*gconst4);
IkReal x11724=((1.0)*x11711);
IkReal x11725=((1.0)*cj1*cj2);
IkReal x11726=(cj3*x11710);
IkReal x11727=(cj3*x11711);
IkReal x11728=((1.0)*gconst5*x11710);
IkReal x11729=((1.0)*sj3*x11710);
evalcond[0]=((((-1.0)*r20*x11728))+(((-1.0)*r22*x11724))+((x11710*x11719)));
evalcond[1]=(cj0+(((-1.0)*r12*x11724))+(((-1.0)*r10*x11728))+((x11710*x11714)));
evalcond[2]=((((-1.0)*x11717))+(((-1.0)*r00*x11728))+((x11710*x11718))+(((-1.0)*r02*x11724)));
evalcond[3]=(x11721+x11716+((x11719*x11727))+((r20*x11722))+((r22*x11726))+((r21*x11712))+(((-1.0)*r20*x11713*x11724)));
evalcond[4]=(x11715+(((-1.0)*x11725))+((r20*x11711*x11712))+(((-1.0)*r22*x11729))+((r20*x11723))+((r21*x11713))+(((-1.0)*sj3*x11719*x11724)));
evalcond[5]=((((-1.0)*r00*x11713*x11724))+((r01*x11712))+((r00*x11722))+((cj0*x11715))+((r02*x11726))+(((-1.0)*cj1*cj2*x11720))+((x11718*x11727)));
evalcond[6]=(((r12*x11726))+((sj0*x11715))+(((-1.0)*r10*x11713*x11724))+(((-1.0)*cj1*cj2*x11717))+((r10*x11722))+((r11*x11712))+((x11714*x11727)));
evalcond[7]=(((r00*x11711*x11712))+(((-1.0)*x11720*x11721))+((r01*x11713))+((r00*x11723))+(((-1.0)*sj3*x11718*x11724))+(((-1.0)*x11716*x11720))+(((-1.0)*r02*x11729)));
evalcond[8]=((((-1.0)*x11717*x11721))+(((-1.0)*r12*x11729))+(((-1.0)*sj3*x11714*x11724))+((r10*x11711*x11712))+((r10*x11723))+(((-1.0)*x11716*x11717))+((r11*x11713)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11730=((1.0)*gconst5);
CheckValue<IkReal> x11731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11730))+(((-1.0)*gconst4*r10)))),-1);
if(!x11731.valid){
continue;
}
CheckValue<IkReal> x11732 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11730))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11731.value)))+(x11732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11733=IKsin(j4);
IkReal x11734=IKcos(j4);
IkReal x11735=(gconst5*sj3);
IkReal x11736=(cj3*gconst5);
IkReal x11737=(gconst4*r11);
IkReal x11738=(sj1*sj2);
IkReal x11739=(cj2*sj1);
IkReal x11740=((1.0)*sj0);
IkReal x11741=(gconst4*r01);
IkReal x11742=(gconst4*r21);
IkReal x11743=((1.0)*cj0);
IkReal x11744=(cj1*sj2);
IkReal x11745=(gconst4*sj3);
IkReal x11746=(cj3*gconst4);
IkReal x11747=((1.0)*x11734);
IkReal x11748=((1.0)*cj1*cj2);
IkReal x11749=(cj3*x11733);
IkReal x11750=(cj3*x11734);
IkReal x11751=((1.0)*gconst5*x11733);
IkReal x11752=((1.0)*sj3*x11733);
evalcond[0]=(((x11733*x11742))+(((-1.0)*r22*x11747))+(((-1.0)*r20*x11751)));
evalcond[1]=(cj0+((x11733*x11737))+(((-1.0)*r10*x11751))+(((-1.0)*r12*x11747)));
evalcond[2]=((((-1.0)*x11740))+((x11733*x11741))+(((-1.0)*r02*x11747))+(((-1.0)*r00*x11751)));
evalcond[3]=(x11744+x11739+((x11742*x11750))+((r20*x11745))+(((-1.0)*r20*x11736*x11747))+((r21*x11735))+((r22*x11749)));
evalcond[4]=(x11738+(((-1.0)*sj3*x11742*x11747))+(((-1.0)*x11748))+((r20*x11734*x11735))+(((-1.0)*r22*x11752))+((r20*x11746))+((r21*x11736)));
evalcond[5]=(((r01*x11735))+((r00*x11745))+((cj0*x11738))+((x11741*x11750))+(((-1.0)*cj1*cj2*x11743))+((r02*x11749))+(((-1.0)*r00*x11736*x11747)));
evalcond[6]=(((r11*x11735))+((sj0*x11738))+((x11737*x11750))+((r10*x11745))+(((-1.0)*cj1*cj2*x11740))+(((-1.0)*r10*x11736*x11747))+((r12*x11749)));
evalcond[7]=(((r00*x11734*x11735))+(((-1.0)*sj3*x11741*x11747))+((r01*x11736))+(((-1.0)*x11739*x11743))+((r00*x11746))+(((-1.0)*x11743*x11744))+(((-1.0)*r02*x11752)));
evalcond[8]=(((r11*x11736))+(((-1.0)*x11739*x11740))+(((-1.0)*r12*x11752))+((r10*x11734*x11735))+(((-1.0)*sj3*x11737*x11747))+((r10*x11746))+(((-1.0)*x11740*x11744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11753=((1.0)*gconst5);
CheckValue<IkReal> x11754 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11753))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11754.valid){
continue;
}
CheckValue<IkReal> x11755=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11753)))),-1);
if(!x11755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11754.value)+(((1.5707963267949)*(x11755.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11756=IKsin(j4);
IkReal x11757=IKcos(j4);
IkReal x11758=(gconst5*sj3);
IkReal x11759=(cj3*gconst5);
IkReal x11760=(gconst4*r11);
IkReal x11761=(sj1*sj2);
IkReal x11762=(cj2*sj1);
IkReal x11763=((1.0)*sj0);
IkReal x11764=(gconst4*r01);
IkReal x11765=(gconst4*r21);
IkReal x11766=((1.0)*cj0);
IkReal x11767=(cj1*sj2);
IkReal x11768=(gconst4*sj3);
IkReal x11769=(cj3*gconst4);
IkReal x11770=((1.0)*x11757);
IkReal x11771=((1.0)*cj1*cj2);
IkReal x11772=(cj3*x11756);
IkReal x11773=(cj3*x11757);
IkReal x11774=((1.0)*gconst5*x11756);
IkReal x11775=((1.0)*sj3*x11756);
evalcond[0]=((((-1.0)*r22*x11770))+(((-1.0)*r20*x11774))+((x11756*x11765)));
evalcond[1]=(cj0+(((-1.0)*r10*x11774))+(((-1.0)*r12*x11770))+((x11756*x11760)));
evalcond[2]=((((-1.0)*r02*x11770))+(((-1.0)*r00*x11774))+(((-1.0)*x11763))+((x11756*x11764)));
evalcond[3]=(x11762+x11767+((r20*x11768))+((x11765*x11773))+((r21*x11758))+((r22*x11772))+(((-1.0)*r20*x11759*x11770)));
evalcond[4]=(x11761+((r20*x11769))+(((-1.0)*sj3*x11765*x11770))+((r20*x11757*x11758))+(((-1.0)*r22*x11775))+(((-1.0)*x11771))+((r21*x11759)));
evalcond[5]=(((cj0*x11761))+(((-1.0)*cj1*cj2*x11766))+((r02*x11772))+((x11764*x11773))+((r00*x11768))+((r01*x11758))+(((-1.0)*r00*x11759*x11770)));
evalcond[6]=((((-1.0)*cj1*cj2*x11763))+((r12*x11772))+((r11*x11758))+((r10*x11768))+((sj0*x11761))+(((-1.0)*r10*x11759*x11770))+((x11760*x11773)));
evalcond[7]=(((r00*x11757*x11758))+(((-1.0)*x11766*x11767))+(((-1.0)*r02*x11775))+(((-1.0)*x11762*x11766))+((r00*x11769))+((r01*x11759))+(((-1.0)*sj3*x11764*x11770)));
evalcond[8]=(((r11*x11759))+((r10*x11769))+(((-1.0)*r12*x11775))+(((-1.0)*sj3*x11760*x11770))+(((-1.0)*x11762*x11763))+(((-1.0)*x11763*x11767))+((r10*x11757*x11758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11776=((-1.0)*r10);
IkReal x11778 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11778)==0){
continue;
}
IkReal x11777=pow(x11778,-0.5);
CheckValue<IkReal> x11779 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11776),IKFAST_ATAN2_MAGTHRESH);
if(!x11779.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11779.value));
IkReal gconst7=(r11*x11777);
IkReal gconst8=(x11776*x11777);
CheckValue<IkReal> x11780 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11780.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11780.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11781=((-1.0)*r10);
IkReal x11782=x11777;
CheckValue<IkReal> x11784 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11781),IKFAST_ATAN2_MAGTHRESH);
if(!x11784.valid){
continue;
}
IkReal x11783=((-1.0)*(x11784.value));
sj5=gconst7;
cj5=gconst8;
j5=x11783;
IkReal gconst6=x11783;
IkReal gconst7=(r11*x11782);
IkReal gconst8=(x11781*x11782);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11785=((1.0)*sj0);
IkReal x11786=((1.0)*gconst7);
CheckValue<IkReal> x11787=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11786))+(((-1.0)*gconst8*r21)))),-1);
if(!x11787.valid){
continue;
}
CheckValue<IkReal> x11788 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11785))+(((-1.0)*cj0*r02)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*cj0*r01*x11786))+(((-1.0)*gconst7*r11*x11785))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11787.value)))+(x11788.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11789=IKsin(j4);
IkReal x11790=IKcos(j4);
IkReal x11791=(gconst7*sj3);
IkReal x11792=(cj3*gconst8);
IkReal x11793=(cj3*gconst7);
IkReal x11794=(sj1*sj2);
IkReal x11795=(cj2*sj1);
IkReal x11796=((1.0)*sj0);
IkReal x11797=((1.0)*cj0);
IkReal x11798=(gconst8*sj3);
IkReal x11799=(cj1*sj2);
IkReal x11800=((1.0)*x11790);
IkReal x11801=((1.0)*x11789);
IkReal x11802=((1.0)*cj1*cj2);
IkReal x11803=(cj3*x11789);
IkReal x11804=(gconst7*x11789);
IkReal x11805=(x11790*x11798);
evalcond[0]=(((r21*x11804))+(((-1.0)*gconst8*r20*x11801))+(((-1.0)*r22*x11800)));
evalcond[1]=((((-1.0)*gconst8*r10*x11801))+cj0+(((-1.0)*r12*x11800))+((r11*x11804)));
evalcond[2]=((((-1.0)*gconst8*r00*x11801))+(((-1.0)*r02*x11800))+((r01*x11804))+(((-1.0)*x11796)));
evalcond[3]=(x11799+x11795+((r20*x11791))+((r22*x11803))+((r21*x11790*x11793))+(((-1.0)*r20*x11792*x11800))+((r21*x11798)));
evalcond[4]=(x11794+((r20*x11793))+(((-1.0)*r22*sj3*x11801))+(((-1.0)*x11802))+((r20*x11805))+((r21*x11792))+(((-1.0)*r21*x11791*x11800)));
evalcond[5]=((((-1.0)*cj1*cj2*x11797))+((r01*x11790*x11793))+((r02*x11803))+((r01*x11798))+((r00*x11791))+(((-1.0)*r00*x11792*x11800))+((cj0*x11794)));
evalcond[6]=((((-1.0)*cj1*cj2*x11796))+((r11*x11798))+((r10*x11791))+((r11*x11790*x11793))+((sj0*x11794))+((r12*x11803))+(((-1.0)*r10*x11792*x11800)));
evalcond[7]=(((r00*x11805))+(((-1.0)*x11795*x11797))+(((-1.0)*r02*sj3*x11801))+(((-1.0)*x11797*x11799))+(((-1.0)*r01*x11791*x11800))+((r01*x11792))+((r00*x11793)));
evalcond[8]=((((-1.0)*x11795*x11796))+(((-1.0)*r11*x11791*x11800))+((r11*x11792))+((r10*x11793))+((r10*x11805))+(((-1.0)*r12*sj3*x11801))+(((-1.0)*x11796*x11799)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11806=((1.0)*gconst8);
CheckValue<IkReal> x11807=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11806)))),-1);
if(!x11807.valid){
continue;
}
CheckValue<IkReal> x11808 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11806))+((cj0*gconst7*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11808.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11807.value)))+(x11808.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11809=IKsin(j4);
IkReal x11810=IKcos(j4);
IkReal x11811=(gconst7*sj3);
IkReal x11812=(cj3*gconst8);
IkReal x11813=(cj3*gconst7);
IkReal x11814=(sj1*sj2);
IkReal x11815=(cj2*sj1);
IkReal x11816=((1.0)*sj0);
IkReal x11817=((1.0)*cj0);
IkReal x11818=(gconst8*sj3);
IkReal x11819=(cj1*sj2);
IkReal x11820=((1.0)*x11810);
IkReal x11821=((1.0)*x11809);
IkReal x11822=((1.0)*cj1*cj2);
IkReal x11823=(cj3*x11809);
IkReal x11824=(gconst7*x11809);
IkReal x11825=(x11810*x11818);
evalcond[0]=((((-1.0)*gconst8*r20*x11821))+(((-1.0)*r22*x11820))+((r21*x11824)));
evalcond[1]=(cj0+(((-1.0)*r12*x11820))+((r11*x11824))+(((-1.0)*gconst8*r10*x11821)));
evalcond[2]=((((-1.0)*gconst8*r00*x11821))+(((-1.0)*r02*x11820))+(((-1.0)*x11816))+((r01*x11824)));
evalcond[3]=(((r21*x11818))+((r21*x11810*x11813))+((r22*x11823))+(((-1.0)*r20*x11812*x11820))+((r20*x11811))+x11815+x11819);
evalcond[4]=((((-1.0)*r22*sj3*x11821))+((r21*x11812))+(((-1.0)*x11822))+((r20*x11825))+((r20*x11813))+(((-1.0)*r21*x11811*x11820))+x11814);
evalcond[5]=((((-1.0)*r00*x11812*x11820))+((r01*x11810*x11813))+((r01*x11818))+((r00*x11811))+((r02*x11823))+((cj0*x11814))+(((-1.0)*cj1*cj2*x11817)));
evalcond[6]=(((sj0*x11814))+((r12*x11823))+((r10*x11811))+(((-1.0)*r10*x11812*x11820))+((r11*x11818))+((r11*x11810*x11813))+(((-1.0)*cj1*cj2*x11816)));
evalcond[7]=((((-1.0)*x11815*x11817))+(((-1.0)*r01*x11811*x11820))+((r01*x11812))+(((-1.0)*x11817*x11819))+((r00*x11813))+((r00*x11825))+(((-1.0)*r02*sj3*x11821)));
evalcond[8]=((((-1.0)*x11815*x11816))+(((-1.0)*x11816*x11819))+((r10*x11825))+((r10*x11813))+(((-1.0)*r12*sj3*x11821))+((r11*x11812))+(((-1.0)*r11*x11811*x11820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11826=((-1.0)*r11);
IkReal x11828 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11828)==0){
continue;
}
IkReal x11827=pow(x11828,-0.5);
CheckValue<IkReal> x11829 = IKatan2WithCheck(IkReal(x11826),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11829.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11829.value))));
IkReal gconst10=(x11826*x11827);
IkReal gconst11=((1.0)*r10*x11827);
CheckValue<IkReal> x11830 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11830.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11830.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11831=((-1.0)*r11);
CheckValue<IkReal> x11834 = IKatan2WithCheck(IkReal(x11831),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11834.valid){
continue;
}
IkReal x11832=((1.0)*(x11834.value));
IkReal x11833=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11832)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11832)));
IkReal gconst10=(x11831*x11833);
IkReal gconst11=((1.0)*r10*x11833);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11835=((-1.0)*r11);
CheckValue<IkReal> x11838 = IKatan2WithCheck(IkReal(x11835),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11838.valid){
continue;
}
IkReal x11836=((1.0)*(x11838.value));
IkReal x11837=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11836)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11836)));
IkReal gconst10=(x11835*x11837);
IkReal gconst11=((1.0)*r10*x11837);
IkReal x11839=r12*r12;
IkReal x11840=((1.0)*sj0);
IkReal x11841=(cj0*r02);
IkReal x11842=x11827;
j4eval[0]=((IKabs(((((-1.0)*x11841))+(((-1.0)*r12*x11840)))))+(IKabs((((sj0*x11839*x11842))+(((-1.0)*x11840*x11842))+((r12*x11841*x11842))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11843=((-1.0)*r11);
CheckValue<IkReal> x11846 = IKatan2WithCheck(IkReal(x11843),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11846.valid){
continue;
}
IkReal x11844=((1.0)*(x11846.value));
IkReal x11845=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11844)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11844)));
IkReal gconst10=(x11843*x11845);
IkReal gconst11=((1.0)*r10*x11845);
IkReal x11847=((1.0)*cj3);
CheckValue<IkReal> x11852=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11852.valid){
continue;
}
IkReal x11848=x11852.value;
IkReal x11849=(cj3*x11848);
IkReal x11850=(x11847*x11848);
IkReal x11851=((((-1.0)*x11850*(r10*r10)*(r20*r20)))+(((-1.0)*x11847*(r22*r22)))+(((-1.0)*x11850*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11849)));
j4eval[0]=x11851;
j4eval[1]=IKsign(x11851);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11853=((-1.0)*r11);
CheckValue<IkReal> x11856 = IKatan2WithCheck(IkReal(x11853),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11856.valid){
continue;
}
IkReal x11854=((1.0)*(x11856.value));
IkReal x11855=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11854)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11854)));
IkReal gconst10=(x11853*x11855);
IkReal gconst11=((1.0)*r10*x11855);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11857=((-1.0)*r11);
CheckValue<IkReal> x11860 = IKatan2WithCheck(IkReal(x11857),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11860.valid){
continue;
}
IkReal x11858=((1.0)*(x11860.value));
IkReal x11859=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11858)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11858)));
IkReal gconst10=(x11857*x11859);
IkReal gconst11=((1.0)*r10*x11859);
IkReal x11861=r12*r12;
IkReal x11862=((1.0)*sj0);
IkReal x11863=(cj0*r02);
IkReal x11864=x11827;
j4eval[0]=((IKabs(((((-1.0)*x11863))+(((-1.0)*r12*x11862)))))+(IKabs((((r12*x11863*x11864))+(((-1.0)*x11862*x11864))+((sj0*x11861*x11864))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11865=((-1.0)*r11);
CheckValue<IkReal> x11868 = IKatan2WithCheck(IkReal(x11865),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11868.valid){
continue;
}
IkReal x11866=((1.0)*(x11868.value));
IkReal x11867=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11866)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11866)));
IkReal gconst10=(x11865*x11867);
IkReal gconst11=((1.0)*r10*x11867);
IkReal x11869=r12*r12;
IkReal x11870=(cj1*cj2*r22);
IkReal x11871=(r22*sj1*sj2);
CheckValue<IkReal> x11875=IKPowWithIntegerCheck(((-1.0)+x11869),-1);
if(!x11875.valid){
continue;
}
IkReal x11872=x11875.value;
if((((1.0)+(((-1.0)*x11869)))) < -0.00001)
continue;
IkReal x11873=IKsqrt(((1.0)+(((-1.0)*x11869))));
IkReal x11874=(r12*x11872*x11873);
j4eval[0]=((IKabs(((((-1.0)*x11870))+x11871)))+(IKabs(((((-1.0)*x11871*x11874))+((x11870*x11874))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11876=((-1.0)*r11);
CheckValue<IkReal> x11879 = IKatan2WithCheck(IkReal(x11876),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11879.valid){
continue;
}
IkReal x11877=((1.0)*(x11879.value));
IkReal x11878=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11877)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11877)));
IkReal gconst10=(x11876*x11878);
IkReal gconst11=((1.0)*r10*x11878);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11880=((-1.0)*r11);
CheckValue<IkReal> x11883 = IKatan2WithCheck(IkReal(x11880),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11883.valid){
continue;
}
IkReal x11881=((1.0)*(x11883.value));
IkReal x11882=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11881)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11881)));
IkReal gconst10=(x11880*x11882);
IkReal gconst11=((1.0)*r10*x11882);
IkReal x11884=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11888=IKPowWithIntegerCheck(x11884,-1);
if(!x11888.valid){
continue;
}
IkReal x11885=x11888.value;
IkReal x11886=((1.0)*x11885);
IkReal x11887=((((-1.0)*x11886*(r00*r00)*(r10*r10)))+(((-2.0)*r00*r01*r10*r11*x11885))+(((-1.0)*(r02*r02)))+(((-1.0)*x11886*(r01*r01)*(r11*r11))));
j4eval[0]=x11887;
j4eval[1]=IKsign(x11887);
j4eval[2]=r02;
j4eval[3]=x11884;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11889=((-1.0)*r11);
CheckValue<IkReal> x11892 = IKatan2WithCheck(IkReal(x11889),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11892.valid){
continue;
}
IkReal x11890=((1.0)*(x11892.value));
IkReal x11891=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11890)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11890)));
IkReal gconst10=(x11889*x11891);
IkReal gconst11=((1.0)*r10*x11891);
IkReal x11893=r12*r12;
IkReal x11894=(cj1*cj2*r22);
IkReal x11895=(r22*sj1*sj2);
CheckValue<IkReal> x11899=IKPowWithIntegerCheck(((-1.0)+x11893),-1);
if(!x11899.valid){
continue;
}
IkReal x11896=x11899.value;
if((((1.0)+(((-1.0)*x11893)))) < -0.00001)
continue;
IkReal x11897=IKsqrt(((1.0)+(((-1.0)*x11893))));
IkReal x11898=(r12*x11896*x11897);
j4eval[0]=((IKabs((((x11894*x11898))+(((-1.0)*x11895*x11898)))))+(IKabs(((((-1.0)*x11894))+x11895))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11900=(gconst10*r21);
IkReal x11901=(gconst11*r20);
IkReal x11902=(sj1*sj2);
IkReal x11903=(cj1*cj2);
CheckValue<IkReal> x11904=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x11901*x11901)+(((-2.0)*x11900*x11901))+(x11900*x11900))),-1);
if(!x11904.valid){
continue;
}
CheckValue<IkReal> x11905 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x11903))+((r22*x11902)))),IkReal(((((-1.0)*x11900*x11903))+(((-1.0)*x11901*x11902))+((x11900*x11902))+((x11901*x11903)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11905.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11904.value)))+(x11905.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11906=IKsin(j4);
IkReal x11907=IKcos(j4);
IkReal x11908=((1.0)*cj2);
IkReal x11909=((1.0)*x11907);
IkReal x11910=(gconst10*x11906);
IkReal x11911=((1.0)*x11906);
IkReal x11912=(gconst11*x11907);
IkReal x11913=(gconst11*x11911);
evalcond[0]=((((-1.0)*r22*x11909))+(((-1.0)*r20*x11913))+((r21*x11910)));
evalcond[1]=(((r11*x11910))+(((-1.0)*r12*x11909))+(((-1.0)*r10*x11913)));
evalcond[2]=(((r00*x11912))+(((-1.0)*gconst10*r01*x11909))+(((-1.0)*r02*x11911)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11909))+((r01*x11910))+(((-1.0)*r00*x11913)));
evalcond[4]=((((-1.0)*gconst10*r21*x11909))+(((-1.0)*r22*x11911))+(((-1.0)*cj1*x11908))+((sj1*sj2))+((r20*x11912)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x11908))+((r10*x11912))+(((-1.0)*gconst10*r11*x11909))+(((-1.0)*r12*x11911)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11914=(gconst11*r00);
IkReal x11915=(gconst10*r01);
CheckValue<IkReal> x11916=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11914*x11914)))+(((-1.0)*(x11915*x11915)))+(((-1.0)*(r02*r02)))+(((2.0)*x11914*x11915)))),-1);
if(!x11916.valid){
continue;
}
CheckValue<IkReal> x11917 = IKatan2WithCheck(IkReal((x11914+(((-1.0)*x11915)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11916.value)))+(x11917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11918=IKsin(j4);
IkReal x11919=IKcos(j4);
IkReal x11920=((1.0)*cj2);
IkReal x11921=((1.0)*x11919);
IkReal x11922=(gconst10*x11918);
IkReal x11923=((1.0)*x11918);
IkReal x11924=(gconst11*x11919);
IkReal x11925=(gconst11*x11923);
evalcond[0]=((((-1.0)*r20*x11925))+((r21*x11922))+(((-1.0)*r22*x11921)));
evalcond[1]=((((-1.0)*r10*x11925))+((r11*x11922))+(((-1.0)*r12*x11921)));
evalcond[2]=((((-1.0)*r02*x11923))+((r00*x11924))+(((-1.0)*gconst10*r01*x11921)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11921))+(((-1.0)*r00*x11925))+((r01*x11922)));
evalcond[4]=((((-1.0)*cj1*x11920))+((r20*x11924))+((sj1*sj2))+(((-1.0)*r22*x11923))+(((-1.0)*gconst10*r21*x11921)));
evalcond[5]=(((r10*x11924))+(((-1.0)*gconst10*r11*x11921))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11923))+(((-1.0)*sj1*x11920)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11926 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11926.valid){
continue;
}
CheckValue<IkReal> x11927=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11927.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11926.value)+(((1.5707963267949)*(x11927.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11928=IKsin(j4);
IkReal x11929=IKcos(j4);
IkReal x11930=((1.0)*cj2);
IkReal x11931=((1.0)*x11929);
IkReal x11932=(gconst10*x11928);
IkReal x11933=((1.0)*x11928);
IkReal x11934=(gconst11*x11929);
IkReal x11935=(gconst11*x11933);
evalcond[0]=(((r21*x11932))+(((-1.0)*r22*x11931))+(((-1.0)*r20*x11935)));
evalcond[1]=((((-1.0)*r10*x11935))+((r11*x11932))+(((-1.0)*r12*x11931)));
evalcond[2]=((((-1.0)*gconst10*r01*x11931))+(((-1.0)*r02*x11933))+((r00*x11934)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11931))+(((-1.0)*r00*x11935))+((r01*x11932)));
evalcond[4]=(((r20*x11934))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11931))+(((-1.0)*r22*x11933))+(((-1.0)*cj1*x11930)));
evalcond[5]=((((-1.0)*sj1*x11930))+((r10*x11934))+(((-1.0)*gconst10*r11*x11931))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11936=((-1.0)*r11);
CheckValue<IkReal> x11939 = IKatan2WithCheck(IkReal(x11936),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11939.valid){
continue;
}
IkReal x11937=((1.0)*(x11939.value));
IkReal x11938=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11937)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11937)));
IkReal gconst10=(x11936*x11938);
IkReal gconst11=((1.0)*r10*x11938);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11940=((-1.0)*r11);
CheckValue<IkReal> x11943 = IKatan2WithCheck(IkReal(x11940),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11943.valid){
continue;
}
IkReal x11941=((1.0)*(x11943.value));
IkReal x11942=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11941)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11941)));
IkReal gconst10=(x11940*x11942);
IkReal gconst11=((1.0)*r10*x11942);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11944=((-1.0)*r11);
CheckValue<IkReal> x11947 = IKatan2WithCheck(IkReal(x11944),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11947.valid){
continue;
}
IkReal x11945=((1.0)*(x11947.value));
IkReal x11946=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11945)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11945)));
IkReal gconst10=(x11944*x11946);
IkReal gconst11=((1.0)*r10*x11946);
IkReal x11948=r12*r12;
CheckValue<IkReal> x11951=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11948))),-1);
if(!x11951.valid){
continue;
}
IkReal x11949=x11951.value;
IkReal x11950=((1.0)*x11949);
j4eval[0]=IKsign((x11948+((x11950*(r10*r10*r10*r10)))+(((2.0)*x11949*(r10*r10)*(r11*r11)))+((x11950*(r11*r11*r11*r11)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11952=(cj2*sj1);
IkReal x11953=(gconst10*r11);
IkReal x11954=(gconst11*r10);
IkReal x11955=(cj1*sj2);
CheckValue<IkReal> x11956 = IKatan2WithCheck(IkReal((((r12*x11955))+((r12*x11952)))),IkReal(((((-1.0)*x11952*x11954))+((x11953*x11955))+((x11952*x11953))+(((-1.0)*x11954*x11955)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11956.valid){
continue;
}
CheckValue<IkReal> x11957=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x11953*x11954))+(x11953*x11953)+(x11954*x11954))),-1);
if(!x11957.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11956.value)+(((1.5707963267949)*(x11957.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11958=IKsin(j4);
IkReal x11959=IKcos(j4);
IkReal x11960=((1.0)*x11959);
IkReal x11961=(gconst10*x11958);
IkReal x11962=((1.0)*x11958);
IkReal x11963=(gconst11*x11959);
IkReal x11964=(gconst11*x11962);
evalcond[0]=((((-1.0)*r20*x11964))+(((-1.0)*r22*x11960))+((r21*x11961)));
evalcond[1]=((((-1.0)*r10*x11964))+(((-1.0)*r12*x11960))+((r11*x11961)));
evalcond[2]=(((r00*x11963))+(((-1.0)*gconst10*r01*x11960))+(((-1.0)*r02*x11962)));
evalcond[3]=((1.0)+((r01*x11961))+(((-1.0)*r00*x11964))+(((-1.0)*r02*x11960)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11962))+((cj1*sj2))+(((-1.0)*gconst10*r11*x11960))+((r10*x11963)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11963))+(((-1.0)*r22*x11962))+(((-1.0)*gconst10*r21*x11960)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11965=(gconst11*r00);
IkReal x11966=(gconst10*r01);
CheckValue<IkReal> x11967=IKPowWithIntegerCheck(IKsign(((x11966*x11966)+(x11965*x11965)+(r02*r02)+(((-2.0)*x11965*x11966)))),-1);
if(!x11967.valid){
continue;
}
CheckValue<IkReal> x11968 = IKatan2WithCheck(IkReal((x11965+(((-1.0)*x11966)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11968.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11967.value)))+(x11968.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11969=IKsin(j4);
IkReal x11970=IKcos(j4);
IkReal x11971=((1.0)*x11970);
IkReal x11972=(gconst10*x11969);
IkReal x11973=((1.0)*x11969);
IkReal x11974=(gconst11*x11970);
IkReal x11975=(gconst11*x11973);
evalcond[0]=((((-1.0)*r20*x11975))+(((-1.0)*r22*x11971))+((r21*x11972)));
evalcond[1]=((((-1.0)*r10*x11975))+(((-1.0)*r12*x11971))+((r11*x11972)));
evalcond[2]=(((r00*x11974))+(((-1.0)*gconst10*r01*x11971))+(((-1.0)*r02*x11973)));
evalcond[3]=((1.0)+((r01*x11972))+(((-1.0)*r00*x11975))+(((-1.0)*r02*x11971)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x11973))+(((-1.0)*gconst10*r11*x11971))+((cj1*sj2))+((r10*x11974)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11974))+(((-1.0)*r22*x11973))+(((-1.0)*gconst10*r21*x11971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11976=((1.0)*gconst11);
CheckValue<IkReal> x11977=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11976))+(((-1.0)*gconst10*r20)))),-1);
if(!x11977.valid){
continue;
}
CheckValue<IkReal> x11978 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11976)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11978.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11977.value)))+(x11978.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11979=IKsin(j4);
IkReal x11980=IKcos(j4);
IkReal x11981=((1.0)*x11980);
IkReal x11982=(gconst10*x11979);
IkReal x11983=((1.0)*x11979);
IkReal x11984=(gconst11*x11980);
IkReal x11985=(gconst11*x11983);
evalcond[0]=(((r21*x11982))+(((-1.0)*r22*x11981))+(((-1.0)*r20*x11985)));
evalcond[1]=((((-1.0)*r12*x11981))+(((-1.0)*r10*x11985))+((r11*x11982)));
evalcond[2]=((((-1.0)*gconst10*r01*x11981))+(((-1.0)*r02*x11983))+((r00*x11984)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11981))+(((-1.0)*r00*x11985))+((r01*x11982)));
evalcond[4]=((((-1.0)*r12*x11983))+((cj2*sj1))+((r10*x11984))+(((-1.0)*gconst10*r11*x11981))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11981))+((r20*x11984))+(((-1.0)*r22*x11983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11986=((-1.0)*r11);
IkReal x11987=((-1.0)*r10);
CheckValue<IkReal> x11989 = IKatan2WithCheck(IkReal(x11986),IkReal(x11987),IKFAST_ATAN2_MAGTHRESH);
if(!x11989.valid){
continue;
}
IkReal x11988=((1.0)*(x11989.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11988)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11987);
rxp1_1=(px*r21);
rxp1_2=(px*x11986);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11988)));
IkReal gconst10=x11986;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11990=((-1.0)*r11);
IkReal x11991=((-1.0)*r10);
CheckValue<IkReal> x11993 = IKatan2WithCheck(IkReal(x11990),IkReal(x11991),IKFAST_ATAN2_MAGTHRESH);
if(!x11993.valid){
continue;
}
IkReal x11992=((1.0)*(x11993.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11992)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11991);
rxp1_1=(px*r21);
rxp1_2=(px*x11990);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11992)));
IkReal gconst10=x11990;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11994=((-1.0)*r11);
IkReal x11995=((-1.0)*r10);
CheckValue<IkReal> x11997 = IKatan2WithCheck(IkReal(x11994),IkReal(x11995),IKFAST_ATAN2_MAGTHRESH);
if(!x11997.valid){
continue;
}
IkReal x11996=((1.0)*(x11997.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11996)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x11995);
rxp1_1=(px*r21);
rxp1_2=(px*x11994);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11996)));
IkReal gconst10=x11994;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12000=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12000.valid){
continue;
}
IkReal x11998=x12000.value;
IkReal x11999=(sj0*x11998);
cj4array[0]=(((cj1*sj2*x11999))+((cj2*sj1*x11999)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12001=IKsin(j4);
IkReal x12002=IKcos(j4);
IkReal x12003=(gconst10*r21);
IkReal x12004=(gconst11*r20);
IkReal x12005=((1.0)*x12001);
IkReal x12006=((1.0)*x12002);
evalcond[0]=((-1.0)*r02*x12001);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12006)));
evalcond[2]=((((-1.0)*x12004*x12005))+((x12001*x12003)));
evalcond[3]=(((gconst10*r11*x12001))+(((-1.0)*gconst11*r10*x12005)));
evalcond[4]=(((x12002*x12004))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12003*x12006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12008=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12008.valid){
continue;
}
IkReal x12007=x12008.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12007))+((cj1*cj2*x12007)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12009=IKsin(j4);
IkReal x12010=IKcos(j4);
IkReal x12011=((1.0)*sj0);
IkReal x12012=(gconst10*x12009);
IkReal x12013=((1.0)*x12010);
IkReal x12014=((1.0)*gconst11*x12009);
evalcond[0]=((-1.0)*r02*x12009);
evalcond[1]=((((-1.0)*r02*x12013))+(((-1.0)*x12011)));
evalcond[2]=(((r21*x12012))+(((-1.0)*r20*x12014)));
evalcond[3]=(((r11*x12012))+(((-1.0)*r10*x12014)));
evalcond[4]=(((gconst11*r10*x12010))+(((-1.0)*cj2*sj1*x12011))+(((-1.0)*cj1*sj2*x12011))+(((-1.0)*gconst10*r11*x12013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12015=IKPowWithIntegerCheck(r02,-1);
if(!x12015.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12015.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12016=IKsin(j4);
IkReal x12017=IKcos(j4);
IkReal x12018=(gconst10*r21);
IkReal x12019=((1.0)*sj0);
IkReal x12020=(gconst10*r11);
IkReal x12021=(gconst11*x12017);
IkReal x12022=((1.0)*x12017);
IkReal x12023=((1.0)*gconst11*x12016);
evalcond[0]=((-1.0)*r02*x12016);
evalcond[1]=((((-1.0)*r20*x12023))+((x12016*x12018)));
evalcond[2]=(((x12016*x12020))+(((-1.0)*r10*x12023)));
evalcond[3]=(((r20*x12021))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12018*x12022)));
evalcond[4]=((((-1.0)*x12020*x12022))+(((-1.0)*cj2*sj1*x12019))+(((-1.0)*cj1*sj2*x12019))+((r10*x12021)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12024=((1.0)*gconst11);
CheckValue<IkReal> x12025 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*cj0*r00*x12024))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12024)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12025.valid){
continue;
}
CheckValue<IkReal> x12026=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12025.value)+(((1.5707963267949)*(x12026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12027=IKsin(j4);
IkReal x12028=IKcos(j4);
IkReal x12029=((1.0)*cj2);
IkReal x12030=((1.0)*sj0);
IkReal x12031=(cj1*sj2);
IkReal x12032=(gconst10*x12027);
IkReal x12033=((1.0)*x12028);
IkReal x12034=(gconst11*x12028);
IkReal x12035=((1.0)*x12027);
IkReal x12036=(gconst11*x12035);
evalcond[0]=((((-1.0)*r20*x12036))+((r21*x12032)));
evalcond[1]=(cj0+(((-1.0)*r12*x12033))+((r11*x12032))+(((-1.0)*r10*x12036)));
evalcond[2]=((((-1.0)*cj1*x12029))+((r20*x12034))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12033)));
evalcond[3]=((((-1.0)*x12030))+((r01*x12032))+(((-1.0)*r02*x12033))+(((-1.0)*r00*x12036)));
evalcond[4]=((((-1.0)*gconst10*r01*x12033))+((r00*x12034))+(((-1.0)*r02*x12035))+(((-1.0)*cj0*sj1*x12029))+(((-1.0)*cj0*x12031)));
evalcond[5]=((((-1.0)*x12030*x12031))+(((-1.0)*gconst10*r11*x12033))+(((-1.0)*r12*x12035))+((r10*x12034))+(((-1.0)*sj0*sj1*x12029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12037=(gconst10*r21);
IkReal x12038=(gconst11*r20);
IkReal x12039=(sj1*sj2);
IkReal x12040=(cj1*cj2);
CheckValue<IkReal> x12041 = IKatan2WithCheck(IkReal((((r22*x12039))+(((-1.0)*r22*x12040)))),IkReal((((x12038*x12040))+(((-1.0)*x12038*x12039))+((x12037*x12039))+(((-1.0)*x12037*x12040)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12041.valid){
continue;
}
CheckValue<IkReal> x12042=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x12037*x12037)+(x12038*x12038)+(((-2.0)*x12037*x12038)))),-1);
if(!x12042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12041.value)+(((1.5707963267949)*(x12042.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12043=IKsin(j4);
IkReal x12044=IKcos(j4);
IkReal x12045=((1.0)*cj2);
IkReal x12046=((1.0)*sj0);
IkReal x12047=(cj1*sj2);
IkReal x12048=((1.0)*x12044);
IkReal x12049=(gconst10*x12043);
IkReal x12050=((1.0)*x12043);
IkReal x12051=(gconst11*x12044);
IkReal x12052=(gconst11*x12050);
evalcond[0]=((((-1.0)*r20*x12052))+((r21*x12049))+(((-1.0)*r22*x12048)));
evalcond[1]=((((-1.0)*r12*x12048))+(((-1.0)*r10*x12052))+cj0+((r11*x12049)));
evalcond[2]=((((-1.0)*x12046))+((r01*x12049))+(((-1.0)*r00*x12052))+(((-1.0)*r02*x12048)));
evalcond[3]=(((r20*x12051))+(((-1.0)*cj1*x12045))+((sj1*sj2))+(((-1.0)*r22*x12050))+(((-1.0)*gconst10*r21*x12048)));
evalcond[4]=((((-1.0)*cj0*x12047))+(((-1.0)*gconst10*r01*x12048))+((r00*x12051))+(((-1.0)*r02*x12050))+(((-1.0)*cj0*sj1*x12045)));
evalcond[5]=(((r10*x12051))+(((-1.0)*x12046*x12047))+(((-1.0)*sj0*sj1*x12045))+(((-1.0)*gconst10*r11*x12048))+(((-1.0)*r12*x12050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12053=((1.0)*sj0);
IkReal x12054=((1.0)*gconst10);
CheckValue<IkReal> x12055 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12053)))),IkReal(((((-1.0)*gconst10*r11*x12053))+((cj0*gconst11*r00))+(((-1.0)*cj0*r01*x12054))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12055.valid){
continue;
}
CheckValue<IkReal> x12056=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12054))+(((-1.0)*gconst11*r21)))),-1);
if(!x12056.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12055.value)+(((1.5707963267949)*(x12056.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12057=IKsin(j4);
IkReal x12058=IKcos(j4);
IkReal x12059=((1.0)*cj2);
IkReal x12060=((1.0)*sj0);
IkReal x12061=(cj1*sj2);
IkReal x12062=((1.0)*x12058);
IkReal x12063=(gconst10*x12057);
IkReal x12064=((1.0)*x12057);
IkReal x12065=(gconst11*x12058);
IkReal x12066=(gconst11*x12064);
evalcond[0]=(((r21*x12063))+(((-1.0)*r20*x12066))+(((-1.0)*r22*x12062)));
evalcond[1]=(cj0+(((-1.0)*r10*x12066))+(((-1.0)*r12*x12062))+((r11*x12063)));
evalcond[2]=(((r01*x12063))+(((-1.0)*r02*x12062))+(((-1.0)*x12060))+(((-1.0)*r00*x12066)));
evalcond[3]=((((-1.0)*cj1*x12059))+(((-1.0)*gconst10*r21*x12062))+((sj1*sj2))+((r20*x12065))+(((-1.0)*r22*x12064)));
evalcond[4]=(((r00*x12065))+(((-1.0)*cj0*x12061))+(((-1.0)*cj0*sj1*x12059))+(((-1.0)*r02*x12064))+(((-1.0)*gconst10*r01*x12062)));
evalcond[5]=(((r10*x12065))+(((-1.0)*gconst10*r11*x12062))+(((-1.0)*r12*x12064))+(((-1.0)*x12060*x12061))+(((-1.0)*sj0*sj1*x12059)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12067=((1.0)*gconst11);
CheckValue<IkReal> x12068=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12067)))),-1);
if(!x12068.valid){
continue;
}
CheckValue<IkReal> x12069 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12067))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12069.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12068.value)))+(x12069.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12070=IKsin(j4);
IkReal x12071=IKcos(j4);
IkReal x12072=((1.0)*cj2);
IkReal x12073=((1.0)*sj0);
IkReal x12074=(cj1*sj2);
IkReal x12075=((1.0)*x12071);
IkReal x12076=(gconst10*x12070);
IkReal x12077=((1.0)*x12070);
IkReal x12078=(gconst11*x12071);
IkReal x12079=(gconst11*x12077);
evalcond[0]=((((-1.0)*r20*x12079))+(((-1.0)*r22*x12075))+((r21*x12076)));
evalcond[1]=(cj0+((r11*x12076))+(((-1.0)*r10*x12079))+(((-1.0)*r12*x12075)));
evalcond[2]=((((-1.0)*r02*x12075))+(((-1.0)*r00*x12079))+(((-1.0)*x12073))+((r01*x12076)));
evalcond[3]=((((-1.0)*gconst10*r21*x12075))+((sj1*sj2))+((r20*x12078))+(((-1.0)*cj1*x12072))+(((-1.0)*r22*x12077)));
evalcond[4]=((((-1.0)*gconst10*r01*x12075))+(((-1.0)*r02*x12077))+(((-1.0)*cj0*sj1*x12072))+(((-1.0)*cj0*x12074))+((r00*x12078)));
evalcond[5]=((((-1.0)*sj0*sj1*x12072))+(((-1.0)*x12073*x12074))+(((-1.0)*gconst10*r11*x12075))+((r10*x12078))+(((-1.0)*r12*x12077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12080=((-1.0)*r11);
CheckValue<IkReal> x12083 = IKatan2WithCheck(IkReal(x12080),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12083.valid){
continue;
}
IkReal x12081=((1.0)*(x12083.value));
IkReal x12082=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12081)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12081)));
IkReal gconst10=(x12080*x12082);
IkReal gconst11=((1.0)*r10*x12082);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12084=((-1.0)*r11);
CheckValue<IkReal> x12087 = IKatan2WithCheck(IkReal(x12084),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12087.valid){
continue;
}
IkReal x12085=((1.0)*(x12087.value));
IkReal x12086=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12085)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12085)));
IkReal gconst10=(x12084*x12086);
IkReal gconst11=((1.0)*r10*x12086);
IkReal x12088=r12*r12;
IkReal x12089=((1.0)*sj0);
IkReal x12090=(cj0*r02);
IkReal x12091=x11827;
j4eval[0]=((IKabs(((((-1.0)*x12089*x12091))+((sj0*x12088*x12091))+((r12*x12090*x12091)))))+(IKabs(((((-1.0)*r12*x12089))+(((-1.0)*x12090))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12092=((-1.0)*r11);
CheckValue<IkReal> x12095 = IKatan2WithCheck(IkReal(x12092),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12095.valid){
continue;
}
IkReal x12093=((1.0)*(x12095.value));
IkReal x12094=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12093)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12093)));
IkReal gconst10=(x12092*x12094);
IkReal gconst11=((1.0)*r10*x12094);
IkReal x12096=r12*r12;
IkReal x12097=((1.0)+(((-1.0)*x12096)));
IkReal x12098=(r22*sj1*sj2);
IkReal x12099=(cj1*cj2*r22);
CheckValue<IkReal> x12106=IKPowWithIntegerCheck(x12097,-1);
if(!x12106.valid){
continue;
}
IkReal x12100=x12106.value;
CheckValue<IkReal> x12107=IKPowWithIntegerCheck(((-1.0)+x12096),-1);
if(!x12107.valid){
continue;
}
IkReal x12101=x12107.value;
IkReal x12102=((1.0)*x12100);
if((x12097) < -0.00001)
continue;
IkReal x12103=IKsqrt(x12097);
IkReal x12104=(r12*x12101*x12103);
IkReal x12105=((((-1.0)*(r22*r22)))+(((-1.0)*x12102*(r11*r11)*(r21*r21)))+(((-1.0)*x12102*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x12100)));
j4eval[0]=x12105;
j4eval[1]=((IKabs(((((-1.0)*x12098*x12104))+((x12099*x12104)))))+(IKabs(((((-1.0)*x12099))+x12098))));
j4eval[2]=IKsign(x12105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12108=((-1.0)*r11);
CheckValue<IkReal> x12111 = IKatan2WithCheck(IkReal(x12108),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12111.valid){
continue;
}
IkReal x12109=((1.0)*(x12111.value));
IkReal x12110=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12109)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12109)));
IkReal gconst10=(x12108*x12110);
IkReal gconst11=((1.0)*r10*x12110);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12112=((-1.0)*r11);
CheckValue<IkReal> x12115 = IKatan2WithCheck(IkReal(x12112),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12115.valid){
continue;
}
IkReal x12113=((1.0)*(x12115.value));
IkReal x12114=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12113)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12113)));
IkReal gconst10=(x12112*x12114);
IkReal gconst11=((1.0)*r10*x12114);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12116=((-1.0)*r11);
CheckValue<IkReal> x12119 = IKatan2WithCheck(IkReal(x12116),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12119.valid){
continue;
}
IkReal x12117=((1.0)*(x12119.value));
IkReal x12118=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12117)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12117)));
IkReal gconst10=(x12116*x12118);
IkReal gconst11=((1.0)*r10*x12118);
IkReal x12120=(cj1*r02*sj2);
IkReal x12121=(cj2*r02*sj1);
IkReal x12122=x11827;
IkReal x12123=(r12*x12122);
j4eval[0]=((IKabs((((x12120*x12123))+((x12121*x12123)))))+(IKabs((x12121+x12120))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12124=(cj1*sj2);
IkReal x12125=(cj2*sj1);
IkReal x12126=(gconst11*r00);
IkReal x12127=((1.0)*gconst10*r01);
CheckValue<IkReal> x12128=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12128.valid){
continue;
}
CheckValue<IkReal> x12129 = IKatan2WithCheck(IkReal((((x12125*x12126))+((x12124*x12126))+(((-1.0)*x12125*x12127))+(((-1.0)*x12124*x12127)))),IkReal((((r02*x12125))+((r02*x12124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12129.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12128.value)))+(x12129.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12130=IKcos(j4);
IkReal x12131=IKsin(j4);
IkReal x12132=((1.0)*cj2);
IkReal x12133=((1.0)*x12130);
IkReal x12134=(gconst10*x12130);
IkReal x12135=(gconst10*x12131);
IkReal x12136=((1.0)*gconst11*x12131);
evalcond[0]=((((-1.0)*gconst11*r00*x12133))+((r01*x12134))+((r02*x12131)));
evalcond[1]=((((-1.0)*r20*x12136))+((r21*x12135))+(((-1.0)*r22*x12133)));
evalcond[2]=((((-1.0)*r12*x12133))+(((-1.0)*r10*x12136))+((r11*x12135)));
evalcond[3]=((-1.0)+((r01*x12135))+(((-1.0)*r00*x12136))+(((-1.0)*r02*x12133)));
evalcond[4]=((((-1.0)*cj1*x12132))+((sj1*sj2))+((r21*x12134))+((r22*x12131))+(((-1.0)*gconst11*r20*x12133)));
evalcond[5]=(((r12*x12131))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst11*r10*x12133))+((r11*x12134))+(((-1.0)*sj1*x12132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12137=(gconst10*r01);
IkReal x12138=(gconst11*r00);
CheckValue<IkReal> x12139=IKPowWithIntegerCheck(IKsign(((x12137*x12137)+(x12138*x12138)+(((-2.0)*x12137*x12138))+(r02*r02))),-1);
if(!x12139.valid){
continue;
}
CheckValue<IkReal> x12140 = IKatan2WithCheck(IkReal((x12137+(((-1.0)*x12138)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12139.value)))+(x12140.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12141=IKcos(j4);
IkReal x12142=IKsin(j4);
IkReal x12143=((1.0)*cj2);
IkReal x12144=((1.0)*x12141);
IkReal x12145=(gconst10*x12141);
IkReal x12146=(gconst10*x12142);
IkReal x12147=((1.0)*gconst11*x12142);
evalcond[0]=(((r02*x12142))+((r01*x12145))+(((-1.0)*gconst11*r00*x12144)));
evalcond[1]=((((-1.0)*r22*x12144))+(((-1.0)*r20*x12147))+((r21*x12146)));
evalcond[2]=((((-1.0)*r12*x12144))+((r11*x12146))+(((-1.0)*r10*x12147)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12147))+(((-1.0)*r02*x12144))+((r01*x12146)));
evalcond[4]=(((r22*x12142))+(((-1.0)*gconst11*r20*x12144))+((sj1*sj2))+(((-1.0)*cj1*x12143))+((r21*x12145)));
evalcond[5]=((((-1.0)*gconst11*r10*x12144))+(((-1.0)*cj1*sj2))+((r12*x12142))+((r11*x12145))+(((-1.0)*sj1*x12143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12148 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12148.valid){
continue;
}
CheckValue<IkReal> x12149=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12148.value)+(((1.5707963267949)*(x12149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12150=IKcos(j4);
IkReal x12151=IKsin(j4);
IkReal x12152=((1.0)*cj2);
IkReal x12153=((1.0)*x12150);
IkReal x12154=(gconst10*x12150);
IkReal x12155=(gconst10*x12151);
IkReal x12156=((1.0)*gconst11*x12151);
evalcond[0]=(((r02*x12151))+((r01*x12154))+(((-1.0)*gconst11*r00*x12153)));
evalcond[1]=((((-1.0)*r22*x12153))+((r21*x12155))+(((-1.0)*r20*x12156)));
evalcond[2]=((((-1.0)*r12*x12153))+((r11*x12155))+(((-1.0)*r10*x12156)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12153))+(((-1.0)*r00*x12156))+((r01*x12155)));
evalcond[4]=((((-1.0)*gconst11*r20*x12153))+((r22*x12151))+((sj1*sj2))+((r21*x12154))+(((-1.0)*cj1*x12152)));
evalcond[5]=((((-1.0)*gconst11*r10*x12153))+((r12*x12151))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12152))+((r11*x12154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12157=((-1.0)*r11);
CheckValue<IkReal> x12160 = IKatan2WithCheck(IkReal(x12157),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12160.valid){
continue;
}
IkReal x12158=((1.0)*(x12160.value));
IkReal x12159=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12158)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12158)));
IkReal gconst10=(x12157*x12159);
IkReal gconst11=((1.0)*r10*x12159);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12161=((-1.0)*r11);
CheckValue<IkReal> x12164 = IKatan2WithCheck(IkReal(x12161),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12164.valid){
continue;
}
IkReal x12162=((1.0)*(x12164.value));
IkReal x12163=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12162)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12162)));
IkReal gconst10=(x12161*x12163);
IkReal gconst11=((1.0)*r10*x12163);
IkReal x12165=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12169=IKPowWithIntegerCheck(x12165,-1);
if(!x12169.valid){
continue;
}
IkReal x12166=x12169.value;
IkReal x12167=((1.0)*x12166);
IkReal x12168=((((-2.0)*r00*r01*r10*r11*x12166))+(((-1.0)*(r02*r02)))+(((-1.0)*x12167*(r00*r00)*(r10*r10)))+(((-1.0)*x12167*(r01*r01)*(r11*r11))));
j4eval[0]=x12168;
j4eval[1]=r02;
j4eval[2]=x12165;
j4eval[3]=IKsign(x12168);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12170=((-1.0)*r11);
CheckValue<IkReal> x12173 = IKatan2WithCheck(IkReal(x12170),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12173.valid){
continue;
}
IkReal x12171=((1.0)*(x12173.value));
IkReal x12172=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12171)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12171)));
IkReal gconst10=(x12170*x12172);
IkReal gconst11=((1.0)*r10*x12172);
IkReal x12174=r12*r12;
IkReal x12175=((1.0)*r02);
IkReal x12176=(cj1*sj2);
IkReal x12177=(cj2*sj1);
CheckValue<IkReal> x12181=IKPowWithIntegerCheck(((-1.0)+x12174),-1);
if(!x12181.valid){
continue;
}
IkReal x12178=x12181.value;
if((((1.0)+(((-1.0)*x12174)))) < -0.00001)
continue;
IkReal x12179=IKsqrt(((1.0)+(((-1.0)*x12174))));
IkReal x12180=(r12*x12178*x12179);
j4eval[0]=((IKabs(((((-1.0)*x12175*x12177))+(((-1.0)*x12175*x12176)))))+(IKabs(((((-1.0)*x12175*x12177*x12180))+(((-1.0)*x12175*x12176*x12180))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12182=(cj1*sj2);
IkReal x12183=(gconst10*r01);
IkReal x12184=(cj2*sj1);
IkReal x12185=((1.0)*r02);
IkReal x12186=((1.0)*gconst11*r00);
CheckValue<IkReal> x12187=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12187.valid){
continue;
}
CheckValue<IkReal> x12188 = IKatan2WithCheck(IkReal(((((-1.0)*x12182*x12186))+((x12182*x12183))+((x12183*x12184))+(((-1.0)*x12184*x12186)))),IkReal(((((-1.0)*x12182*x12185))+(((-1.0)*x12184*x12185)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12187.value)))+(x12188.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12189=IKcos(j4);
IkReal x12190=IKsin(j4);
IkReal x12191=((1.0)*x12189);
IkReal x12192=(gconst10*x12189);
IkReal x12193=(gconst10*x12190);
IkReal x12194=((1.0)*gconst11*x12190);
evalcond[0]=((((-1.0)*gconst11*r00*x12191))+((r02*x12190))+((r01*x12192)));
evalcond[1]=((((-1.0)*r20*x12194))+((r21*x12193))+(((-1.0)*r22*x12191)));
evalcond[2]=(((r11*x12193))+(((-1.0)*r10*x12194))+(((-1.0)*r12*x12191)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12191))+((r01*x12193))+(((-1.0)*r00*x12194)));
evalcond[4]=(((cj2*sj1))+((r12*x12190))+((cj1*sj2))+((r11*x12192))+(((-1.0)*gconst11*r10*x12191)));
evalcond[5]=(((r21*x12192))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x12190))+(((-1.0)*gconst11*r20*x12191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12195=(gconst10*r01);
IkReal x12196=(gconst11*r00);
CheckValue<IkReal> x12197 = IKatan2WithCheck(IkReal((x12195+(((-1.0)*x12196)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12197.valid){
continue;
}
CheckValue<IkReal> x12198=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x12196*x12196)))+(((-1.0)*(x12195*x12195)))+(((2.0)*x12195*x12196)))),-1);
if(!x12198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12197.value)+(((1.5707963267949)*(x12198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12199=IKcos(j4);
IkReal x12200=IKsin(j4);
IkReal x12201=((1.0)*x12199);
IkReal x12202=(gconst10*x12199);
IkReal x12203=(gconst10*x12200);
IkReal x12204=((1.0)*gconst11*x12200);
evalcond[0]=(((r02*x12200))+(((-1.0)*gconst11*r00*x12201))+((r01*x12202)));
evalcond[1]=((((-1.0)*r22*x12201))+((r21*x12203))+(((-1.0)*r20*x12204)));
evalcond[2]=((((-1.0)*r12*x12201))+(((-1.0)*r10*x12204))+((r11*x12203)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12201))+(((-1.0)*r00*x12204))+((r01*x12203)));
evalcond[4]=(((cj2*sj1))+((r12*x12200))+(((-1.0)*gconst11*r10*x12201))+((cj1*sj2))+((r11*x12202)));
evalcond[5]=(((r22*x12200))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12201))+((r21*x12202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12205=((1.0)*gconst11);
CheckValue<IkReal> x12206=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12205)))),-1);
if(!x12206.valid){
continue;
}
CheckValue<IkReal> x12207 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12205)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12207.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12206.value)))+(x12207.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12208=IKcos(j4);
IkReal x12209=IKsin(j4);
IkReal x12210=((1.0)*x12208);
IkReal x12211=(gconst10*x12208);
IkReal x12212=(gconst10*x12209);
IkReal x12213=((1.0)*gconst11*x12209);
evalcond[0]=(((r02*x12209))+(((-1.0)*gconst11*r00*x12210))+((r01*x12211)));
evalcond[1]=((((-1.0)*r22*x12210))+((r21*x12212))+(((-1.0)*r20*x12213)));
evalcond[2]=((((-1.0)*r12*x12210))+(((-1.0)*r10*x12213))+((r11*x12212)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12210))+(((-1.0)*r00*x12213))+((r01*x12212)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12210))+((r12*x12209))+((cj1*sj2))+((r11*x12211)));
evalcond[5]=(((r22*x12209))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12210))+((r21*x12211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12214=((-1.0)*r11);
IkReal x12215=((-1.0)*r10);
CheckValue<IkReal> x12217 = IKatan2WithCheck(IkReal(x12214),IkReal(x12215),IKFAST_ATAN2_MAGTHRESH);
if(!x12217.valid){
continue;
}
IkReal x12216=((1.0)*(x12217.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12216)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12215);
rxp1_1=(px*r21);
rxp1_2=(px*x12214);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12216)));
IkReal gconst10=x12214;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12218=((-1.0)*r11);
IkReal x12219=((-1.0)*r10);
CheckValue<IkReal> x12221 = IKatan2WithCheck(IkReal(x12218),IkReal(x12219),IKFAST_ATAN2_MAGTHRESH);
if(!x12221.valid){
continue;
}
IkReal x12220=((1.0)*(x12221.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12220)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12219);
rxp1_1=(px*r21);
rxp1_2=(px*x12218);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12220)));
IkReal gconst10=x12218;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12222=((-1.0)*r11);
IkReal x12223=((-1.0)*r10);
CheckValue<IkReal> x12225 = IKatan2WithCheck(IkReal(x12222),IkReal(x12223),IKFAST_ATAN2_MAGTHRESH);
if(!x12225.valid){
continue;
}
IkReal x12224=((1.0)*(x12225.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12224)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12223);
rxp1_1=(px*r21);
rxp1_2=(px*x12222);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12224)));
IkReal gconst10=x12222;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12228=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12228.valid){
continue;
}
IkReal x12226=x12228.value;
IkReal x12227=(sj0*x12226);
cj4array[0]=(((cj1*sj2*x12227))+((cj2*sj1*x12227)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12229=IKsin(j4);
IkReal x12230=IKcos(j4);
IkReal x12231=(gconst10*r21);
IkReal x12232=((1.0)*x12230);
IkReal x12233=((1.0)*gconst11*x12229);
evalcond[0]=(r02*x12229);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12232)));
evalcond[2]=((((-1.0)*r20*x12233))+((x12229*x12231)));
evalcond[3]=(((gconst10*r11*x12229))+(((-1.0)*r10*x12233)));
evalcond[4]=((((-1.0)*gconst11*r20*x12232))+((x12230*x12231))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12235=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12235.valid){
continue;
}
IkReal x12234=x12235.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12234))+((cj1*cj2*x12234)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12236=IKsin(j4);
IkReal x12237=IKcos(j4);
IkReal x12238=((1.0)*sj0);
IkReal x12239=(gconst10*x12236);
IkReal x12240=((1.0)*x12237);
IkReal x12241=((1.0)*gconst11*x12236);
evalcond[0]=(r02*x12236);
evalcond[1]=((((-1.0)*x12238))+(((-1.0)*r02*x12240)));
evalcond[2]=((((-1.0)*r20*x12241))+((r21*x12239)));
evalcond[3]=((((-1.0)*r10*x12241))+((r11*x12239)));
evalcond[4]=((((-1.0)*cj1*sj2*x12238))+((gconst10*r11*x12237))+(((-1.0)*gconst11*r10*x12240))+(((-1.0)*cj2*sj1*x12238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12242=IKPowWithIntegerCheck(r02,-1);
if(!x12242.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12242.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12243=IKsin(j4);
IkReal x12244=IKcos(j4);
IkReal x12245=(gconst10*r21);
IkReal x12246=((1.0)*cj1);
IkReal x12247=(gconst10*r11);
IkReal x12248=((1.0)*gconst11*x12243);
IkReal x12249=((1.0)*gconst11*x12244);
evalcond[0]=(r02*x12243);
evalcond[1]=((((-1.0)*r20*x12248))+((x12243*x12245)));
evalcond[2]=((((-1.0)*r10*x12248))+((x12243*x12247)));
evalcond[3]=(((x12244*x12245))+((sj1*sj2))+(((-1.0)*r20*x12249))+(((-1.0)*cj2*x12246)));
evalcond[4]=((((-1.0)*r10*x12249))+((x12244*x12247))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x12246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12250=((1.0)*gconst11);
CheckValue<IkReal> x12251 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12250))+(((-1.0)*cj0*r00*x12250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12251.valid){
continue;
}
CheckValue<IkReal> x12252=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12251.value)+(((1.5707963267949)*(x12252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12253=IKsin(j4);
IkReal x12254=IKcos(j4);
IkReal x12255=((1.0)*gconst11);
IkReal x12256=((1.0)*cj2);
IkReal x12257=((1.0)*sj0);
IkReal x12258=(cj1*sj2);
IkReal x12259=(gconst10*x12254);
IkReal x12260=(gconst10*x12253);
IkReal x12261=((1.0)*x12254);
evalcond[0]=((((-1.0)*r20*x12253*x12255))+((r21*x12260)));
evalcond[1]=((((-1.0)*r12*x12261))+cj0+((r11*x12260))+(((-1.0)*r10*x12253*x12255)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r20*x12254*x12255))+((r21*x12259))+(((-1.0)*cj1*x12256)));
evalcond[3]=((((-1.0)*r00*x12253*x12255))+((r01*x12260))+(((-1.0)*r02*x12261))+(((-1.0)*x12257)));
evalcond[4]=((((-1.0)*cj0*sj1*x12256))+((r01*x12259))+(((-1.0)*cj0*x12258))+(((-1.0)*r00*x12254*x12255))+((r02*x12253)));
evalcond[5]=(((r12*x12253))+((r11*x12259))+(((-1.0)*r10*x12254*x12255))+(((-1.0)*sj0*sj1*x12256))+(((-1.0)*x12257*x12258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12262=(gconst10*r21);
IkReal x12263=(gconst11*r20);
IkReal x12264=(sj1*sj2);
IkReal x12265=(cj1*cj2);
CheckValue<IkReal> x12266 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12265))+((r22*x12264)))),IkReal((((x12263*x12265))+(((-1.0)*x12263*x12264))+((x12262*x12264))+(((-1.0)*x12262*x12265)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12266.valid){
continue;
}
CheckValue<IkReal> x12267=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12263*x12263)))+(((-1.0)*(x12262*x12262)))+(((2.0)*x12262*x12263))+(((-1.0)*(r22*r22))))),-1);
if(!x12267.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12266.value)+(((1.5707963267949)*(x12267.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12268=IKsin(j4);
IkReal x12269=IKcos(j4);
IkReal x12270=((1.0)*cj2);
IkReal x12271=((1.0)*sj0);
IkReal x12272=(cj1*sj2);
IkReal x12273=((1.0)*x12269);
IkReal x12274=(gconst10*x12269);
IkReal x12275=(gconst10*x12268);
IkReal x12276=((1.0)*gconst11*x12268);
evalcond[0]=(((r21*x12275))+(((-1.0)*r22*x12273))+(((-1.0)*r20*x12276)));
evalcond[1]=(cj0+(((-1.0)*r10*x12276))+(((-1.0)*r12*x12273))+((r11*x12275)));
evalcond[2]=((((-1.0)*r02*x12273))+(((-1.0)*x12271))+(((-1.0)*r00*x12276))+((r01*x12275)));
evalcond[3]=(((r21*x12274))+(((-1.0)*cj1*x12270))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12273))+((r22*x12268)));
evalcond[4]=((((-1.0)*cj0*x12272))+(((-1.0)*gconst11*r00*x12273))+(((-1.0)*cj0*sj1*x12270))+((r01*x12274))+((r02*x12268)));
evalcond[5]=(((r12*x12268))+(((-1.0)*sj0*sj1*x12270))+((r11*x12274))+(((-1.0)*x12271*x12272))+(((-1.0)*gconst11*r10*x12273)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12277=((1.0)*sj0);
IkReal x12278=((1.0)*gconst10);
CheckValue<IkReal> x12279=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12278)))),-1);
if(!x12279.valid){
continue;
}
CheckValue<IkReal> x12280 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12277)))),IkReal(((((-1.0)*cj0*r01*x12278))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x12277))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12280.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12279.value)))+(x12280.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12281=IKsin(j4);
IkReal x12282=IKcos(j4);
IkReal x12283=((1.0)*cj2);
IkReal x12284=((1.0)*sj0);
IkReal x12285=(cj1*sj2);
IkReal x12286=((1.0)*x12282);
IkReal x12287=(gconst10*x12282);
IkReal x12288=(gconst10*x12281);
IkReal x12289=((1.0)*gconst11*x12281);
evalcond[0]=((((-1.0)*r22*x12286))+(((-1.0)*r20*x12289))+((r21*x12288)));
evalcond[1]=((((-1.0)*r10*x12289))+cj0+(((-1.0)*r12*x12286))+((r11*x12288)));
evalcond[2]=(((r01*x12288))+(((-1.0)*r00*x12289))+(((-1.0)*r02*x12286))+(((-1.0)*x12284)));
evalcond[3]=(((r22*x12281))+(((-1.0)*gconst11*r20*x12286))+(((-1.0)*cj1*x12283))+((sj1*sj2))+((r21*x12287)));
evalcond[4]=(((r02*x12281))+(((-1.0)*gconst11*r00*x12286))+(((-1.0)*cj0*sj1*x12283))+((r01*x12287))+(((-1.0)*cj0*x12285)));
evalcond[5]=((((-1.0)*sj0*sj1*x12283))+(((-1.0)*gconst11*r10*x12286))+(((-1.0)*x12284*x12285))+((r12*x12281))+((r11*x12287)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12290=((1.0)*gconst11);
CheckValue<IkReal> x12291=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12290)))),-1);
if(!x12291.valid){
continue;
}
CheckValue<IkReal> x12292 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12290))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12292.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12291.value)))+(x12292.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12293=IKsin(j4);
IkReal x12294=IKcos(j4);
IkReal x12295=((1.0)*cj2);
IkReal x12296=((1.0)*sj0);
IkReal x12297=(cj1*sj2);
IkReal x12298=((1.0)*x12294);
IkReal x12299=(gconst10*x12294);
IkReal x12300=(gconst10*x12293);
IkReal x12301=((1.0)*gconst11*x12293);
evalcond[0]=((((-1.0)*r20*x12301))+((r21*x12300))+(((-1.0)*r22*x12298)));
evalcond[1]=(cj0+((r11*x12300))+(((-1.0)*r10*x12301))+(((-1.0)*r12*x12298)));
evalcond[2]=((((-1.0)*x12296))+(((-1.0)*r00*x12301))+(((-1.0)*r02*x12298))+((r01*x12300)));
evalcond[3]=(((r21*x12299))+((sj1*sj2))+((r22*x12293))+(((-1.0)*cj1*x12295))+(((-1.0)*gconst11*r20*x12298)));
evalcond[4]=((((-1.0)*cj0*sj1*x12295))+((r01*x12299))+(((-1.0)*cj0*x12297))+((r02*x12293))+(((-1.0)*gconst11*r00*x12298)));
evalcond[5]=((((-1.0)*x12296*x12297))+((r11*x12299))+((r12*x12293))+(((-1.0)*gconst11*r10*x12298))+(((-1.0)*sj0*sj1*x12295)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12302=((-1.0)*r11);
CheckValue<IkReal> x12305 = IKatan2WithCheck(IkReal(x12302),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12305.valid){
continue;
}
IkReal x12303=((1.0)*(x12305.value));
IkReal x12304=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12303)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12303)));
IkReal gconst10=(x12302*x12304);
IkReal gconst11=((1.0)*r10*x12304);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12306=gconst10*gconst10;
IkReal x12307=gconst11*gconst11;
IkReal x12308=(gconst10*r21);
IkReal x12309=(cj3*r00);
IkReal x12310=(r00*sj3);
IkReal x12311=((1.0)*gconst11);
IkReal x12312=(gconst10*r20);
IkReal x12313=(r01*sj3);
IkReal x12314=(cj3*gconst11*r01);
IkReal x12315=(r21*x12306);
IkReal x12316=(r20*x12307);
CheckValue<IkReal> x12317 = IKatan2WithCheck(IkReal((((r22*x12314))+((gconst10*r22*x12309)))),IkReal((((x12309*x12315))+(((-1.0)*x12309*x12311*x12312))+((x12308*x12314))+(((-1.0)*cj3*r01*x12316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12317.valid){
continue;
}
CheckValue<IkReal> x12318=IKPowWithIntegerCheck(IKsign((((x12310*x12316))+(((-1.0)*x12311*x12312*x12313))+(((-1.0)*x12308*x12310*x12311))+((x12313*x12315))+((r02*r22*sj3)))),-1);
if(!x12318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12317.value)+(((1.5707963267949)*(x12318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12319=IKsin(j4);
IkReal x12320=IKcos(j4);
IkReal x12321=(sj1*sj2);
IkReal x12322=(gconst10*sj3);
IkReal x12323=(cj3*gconst10);
IkReal x12324=(gconst11*r20);
IkReal x12325=(gconst11*r21);
IkReal x12326=(gconst11*r00);
IkReal x12327=(cj3*gconst11);
IkReal x12328=(gconst11*r10);
IkReal x12329=((1.0)*cj1);
IkReal x12330=(cj2*sj1);
IkReal x12331=(gconst11*sj3);
IkReal x12332=(cj2*x12329);
IkReal x12333=((1.0)*x12320);
IkReal x12334=((1.0)*x12319);
IkReal x12335=(gconst10*x12319);
IkReal x12336=(cj3*x12319);
IkReal x12337=(sj3*x12320);
evalcond[0]=((((-1.0)*x12324*x12334))+(((-1.0)*r22*x12333))+((r21*x12335)));
evalcond[1]=((((-1.0)*x12328*x12334))+((r11*x12335))+(((-1.0)*r12*x12333)));
evalcond[2]=((-1.0)+((r01*x12335))+(((-1.0)*x12326*x12334))+(((-1.0)*r02*x12333)));
evalcond[3]=(((r00*x12322))+((r01*x12331))+((r01*x12320*x12323))+((r02*x12336))+(((-1.0)*cj3*x12326*x12333)));
evalcond[4]=(((r00*x12323))+((r01*x12327))+((x12326*x12337))+(((-1.0)*r02*sj3*x12334))+(((-1.0)*r01*x12322*x12333)));
evalcond[5]=(((cj1*sj2))+x12330+((r20*x12322))+(((-1.0)*cj3*x12324*x12333))+((r21*x12320*x12323))+((sj3*x12325))+((r22*x12336)));
evalcond[6]=(x12321+(((-1.0)*x12332))+(((-1.0)*r10*x12327*x12333))+((r12*x12336))+((r10*x12322))+((r11*x12331))+((r11*x12320*x12323)));
evalcond[7]=(x12321+((r20*x12323))+(((-1.0)*r21*x12322*x12333))+(((-1.0)*x12332))+((cj3*x12325))+((x12324*x12337))+(((-1.0)*r22*sj3*x12334)));
evalcond[8]=((((-1.0)*r11*x12322*x12333))+(((-1.0)*sj2*x12329))+(((-1.0)*r12*sj3*x12334))+((r10*x12323))+((r11*x12327))+(((-1.0)*x12330))+((x12328*x12337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12338 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12338.valid){
continue;
}
CheckValue<IkReal> x12339=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12338.value)+(((1.5707963267949)*(x12339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12340=IKsin(j4);
IkReal x12341=IKcos(j4);
IkReal x12342=(sj1*sj2);
IkReal x12343=(gconst10*sj3);
IkReal x12344=(cj3*gconst10);
IkReal x12345=(gconst11*r20);
IkReal x12346=(gconst11*r21);
IkReal x12347=(gconst11*r00);
IkReal x12348=(cj3*gconst11);
IkReal x12349=(gconst11*r10);
IkReal x12350=((1.0)*cj1);
IkReal x12351=(cj2*sj1);
IkReal x12352=(gconst11*sj3);
IkReal x12353=(cj2*x12350);
IkReal x12354=((1.0)*x12341);
IkReal x12355=((1.0)*x12340);
IkReal x12356=(gconst10*x12340);
IkReal x12357=(cj3*x12340);
IkReal x12358=(sj3*x12341);
evalcond[0]=((((-1.0)*x12345*x12355))+((r21*x12356))+(((-1.0)*r22*x12354)));
evalcond[1]=((((-1.0)*x12349*x12355))+((r11*x12356))+(((-1.0)*r12*x12354)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12354))+(((-1.0)*x12347*x12355))+((r01*x12356)));
evalcond[3]=(((r00*x12343))+((r01*x12352))+(((-1.0)*cj3*x12347*x12354))+((r02*x12357))+((r01*x12341*x12344)));
evalcond[4]=(((r00*x12344))+((r01*x12348))+((x12347*x12358))+(((-1.0)*r01*x12343*x12354))+(((-1.0)*r02*sj3*x12355)));
evalcond[5]=((((-1.0)*cj3*x12345*x12354))+((r20*x12343))+((cj1*sj2))+x12351+((sj3*x12346))+((r22*x12357))+((r21*x12341*x12344)));
evalcond[6]=((((-1.0)*x12353))+x12342+((r11*x12341*x12344))+(((-1.0)*r10*x12348*x12354))+((r11*x12352))+((r12*x12357))+((r10*x12343)));
evalcond[7]=(((x12345*x12358))+((r20*x12344))+(((-1.0)*x12353))+x12342+((cj3*x12346))+(((-1.0)*r22*sj3*x12355))+(((-1.0)*r21*x12343*x12354)));
evalcond[8]=((((-1.0)*x12351))+(((-1.0)*sj2*x12350))+(((-1.0)*r11*x12343*x12354))+((r11*x12348))+((r10*x12344))+((x12349*x12358))+(((-1.0)*r12*sj3*x12355)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12359=((-1.0)*r11);
CheckValue<IkReal> x12362 = IKatan2WithCheck(IkReal(x12359),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12362.valid){
continue;
}
IkReal x12360=((1.0)*(x12362.value));
IkReal x12361=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12360)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12360)));
IkReal gconst10=(x12359*x12361);
IkReal gconst11=((1.0)*r10*x12361);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12363=gconst10*gconst10;
IkReal x12364=gconst11*gconst11;
IkReal x12365=(gconst10*r21);
IkReal x12366=(cj3*r00);
IkReal x12367=(r00*sj3);
IkReal x12368=((1.0)*gconst11);
IkReal x12369=(gconst10*r20);
IkReal x12370=(r01*sj3);
IkReal x12371=(cj3*gconst11*r01);
IkReal x12372=(r21*x12363);
IkReal x12373=(r20*x12364);
CheckValue<IkReal> x12374 = IKatan2WithCheck(IkReal((((gconst10*r22*x12366))+((r22*x12371)))),IkReal(((((-1.0)*cj3*r01*x12373))+((x12366*x12372))+(((-1.0)*x12366*x12368*x12369))+((x12365*x12371)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12374.valid){
continue;
}
CheckValue<IkReal> x12375=IKPowWithIntegerCheck(IKsign((((x12367*x12373))+((x12370*x12372))+(((-1.0)*x12365*x12367*x12368))+(((-1.0)*x12368*x12369*x12370))+((r02*r22*sj3)))),-1);
if(!x12375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12374.value)+(((1.5707963267949)*(x12375.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12376=IKsin(j4);
IkReal x12377=IKcos(j4);
IkReal x12378=(cj2*sj1);
IkReal x12379=(cj1*sj2);
IkReal x12380=(gconst10*sj3);
IkReal x12381=(cj3*gconst10);
IkReal x12382=(gconst11*r20);
IkReal x12383=(gconst11*r21);
IkReal x12384=(gconst11*r00);
IkReal x12385=(sj1*sj2);
IkReal x12386=(cj3*gconst11);
IkReal x12387=(gconst11*r10);
IkReal x12388=(cj1*cj2);
IkReal x12389=(gconst11*sj3);
IkReal x12390=((1.0)*x12377);
IkReal x12391=((1.0)*x12376);
IkReal x12392=(gconst10*x12376);
IkReal x12393=(cj3*x12376);
IkReal x12394=(sj3*x12377);
IkReal x12395=(x12378+x12379);
evalcond[0]=((((-1.0)*x12382*x12391))+(((-1.0)*r22*x12390))+((r21*x12392)));
evalcond[1]=((((-1.0)*r12*x12390))+((r11*x12392))+(((-1.0)*x12387*x12391)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12390))+((r01*x12392))+(((-1.0)*x12384*x12391)));
evalcond[3]=(((r02*x12393))+((r00*x12380))+(((-1.0)*cj3*x12384*x12390))+((r01*x12389))+((r01*x12377*x12381)));
evalcond[4]=((((-1.0)*r01*x12380*x12390))+((r00*x12381))+((x12384*x12394))+((r01*x12386))+(((-1.0)*r02*sj3*x12391)));
evalcond[5]=(((r22*x12393))+((r21*x12377*x12381))+(((-1.0)*cj3*x12382*x12390))+x12395+((r20*x12380))+((sj3*x12383)));
evalcond[6]=((((-1.0)*r10*x12386*x12390))+((r11*x12377*x12381))+((r11*x12389))+((r10*x12380))+x12388+(((-1.0)*x12385))+((r12*x12393)));
evalcond[7]=(((r11*x12386))+((r10*x12381))+x12395+((x12387*x12394))+(((-1.0)*r11*x12380*x12390))+(((-1.0)*r12*sj3*x12391)));
evalcond[8]=((((-1.0)*r21*x12380*x12390))+((cj3*x12383))+(((-1.0)*r22*sj3*x12391))+x12385+((r20*x12381))+((x12382*x12394))+(((-1.0)*x12388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12396=((1.0)*gconst11);
CheckValue<IkReal> x12397 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12396)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12397.valid){
continue;
}
CheckValue<IkReal> x12398=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12396))+(((-1.0)*gconst10*r20)))),-1);
if(!x12398.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12397.value)+(((1.5707963267949)*(x12398.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12399=IKsin(j4);
IkReal x12400=IKcos(j4);
IkReal x12401=(cj2*sj1);
IkReal x12402=(cj1*sj2);
IkReal x12403=(gconst10*sj3);
IkReal x12404=(cj3*gconst10);
IkReal x12405=(gconst11*r20);
IkReal x12406=(gconst11*r21);
IkReal x12407=(gconst11*r00);
IkReal x12408=(sj1*sj2);
IkReal x12409=(cj3*gconst11);
IkReal x12410=(gconst11*r10);
IkReal x12411=(cj1*cj2);
IkReal x12412=(gconst11*sj3);
IkReal x12413=((1.0)*x12400);
IkReal x12414=((1.0)*x12399);
IkReal x12415=(gconst10*x12399);
IkReal x12416=(cj3*x12399);
IkReal x12417=(sj3*x12400);
IkReal x12418=(x12401+x12402);
evalcond[0]=((((-1.0)*r22*x12413))+((r21*x12415))+(((-1.0)*x12405*x12414)));
evalcond[1]=(((r11*x12415))+(((-1.0)*x12410*x12414))+(((-1.0)*r12*x12413)));
evalcond[2]=((1.0)+((r01*x12415))+(((-1.0)*r02*x12413))+(((-1.0)*x12407*x12414)));
evalcond[3]=(((r01*x12400*x12404))+(((-1.0)*cj3*x12407*x12413))+((r01*x12412))+((r02*x12416))+((r00*x12403)));
evalcond[4]=((((-1.0)*r02*sj3*x12414))+((x12407*x12417))+(((-1.0)*r01*x12403*x12413))+((r01*x12409))+((r00*x12404)));
evalcond[5]=((((-1.0)*cj3*x12405*x12413))+((sj3*x12406))+((r22*x12416))+((r21*x12400*x12404))+((r20*x12403))+x12418);
evalcond[6]=(((r11*x12412))+((r12*x12416))+(((-1.0)*r10*x12409*x12413))+((r10*x12403))+((r11*x12400*x12404))+x12411+(((-1.0)*x12408)));
evalcond[7]=(((x12410*x12417))+((r10*x12404))+(((-1.0)*r12*sj3*x12414))+(((-1.0)*r11*x12403*x12413))+x12418+((r11*x12409)));
evalcond[8]=(((x12405*x12417))+(((-1.0)*x12411))+(((-1.0)*r21*x12403*x12413))+((cj3*x12406))+(((-1.0)*r22*sj3*x12414))+((r20*x12404))+x12408);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12419=((-1.0)*r11);
IkReal x12420=((-1.0)*r10);
CheckValue<IkReal> x12422 = IKatan2WithCheck(IkReal(x12419),IkReal(x12420),IKFAST_ATAN2_MAGTHRESH);
if(!x12422.valid){
continue;
}
IkReal x12421=((1.0)*(x12422.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12421)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12420);
rxp1_1=(px*r21);
rxp1_2=(px*x12419);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12421)));
IkReal gconst10=x12419;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12423=((-1.0)*r11);
IkReal x12424=((-1.0)*r10);
CheckValue<IkReal> x12426 = IKatan2WithCheck(IkReal(x12423),IkReal(x12424),IKFAST_ATAN2_MAGTHRESH);
if(!x12426.valid){
continue;
}
IkReal x12425=((1.0)*(x12426.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12425)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12424);
rxp1_1=(px*r21);
rxp1_2=(px*x12423);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12425)));
IkReal gconst10=x12423;
IkReal gconst11=((1.0)*r10);
IkReal x12427=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12427))+(((-1.0)*r10*r20*x12427)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12428=((-1.0)*r11);
IkReal x12429=((-1.0)*r10);
CheckValue<IkReal> x12431 = IKatan2WithCheck(IkReal(x12428),IkReal(x12429),IKFAST_ATAN2_MAGTHRESH);
if(!x12431.valid){
continue;
}
IkReal x12430=((1.0)*(x12431.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12430)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12429);
rxp1_1=(px*r21);
rxp1_2=(px*x12428);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12430)));
IkReal gconst10=x12428;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12433=IKPowWithIntegerCheck(r02,-1);
if(!x12433.valid){
continue;
}
IkReal x12432=x12433.value;
CheckValue<IkReal> x12434=IKPowWithIntegerCheck(cj3,-1);
if(!x12434.valid){
continue;
}
if( IKabs((x12432*(x12434.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12432)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12432*(x12434.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12432))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12432*(x12434.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12432));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12435=IKsin(j4);
IkReal x12436=IKcos(j4);
IkReal x12437=(cj3*r10);
IkReal x12438=((1.0)*gconst11);
IkReal x12439=(sj1*sj2);
IkReal x12440=(gconst11*sj3);
IkReal x12441=(cj3*r11);
IkReal x12442=(cj2*sj1);
IkReal x12443=(gconst10*r20);
IkReal x12444=(gconst10*sj3);
IkReal x12445=((1.0)*cj0);
IkReal x12446=((1.0)*sj0);
IkReal x12447=(cj1*sj2);
IkReal x12448=(cj3*r21);
IkReal x12449=((1.0)*cj1*cj2);
IkReal x12450=(r20*x12436);
IkReal x12451=(gconst10*x12435);
IkReal x12452=(gconst10*x12436);
IkReal x12453=(r02*x12435);
IkReal x12454=((1.0)*x12436);
evalcond[0]=((((-1.0)*x12446))+(((-1.0)*r02*x12454)));
evalcond[1]=((((-1.0)*r20*x12435*x12438))+((r21*x12451)));
evalcond[2]=((((-1.0)*r10*x12435*x12438))+cj0+((r11*x12451)));
evalcond[3]=(((cj0*x12439))+((cj3*x12453))+(((-1.0)*cj1*cj2*x12445)));
evalcond[4]=((((-1.0)*sj3*x12453))+(((-1.0)*x12445*x12447))+(((-1.0)*x12442*x12445)));
evalcond[5]=((((-1.0)*cj3*x12438*x12450))+((r21*x12440))+((sj3*x12443))+x12447+x12442+((x12448*x12452)));
evalcond[6]=((((-1.0)*x12449))+(((-1.0)*r21*x12444*x12454))+((cj3*x12443))+((x12440*x12450))+x12439+((gconst11*x12448)));
evalcond[7]=(((sj0*x12439))+(((-1.0)*x12436*x12437*x12438))+((r11*x12440))+((x12441*x12452))+(((-1.0)*cj1*cj2*x12446))+((r10*x12444)));
evalcond[8]=((((-1.0)*r11*x12444*x12454))+((r10*x12436*x12440))+((gconst10*x12437))+(((-1.0)*x12446*x12447))+((gconst11*x12441))+(((-1.0)*x12442*x12446)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12455=((1.0)*r20);
IkReal x12456=((1.0)*gconst11);
CheckValue<IkReal> x12457=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12456))),-1);
if(!x12457.valid){
continue;
}
CheckValue<IkReal> x12458=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12455))+((cj3*gconst10*r21))),-1);
if(!x12458.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12457.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12458.value)*(((((-1.0)*gconst10*sj3*x12455))+(((-1.0)*r21*sj3*x12456))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12457.value)))+IKsqr(((x12458.value)*(((((-1.0)*gconst10*sj3*x12455))+(((-1.0)*r21*sj3*x12456))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12457.value)), ((x12458.value)*(((((-1.0)*gconst10*sj3*x12455))+(((-1.0)*r21*sj3*x12456))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12459=IKsin(j4);
IkReal x12460=IKcos(j4);
IkReal x12461=(cj3*r10);
IkReal x12462=((1.0)*gconst11);
IkReal x12463=(sj1*sj2);
IkReal x12464=(gconst11*sj3);
IkReal x12465=(cj3*r11);
IkReal x12466=(cj2*sj1);
IkReal x12467=(gconst10*r20);
IkReal x12468=(gconst10*sj3);
IkReal x12469=((1.0)*cj0);
IkReal x12470=((1.0)*sj0);
IkReal x12471=(cj1*sj2);
IkReal x12472=(cj3*r21);
IkReal x12473=((1.0)*cj1*cj2);
IkReal x12474=(r20*x12460);
IkReal x12475=(gconst10*x12459);
IkReal x12476=(gconst10*x12460);
IkReal x12477=(r02*x12459);
IkReal x12478=((1.0)*x12460);
evalcond[0]=((((-1.0)*r02*x12478))+(((-1.0)*x12470)));
evalcond[1]=((((-1.0)*r20*x12459*x12462))+((r21*x12475)));
evalcond[2]=(cj0+(((-1.0)*r10*x12459*x12462))+((r11*x12475)));
evalcond[3]=(((cj3*x12477))+((cj0*x12463))+(((-1.0)*cj1*cj2*x12469)));
evalcond[4]=((((-1.0)*sj3*x12477))+(((-1.0)*x12466*x12469))+(((-1.0)*x12469*x12471)));
evalcond[5]=(((sj3*x12467))+(((-1.0)*cj3*x12462*x12474))+x12471+x12466+((r21*x12464))+((x12472*x12476)));
evalcond[6]=(((x12464*x12474))+((cj3*x12467))+(((-1.0)*r21*x12468*x12478))+(((-1.0)*x12473))+x12463+((gconst11*x12472)));
evalcond[7]=(((x12465*x12476))+((r11*x12464))+((sj0*x12463))+(((-1.0)*x12460*x12461*x12462))+((r10*x12468))+(((-1.0)*cj1*cj2*x12470)));
evalcond[8]=(((gconst11*x12465))+(((-1.0)*r11*x12468*x12478))+(((-1.0)*x12466*x12470))+(((-1.0)*x12470*x12471))+((gconst10*x12461))+((r10*x12460*x12464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12479=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12479.valid){
continue;
}
CheckValue<IkReal> x12480=IKPowWithIntegerCheck(r02,-1);
if(!x12480.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12479.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12480.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12479.value)))+IKsqr(((-1.0)*sj0*(x12480.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12479.value)), ((-1.0)*sj0*(x12480.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12481=IKsin(j4);
IkReal x12482=IKcos(j4);
IkReal x12483=(cj3*r10);
IkReal x12484=((1.0)*gconst11);
IkReal x12485=(sj1*sj2);
IkReal x12486=(gconst11*sj3);
IkReal x12487=(cj3*r11);
IkReal x12488=(cj2*sj1);
IkReal x12489=(gconst10*r20);
IkReal x12490=(gconst10*sj3);
IkReal x12491=((1.0)*cj0);
IkReal x12492=((1.0)*sj0);
IkReal x12493=(cj1*sj2);
IkReal x12494=(cj3*r21);
IkReal x12495=((1.0)*cj1*cj2);
IkReal x12496=(r20*x12482);
IkReal x12497=(gconst10*x12481);
IkReal x12498=(gconst10*x12482);
IkReal x12499=(r02*x12481);
IkReal x12500=((1.0)*x12482);
evalcond[0]=((((-1.0)*r02*x12500))+(((-1.0)*x12492)));
evalcond[1]=(((r21*x12497))+(((-1.0)*r20*x12481*x12484)));
evalcond[2]=(cj0+(((-1.0)*r10*x12481*x12484))+((r11*x12497)));
evalcond[3]=(((cj3*x12499))+((cj0*x12485))+(((-1.0)*cj1*cj2*x12491)));
evalcond[4]=((((-1.0)*sj3*x12499))+(((-1.0)*x12491*x12493))+(((-1.0)*x12488*x12491)));
evalcond[5]=(((sj3*x12489))+((x12494*x12498))+x12488+x12493+((r21*x12486))+(((-1.0)*cj3*x12484*x12496)));
evalcond[6]=((((-1.0)*r21*x12490*x12500))+((x12486*x12496))+((gconst11*x12494))+(((-1.0)*x12495))+((cj3*x12489))+x12485);
evalcond[7]=(((r10*x12490))+((x12487*x12498))+(((-1.0)*x12482*x12483*x12484))+((r11*x12486))+((sj0*x12485))+(((-1.0)*cj1*cj2*x12492)));
evalcond[8]=(((gconst10*x12483))+(((-1.0)*r11*x12490*x12500))+(((-1.0)*x12488*x12492))+((gconst11*x12487))+((r10*x12482*x12486))+(((-1.0)*x12492*x12493)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12501=((-1.0)*r11);
CheckValue<IkReal> x12504 = IKatan2WithCheck(IkReal(x12501),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12504.valid){
continue;
}
IkReal x12502=((1.0)*(x12504.value));
IkReal x12503=x11827;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12502)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12502)));
IkReal gconst10=(x12501*x12503);
IkReal gconst11=((1.0)*r10*x12503);
IkReal x12505=r12*r12;
IkReal x12506=((1.0)*sj0);
IkReal x12507=(cj0*r02);
IkReal x12508=x11827;
j4eval[0]=((IKabs((((r12*x12507*x12508))+(((-1.0)*x12506*x12508))+((sj0*x12505*x12508)))))+(IKabs(((((-1.0)*r12*x12506))+(((-1.0)*x12507))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12509=((1.0)*r12);
IkReal x12510=(sj1*sj2);
IkReal x12511=((1.0)*r21);
IkReal x12512=(cj3*gconst11);
IkReal x12513=(r11*sj3);
IkReal x12514=(gconst11*r20);
IkReal x12515=((1.0)*sj3);
IkReal x12516=(cj1*cj2);
IkReal x12517=(gconst10*r21*sj3);
IkReal x12518=(cj3*gconst10*r20);
CheckValue<IkReal> x12519=IKPowWithIntegerCheck((((gconst10*x12513*x12514))+(((-1.0)*gconst11*r10*x12514*x12515))+((gconst11*r10*x12517))+(((-1.0)*x12511*x12513*(gconst10*gconst10)))),-1);
if(!x12519.valid){
continue;
}
CheckValue<IkReal> x12520=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12511))+((sj3*x12514))),-1);
if(!x12520.valid){
continue;
}
if( IKabs(((x12519.value)*((((r12*x12516))+(((-1.0)*r21*x12509*x12512))+(((-1.0)*cj0*x12514*x12515))+(((-1.0)*x12509*x12518))+(((-1.0)*x12509*x12510))+((cj0*x12517)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12520.value)*(((((-1.0)*x12510))+(((-1.0)*x12518))+x12516+(((-1.0)*x12511*x12512)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12519.value)*((((r12*x12516))+(((-1.0)*r21*x12509*x12512))+(((-1.0)*cj0*x12514*x12515))+(((-1.0)*x12509*x12518))+(((-1.0)*x12509*x12510))+((cj0*x12517))))))+IKsqr(((x12520.value)*(((((-1.0)*x12510))+(((-1.0)*x12518))+x12516+(((-1.0)*x12511*x12512))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12519.value)*((((r12*x12516))+(((-1.0)*r21*x12509*x12512))+(((-1.0)*cj0*x12514*x12515))+(((-1.0)*x12509*x12518))+(((-1.0)*x12509*x12510))+((cj0*x12517))))), ((x12520.value)*(((((-1.0)*x12510))+(((-1.0)*x12518))+x12516+(((-1.0)*x12511*x12512))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12521=IKsin(j4);
IkReal x12522=IKcos(j4);
IkReal x12523=(cj3*r10);
IkReal x12524=(gconst11*r20);
IkReal x12525=(gconst11*sj3);
IkReal x12526=(sj1*sj2);
IkReal x12527=(cj3*r11);
IkReal x12528=(r10*sj3);
IkReal x12529=(gconst10*r01);
IkReal x12530=(gconst10*sj3);
IkReal x12531=(cj2*sj1);
IkReal x12532=((1.0)*sj0);
IkReal x12533=(cj1*sj2);
IkReal x12534=(gconst10*r21);
IkReal x12535=(cj3*gconst10);
IkReal x12536=(cj3*gconst11);
IkReal x12537=((1.0)*cj0);
IkReal x12538=((1.0)*x12521);
IkReal x12539=((1.0)*cj1*cj2);
IkReal x12540=(gconst11*x12522);
IkReal x12541=(sj3*x12522);
IkReal x12542=(gconst10*x12521);
IkReal x12543=((1.0)*x12522);
IkReal x12544=(cj3*x12522);
IkReal x12545=(cj3*x12521);
evalcond[0]=((((-1.0)*x12524*x12538))+((x12521*x12534)));
evalcond[1]=(cj0+(((-1.0)*gconst11*r10*x12538))+((r11*x12542))+(((-1.0)*r12*x12543)));
evalcond[2]=(((x12521*x12529))+(((-1.0)*gconst11*r00*x12538))+(((-1.0)*x12532))+(((-1.0)*r02*x12543)));
evalcond[3]=(((r20*x12530))+((r21*x12525))+((x12534*x12544))+x12531+x12533+(((-1.0)*cj3*x12524*x12543)));
evalcond[4]=(((r20*x12535))+((r21*x12536))+(((-1.0)*r21*x12530*x12543))+x12526+(((-1.0)*x12539))+((x12524*x12541)));
evalcond[5]=(((r00*x12530))+((cj0*x12526))+(((-1.0)*cj1*cj2*x12537))+((x12529*x12544))+((r02*x12545))+((r01*x12525))+(((-1.0)*r00*x12536*x12543)));
evalcond[6]=(((sj0*x12526))+((r12*x12545))+((gconst10*x12522*x12527))+(((-1.0)*x12523*x12540))+(((-1.0)*cj1*cj2*x12532))+((gconst10*x12528))+((r11*x12525)));
evalcond[7]=(((r00*x12535))+(((-1.0)*x12533*x12537))+((r00*x12522*x12525))+(((-1.0)*x12531*x12537))+(((-1.0)*r02*sj3*x12538))+(((-1.0)*x12529*x12541))+((r01*x12536)));
evalcond[8]=(((r10*x12522*x12525))+((gconst11*x12527))+((gconst10*x12523))+(((-1.0)*r12*sj3*x12538))+(((-1.0)*r11*x12530*x12543))+(((-1.0)*x12532*x12533))+(((-1.0)*x12531*x12532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12546=((1.0)*sj0);
IkReal x12547=((1.0)*gconst10);
CheckValue<IkReal> x12548=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12547))+(((-1.0)*gconst11*r21)))),-1);
if(!x12548.valid){
continue;
}
CheckValue<IkReal> x12549 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12546)))),IkReal(((((-1.0)*gconst10*r11*x12546))+(((-1.0)*cj0*r01*x12547))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12549.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12548.value)))+(x12549.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12550=IKsin(j4);
IkReal x12551=IKcos(j4);
IkReal x12552=(cj3*r10);
IkReal x12553=(gconst11*r20);
IkReal x12554=(gconst11*sj3);
IkReal x12555=(sj1*sj2);
IkReal x12556=(cj3*r11);
IkReal x12557=(r10*sj3);
IkReal x12558=(gconst10*r01);
IkReal x12559=(gconst10*sj3);
IkReal x12560=(cj2*sj1);
IkReal x12561=((1.0)*sj0);
IkReal x12562=(cj1*sj2);
IkReal x12563=(gconst10*r21);
IkReal x12564=(cj3*gconst10);
IkReal x12565=(cj3*gconst11);
IkReal x12566=((1.0)*cj0);
IkReal x12567=((1.0)*x12550);
IkReal x12568=((1.0)*cj1*cj2);
IkReal x12569=(gconst11*x12551);
IkReal x12570=(sj3*x12551);
IkReal x12571=(gconst10*x12550);
IkReal x12572=((1.0)*x12551);
IkReal x12573=(cj3*x12551);
IkReal x12574=(cj3*x12550);
evalcond[0]=(((x12550*x12563))+(((-1.0)*x12553*x12567)));
evalcond[1]=((((-1.0)*gconst11*r10*x12567))+cj0+(((-1.0)*r12*x12572))+((r11*x12571)));
evalcond[2]=((((-1.0)*gconst11*r00*x12567))+((x12550*x12558))+(((-1.0)*r02*x12572))+(((-1.0)*x12561)));
evalcond[3]=((((-1.0)*cj3*x12553*x12572))+((x12563*x12573))+((r20*x12559))+((r21*x12554))+x12562+x12560);
evalcond[4]=(((r20*x12564))+(((-1.0)*r21*x12559*x12572))+((r21*x12565))+((x12553*x12570))+x12555+(((-1.0)*x12568)));
evalcond[5]=(((r01*x12554))+((r00*x12559))+((r02*x12574))+((x12558*x12573))+(((-1.0)*r00*x12565*x12572))+((cj0*x12555))+(((-1.0)*cj1*cj2*x12566)));
evalcond[6]=(((gconst10*x12557))+((sj0*x12555))+((r11*x12554))+(((-1.0)*x12552*x12569))+((r12*x12574))+(((-1.0)*cj1*cj2*x12561))+((gconst10*x12551*x12556)));
evalcond[7]=((((-1.0)*x12560*x12566))+(((-1.0)*x12562*x12566))+((r01*x12565))+(((-1.0)*r02*sj3*x12567))+((r00*x12564))+(((-1.0)*x12558*x12570))+((r00*x12551*x12554)));
evalcond[8]=((((-1.0)*x12560*x12561))+(((-1.0)*x12561*x12562))+((gconst10*x12552))+((r10*x12551*x12554))+(((-1.0)*r11*x12559*x12572))+((gconst11*x12556))+(((-1.0)*r12*sj3*x12567)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12575=gconst10*gconst10;
IkReal x12576=r21*r21;
IkReal x12577=gconst11*gconst11;
IkReal x12578=r20*r20;
IkReal x12579=((1.0)*cj3);
IkReal x12580=(r20*sj3);
IkReal x12581=(gconst10*gconst11);
IkReal x12582=(cj2*sj1);
IkReal x12583=(gconst10*r21);
IkReal x12584=(cj1*sj2);
IkReal x12585=((1.0)*gconst11*r20);
CheckValue<IkReal> x12586 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12582))+((r22*x12584))+((gconst10*r22*x12580)))),IkReal(((((-1.0)*sj3*x12578*x12581))+(((-1.0)*x12582*x12585))+(((-1.0)*r21*x12577*x12580))+((sj3*x12576*x12581))+((x12583*x12584))+(((-1.0)*x12584*x12585))+((x12582*x12583))+((r21*x12575*x12580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12586.valid){
continue;
}
CheckValue<IkReal> x12587=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12575*x12576*x12579))+(((-1.0)*x12577*x12578*x12579))+(((-1.0)*x12579*(r22*r22)))+(((2.0)*cj3*r20*r21*x12581)))),-1);
if(!x12587.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12586.value)+(((1.5707963267949)*(x12587.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12588=IKsin(j4);
IkReal x12589=IKcos(j4);
IkReal x12590=(cj3*r10);
IkReal x12591=(gconst11*r20);
IkReal x12592=(gconst11*sj3);
IkReal x12593=(sj1*sj2);
IkReal x12594=(gconst11*r00);
IkReal x12595=(cj3*r11);
IkReal x12596=(gconst10*sj3);
IkReal x12597=(cj2*sj1);
IkReal x12598=(cj3*r01);
IkReal x12599=((1.0)*sj0);
IkReal x12600=(cj1*sj2);
IkReal x12601=(cj3*r21);
IkReal x12602=(cj3*gconst10);
IkReal x12603=((1.0)*cj0);
IkReal x12604=((1.0)*x12589);
IkReal x12605=((1.0)*x12588);
IkReal x12606=((1.0)*cj1*cj2);
IkReal x12607=(cj3*x12588);
IkReal x12608=(gconst10*x12588);
IkReal x12609=(gconst10*x12589);
evalcond[0]=((((-1.0)*x12591*x12605))+(((-1.0)*r22*x12604))+((r21*x12608)));
evalcond[1]=(cj0+((r11*x12608))+(((-1.0)*gconst11*r10*x12605))+(((-1.0)*r12*x12604)));
evalcond[2]=(((r01*x12608))+(((-1.0)*x12594*x12605))+(((-1.0)*x12599))+(((-1.0)*r02*x12604)));
evalcond[3]=(((r21*x12592))+(((-1.0)*cj3*x12591*x12604))+((x12601*x12609))+((r22*x12607))+x12600+x12597+((r20*x12596)));
evalcond[4]=(((r20*x12602))+((sj3*x12589*x12591))+(((-1.0)*r22*sj3*x12605))+(((-1.0)*x12606))+(((-1.0)*r21*x12596*x12604))+((gconst11*x12601))+x12593);
evalcond[5]=(((r01*x12592))+((cj0*x12593))+((r00*x12596))+((x12598*x12609))+(((-1.0)*cj3*x12594*x12604))+((r02*x12607))+(((-1.0)*cj1*cj2*x12603)));
evalcond[6]=(((x12595*x12609))+(((-1.0)*gconst11*x12590*x12604))+((r12*x12607))+(((-1.0)*cj1*cj2*x12599))+((sj0*x12593))+((r11*x12592))+((r10*x12596)));
evalcond[7]=(((r00*x12602))+((gconst11*x12598))+((r00*x12589*x12592))+(((-1.0)*r02*sj3*x12605))+(((-1.0)*r01*x12596*x12604))+(((-1.0)*x12600*x12603))+(((-1.0)*x12597*x12603)));
evalcond[8]=((((-1.0)*x12597*x12599))+((gconst11*x12595))+((r10*x12589*x12592))+(((-1.0)*r11*x12596*x12604))+((gconst10*x12590))+(((-1.0)*x12599*x12600))+(((-1.0)*r12*sj3*x12605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12610=((1.0)*sj0);
IkReal x12611=((1.0)*gconst10);
CheckValue<IkReal> x12612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12611))+(((-1.0)*gconst11*r21)))),-1);
if(!x12612.valid){
continue;
}
CheckValue<IkReal> x12613 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12610))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12611))+((cj0*gconst11*r00))+((gconst11*r10*sj0))+(((-1.0)*gconst10*r11*x12610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12613.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12612.value)))+(x12613.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12614=IKsin(j4);
IkReal x12615=IKcos(j4);
IkReal x12616=(cj3*r10);
IkReal x12617=(gconst11*r20);
IkReal x12618=(gconst11*sj3);
IkReal x12619=(sj1*sj2);
IkReal x12620=(gconst11*r00);
IkReal x12621=(cj3*r11);
IkReal x12622=(gconst10*sj3);
IkReal x12623=(cj2*sj1);
IkReal x12624=(cj3*r01);
IkReal x12625=((1.0)*sj0);
IkReal x12626=(cj1*sj2);
IkReal x12627=(cj3*r21);
IkReal x12628=(cj3*gconst10);
IkReal x12629=((1.0)*cj0);
IkReal x12630=((1.0)*x12615);
IkReal x12631=((1.0)*x12614);
IkReal x12632=((1.0)*cj1*cj2);
IkReal x12633=(cj3*x12614);
IkReal x12634=(gconst10*x12614);
IkReal x12635=(gconst10*x12615);
evalcond[0]=((((-1.0)*x12617*x12631))+(((-1.0)*r22*x12630))+((r21*x12634)));
evalcond[1]=(((r11*x12634))+cj0+(((-1.0)*gconst11*r10*x12631))+(((-1.0)*r12*x12630)));
evalcond[2]=((((-1.0)*x12625))+(((-1.0)*x12620*x12631))+((r01*x12634))+(((-1.0)*r02*x12630)));
evalcond[3]=(((x12627*x12635))+((r21*x12618))+(((-1.0)*cj3*x12617*x12630))+x12623+x12626+((r22*x12633))+((r20*x12622)));
evalcond[4]=(((gconst11*x12627))+((sj3*x12615*x12617))+(((-1.0)*x12632))+x12619+((r20*x12628))+(((-1.0)*r22*sj3*x12631))+(((-1.0)*r21*x12622*x12630)));
evalcond[5]=((((-1.0)*cj3*x12620*x12630))+((r02*x12633))+((r00*x12622))+(((-1.0)*cj1*cj2*x12629))+((r01*x12618))+((cj0*x12619))+((x12624*x12635)));
evalcond[6]=(((r12*x12633))+((sj0*x12619))+((x12621*x12635))+(((-1.0)*gconst11*x12616*x12630))+(((-1.0)*cj1*cj2*x12625))+((r11*x12618))+((r10*x12622)));
evalcond[7]=((((-1.0)*r02*sj3*x12631))+((gconst11*x12624))+(((-1.0)*x12623*x12629))+((r00*x12615*x12618))+((r00*x12628))+(((-1.0)*x12626*x12629))+(((-1.0)*r01*x12622*x12630)));
evalcond[8]=(((gconst11*x12621))+(((-1.0)*x12625*x12626))+((r10*x12615*x12618))+(((-1.0)*r11*x12622*x12630))+(((-1.0)*x12623*x12625))+((gconst10*x12616))+(((-1.0)*r12*sj3*x12631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12636=((1.0)*gconst11);
CheckValue<IkReal> x12637=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12636)))),-1);
if(!x12637.valid){
continue;
}
CheckValue<IkReal> x12638 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12636))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12637.value)))+(x12638.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12639=IKsin(j4);
IkReal x12640=IKcos(j4);
IkReal x12641=(cj3*r10);
IkReal x12642=(gconst11*r20);
IkReal x12643=(gconst11*sj3);
IkReal x12644=(sj1*sj2);
IkReal x12645=(gconst11*r00);
IkReal x12646=(cj3*r11);
IkReal x12647=(gconst10*sj3);
IkReal x12648=(cj2*sj1);
IkReal x12649=(cj3*r01);
IkReal x12650=((1.0)*sj0);
IkReal x12651=(cj1*sj2);
IkReal x12652=(cj3*r21);
IkReal x12653=(cj3*gconst10);
IkReal x12654=((1.0)*cj0);
IkReal x12655=((1.0)*x12640);
IkReal x12656=((1.0)*x12639);
IkReal x12657=((1.0)*cj1*cj2);
IkReal x12658=(cj3*x12639);
IkReal x12659=(gconst10*x12639);
IkReal x12660=(gconst10*x12640);
evalcond[0]=((((-1.0)*x12642*x12656))+((r21*x12659))+(((-1.0)*r22*x12655)));
evalcond[1]=(cj0+((r11*x12659))+(((-1.0)*r12*x12655))+(((-1.0)*gconst11*r10*x12656)));
evalcond[2]=((((-1.0)*x12645*x12656))+(((-1.0)*x12650))+(((-1.0)*r02*x12655))+((r01*x12659)));
evalcond[3]=(((r22*x12658))+((r20*x12647))+x12648+x12651+(((-1.0)*cj3*x12642*x12655))+((x12652*x12660))+((r21*x12643)));
evalcond[4]=((((-1.0)*x12657))+((sj3*x12640*x12642))+((gconst11*x12652))+(((-1.0)*r22*sj3*x12656))+x12644+((r20*x12653))+(((-1.0)*r21*x12647*x12655)));
evalcond[5]=(((r02*x12658))+(((-1.0)*cj3*x12645*x12655))+((r00*x12647))+((r01*x12643))+((cj0*x12644))+((x12649*x12660))+(((-1.0)*cj1*cj2*x12654)));
evalcond[6]=((((-1.0)*gconst11*x12641*x12655))+((x12646*x12660))+((r12*x12658))+((sj0*x12644))+((r10*x12647))+(((-1.0)*cj1*cj2*x12650))+((r11*x12643)));
evalcond[7]=(((r00*x12640*x12643))+(((-1.0)*r01*x12647*x12655))+(((-1.0)*r02*sj3*x12656))+(((-1.0)*x12651*x12654))+((gconst11*x12649))+((r00*x12653))+(((-1.0)*x12648*x12654)));
evalcond[8]=((((-1.0)*r11*x12647*x12655))+(((-1.0)*x12650*x12651))+((r10*x12640*x12643))+((gconst10*x12641))+(((-1.0)*r12*sj3*x12656))+((gconst11*x12646))+(((-1.0)*x12648*x12650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12661=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12661;
j4eval[1]=IKsign(x12661);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12662=((1.0)*cj5);
IkReal x12663=((((-1.0)*r01*x12662))+(((-1.0)*r00*sj5)));
j4eval[0]=x12663;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12662))))));
j4eval[2]=IKsign(x12663);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12664=cj5*cj5;
IkReal x12665=(cj3*r21);
IkReal x12666=(cj5*sj5);
IkReal x12667=((1.0)*cj3);
IkReal x12668=(((cj3*r11*r20*x12666))+((r11*x12664*x12665))+(((-1.0)*r12*r22*x12667))+((r10*x12665*x12666))+(((-1.0)*r11*x12665))+(((-1.0)*r10*r20*x12664*x12667)));
j4eval[0]=x12668;
j4eval[1]=IKsign(x12668);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12669=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12669;
j4eval[1]=IKsign(x12669);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12670=((1.0)*cj5);
IkReal x12671=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12670)));
j4eval[0]=x12671;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12670)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12671);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12672=cj5*cj5;
IkReal x12673=r11*r11;
IkReal x12674=(r11*sj5);
IkReal x12675=(cj5*r10);
IkReal x12676=((r12*r12)+((x12672*(r10*r10)))+(((-2.0)*x12674*x12675))+(((-1.0)*x12672*x12673))+x12673);
j4eval[0]=x12676;
j4eval[1]=IKsign(x12676);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x12674))+x12675))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12677=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12677);
rxp1_1=(px*r21);
rxp1_2=(r11*x12677);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12678=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12678);
rxp1_1=(px*r21);
rxp1_2=(r11*x12678);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12679=((1.0)*sj1);
CheckValue<IkReal> x12680=IKPowWithIntegerCheck(r02,-1);
if(!x12680.valid){
continue;
}
CheckValue<IkReal> x12681=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12681.valid){
continue;
}
if( IKabs(((x12680.value)*(((((-1.0)*cj2*x12679))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12681.value)*((((cj1*cj2))+(((-1.0)*sj2*x12679)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12680.value)*(((((-1.0)*cj2*x12679))+(((-1.0)*cj1*sj2))))))+IKsqr(((x12681.value)*((((cj1*cj2))+(((-1.0)*sj2*x12679))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12680.value)*(((((-1.0)*cj2*x12679))+(((-1.0)*cj1*sj2))))), ((x12681.value)*((((cj1*cj2))+(((-1.0)*sj2*x12679))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12682=IKsin(j4);
IkReal x12683=IKcos(j4);
IkReal x12684=(cj5*r20);
IkReal x12685=((1.0)*cj2);
IkReal x12686=(cj5*r10);
IkReal x12687=((1.0)*x12682);
IkReal x12688=(sj5*x12682);
IkReal x12689=((1.0)*sj5*x12683);
evalcond[0]=((-1.0)*r02*x12683);
evalcond[1]=(((r21*x12688))+(((-1.0)*x12684*x12687)));
evalcond[2]=(((x12683*x12686))+(((-1.0)*r11*x12689)));
evalcond[3]=((1.0)+(((-1.0)*x12686*x12687))+((r11*x12688)));
evalcond[4]=((((-1.0)*sj1*x12685))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12687)));
evalcond[5]=((((-1.0)*cj1*x12685))+(((-1.0)*r21*x12689))+((x12683*x12684))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12690=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12690.valid){
continue;
}
CheckValue<IkReal> x12691=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12691.valid){
continue;
}
if( IKabs(((-1.0)*(x12690.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12691.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12690.value)))+IKsqr(((x12691.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12690.value)), ((x12691.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12692=IKsin(j4);
IkReal x12693=IKcos(j4);
IkReal x12694=(cj5*r20);
IkReal x12695=((1.0)*cj2);
IkReal x12696=(cj5*r10);
IkReal x12697=((1.0)*x12692);
IkReal x12698=(sj5*x12692);
IkReal x12699=((1.0)*sj5*x12693);
evalcond[0]=((-1.0)*r02*x12693);
evalcond[1]=(((r21*x12698))+(((-1.0)*x12694*x12697)));
evalcond[2]=((((-1.0)*r11*x12699))+((x12693*x12696)));
evalcond[3]=((1.0)+((r11*x12698))+(((-1.0)*x12696*x12697)));
evalcond[4]=((((-1.0)*r02*x12697))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12695)));
evalcond[5]=((((-1.0)*cj1*x12695))+((x12693*x12694))+((sj1*sj2))+(((-1.0)*r21*x12699)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12700=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12700);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12700);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12701=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12701);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12701);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12702=IKPowWithIntegerCheck(r22,-1);
if(!x12702.valid){
continue;
}
CheckValue<IkReal> x12703=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12703.valid){
continue;
}
if( IKabs(((x12702.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12703.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12702.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12703.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12702.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12703.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12704=IKsin(j4);
IkReal x12705=IKcos(j4);
IkReal x12706=((1.0)*cj2);
IkReal x12707=(cj5*x12705);
IkReal x12708=(sj5*x12704);
IkReal x12709=((1.0)*sj5*x12705);
IkReal x12710=((1.0)*cj5*x12704);
evalcond[0]=((-1.0)*r22*x12705);
evalcond[1]=((((-1.0)*r00*x12710))+((r01*x12708)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*cj1*x12706))+(((-1.0)*r22*x12704)));
evalcond[3]=((((-1.0)*r11*x12709))+((r10*x12707)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12710))+((r11*x12708)));
evalcond[5]=((((-1.0)*r01*x12709))+(((-1.0)*sj1*x12706))+(((-1.0)*cj1*sj2))+((r00*x12707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12711=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12711.valid){
continue;
}
CheckValue<IkReal> x12712=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12712.valid){
continue;
}
if( IKabs(((-1.0)*(x12711.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12712.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12711.value)))+IKsqr(((x12712.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12711.value)), ((x12712.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12713=IKsin(j4);
IkReal x12714=IKcos(j4);
IkReal x12715=((1.0)*cj2);
IkReal x12716=(cj5*x12714);
IkReal x12717=(sj5*x12713);
IkReal x12718=((1.0)*sj5*x12714);
IkReal x12719=((1.0)*cj5*x12713);
evalcond[0]=((-1.0)*r22*x12714);
evalcond[1]=((((-1.0)*r00*x12719))+((r01*x12717)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12713))+(((-1.0)*cj1*x12715)));
evalcond[3]=(((r10*x12716))+(((-1.0)*r11*x12718)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12719))+((r11*x12717)));
evalcond[5]=((((-1.0)*sj1*x12715))+(((-1.0)*cj1*sj2))+((r00*x12716))+(((-1.0)*r01*x12718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12720=cj5*cj5;
IkReal x12721=r11*r11;
IkReal x12722=(cj5*r10);
IkReal x12723=(r11*sj5);
CheckValue<IkReal> x12724=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-1.0)*x12720*x12721))+(((-2.0)*x12722*x12723))+x12721+((x12720*(r10*r10))))),-1);
if(!x12724.valid){
continue;
}
CheckValue<IkReal> x12725 = IKatan2WithCheck(IkReal(((((-1.0)*x12723))+x12722)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12724.value)))+(x12725.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12726=IKsin(j4);
IkReal x12727=IKcos(j4);
IkReal x12728=(cj5*r10);
IkReal x12729=(r01*sj5);
IkReal x12730=((1.0)*cj2);
IkReal x12731=(cj5*r00);
IkReal x12732=(cj5*r20);
IkReal x12733=((1.0)*x12727);
IkReal x12734=((1.0)*x12726);
IkReal x12735=(sj5*x12726);
evalcond[0]=(((r21*x12735))+(((-1.0)*r22*x12733))+(((-1.0)*x12732*x12734)));
evalcond[1]=((((-1.0)*r02*x12733))+(((-1.0)*x12731*x12734))+((x12726*x12729)));
evalcond[2]=(((x12727*x12728))+(((-1.0)*r11*sj5*x12733))+(((-1.0)*r12*x12734)));
evalcond[3]=((1.0)+((r11*x12735))+(((-1.0)*x12728*x12734))+(((-1.0)*r12*x12733)));
evalcond[4]=(((x12727*x12732))+(((-1.0)*r22*x12734))+((sj1*sj2))+(((-1.0)*r21*sj5*x12733))+(((-1.0)*cj1*x12730)));
evalcond[5]=(((x12727*x12731))+(((-1.0)*sj1*x12730))+(((-1.0)*r02*x12734))+(((-1.0)*x12729*x12733))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12736=((1.0)*cj5);
CheckValue<IkReal> x12737=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x12736))+(((-1.0)*r00*sj5)))),-1);
if(!x12737.valid){
continue;
}
CheckValue<IkReal> x12738 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12736)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12737.value)))+(x12738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12739=IKsin(j4);
IkReal x12740=IKcos(j4);
IkReal x12741=(cj5*r10);
IkReal x12742=(r01*sj5);
IkReal x12743=((1.0)*cj2);
IkReal x12744=(cj5*r00);
IkReal x12745=(cj5*r20);
IkReal x12746=((1.0)*x12740);
IkReal x12747=((1.0)*x12739);
IkReal x12748=(sj5*x12739);
evalcond[0]=((((-1.0)*x12745*x12747))+(((-1.0)*r22*x12746))+((r21*x12748)));
evalcond[1]=((((-1.0)*r02*x12746))+(((-1.0)*x12744*x12747))+((x12739*x12742)));
evalcond[2]=((((-1.0)*r12*x12747))+(((-1.0)*r11*sj5*x12746))+((x12740*x12741)));
evalcond[3]=((1.0)+(((-1.0)*x12741*x12747))+((r11*x12748))+(((-1.0)*r12*x12746)));
evalcond[4]=((((-1.0)*r21*sj5*x12746))+((sj1*sj2))+(((-1.0)*r22*x12747))+(((-1.0)*cj1*x12743))+((x12740*x12745)));
evalcond[5]=((((-1.0)*r02*x12747))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12743))+(((-1.0)*x12742*x12746))+((x12740*x12744)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12749=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12749.valid){
continue;
}
CheckValue<IkReal> x12750 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12750.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12749.value)))+(x12750.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12751=IKsin(j4);
IkReal x12752=IKcos(j4);
IkReal x12753=(cj5*r10);
IkReal x12754=(r01*sj5);
IkReal x12755=((1.0)*cj2);
IkReal x12756=(cj5*r00);
IkReal x12757=(cj5*r20);
IkReal x12758=((1.0)*x12752);
IkReal x12759=((1.0)*x12751);
IkReal x12760=(sj5*x12751);
evalcond[0]=(((r21*x12760))+(((-1.0)*r22*x12758))+(((-1.0)*x12757*x12759)));
evalcond[1]=(((x12751*x12754))+(((-1.0)*r02*x12758))+(((-1.0)*x12756*x12759)));
evalcond[2]=((((-1.0)*r12*x12759))+(((-1.0)*r11*sj5*x12758))+((x12752*x12753)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12758))+(((-1.0)*x12753*x12759))+((r11*x12760)));
evalcond[4]=((((-1.0)*r21*sj5*x12758))+(((-1.0)*r22*x12759))+((sj1*sj2))+((x12752*x12757))+(((-1.0)*cj1*x12755)));
evalcond[5]=((((-1.0)*r02*x12759))+(((-1.0)*sj1*x12755))+(((-1.0)*cj1*sj2))+((x12752*x12756))+(((-1.0)*x12754*x12758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12761=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12761;
j4eval[1]=IKsign(x12761);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12762=((1.0)*cj5);
IkReal x12763=((((-1.0)*r01*x12762))+(((-1.0)*r00*sj5)));
j4eval[0]=x12763;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x12762))+((r21*sj5))))));
j4eval[2]=IKsign(x12763);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12764=(sj1*sj2);
IkReal x12765=(cj5*r10);
IkReal x12766=(r11*sj5);
IkReal x12767=(cj1*cj2);
IkReal x12768=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12768;
j4eval[1]=((IKabs(((((-1.0)*x12764*x12765))+(((-1.0)*x12766*x12767))+((x12764*x12766))+((x12765*x12767)))))+(IKabs((((r12*x12767))+(((-1.0)*r12*x12764))))));
j4eval[2]=IKsign(x12768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12769=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12769);
rxp1_1=(px*r21);
rxp1_2=(r11*x12769);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12770=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12770);
rxp1_1=(px*r21);
rxp1_2=(r11*x12770);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12771=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12771)));
j4eval[1]=((((-1.0)*r20*x12771))+((r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12772=((1.0)*cj5);
CheckValue<IkReal> x12773=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12772))),-1);
if(!x12773.valid){
continue;
}
CheckValue<IkReal> x12774=IKPowWithIntegerCheck(((((-1.0)*r20*x12772))+((r21*sj5))),-1);
if(!x12774.valid){
continue;
}
if( IKabs(((-1.0)*(x12773.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12774.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12773.value)))+IKsqr(((x12774.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12773.value)), ((x12774.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12775=IKsin(j4);
IkReal x12776=IKcos(j4);
IkReal x12777=((1.0)*cj2);
IkReal x12778=(r21*sj5);
IkReal x12779=(r11*sj5);
IkReal x12780=((1.0)*cj5*x12775);
IkReal x12781=((1.0)*cj5*x12776);
evalcond[0]=((-1.0)*r02*x12776);
evalcond[1]=((((-1.0)*r20*x12780))+((x12775*x12778)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12777))+((r02*x12775)));
evalcond[3]=((((-1.0)*r10*x12781))+((x12776*x12779)));
evalcond[4]=((1.0)+(((-1.0)*r10*x12780))+((x12775*x12779)));
evalcond[5]=((((-1.0)*cj1*x12777))+((sj1*sj2))+(((-1.0)*r20*x12781))+((x12776*x12778)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12782=IKPowWithIntegerCheck(r02,-1);
if(!x12782.valid){
continue;
}
CheckValue<IkReal> x12783=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12783.valid){
continue;
}
if( IKabs(((x12782.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12783.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12782.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12783.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12782.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12783.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12784=IKsin(j4);
IkReal x12785=IKcos(j4);
IkReal x12786=((1.0)*cj2);
IkReal x12787=(r21*sj5);
IkReal x12788=(r11*sj5);
IkReal x12789=((1.0)*cj5*x12784);
IkReal x12790=((1.0)*cj5*x12785);
evalcond[0]=((-1.0)*r02*x12785);
evalcond[1]=(((x12784*x12787))+(((-1.0)*r20*x12789)));
evalcond[2]=((((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12786))+((r02*x12784)));
evalcond[3]=((((-1.0)*r10*x12790))+((x12785*x12788)));
evalcond[4]=((1.0)+((x12784*x12788))+(((-1.0)*r10*x12789)));
evalcond[5]=((((-1.0)*r20*x12790))+((sj1*sj2))+((x12785*x12787))+(((-1.0)*cj1*x12786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12791=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12791;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12791);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12792=((1.0)*cj5);
IkReal x12793=((((-1.0)*r21*x12792))+(((-1.0)*r20*sj5)));
j4eval[0]=x12793;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12792))+((r11*sj5))))));
j4eval[2]=IKsign(x12793);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12794=cj5*cj5;
IkReal x12795=(r11*r21);
IkReal x12796=((1.0)*r20);
IkReal x12797=(cj5*sj5);
IkReal x12798=((((-1.0)*r12*r22))+((x12794*x12795))+(((-1.0)*r10*x12794*x12796))+((r10*r21*x12797))+(((-1.0)*x12795))+((r11*r20*x12797)));
j4eval[0]=x12798;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12796))))));
j4eval[2]=IKsign(x12798);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12799=cj5*cj5;
IkReal x12800=(r21*sj5);
IkReal x12801=(r11*r21);
IkReal x12802=((1.0)*r20);
CheckValue<IkReal> x12803=IKPowWithIntegerCheck(IKsign((((x12799*x12801))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12799*x12802))+(((-1.0)*x12801))+((cj5*r10*x12800))+((cj5*r11*r20*sj5)))),-1);
if(!x12803.valid){
continue;
}
CheckValue<IkReal> x12804 = IKatan2WithCheck(IkReal((x12800+(((-1.0)*cj5*x12802)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12804.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12803.value)))+(x12804.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12805=IKcos(j4);
IkReal x12806=IKsin(j4);
IkReal x12807=(cj5*r00);
IkReal x12808=(cj5*r20);
IkReal x12809=(cj5*r10);
IkReal x12810=((1.0)*x12805);
IkReal x12811=((1.0)*x12806);
IkReal x12812=(sj5*x12805);
IkReal x12813=(sj5*x12806);
evalcond[0]=(((r21*x12812))+(((-1.0)*x12808*x12810))+((r22*x12806)));
evalcond[1]=((((-1.0)*x12809*x12810))+((r12*x12806))+((r11*x12812)));
evalcond[2]=(((r21*x12813))+(((-1.0)*r22*x12810))+(((-1.0)*x12808*x12811)));
evalcond[3]=((((-1.0)*r02*x12810))+((r01*x12813))+(((-1.0)*x12807*x12811)));
evalcond[4]=((-1.0)+((r02*x12806))+((r01*x12812))+(((-1.0)*x12807*x12810)));
evalcond[5]=((1.0)+(((-1.0)*x12809*x12811))+(((-1.0)*r12*x12810))+((r11*x12813)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12814=((1.0)*cj5);
CheckValue<IkReal> x12815=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12814))+(((-1.0)*r20*sj5)))),-1);
if(!x12815.valid){
continue;
}
CheckValue<IkReal> x12816 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12814))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12815.value)))+(x12816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12817=IKcos(j4);
IkReal x12818=IKsin(j4);
IkReal x12819=(cj5*r00);
IkReal x12820=(cj5*r20);
IkReal x12821=(cj5*r10);
IkReal x12822=((1.0)*x12817);
IkReal x12823=((1.0)*x12818);
IkReal x12824=(sj5*x12817);
IkReal x12825=(sj5*x12818);
evalcond[0]=(((r21*x12824))+(((-1.0)*x12820*x12822))+((r22*x12818)));
evalcond[1]=(((r12*x12818))+((r11*x12824))+(((-1.0)*x12821*x12822)));
evalcond[2]=((((-1.0)*r22*x12822))+((r21*x12825))+(((-1.0)*x12820*x12823)));
evalcond[3]=((((-1.0)*r02*x12822))+((r01*x12825))+(((-1.0)*x12819*x12823)));
evalcond[4]=((-1.0)+((r01*x12824))+((r02*x12818))+(((-1.0)*x12819*x12822)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12822))+((r11*x12825))+(((-1.0)*x12821*x12823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12826 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12826.valid){
continue;
}
CheckValue<IkReal> x12827=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12826.value)+(((1.5707963267949)*(x12827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12828=IKcos(j4);
IkReal x12829=IKsin(j4);
IkReal x12830=(cj5*r00);
IkReal x12831=(cj5*r20);
IkReal x12832=(cj5*r10);
IkReal x12833=((1.0)*x12828);
IkReal x12834=((1.0)*x12829);
IkReal x12835=(sj5*x12828);
IkReal x12836=(sj5*x12829);
evalcond[0]=(((r21*x12835))+((r22*x12829))+(((-1.0)*x12831*x12833)));
evalcond[1]=((((-1.0)*x12832*x12833))+((r11*x12835))+((r12*x12829)));
evalcond[2]=(((r21*x12836))+(((-1.0)*r22*x12833))+(((-1.0)*x12831*x12834)));
evalcond[3]=((((-1.0)*r02*x12833))+((r01*x12836))+(((-1.0)*x12830*x12834)));
evalcond[4]=((-1.0)+((r02*x12829))+((r01*x12835))+(((-1.0)*x12830*x12833)));
evalcond[5]=((1.0)+(((-1.0)*x12832*x12834))+((r11*x12836))+(((-1.0)*r12*x12833)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12837=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12837;
j4eval[1]=IKsign(x12837);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12838=((1.0)*cj5);
IkReal x12839=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12838)));
j4eval[0]=x12839;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12838))))));
j4eval[2]=IKsign(x12839);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12840=cj5*cj5;
IkReal x12841=(r11*r21);
IkReal x12842=((1.0)*r20);
IkReal x12843=(cj5*sj5);
IkReal x12844=(((r11*r20*x12843))+((x12840*x12841))+(((-1.0)*r12*r22))+(((-1.0)*x12841))+((r10*r21*x12843))+(((-1.0)*r10*x12840*x12842)));
j4eval[0]=x12844;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12842)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12845=cj5*cj5;
IkReal x12846=(r21*sj5);
IkReal x12847=(r11*r21);
IkReal x12848=((1.0)*r20);
CheckValue<IkReal> x12849=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12845*x12848))+(((-1.0)*x12847))+((x12845*x12847))+((cj5*r10*x12846))+((cj5*r11*r20*sj5)))),-1);
if(!x12849.valid){
continue;
}
CheckValue<IkReal> x12850 = IKatan2WithCheck(IkReal((x12846+(((-1.0)*cj5*x12848)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12850.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12849.value)))+(x12850.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12851=IKcos(j4);
IkReal x12852=IKsin(j4);
IkReal x12853=(cj5*r00);
IkReal x12854=(cj5*r20);
IkReal x12855=(cj5*r10);
IkReal x12856=((1.0)*x12851);
IkReal x12857=((1.0)*x12852);
IkReal x12858=(sj5*x12851);
IkReal x12859=(sj5*x12852);
evalcond[0]=((((-1.0)*x12854*x12856))+((r22*x12852))+((r21*x12858)));
evalcond[1]=((((-1.0)*x12855*x12856))+((r11*x12858))+((r12*x12852)));
evalcond[2]=((((-1.0)*x12854*x12857))+(((-1.0)*r22*x12856))+((r21*x12859)));
evalcond[3]=((((-1.0)*x12853*x12857))+(((-1.0)*r02*x12856))+((r01*x12859)));
evalcond[4]=((1.0)+(((-1.0)*x12853*x12856))+((r01*x12858))+((r02*x12852)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12856))+(((-1.0)*x12855*x12857))+((r11*x12859)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12860=((1.0)*cj5);
CheckValue<IkReal> x12861=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12860)))),-1);
if(!x12861.valid){
continue;
}
CheckValue<IkReal> x12862 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12860)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12861.value)))+(x12862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12863=IKcos(j4);
IkReal x12864=IKsin(j4);
IkReal x12865=(cj5*r00);
IkReal x12866=(cj5*r20);
IkReal x12867=(cj5*r10);
IkReal x12868=((1.0)*x12863);
IkReal x12869=((1.0)*x12864);
IkReal x12870=(sj5*x12863);
IkReal x12871=(sj5*x12864);
evalcond[0]=(((r21*x12870))+(((-1.0)*x12866*x12868))+((r22*x12864)));
evalcond[1]=(((r12*x12864))+((r11*x12870))+(((-1.0)*x12867*x12868)));
evalcond[2]=((((-1.0)*r22*x12868))+((r21*x12871))+(((-1.0)*x12866*x12869)));
evalcond[3]=(((r01*x12871))+(((-1.0)*x12865*x12869))+(((-1.0)*r02*x12868)));
evalcond[4]=((1.0)+((r01*x12870))+(((-1.0)*x12865*x12868))+((r02*x12864)));
evalcond[5]=((1.0)+((r11*x12871))+(((-1.0)*x12867*x12869))+(((-1.0)*r12*x12868)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12872=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12872.valid){
continue;
}
CheckValue<IkReal> x12873 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12872.value)))+(x12873.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12874=IKcos(j4);
IkReal x12875=IKsin(j4);
IkReal x12876=(cj5*r00);
IkReal x12877=(cj5*r20);
IkReal x12878=(cj5*r10);
IkReal x12879=((1.0)*x12874);
IkReal x12880=((1.0)*x12875);
IkReal x12881=(sj5*x12874);
IkReal x12882=(sj5*x12875);
evalcond[0]=(((r22*x12875))+(((-1.0)*x12877*x12879))+((r21*x12881)));
evalcond[1]=((((-1.0)*x12878*x12879))+((r12*x12875))+((r11*x12881)));
evalcond[2]=((((-1.0)*r22*x12879))+(((-1.0)*x12877*x12880))+((r21*x12882)));
evalcond[3]=((((-1.0)*r02*x12879))+((r01*x12882))+(((-1.0)*x12876*x12880)));
evalcond[4]=((1.0)+((r01*x12881))+((r02*x12875))+(((-1.0)*x12876*x12879)));
evalcond[5]=((1.0)+(((-1.0)*x12878*x12880))+(((-1.0)*r12*x12879))+((r11*x12882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12883=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12883;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12883);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12884=((1.0)*cj5);
IkReal x12885=((((-1.0)*r21*x12884))+(((-1.0)*r20*sj5)));
j4eval[0]=x12885;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x12884)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12885);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12886=cj5*cj5;
IkReal x12887=(r11*r21);
IkReal x12888=((1.0)*r20);
IkReal x12889=(cj5*sj5);
IkReal x12890=((((-1.0)*x12887))+(((-1.0)*r12*r22))+((r10*r21*x12889))+((x12886*x12887))+(((-1.0)*r10*x12886*x12888))+((r11*r20*x12889)));
j4eval[0]=x12890;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12888)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12890);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12891=cj5*cj5;
IkReal x12892=(r21*sj5);
IkReal x12893=(r11*r21);
IkReal x12894=((1.0)*r20);
CheckValue<IkReal> x12895=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12893))+((cj5*r10*x12892))+(((-1.0)*r12*r22))+((x12891*x12893))+(((-1.0)*r10*x12891*x12894))+((cj5*r11*r20*sj5)))),-1);
if(!x12895.valid){
continue;
}
CheckValue<IkReal> x12896 = IKatan2WithCheck(IkReal((x12892+(((-1.0)*cj5*x12894)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12895.value)))+(x12896.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12897=IKcos(j4);
IkReal x12898=IKsin(j4);
IkReal x12899=(cj5*r00);
IkReal x12900=(cj5*r20);
IkReal x12901=(cj5*r10);
IkReal x12902=((1.0)*x12897);
IkReal x12903=((1.0)*x12898);
IkReal x12904=(sj5*x12897);
IkReal x12905=(sj5*x12898);
evalcond[0]=(((r22*x12898))+(((-1.0)*x12900*x12902))+((r21*x12904)));
evalcond[1]=(((r12*x12898))+(((-1.0)*x12901*x12902))+((r11*x12904)));
evalcond[2]=((((-1.0)*x12900*x12903))+((r21*x12905))+(((-1.0)*r22*x12902)));
evalcond[3]=(((r01*x12905))+(((-1.0)*x12899*x12903))+(((-1.0)*r02*x12902)));
evalcond[4]=((-1.0)+((r01*x12904))+(((-1.0)*x12899*x12902))+((r02*x12898)));
evalcond[5]=((1.0)+(((-1.0)*x12901*x12903))+(((-1.0)*r12*x12902))+((r11*x12905)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12906=((1.0)*cj5);
CheckValue<IkReal> x12907=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12906))+(((-1.0)*r20*sj5)))),-1);
if(!x12907.valid){
continue;
}
CheckValue<IkReal> x12908 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12906))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12908.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12907.value)))+(x12908.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12909=IKcos(j4);
IkReal x12910=IKsin(j4);
IkReal x12911=(cj5*r00);
IkReal x12912=(cj5*r20);
IkReal x12913=(cj5*r10);
IkReal x12914=((1.0)*x12909);
IkReal x12915=((1.0)*x12910);
IkReal x12916=(sj5*x12909);
IkReal x12917=(sj5*x12910);
evalcond[0]=((((-1.0)*x12912*x12914))+((r21*x12916))+((r22*x12910)));
evalcond[1]=(((r12*x12910))+(((-1.0)*x12913*x12914))+((r11*x12916)));
evalcond[2]=((((-1.0)*x12912*x12915))+((r21*x12917))+(((-1.0)*r22*x12914)));
evalcond[3]=((((-1.0)*x12911*x12915))+(((-1.0)*r02*x12914))+((r01*x12917)));
evalcond[4]=((-1.0)+(((-1.0)*x12911*x12914))+((r02*x12910))+((r01*x12916)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12914))+(((-1.0)*x12913*x12915))+((r11*x12917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12918 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12918.valid){
continue;
}
CheckValue<IkReal> x12919=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12918.value)+(((1.5707963267949)*(x12919.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12920=IKcos(j4);
IkReal x12921=IKsin(j4);
IkReal x12922=(cj5*r00);
IkReal x12923=(cj5*r20);
IkReal x12924=(cj5*r10);
IkReal x12925=((1.0)*x12920);
IkReal x12926=((1.0)*x12921);
IkReal x12927=(sj5*x12920);
IkReal x12928=(sj5*x12921);
evalcond[0]=(((r21*x12927))+(((-1.0)*x12923*x12925))+((r22*x12921)));
evalcond[1]=(((r11*x12927))+(((-1.0)*x12924*x12925))+((r12*x12921)));
evalcond[2]=(((r21*x12928))+(((-1.0)*x12923*x12926))+(((-1.0)*r22*x12925)));
evalcond[3]=((((-1.0)*r02*x12925))+((r01*x12928))+(((-1.0)*x12922*x12926)));
evalcond[4]=((-1.0)+((r02*x12921))+((r01*x12927))+(((-1.0)*x12922*x12925)));
evalcond[5]=((1.0)+((r11*x12928))+(((-1.0)*r12*x12925))+(((-1.0)*x12924*x12926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12929=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12929;
j4eval[1]=IKsign(x12929);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12930=((1.0)*cj5);
IkReal x12931=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12930)));
j4eval[0]=x12931;
j4eval[1]=((IKabs(((((-1.0)*r20*x12930))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12931);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12932=cj5*cj5;
IkReal x12933=(r11*r21);
IkReal x12934=((1.0)*r20);
IkReal x12935=(cj5*sj5);
IkReal x12936=((((-1.0)*r10*x12932*x12934))+((r11*r20*x12935))+(((-1.0)*r12*r22))+(((-1.0)*x12933))+((x12932*x12933))+((r10*r21*x12935)));
j4eval[0]=x12936;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12934)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12936);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12937=cj5*cj5;
IkReal x12938=(r21*sj5);
IkReal x12939=(r11*r21);
IkReal x12940=((1.0)*r20);
CheckValue<IkReal> x12941=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12937*x12940))+((cj5*r10*x12938))+(((-1.0)*r12*r22))+(((-1.0)*x12939))+((x12937*x12939))+((cj5*r11*r20*sj5)))),-1);
if(!x12941.valid){
continue;
}
CheckValue<IkReal> x12942 = IKatan2WithCheck(IkReal((x12938+(((-1.0)*cj5*x12940)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12941.value)))+(x12942.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12943=IKcos(j4);
IkReal x12944=IKsin(j4);
IkReal x12945=(cj5*r00);
IkReal x12946=(cj5*r20);
IkReal x12947=(cj5*r10);
IkReal x12948=((1.0)*x12943);
IkReal x12949=((1.0)*x12944);
IkReal x12950=(sj5*x12943);
IkReal x12951=(sj5*x12944);
evalcond[0]=(((r22*x12944))+((r21*x12950))+(((-1.0)*x12946*x12948)));
evalcond[1]=(((r12*x12944))+((r11*x12950))+(((-1.0)*x12947*x12948)));
evalcond[2]=(((r21*x12951))+(((-1.0)*x12946*x12949))+(((-1.0)*r22*x12948)));
evalcond[3]=(((r01*x12951))+(((-1.0)*x12945*x12949))+(((-1.0)*r02*x12948)));
evalcond[4]=((1.0)+((r01*x12950))+(((-1.0)*x12945*x12948))+((r02*x12944)));
evalcond[5]=((1.0)+((r11*x12951))+(((-1.0)*x12947*x12949))+(((-1.0)*r12*x12948)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12952=((1.0)*cj5);
CheckValue<IkReal> x12953=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12952)))),-1);
if(!x12953.valid){
continue;
}
CheckValue<IkReal> x12954 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12952)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12954.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12953.value)))+(x12954.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12955=IKcos(j4);
IkReal x12956=IKsin(j4);
IkReal x12957=(cj5*r00);
IkReal x12958=(cj5*r20);
IkReal x12959=(cj5*r10);
IkReal x12960=((1.0)*x12955);
IkReal x12961=((1.0)*x12956);
IkReal x12962=(sj5*x12955);
IkReal x12963=(sj5*x12956);
evalcond[0]=((((-1.0)*x12958*x12960))+((r22*x12956))+((r21*x12962)));
evalcond[1]=(((r12*x12956))+(((-1.0)*x12959*x12960))+((r11*x12962)));
evalcond[2]=((((-1.0)*x12958*x12961))+(((-1.0)*r22*x12960))+((r21*x12963)));
evalcond[3]=(((r01*x12963))+(((-1.0)*x12957*x12961))+(((-1.0)*r02*x12960)));
evalcond[4]=((1.0)+((r01*x12962))+(((-1.0)*x12957*x12960))+((r02*x12956)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12960))+(((-1.0)*x12959*x12961))+((r11*x12963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12964=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12964.valid){
continue;
}
CheckValue<IkReal> x12965 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12964.value)))+(x12965.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12966=IKcos(j4);
IkReal x12967=IKsin(j4);
IkReal x12968=(cj5*r00);
IkReal x12969=(cj5*r20);
IkReal x12970=(cj5*r10);
IkReal x12971=((1.0)*x12966);
IkReal x12972=((1.0)*x12967);
IkReal x12973=(sj5*x12966);
IkReal x12974=(sj5*x12967);
evalcond[0]=(((r22*x12967))+((r21*x12973))+(((-1.0)*x12969*x12971)));
evalcond[1]=((((-1.0)*x12970*x12971))+((r11*x12973))+((r12*x12967)));
evalcond[2]=((((-1.0)*r22*x12971))+((r21*x12974))+(((-1.0)*x12969*x12972)));
evalcond[3]=(((r01*x12974))+(((-1.0)*r02*x12971))+(((-1.0)*x12968*x12972)));
evalcond[4]=((1.0)+((r01*x12973))+((r02*x12967))+(((-1.0)*x12968*x12971)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12971))+(((-1.0)*x12970*x12972))+((r11*x12974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12975=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12975;
j4eval[1]=IKsign(x12975);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12976=((1.0)*cj5);
IkReal x12977=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12976)));
j4eval[0]=x12977;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12976))))));
j4eval[2]=IKsign(x12977);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12978=cj5*cj5;
IkReal x12979=(r11*r21);
IkReal x12980=((1.0)*r20);
IkReal x12981=(cj5*sj5);
IkReal x12982=(((r10*r21*x12981))+(((-1.0)*r12*r22))+((x12978*x12979))+(((-1.0)*x12979))+((r11*r20*x12981))+(((-1.0)*r10*x12978*x12980)));
j4eval[0]=x12982;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12980))))));
j4eval[2]=IKsign(x12982);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12983=cj5*cj5;
IkReal x12984=(r21*sj5);
IkReal x12985=(r11*r21);
IkReal x12986=((1.0)*r20);
CheckValue<IkReal> x12987=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x12983*x12985))+(((-1.0)*r10*x12983*x12986))+((cj5*r10*x12984))+(((-1.0)*x12985))+((cj5*r11*r20*sj5)))),-1);
if(!x12987.valid){
continue;
}
CheckValue<IkReal> x12988 = IKatan2WithCheck(IkReal((x12984+(((-1.0)*cj5*x12986)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12988.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12987.value)))+(x12988.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12989=IKcos(j4);
IkReal x12990=IKsin(j4);
IkReal x12991=(cj5*r00);
IkReal x12992=(cj5*r20);
IkReal x12993=(cj5*r10);
IkReal x12994=((1.0)*x12989);
IkReal x12995=((1.0)*x12990);
IkReal x12996=(sj5*x12989);
IkReal x12997=(sj5*x12990);
evalcond[0]=(((r22*x12990))+(((-1.0)*x12992*x12994))+((r21*x12996)));
evalcond[1]=(((r11*x12996))+((r12*x12990))+(((-1.0)*x12993*x12994)));
evalcond[2]=((((-1.0)*r22*x12994))+(((-1.0)*x12992*x12995))+((r21*x12997)));
evalcond[3]=(((r01*x12997))+(((-1.0)*x12991*x12995))+(((-1.0)*r02*x12994)));
evalcond[4]=((1.0)+((r01*x12996))+(((-1.0)*x12991*x12994))+((r02*x12990)));
evalcond[5]=((1.0)+((r11*x12997))+(((-1.0)*r12*x12994))+(((-1.0)*x12993*x12995)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12998=((1.0)*cj5);
CheckValue<IkReal> x12999=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12998)))),-1);
if(!x12999.valid){
continue;
}
CheckValue<IkReal> x13000 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12998)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13000.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12999.value)))+(x13000.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13001=IKcos(j4);
IkReal x13002=IKsin(j4);
IkReal x13003=(cj5*r00);
IkReal x13004=(cj5*r20);
IkReal x13005=(cj5*r10);
IkReal x13006=((1.0)*x13001);
IkReal x13007=((1.0)*x13002);
IkReal x13008=(sj5*x13001);
IkReal x13009=(sj5*x13002);
evalcond[0]=((((-1.0)*x13004*x13006))+((r22*x13002))+((r21*x13008)));
evalcond[1]=((((-1.0)*x13005*x13006))+((r12*x13002))+((r11*x13008)));
evalcond[2]=((((-1.0)*x13004*x13007))+(((-1.0)*r22*x13006))+((r21*x13009)));
evalcond[3]=((((-1.0)*x13003*x13007))+(((-1.0)*r02*x13006))+((r01*x13009)));
evalcond[4]=((1.0)+(((-1.0)*x13003*x13006))+((r02*x13002))+((r01*x13008)));
evalcond[5]=((1.0)+(((-1.0)*x13005*x13007))+(((-1.0)*r12*x13006))+((r11*x13009)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13010=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13010.valid){
continue;
}
CheckValue<IkReal> x13011 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13010.value)))+(x13011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13012=IKcos(j4);
IkReal x13013=IKsin(j4);
IkReal x13014=(cj5*r00);
IkReal x13015=(cj5*r20);
IkReal x13016=(cj5*r10);
IkReal x13017=((1.0)*x13012);
IkReal x13018=((1.0)*x13013);
IkReal x13019=(sj5*x13012);
IkReal x13020=(sj5*x13013);
evalcond[0]=(((r21*x13019))+(((-1.0)*x13015*x13017))+((r22*x13013)));
evalcond[1]=((((-1.0)*x13016*x13017))+((r11*x13019))+((r12*x13013)));
evalcond[2]=(((r21*x13020))+(((-1.0)*r22*x13017))+(((-1.0)*x13015*x13018)));
evalcond[3]=(((r01*x13020))+(((-1.0)*x13014*x13018))+(((-1.0)*r02*x13017)));
evalcond[4]=((1.0)+((r01*x13019))+((r02*x13013))+(((-1.0)*x13014*x13017)));
evalcond[5]=((1.0)+(((-1.0)*x13016*x13018))+((r11*x13020))+(((-1.0)*r12*x13017)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13021=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13021;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13021);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13022=((1.0)*cj5);
IkReal x13023=((((-1.0)*r21*x13022))+(((-1.0)*r20*sj5)));
j4eval[0]=x13023;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13022))+((r11*sj5))))));
j4eval[2]=IKsign(x13023);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13024=cj5*cj5;
IkReal x13025=(r11*r21);
IkReal x13026=((1.0)*r20);
IkReal x13027=(cj5*sj5);
IkReal x13028=((((-1.0)*r10*x13024*x13026))+(((-1.0)*r12*r22))+((r11*r20*x13027))+(((-1.0)*x13025))+((x13024*x13025))+((r10*r21*x13027)));
j4eval[0]=x13028;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13026)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13028);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13029=cj5*cj5;
IkReal x13030=(r21*sj5);
IkReal x13031=(r11*r21);
IkReal x13032=((1.0)*r20);
CheckValue<IkReal> x13033=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13031))+(((-1.0)*r12*r22))+(((-1.0)*r10*x13029*x13032))+((x13029*x13031))+((cj5*r10*x13030))+((cj5*r11*r20*sj5)))),-1);
if(!x13033.valid){
continue;
}
CheckValue<IkReal> x13034 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13032))+x13030)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13034.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13033.value)))+(x13034.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13035=IKcos(j4);
IkReal x13036=IKsin(j4);
IkReal x13037=(cj5*r00);
IkReal x13038=(cj5*r20);
IkReal x13039=(cj5*r10);
IkReal x13040=((1.0)*x13035);
IkReal x13041=((1.0)*x13036);
IkReal x13042=(sj5*x13035);
IkReal x13043=(sj5*x13036);
evalcond[0]=((((-1.0)*x13038*x13040))+((r22*x13036))+((r21*x13042)));
evalcond[1]=(((r11*x13042))+(((-1.0)*x13039*x13040))+((r12*x13036)));
evalcond[2]=((((-1.0)*x13038*x13041))+((r21*x13043))+(((-1.0)*r22*x13040)));
evalcond[3]=((((-1.0)*r02*x13040))+((r01*x13043))+(((-1.0)*x13037*x13041)));
evalcond[4]=((-1.0)+((r01*x13042))+((r02*x13036))+(((-1.0)*x13037*x13040)));
evalcond[5]=((1.0)+((r11*x13043))+(((-1.0)*x13039*x13041))+(((-1.0)*r12*x13040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13044=((1.0)*cj5);
CheckValue<IkReal> x13045 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13044))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13045.valid){
continue;
}
CheckValue<IkReal> x13046=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13044))+(((-1.0)*r20*sj5)))),-1);
if(!x13046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13045.value)+(((1.5707963267949)*(x13046.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13047=IKcos(j4);
IkReal x13048=IKsin(j4);
IkReal x13049=(cj5*r00);
IkReal x13050=(cj5*r20);
IkReal x13051=(cj5*r10);
IkReal x13052=((1.0)*x13047);
IkReal x13053=((1.0)*x13048);
IkReal x13054=(sj5*x13047);
IkReal x13055=(sj5*x13048);
evalcond[0]=(((r21*x13054))+((r22*x13048))+(((-1.0)*x13050*x13052)));
evalcond[1]=((((-1.0)*x13051*x13052))+((r12*x13048))+((r11*x13054)));
evalcond[2]=(((r21*x13055))+(((-1.0)*r22*x13052))+(((-1.0)*x13050*x13053)));
evalcond[3]=((((-1.0)*x13049*x13053))+(((-1.0)*r02*x13052))+((r01*x13055)));
evalcond[4]=((-1.0)+(((-1.0)*x13049*x13052))+((r02*x13048))+((r01*x13054)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13052))+(((-1.0)*x13051*x13053))+((r11*x13055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13056 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13056.valid){
continue;
}
CheckValue<IkReal> x13057=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13056.value)+(((1.5707963267949)*(x13057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13058=IKcos(j4);
IkReal x13059=IKsin(j4);
IkReal x13060=(cj5*r00);
IkReal x13061=(cj5*r20);
IkReal x13062=(cj5*r10);
IkReal x13063=((1.0)*x13058);
IkReal x13064=((1.0)*x13059);
IkReal x13065=(sj5*x13058);
IkReal x13066=(sj5*x13059);
evalcond[0]=((((-1.0)*x13061*x13063))+((r22*x13059))+((r21*x13065)));
evalcond[1]=(((r12*x13059))+(((-1.0)*x13062*x13063))+((r11*x13065)));
evalcond[2]=((((-1.0)*x13061*x13064))+((r21*x13066))+(((-1.0)*r22*x13063)));
evalcond[3]=((((-1.0)*x13060*x13064))+(((-1.0)*r02*x13063))+((r01*x13066)));
evalcond[4]=((-1.0)+((r02*x13059))+(((-1.0)*x13060*x13063))+((r01*x13065)));
evalcond[5]=((1.0)+(((-1.0)*x13062*x13064))+(((-1.0)*r12*x13063))+((r11*x13066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13067=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13067;
j4eval[1]=IKsign(x13067);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13068=((1.0)*cj5);
IkReal x13069=((((-1.0)*r10*sj5))+(((-1.0)*r11*x13068)));
j4eval[0]=x13069;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x13068))+((r21*sj5))))));
j4eval[2]=IKsign(x13069);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13070=cj5*cj5;
IkReal x13071=(r11*r21);
IkReal x13072=((1.0)*r20);
IkReal x13073=(cj5*sj5);
IkReal x13074=((((-1.0)*r12*r22))+(((-1.0)*r10*x13070*x13072))+((r11*r20*x13073))+(((-1.0)*x13071))+((r10*r21*x13073))+((x13070*x13071)));
j4eval[0]=x13074;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13072)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13075=cj5*cj5;
IkReal x13076=(r21*sj5);
IkReal x13077=(r11*r21);
IkReal x13078=((1.0)*r20);
CheckValue<IkReal> x13079 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13078))+x13076)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13079.valid){
continue;
}
CheckValue<IkReal> x13080=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x13075*x13077))+(((-1.0)*x13077))+(((-1.0)*r10*x13075*x13078))+((cj5*r11*r20*sj5))+((cj5*r10*x13076)))),-1);
if(!x13080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13079.value)+(((1.5707963267949)*(x13080.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13081=IKcos(j4);
IkReal x13082=IKsin(j4);
IkReal x13083=(cj5*r00);
IkReal x13084=(cj5*r20);
IkReal x13085=(cj5*r10);
IkReal x13086=((1.0)*x13081);
IkReal x13087=((1.0)*x13082);
IkReal x13088=(sj5*x13081);
IkReal x13089=(sj5*x13082);
evalcond[0]=((((-1.0)*x13084*x13086))+((r22*x13082))+((r21*x13088)));
evalcond[1]=((((-1.0)*x13085*x13086))+((r11*x13088))+((r12*x13082)));
evalcond[2]=((((-1.0)*x13084*x13087))+(((-1.0)*r22*x13086))+((r21*x13089)));
evalcond[3]=((((-1.0)*r02*x13086))+(((-1.0)*x13083*x13087))+((r01*x13089)));
evalcond[4]=((1.0)+((r02*x13082))+(((-1.0)*x13083*x13086))+((r01*x13088)));
evalcond[5]=((1.0)+(((-1.0)*x13085*x13087))+((r11*x13089))+(((-1.0)*r12*x13086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13090=((1.0)*cj5);
CheckValue<IkReal> x13091 = IKatan2WithCheck(IkReal(((((-1.0)*r20*x13090))+((r21*sj5)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13091.valid){
continue;
}
CheckValue<IkReal> x13092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13090)))),-1);
if(!x13092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13091.value)+(((1.5707963267949)*(x13092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13093=IKcos(j4);
IkReal x13094=IKsin(j4);
IkReal x13095=(cj5*r00);
IkReal x13096=(cj5*r20);
IkReal x13097=(cj5*r10);
IkReal x13098=((1.0)*x13093);
IkReal x13099=((1.0)*x13094);
IkReal x13100=(sj5*x13093);
IkReal x13101=(sj5*x13094);
evalcond[0]=((((-1.0)*x13096*x13098))+((r22*x13094))+((r21*x13100)));
evalcond[1]=(((r12*x13094))+(((-1.0)*x13097*x13098))+((r11*x13100)));
evalcond[2]=((((-1.0)*r22*x13098))+(((-1.0)*x13096*x13099))+((r21*x13101)));
evalcond[3]=(((r01*x13101))+(((-1.0)*x13095*x13099))+(((-1.0)*r02*x13098)));
evalcond[4]=((1.0)+((r02*x13094))+((r01*x13100))+(((-1.0)*x13095*x13098)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13098))+(((-1.0)*x13097*x13099))+((r11*x13101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13102=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13102.valid){
continue;
}
CheckValue<IkReal> x13103 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13103.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13102.value)))+(x13103.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13104=IKcos(j4);
IkReal x13105=IKsin(j4);
IkReal x13106=(cj5*r00);
IkReal x13107=(cj5*r20);
IkReal x13108=(cj5*r10);
IkReal x13109=((1.0)*x13104);
IkReal x13110=((1.0)*x13105);
IkReal x13111=(sj5*x13104);
IkReal x13112=(sj5*x13105);
evalcond[0]=((((-1.0)*x13107*x13109))+((r21*x13111))+((r22*x13105)));
evalcond[1]=(((r12*x13105))+(((-1.0)*x13108*x13109))+((r11*x13111)));
evalcond[2]=(((r21*x13112))+(((-1.0)*x13107*x13110))+(((-1.0)*r22*x13109)));
evalcond[3]=((((-1.0)*r02*x13109))+(((-1.0)*x13106*x13110))+((r01*x13112)));
evalcond[4]=((1.0)+(((-1.0)*x13106*x13109))+((r02*x13105))+((r01*x13111)));
evalcond[5]=((1.0)+(((-1.0)*x13108*x13110))+(((-1.0)*r12*x13109))+((r11*x13112)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13113=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13113;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13113);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13114=((1.0)*cj5);
IkReal x13115=((((-1.0)*r21*x13114))+(((-1.0)*r20*sj5)));
j4eval[0]=x13115;
j4eval[1]=((IKabs(((((-1.0)*r10*x13114))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13115);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13116=cj5*cj5;
IkReal x13117=(r11*r21);
IkReal x13118=((1.0)*r20);
IkReal x13119=(cj5*sj5);
IkReal x13120=((((-1.0)*r10*x13116*x13118))+(((-1.0)*r12*r22))+(((-1.0)*x13117))+((x13116*x13117))+((r10*r21*x13119))+((r11*r20*x13119)));
j4eval[0]=x13120;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x13118)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13120);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13121=cj5*cj5;
IkReal x13122=(r21*sj5);
IkReal x13123=(r11*r21);
IkReal x13124=((1.0)*r20);
CheckValue<IkReal> x13125=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13122))+(((-1.0)*r10*x13121*x13124))+(((-1.0)*r12*r22))+((x13121*x13123))+((cj5*r11*r20*sj5))+(((-1.0)*x13123)))),-1);
if(!x13125.valid){
continue;
}
CheckValue<IkReal> x13126 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13124))+x13122)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13125.value)))+(x13126.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13127=IKcos(j4);
IkReal x13128=IKsin(j4);
IkReal x13129=(cj5*r00);
IkReal x13130=(cj5*r20);
IkReal x13131=(cj5*r10);
IkReal x13132=((1.0)*x13127);
IkReal x13133=((1.0)*x13128);
IkReal x13134=(sj5*x13127);
IkReal x13135=(sj5*x13128);
evalcond[0]=(((r21*x13134))+((r22*x13128))+(((-1.0)*x13130*x13132)));
evalcond[1]=(((r12*x13128))+((r11*x13134))+(((-1.0)*x13131*x13132)));
evalcond[2]=(((r21*x13135))+(((-1.0)*r22*x13132))+(((-1.0)*x13130*x13133)));
evalcond[3]=((((-1.0)*x13129*x13133))+((r01*x13135))+(((-1.0)*r02*x13132)));
evalcond[4]=((-1.0)+(((-1.0)*x13129*x13132))+((r01*x13134))+((r02*x13128)));
evalcond[5]=((1.0)+((r11*x13135))+(((-1.0)*x13131*x13133))+(((-1.0)*r12*x13132)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13136=((1.0)*cj5);
CheckValue<IkReal> x13137 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x13136))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13137.valid){
continue;
}
CheckValue<IkReal> x13138=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13136))+(((-1.0)*r20*sj5)))),-1);
if(!x13138.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13137.value)+(((1.5707963267949)*(x13138.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13139=IKcos(j4);
IkReal x13140=IKsin(j4);
IkReal x13141=(cj5*r00);
IkReal x13142=(cj5*r20);
IkReal x13143=(cj5*r10);
IkReal x13144=((1.0)*x13139);
IkReal x13145=((1.0)*x13140);
IkReal x13146=(sj5*x13139);
IkReal x13147=(sj5*x13140);
evalcond[0]=((((-1.0)*x13142*x13144))+((r22*x13140))+((r21*x13146)));
evalcond[1]=((((-1.0)*x13143*x13144))+((r12*x13140))+((r11*x13146)));
evalcond[2]=((((-1.0)*x13142*x13145))+(((-1.0)*r22*x13144))+((r21*x13147)));
evalcond[3]=((((-1.0)*x13141*x13145))+(((-1.0)*r02*x13144))+((r01*x13147)));
evalcond[4]=((-1.0)+(((-1.0)*x13141*x13144))+((r02*x13140))+((r01*x13146)));
evalcond[5]=((1.0)+(((-1.0)*x13143*x13145))+((r11*x13147))+(((-1.0)*r12*x13144)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13148 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13148.valid){
continue;
}
CheckValue<IkReal> x13149=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13148.value)+(((1.5707963267949)*(x13149.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13150=IKcos(j4);
IkReal x13151=IKsin(j4);
IkReal x13152=(cj5*r00);
IkReal x13153=(cj5*r20);
IkReal x13154=(cj5*r10);
IkReal x13155=((1.0)*x13150);
IkReal x13156=((1.0)*x13151);
IkReal x13157=(sj5*x13150);
IkReal x13158=(sj5*x13151);
evalcond[0]=(((r21*x13157))+((r22*x13151))+(((-1.0)*x13153*x13155)));
evalcond[1]=(((r11*x13157))+(((-1.0)*x13154*x13155))+((r12*x13151)));
evalcond[2]=(((r21*x13158))+(((-1.0)*r22*x13155))+(((-1.0)*x13153*x13156)));
evalcond[3]=((((-1.0)*x13152*x13156))+(((-1.0)*r02*x13155))+((r01*x13158)));
evalcond[4]=((-1.0)+((r02*x13151))+(((-1.0)*x13152*x13155))+((r01*x13157)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13155))+((r11*x13158))+(((-1.0)*x13154*x13156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13159=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13159);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13159);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13160=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13160);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13160);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13161=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13161)));
j4eval[1]=((((-1.0)*r00*x13161))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13162=((1.0)*cj5);
CheckValue<IkReal> x13163=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13162))),-1);
if(!x13163.valid){
continue;
}
CheckValue<IkReal> x13164=IKPowWithIntegerCheck(((((-1.0)*r00*x13162))+((r01*sj5))),-1);
if(!x13164.valid){
continue;
}
if( IKabs(((-1.0)*(x13163.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13164.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13163.value)))+IKsqr(((x13164.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13163.value)), ((x13164.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13165=IKsin(j4);
IkReal x13166=IKcos(j4);
IkReal x13167=((1.0)*cj5);
IkReal x13168=((1.0)*cj2);
IkReal x13169=(sj5*x13166);
IkReal x13170=(sj5*x13165);
evalcond[0]=((-1.0)*r22*x13166);
evalcond[1]=((((-1.0)*cj1*x13168))+((r22*x13165))+((sj1*sj2)));
evalcond[2]=(((r01*x13170))+(((-1.0)*r00*x13165*x13167)));
evalcond[3]=(((r11*x13169))+(((-1.0)*r10*x13166*x13167)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13165*x13167))+((r11*x13170)));
evalcond[5]=(((r01*x13169))+(((-1.0)*sj1*x13168))+(((-1.0)*cj1*sj2))+(((-1.0)*r00*x13166*x13167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13171=IKPowWithIntegerCheck(r22,-1);
if(!x13171.valid){
continue;
}
CheckValue<IkReal> x13172=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13172.valid){
continue;
}
if( IKabs(((x13171.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13172.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13171.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13172.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13171.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13172.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13173=IKsin(j4);
IkReal x13174=IKcos(j4);
IkReal x13175=((1.0)*cj5);
IkReal x13176=((1.0)*cj2);
IkReal x13177=(sj5*x13174);
IkReal x13178=(sj5*x13173);
evalcond[0]=((-1.0)*r22*x13174);
evalcond[1]=((((-1.0)*cj1*x13176))+((sj1*sj2))+((r22*x13173)));
evalcond[2]=(((r01*x13178))+(((-1.0)*r00*x13173*x13175)));
evalcond[3]=((((-1.0)*r10*x13174*x13175))+((r11*x13177)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13173*x13175))+((r11*x13178)));
evalcond[5]=(((r01*x13177))+(((-1.0)*sj1*x13176))+(((-1.0)*r00*x13174*x13175))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13179=(sj1*sj2);
IkReal x13180=(cj5*r10);
IkReal x13181=(r11*sj5);
IkReal x13182=(cj1*cj2);
CheckValue<IkReal> x13183 = IKatan2WithCheck(IkReal((((x13179*x13181))+(((-1.0)*x13181*x13182))+((x13180*x13182))+(((-1.0)*x13179*x13180)))),IkReal((((r12*x13182))+(((-1.0)*r12*x13179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13183.valid){
continue;
}
CheckValue<IkReal> x13184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13184.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13183.value)+(((1.5707963267949)*(x13184.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13185=IKcos(j4);
IkReal x13186=IKsin(j4);
IkReal x13187=(cj5*r00);
IkReal x13188=(cj5*r10);
IkReal x13189=(r21*sj5);
IkReal x13190=((1.0)*cj2);
IkReal x13191=(cj5*r20);
IkReal x13192=((1.0)*x13185);
IkReal x13193=((1.0)*x13186);
IkReal x13194=(sj5*x13186);
IkReal x13195=(sj5*x13185);
evalcond[0]=(((r12*x13186))+((r11*x13195))+(((-1.0)*x13188*x13192)));
evalcond[1]=(((x13186*x13189))+(((-1.0)*r22*x13192))+(((-1.0)*x13191*x13193)));
evalcond[2]=((((-1.0)*r02*x13192))+((r01*x13194))+(((-1.0)*x13187*x13193)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13192))+((r11*x13194))+(((-1.0)*x13188*x13193)));
evalcond[4]=(((r22*x13186))+(((-1.0)*cj1*x13190))+((sj1*sj2))+(((-1.0)*x13191*x13192))+((x13185*x13189)));
evalcond[5]=(((r02*x13186))+(((-1.0)*cj1*sj2))+((r01*x13195))+(((-1.0)*sj1*x13190))+(((-1.0)*x13187*x13192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13196=((1.0)*cj5);
CheckValue<IkReal> x13197=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13196)))),-1);
if(!x13197.valid){
continue;
}
CheckValue<IkReal> x13198 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13197.value)))+(x13198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13199=IKcos(j4);
IkReal x13200=IKsin(j4);
IkReal x13201=(cj5*r00);
IkReal x13202=(cj5*r10);
IkReal x13203=(r21*sj5);
IkReal x13204=((1.0)*cj2);
IkReal x13205=(cj5*r20);
IkReal x13206=((1.0)*x13199);
IkReal x13207=((1.0)*x13200);
IkReal x13208=(sj5*x13200);
IkReal x13209=(sj5*x13199);
evalcond[0]=((((-1.0)*x13202*x13206))+((r11*x13209))+((r12*x13200)));
evalcond[1]=(((x13200*x13203))+(((-1.0)*r22*x13206))+(((-1.0)*x13205*x13207)));
evalcond[2]=(((r01*x13208))+(((-1.0)*r02*x13206))+(((-1.0)*x13201*x13207)));
evalcond[3]=((1.0)+(((-1.0)*x13202*x13207))+(((-1.0)*r12*x13206))+((r11*x13208)));
evalcond[4]=((((-1.0)*cj1*x13204))+((x13199*x13203))+((sj1*sj2))+((r22*x13200))+(((-1.0)*x13205*x13206)));
evalcond[5]=(((r01*x13209))+((r02*x13200))+(((-1.0)*cj1*sj2))+(((-1.0)*x13201*x13206))+(((-1.0)*sj1*x13204)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13210=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13210.valid){
continue;
}
CheckValue<IkReal> x13211 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13210.value)))+(x13211.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13212=IKcos(j4);
IkReal x13213=IKsin(j4);
IkReal x13214=(cj5*r00);
IkReal x13215=(cj5*r10);
IkReal x13216=(r21*sj5);
IkReal x13217=((1.0)*cj2);
IkReal x13218=(cj5*r20);
IkReal x13219=((1.0)*x13212);
IkReal x13220=((1.0)*x13213);
IkReal x13221=(sj5*x13213);
IkReal x13222=(sj5*x13212);
evalcond[0]=(((r12*x13213))+((r11*x13222))+(((-1.0)*x13215*x13219)));
evalcond[1]=((((-1.0)*x13218*x13220))+((x13213*x13216))+(((-1.0)*r22*x13219)));
evalcond[2]=((((-1.0)*r02*x13219))+((r01*x13221))+(((-1.0)*x13214*x13220)));
evalcond[3]=((1.0)+(((-1.0)*x13215*x13220))+((r11*x13221))+(((-1.0)*r12*x13219)));
evalcond[4]=((((-1.0)*cj1*x13217))+(((-1.0)*x13218*x13219))+((sj1*sj2))+((x13212*x13216))+((r22*x13213)));
evalcond[5]=((((-1.0)*x13214*x13219))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13217))+((r01*x13222))+((r02*x13213)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13223=((-1.0)*r00);
IkReal x13225 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13225)==0){
continue;
}
IkReal x13224=pow(x13225,-0.5);
CheckValue<IkReal> x13226 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13223),IKFAST_ATAN2_MAGTHRESH);
if(!x13226.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13226.value));
IkReal gconst19=(r01*x13224);
IkReal gconst20=(x13223*x13224);
CheckValue<IkReal> x13227 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13227.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13227.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13228=((-1.0)*r00);
IkReal x13229=x13224;
CheckValue<IkReal> x13231 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13228),IKFAST_ATAN2_MAGTHRESH);
if(!x13231.valid){
continue;
}
IkReal x13230=((-1.0)*(x13231.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13230;
IkReal gconst18=x13230;
IkReal gconst19=(r01*x13229);
IkReal gconst20=(x13228*x13229);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13232=((-1.0)*r00);
IkReal x13233=x13224;
CheckValue<IkReal> x13235 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13232),IKFAST_ATAN2_MAGTHRESH);
if(!x13235.valid){
continue;
}
IkReal x13234=((-1.0)*(x13235.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13234;
IkReal gconst18=x13234;
IkReal gconst19=(r01*x13233);
IkReal gconst20=(x13232*x13233);
CheckValue<IkReal> x13243=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13243.valid){
continue;
}
IkReal x13236=x13243.value;
IkReal x13237=(sj3*x13236);
IkReal x13238=(r11*x13237);
IkReal x13239=(r21*x13237);
IkReal x13240=(r20*x13237);
IkReal x13241=(r10*x13237);
IkReal x13242=(r00*r01*x13237);
j4eval[0]=IKsign((((r10*x13240*(r00*r00)))+((r00*r01*r20*x13238))+((r21*x13238*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r10*x13239))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13244=gconst19*gconst19;
IkReal x13245=gconst20*gconst20;
IkReal x13246=(gconst20*sj3);
IkReal x13247=((1.0)*cj3);
IkReal x13248=(r10*sj3);
IkReal x13249=(gconst19*r21);
IkReal x13250=(r11*r20);
IkReal x13251=(cj3*gconst20);
IkReal x13252=((1.0)*r10*r20);
IkReal x13253=(r21*x13244);
CheckValue<IkReal> x13254=IKPowWithIntegerCheck(IKsign((((gconst19*x13250*x13251))+((r10*x13249*x13251))+(((-1.0)*r12*r22*x13247))+(((-1.0)*r11*x13247*x13253))+(((-1.0)*r10*r20*x13245*x13247)))),-1);
if(!x13254.valid){
continue;
}
CheckValue<IkReal> x13255 = IKatan2WithCheck(IkReal((((gconst19*r22*x13248))+((r11*r22*x13246)))),IkReal((((x13248*x13253))+(((-1.0)*sj3*x13245*x13250))+((r11*x13246*x13249))+(((-1.0)*gconst19*x13246*x13252)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13254.value)))+(x13255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13256=IKsin(j4);
IkReal x13257=IKcos(j4);
IkReal x13258=(sj1*sj2);
IkReal x13259=(gconst20*sj3);
IkReal x13260=(gconst19*r21);
IkReal x13261=(gconst20*r10);
IkReal x13262=(cj3*gconst19);
IkReal x13263=(gconst19*sj3);
IkReal x13264=((1.0)*cj1);
IkReal x13265=(cj3*gconst20);
IkReal x13266=(cj2*sj1);
IkReal x13267=(cj2*x13264);
IkReal x13268=((1.0)*x13257);
IkReal x13269=((1.0)*x13256);
IkReal x13270=(cj3*x13256);
IkReal x13271=(gconst19*x13256);
evalcond[0]=((((-1.0)*r22*x13268))+(((-1.0)*gconst20*r20*x13269))+((x13256*x13260)));
evalcond[1]=((((-1.0)*gconst20*r00*x13269))+((r01*x13271))+(((-1.0)*r02*x13268)));
evalcond[2]=((1.0)+((r11*x13271))+(((-1.0)*x13261*x13269))+(((-1.0)*r12*x13268)));
evalcond[3]=((((-1.0)*cj3*x13261*x13268))+((r12*x13270))+((r10*x13263))+((r11*x13259))+((r11*x13257*x13262)));
evalcond[4]=(((r11*x13265))+((r10*x13262))+(((-1.0)*r11*x13263*x13268))+((r10*x13257*x13259))+(((-1.0)*r12*sj3*x13269)));
evalcond[5]=(((r21*x13259))+((cj3*x13257*x13260))+((cj1*sj2))+((r20*x13263))+(((-1.0)*r20*x13265*x13268))+((r22*x13270))+x13266);
evalcond[6]=((((-1.0)*x13267))+((r00*x13263))+((r01*x13257*x13262))+((r01*x13259))+((r02*x13270))+x13258+(((-1.0)*r00*x13265*x13268)));
evalcond[7]=(((r20*x13257*x13259))+(((-1.0)*x13267))+((r21*x13265))+((r20*x13262))+(((-1.0)*r22*sj3*x13269))+(((-1.0)*sj3*x13260*x13268))+x13258);
evalcond[8]=((((-1.0)*x13266))+(((-1.0)*sj2*x13264))+((r00*x13262))+((r01*x13265))+(((-1.0)*r02*sj3*x13269))+((r00*x13257*x13259))+(((-1.0)*r01*x13263*x13268)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13272=gconst19*gconst19;
IkReal x13273=gconst20*gconst20;
IkReal x13274=(r21*sj3);
IkReal x13275=(cj3*r11);
IkReal x13276=(gconst19*gconst20);
IkReal x13277=((1.0)*r10);
IkReal x13278=(cj3*r10);
IkReal x13279=(r20*x13273);
CheckValue<IkReal> x13280 = IKatan2WithCheck(IkReal((((gconst19*r22*x13278))+((gconst20*r22*x13275)))),IkReal((((r21*x13272*x13278))+(((-1.0)*cj3*r20*x13276*x13277))+(((-1.0)*x13275*x13279))+((r21*x13275*x13276)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13280.valid){
continue;
}
CheckValue<IkReal> x13281=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13274*x13276*x13277))+(((-1.0)*r11*r20*sj3*x13276))+((r11*x13272*x13274))+((r12*r22*sj3))+((r10*sj3*x13279)))),-1);
if(!x13281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13280.value)+(((1.5707963267949)*(x13281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13282=IKsin(j4);
IkReal x13283=IKcos(j4);
IkReal x13284=(sj1*sj2);
IkReal x13285=(gconst20*sj3);
IkReal x13286=(gconst19*r21);
IkReal x13287=(gconst20*r10);
IkReal x13288=(cj3*gconst19);
IkReal x13289=(gconst19*sj3);
IkReal x13290=((1.0)*cj1);
IkReal x13291=(cj3*gconst20);
IkReal x13292=(cj2*sj1);
IkReal x13293=(cj2*x13290);
IkReal x13294=((1.0)*x13283);
IkReal x13295=((1.0)*x13282);
IkReal x13296=(cj3*x13282);
IkReal x13297=(gconst19*x13282);
evalcond[0]=((((-1.0)*gconst20*r20*x13295))+((x13282*x13286))+(((-1.0)*r22*x13294)));
evalcond[1]=((((-1.0)*gconst20*r00*x13295))+(((-1.0)*r02*x13294))+((r01*x13297)));
evalcond[2]=((1.0)+(((-1.0)*x13287*x13295))+((r11*x13297))+(((-1.0)*r12*x13294)));
evalcond[3]=(((r11*x13283*x13288))+(((-1.0)*cj3*x13287*x13294))+((r12*x13296))+((r11*x13285))+((r10*x13289)));
evalcond[4]=(((r11*x13291))+(((-1.0)*r11*x13289*x13294))+((r10*x13288))+((r10*x13283*x13285))+(((-1.0)*r12*sj3*x13295)));
evalcond[5]=(((r20*x13289))+((cj1*sj2))+(((-1.0)*r20*x13291*x13294))+((cj3*x13283*x13286))+((r22*x13296))+((r21*x13285))+x13292);
evalcond[6]=((((-1.0)*r00*x13291*x13294))+((r02*x13296))+((r01*x13283*x13288))+x13284+((r01*x13285))+((r00*x13289))+(((-1.0)*x13293)));
evalcond[7]=(((r20*x13288))+((r20*x13283*x13285))+(((-1.0)*r22*sj3*x13295))+x13284+(((-1.0)*sj3*x13286*x13294))+(((-1.0)*x13293))+((r21*x13291)));
evalcond[8]=((((-1.0)*r01*x13289*x13294))+(((-1.0)*x13292))+((r00*x13283*x13285))+((r00*x13288))+(((-1.0)*sj2*x13290))+(((-1.0)*r02*sj3*x13295))+((r01*x13291)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13298 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13298.valid){
continue;
}
CheckValue<IkReal> x13299=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13299.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13298.value)+(((1.5707963267949)*(x13299.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13300=IKsin(j4);
IkReal x13301=IKcos(j4);
IkReal x13302=(sj1*sj2);
IkReal x13303=(gconst20*sj3);
IkReal x13304=(gconst19*r21);
IkReal x13305=(gconst20*r10);
IkReal x13306=(cj3*gconst19);
IkReal x13307=(gconst19*sj3);
IkReal x13308=((1.0)*cj1);
IkReal x13309=(cj3*gconst20);
IkReal x13310=(cj2*sj1);
IkReal x13311=(cj2*x13308);
IkReal x13312=((1.0)*x13301);
IkReal x13313=((1.0)*x13300);
IkReal x13314=(cj3*x13300);
IkReal x13315=(gconst19*x13300);
evalcond[0]=((((-1.0)*gconst20*r20*x13313))+((x13300*x13304))+(((-1.0)*r22*x13312)));
evalcond[1]=((((-1.0)*gconst20*r00*x13313))+((r01*x13315))+(((-1.0)*r02*x13312)));
evalcond[2]=((1.0)+((r11*x13315))+(((-1.0)*x13305*x13313))+(((-1.0)*r12*x13312)));
evalcond[3]=((((-1.0)*cj3*x13305*x13312))+((r10*x13307))+((r11*x13301*x13306))+((r11*x13303))+((r12*x13314)));
evalcond[4]=(((r10*x13301*x13303))+((r10*x13306))+(((-1.0)*r11*x13307*x13312))+((r11*x13309))+(((-1.0)*r12*sj3*x13313)));
evalcond[5]=(((r21*x13303))+((r20*x13307))+((cj1*sj2))+(((-1.0)*r20*x13309*x13312))+((r22*x13314))+((cj3*x13301*x13304))+x13310);
evalcond[6]=((((-1.0)*r00*x13309*x13312))+((r01*x13301*x13306))+((r00*x13307))+((r01*x13303))+(((-1.0)*x13311))+x13302+((r02*x13314)));
evalcond[7]=(((r21*x13309))+(((-1.0)*r22*sj3*x13313))+((r20*x13306))+(((-1.0)*sj3*x13304*x13312))+(((-1.0)*x13311))+x13302+((r20*x13301*x13303)));
evalcond[8]=((((-1.0)*r02*sj3*x13313))+((r00*x13306))+((r01*x13309))+((r00*x13301*x13303))+(((-1.0)*r01*x13307*x13312))+(((-1.0)*x13310))+(((-1.0)*sj2*x13308)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13316=((-1.0)*r01);
IkReal x13318 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13318)==0){
continue;
}
IkReal x13317=pow(x13318,-0.5);
CheckValue<IkReal> x13319 = IKatan2WithCheck(IkReal(x13316),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13319.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13319.value))));
IkReal gconst22=(x13316*x13317);
IkReal gconst23=((1.0)*r00*x13317);
CheckValue<IkReal> x13320 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13320.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13320.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13321=((-1.0)*r01);
CheckValue<IkReal> x13324 = IKatan2WithCheck(IkReal(x13321),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13324.valid){
continue;
}
IkReal x13322=((1.0)*(x13324.value));
IkReal x13323=x13317;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13322)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13322)));
IkReal gconst22=(x13321*x13323);
IkReal gconst23=((1.0)*r00*x13323);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13325=((-1.0)*r01);
CheckValue<IkReal> x13328 = IKatan2WithCheck(IkReal(x13325),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13328.valid){
continue;
}
IkReal x13326=((1.0)*(x13328.value));
IkReal x13327=x13317;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13326)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13326)));
IkReal gconst22=(x13325*x13327);
IkReal gconst23=((1.0)*r00*x13327);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13329=gconst22*gconst22;
IkReal x13330=gconst23*gconst23;
IkReal x13331=(r21*sj3);
IkReal x13332=((1.0)*cj3);
IkReal x13333=(gconst23*r11);
IkReal x13334=(r22*sj3);
IkReal x13335=(gconst22*r10);
IkReal x13336=((1.0)*r20*sj3);
CheckValue<IkReal> x13337=IKPowWithIntegerCheck(IKsign((((cj3*gconst22*r20*x13333))+(((-1.0)*r12*r22*x13332))+((cj3*gconst23*r21*x13335))+(((-1.0)*r10*r20*x13330*x13332))+(((-1.0)*r11*r21*x13329*x13332)))),-1);
if(!x13337.valid){
continue;
}
CheckValue<IkReal> x13338 = IKatan2WithCheck(IkReal((((x13333*x13334))+((x13334*x13335)))),IkReal(((((-1.0)*gconst23*x13335*x13336))+(((-1.0)*r11*x13330*x13336))+((r10*x13329*x13331))+((gconst22*x13331*x13333)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13338.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13337.value)))+(x13338.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13339=IKsin(j4);
IkReal x13340=IKcos(j4);
IkReal x13341=(sj1*sj2);
IkReal x13342=(gconst23*sj3);
IkReal x13343=(gconst22*sj3);
IkReal x13344=(cj2*sj1);
IkReal x13345=((1.0)*cj1);
IkReal x13346=(cj3*gconst23);
IkReal x13347=(cj3*gconst22);
IkReal x13348=(cj2*x13345);
IkReal x13349=((1.0)*x13340);
IkReal x13350=(cj3*x13339);
IkReal x13351=(gconst22*x13339);
IkReal x13352=((1.0)*sj3*x13339);
IkReal x13353=(x13340*x13347);
IkReal x13354=((1.0)*gconst23*x13339);
evalcond[0]=(((r21*x13351))+(((-1.0)*r22*x13349))+(((-1.0)*r20*x13354)));
evalcond[1]=((((-1.0)*r02*x13349))+(((-1.0)*r00*x13354))+((r01*x13351)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13349))+((r11*x13351))+(((-1.0)*r10*x13354)));
evalcond[3]=(((r10*x13343))+((r11*x13342))+(((-1.0)*r10*x13346*x13349))+((r11*x13353))+((r12*x13350)));
evalcond[4]=((((-1.0)*r12*x13352))+((r10*x13347))+((r11*x13346))+((r10*x13340*x13342))+(((-1.0)*r11*x13343*x13349)));
evalcond[5]=(((r22*x13350))+((cj1*sj2))+((r21*x13342))+(((-1.0)*r20*x13346*x13349))+((r21*x13353))+((r20*x13343))+x13344);
evalcond[6]=((((-1.0)*r00*x13346*x13349))+((r02*x13350))+(((-1.0)*x13348))+((r01*x13353))+((r00*x13343))+((r01*x13342))+x13341);
evalcond[7]=((((-1.0)*r22*x13352))+(((-1.0)*r21*x13343*x13349))+(((-1.0)*x13348))+((r21*x13346))+((r20*x13340*x13342))+((r20*x13347))+x13341);
evalcond[8]=((((-1.0)*r02*x13352))+(((-1.0)*r01*x13343*x13349))+(((-1.0)*sj2*x13345))+(((-1.0)*x13344))+((r00*x13340*x13342))+((r00*x13347))+((r01*x13346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13355=((1.0)*gconst23);
CheckValue<IkReal> x13356=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13355)))),-1);
if(!x13356.valid){
continue;
}
CheckValue<IkReal> x13357 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst22*r21))+(((-1.0)*r20*x13355)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13357.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13356.value)))+(x13357.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13358=IKsin(j4);
IkReal x13359=IKcos(j4);
IkReal x13360=(sj1*sj2);
IkReal x13361=(gconst23*sj3);
IkReal x13362=(gconst22*sj3);
IkReal x13363=(cj2*sj1);
IkReal x13364=((1.0)*cj1);
IkReal x13365=(cj3*gconst23);
IkReal x13366=(cj3*gconst22);
IkReal x13367=(cj2*x13364);
IkReal x13368=((1.0)*x13359);
IkReal x13369=(cj3*x13358);
IkReal x13370=(gconst22*x13358);
IkReal x13371=((1.0)*sj3*x13358);
IkReal x13372=(x13359*x13366);
IkReal x13373=((1.0)*gconst23*x13358);
evalcond[0]=((((-1.0)*r22*x13368))+(((-1.0)*r20*x13373))+((r21*x13370)));
evalcond[1]=((((-1.0)*r00*x13373))+((r01*x13370))+(((-1.0)*r02*x13368)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13368))+((r11*x13370))+(((-1.0)*r10*x13373)));
evalcond[3]=(((r12*x13369))+((r10*x13362))+((r11*x13372))+((r11*x13361))+(((-1.0)*r10*x13365*x13368)));
evalcond[4]=((((-1.0)*r11*x13362*x13368))+((r10*x13366))+((r11*x13365))+((r10*x13359*x13361))+(((-1.0)*r12*x13371)));
evalcond[5]=(((r20*x13362))+((cj1*sj2))+(((-1.0)*r20*x13365*x13368))+((r21*x13361))+((r22*x13369))+((r21*x13372))+x13363);
evalcond[6]=(((r01*x13361))+((r01*x13372))+((r00*x13362))+(((-1.0)*x13367))+(((-1.0)*r00*x13365*x13368))+x13360+((r02*x13369)));
evalcond[7]=(((r20*x13359*x13361))+((r20*x13366))+(((-1.0)*r22*x13371))+(((-1.0)*x13367))+(((-1.0)*r21*x13362*x13368))+((r21*x13365))+x13360);
evalcond[8]=((((-1.0)*x13363))+(((-1.0)*sj2*x13364))+(((-1.0)*r01*x13362*x13368))+((r01*x13365))+((r00*x13366))+((r00*x13359*x13361))+(((-1.0)*r02*x13371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13374=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13374.valid){
continue;
}
CheckValue<IkReal> x13375 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13374.value)))+(x13375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13376=IKsin(j4);
IkReal x13377=IKcos(j4);
IkReal x13378=(sj1*sj2);
IkReal x13379=(gconst23*sj3);
IkReal x13380=(gconst22*sj3);
IkReal x13381=(cj2*sj1);
IkReal x13382=((1.0)*cj1);
IkReal x13383=(cj3*gconst23);
IkReal x13384=(cj3*gconst22);
IkReal x13385=(cj2*x13382);
IkReal x13386=((1.0)*x13377);
IkReal x13387=(cj3*x13376);
IkReal x13388=(gconst22*x13376);
IkReal x13389=((1.0)*sj3*x13376);
IkReal x13390=(x13377*x13384);
IkReal x13391=((1.0)*gconst23*x13376);
evalcond[0]=((((-1.0)*r22*x13386))+(((-1.0)*r20*x13391))+((r21*x13388)));
evalcond[1]=(((r01*x13388))+(((-1.0)*r00*x13391))+(((-1.0)*r02*x13386)));
evalcond[2]=((1.0)+((r11*x13388))+(((-1.0)*r10*x13391))+(((-1.0)*r12*x13386)));
evalcond[3]=(((r11*x13390))+((r11*x13379))+((r10*x13380))+((r12*x13387))+(((-1.0)*r10*x13383*x13386)));
evalcond[4]=(((r11*x13383))+((r10*x13377*x13379))+((r10*x13384))+(((-1.0)*r11*x13380*x13386))+(((-1.0)*r12*x13389)));
evalcond[5]=(((r21*x13390))+((r20*x13380))+((cj1*sj2))+((r22*x13387))+(((-1.0)*r20*x13383*x13386))+((r21*x13379))+x13381);
evalcond[6]=((((-1.0)*r00*x13383*x13386))+((r01*x13379))+((r01*x13390))+((r00*x13380))+(((-1.0)*x13385))+((r02*x13387))+x13378);
evalcond[7]=(((r20*x13377*x13379))+(((-1.0)*r22*x13389))+((r20*x13384))+(((-1.0)*r21*x13380*x13386))+(((-1.0)*x13385))+x13378+((r21*x13383)));
evalcond[8]=((((-1.0)*x13381))+((r01*x13383))+((r00*x13377*x13379))+((r00*x13384))+(((-1.0)*r01*x13380*x13386))+(((-1.0)*r02*x13389))+(((-1.0)*sj2*x13382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13393 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13393)==0){
continue;
}
IkReal x13392=pow(x13393,-0.5);
CheckValue<IkReal> x13394 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13394.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13394.value));
IkReal gconst25=((-1.0)*r21*x13392);
IkReal gconst26=(r20*x13392);
CheckValue<IkReal> x13395 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13395.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13395.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13398 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13398.valid){
continue;
}
IkReal x13396=((-1.0)*(x13398.value));
IkReal x13397=x13392;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13396;
IkReal gconst24=x13396;
IkReal gconst25=((-1.0)*r21*x13397);
IkReal gconst26=(r20*x13397);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13401 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13401.valid){
continue;
}
IkReal x13399=((-1.0)*(x13401.value));
IkReal x13400=x13392;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13399;
IkReal gconst24=x13399;
IkReal gconst25=((-1.0)*r21*x13400);
IkReal gconst26=(r20*x13400);
CheckValue<IkReal> x13409=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13409.valid){
continue;
}
IkReal x13402=x13409.value;
IkReal x13403=(sj3*x13402);
IkReal x13404=(r11*x13403);
IkReal x13405=(r00*x13403);
IkReal x13406=(r01*x13403);
IkReal x13407=(r10*x13403);
IkReal x13408=(r20*r21*x13403);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x13406))+((r10*x13405*(r20*r20)))+((r00*r20*r21*x13404))+((r01*x13404*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13410=gconst25*gconst25;
IkReal x13411=gconst26*gconst26;
IkReal x13412=(r00*r11);
IkReal x13413=(r01*r10);
IkReal x13414=(r02*sj3);
IkReal x13415=(gconst25*r10);
IkReal x13416=(gconst26*r11);
IkReal x13417=((1.0)*sj3);
IkReal x13418=((1.0)*cj3);
IkReal x13419=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13420 = IKatan2WithCheck(IkReal((((x13414*x13416))+((x13414*x13415)))),IkReal((((sj3*x13410*x13413))+((gconst25*r01*sj3*x13416))+(((-1.0)*x13411*x13412*x13417))+(((-1.0)*gconst26*r00*x13415*x13417)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13420.valid){
continue;
}
CheckValue<IkReal> x13421=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*r10*x13411*x13418))+(((-1.0)*r01*r11*x13410*x13418))+((x13413*x13419))+(((-1.0)*r02*r12*x13418))+((x13412*x13419)))),-1);
if(!x13421.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13420.value)+(((1.5707963267949)*(x13421.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13422=IKsin(j4);
IkReal x13423=IKcos(j4);
IkReal x13424=(sj1*sj2);
IkReal x13425=(gconst26*sj3);
IkReal x13426=(gconst25*sj3);
IkReal x13427=(gconst26*r10);
IkReal x13428=(gconst25*r11);
IkReal x13429=(cj3*gconst25);
IkReal x13430=((1.0)*cj2);
IkReal x13431=(cj1*sj2);
IkReal x13432=(gconst26*r00);
IkReal x13433=(gconst26*r20);
IkReal x13434=(cj3*gconst26);
IkReal x13435=(cj1*x13430);
IkReal x13436=((1.0)*x13423);
IkReal x13437=((1.0)*x13422);
IkReal x13438=(cj3*x13422);
IkReal x13439=(gconst25*x13422);
evalcond[0]=((((-1.0)*r22*x13436))+(((-1.0)*x13433*x13437))+((r21*x13439)));
evalcond[1]=(((r01*x13439))+(((-1.0)*x13432*x13437))+(((-1.0)*r02*x13436)));
evalcond[2]=((1.0)+(((-1.0)*x13427*x13437))+(((-1.0)*r12*x13436))+((x13422*x13428)));
evalcond[3]=((((-1.0)*cj3*x13427*x13436))+((r11*x13425))+((cj3*x13423*x13428))+((r12*x13438))+((r10*x13426)));
evalcond[4]=(((r10*x13423*x13425))+(((-1.0)*r11*x13426*x13436))+((r11*x13434))+(((-1.0)*r12*sj3*x13437))+((r10*x13429)));
evalcond[5]=(x13431+((cj2*sj1))+((r21*x13423*x13429))+((r22*x13438))+((r21*x13425))+(((-1.0)*cj3*x13433*x13436))+((r20*x13426)));
evalcond[6]=(x13424+(((-1.0)*x13435))+((r02*x13438))+((r01*x13423*x13429))+((r00*x13426))+((r01*x13425))+(((-1.0)*cj3*x13432*x13436)));
evalcond[7]=(x13424+((r20*x13423*x13425))+(((-1.0)*x13435))+(((-1.0)*r21*x13426*x13436))+((r21*x13434))+(((-1.0)*r22*sj3*x13437))+((r20*x13429)));
evalcond[8]=(((r01*x13434))+(((-1.0)*r01*x13426*x13436))+((r00*x13423*x13425))+(((-1.0)*x13431))+(((-1.0)*sj1*x13430))+(((-1.0)*r02*sj3*x13437))+((r00*x13429)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13440=gconst26*gconst26;
IkReal x13441=gconst25*gconst25;
IkReal x13442=(r01*r10);
IkReal x13443=(cj3*r11);
IkReal x13444=(gconst25*gconst26);
IkReal x13445=(cj3*r10);
IkReal x13446=(r00*x13440);
IkReal x13447=((1.0)*sj3*x13444);
CheckValue<IkReal> x13448 = IKatan2WithCheck(IkReal((((gconst26*r02*x13443))+((gconst25*r02*x13445)))),IkReal(((((-1.0)*r00*x13444*x13445))+(((-1.0)*x13443*x13446))+((cj3*x13441*x13442))+((r01*x13443*x13444)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13448.valid){
continue;
}
CheckValue<IkReal> x13449=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*r11*sj3*x13441))+(((-1.0)*r00*r11*x13447))+((r10*sj3*x13446))+(((-1.0)*x13442*x13447)))),-1);
if(!x13449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13448.value)+(((1.5707963267949)*(x13449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13450=IKsin(j4);
IkReal x13451=IKcos(j4);
IkReal x13452=(sj1*sj2);
IkReal x13453=(gconst26*sj3);
IkReal x13454=(gconst25*sj3);
IkReal x13455=(gconst26*r10);
IkReal x13456=(gconst25*r11);
IkReal x13457=(cj3*gconst25);
IkReal x13458=((1.0)*cj2);
IkReal x13459=(cj1*sj2);
IkReal x13460=(gconst26*r00);
IkReal x13461=(gconst26*r20);
IkReal x13462=(cj3*gconst26);
IkReal x13463=(cj1*x13458);
IkReal x13464=((1.0)*x13451);
IkReal x13465=((1.0)*x13450);
IkReal x13466=(cj3*x13450);
IkReal x13467=(gconst25*x13450);
evalcond[0]=((((-1.0)*r22*x13464))+(((-1.0)*x13461*x13465))+((r21*x13467)));
evalcond[1]=((((-1.0)*x13460*x13465))+(((-1.0)*r02*x13464))+((r01*x13467)));
evalcond[2]=((1.0)+((x13450*x13456))+(((-1.0)*x13455*x13465))+(((-1.0)*r12*x13464)));
evalcond[3]=(((r10*x13454))+((r12*x13466))+((r11*x13453))+((cj3*x13451*x13456))+(((-1.0)*cj3*x13455*x13464)));
evalcond[4]=(((r10*x13457))+(((-1.0)*r11*x13454*x13464))+((r11*x13462))+((r10*x13451*x13453))+(((-1.0)*r12*sj3*x13465)));
evalcond[5]=(x13459+((cj2*sj1))+((r20*x13454))+((r21*x13453))+((r21*x13451*x13457))+((r22*x13466))+(((-1.0)*cj3*x13461*x13464)));
evalcond[6]=(x13452+((r01*x13451*x13457))+(((-1.0)*x13463))+(((-1.0)*cj3*x13460*x13464))+((r02*x13466))+((r01*x13453))+((r00*x13454)));
evalcond[7]=(x13452+((r20*x13457))+((r21*x13462))+(((-1.0)*r21*x13454*x13464))+(((-1.0)*x13463))+((r20*x13451*x13453))+(((-1.0)*r22*sj3*x13465)));
evalcond[8]=((((-1.0)*r01*x13454*x13464))+(((-1.0)*r02*sj3*x13465))+((r00*x13451*x13453))+(((-1.0)*sj1*x13458))+(((-1.0)*x13459))+((r01*x13462))+((r00*x13457)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13468=((1.0)*gconst26);
CheckValue<IkReal> x13469 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13468))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13469.valid){
continue;
}
CheckValue<IkReal> x13470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13468))+(((-1.0)*gconst25*r00)))),-1);
if(!x13470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13469.value)+(((1.5707963267949)*(x13470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13471=IKsin(j4);
IkReal x13472=IKcos(j4);
IkReal x13473=(sj1*sj2);
IkReal x13474=(gconst26*sj3);
IkReal x13475=(gconst25*sj3);
IkReal x13476=(gconst26*r10);
IkReal x13477=(gconst25*r11);
IkReal x13478=(cj3*gconst25);
IkReal x13479=((1.0)*cj2);
IkReal x13480=(cj1*sj2);
IkReal x13481=(gconst26*r00);
IkReal x13482=(gconst26*r20);
IkReal x13483=(cj3*gconst26);
IkReal x13484=(cj1*x13479);
IkReal x13485=((1.0)*x13472);
IkReal x13486=((1.0)*x13471);
IkReal x13487=(cj3*x13471);
IkReal x13488=(gconst25*x13471);
evalcond[0]=((((-1.0)*x13482*x13486))+(((-1.0)*r22*x13485))+((r21*x13488)));
evalcond[1]=((((-1.0)*x13481*x13486))+(((-1.0)*r02*x13485))+((r01*x13488)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13485))+((x13471*x13477))+(((-1.0)*x13476*x13486)));
evalcond[3]=(((cj3*x13472*x13477))+((r11*x13474))+((r10*x13475))+(((-1.0)*cj3*x13476*x13485))+((r12*x13487)));
evalcond[4]=((((-1.0)*r11*x13475*x13485))+((r10*x13478))+((r10*x13472*x13474))+(((-1.0)*r12*sj3*x13486))+((r11*x13483)));
evalcond[5]=(x13480+((cj2*sj1))+((r21*x13474))+((r21*x13472*x13478))+((r20*x13475))+((r22*x13487))+(((-1.0)*cj3*x13482*x13485)));
evalcond[6]=(x13473+(((-1.0)*x13484))+((r02*x13487))+((r00*x13475))+((r01*x13474))+((r01*x13472*x13478))+(((-1.0)*cj3*x13481*x13485)));
evalcond[7]=(x13473+(((-1.0)*x13484))+(((-1.0)*r22*sj3*x13486))+(((-1.0)*r21*x13475*x13485))+((r20*x13472*x13474))+((r20*x13478))+((r21*x13483)));
evalcond[8]=((((-1.0)*r01*x13475*x13485))+(((-1.0)*x13480))+((r00*x13478))+(((-1.0)*sj1*x13479))+((r00*x13472*x13474))+((r01*x13483))+(((-1.0)*r02*sj3*x13486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13490 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13490)==0){
continue;
}
IkReal x13489=pow(x13490,-0.5);
CheckValue<IkReal> x13491 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13491.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13491.value))));
IkReal gconst28=((1.0)*r21*x13489);
IkReal gconst29=((-1.0)*r20*x13489);
CheckValue<IkReal> x13492 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13492.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13492.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13495 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13495.valid){
continue;
}
IkReal x13493=((1.0)*(x13495.value));
IkReal x13494=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13493)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13493)));
IkReal gconst28=((1.0)*r21*x13494);
IkReal gconst29=((-1.0)*r20*x13494);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13498 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13498.valid){
continue;
}
IkReal x13496=((1.0)*(x13498.value));
IkReal x13497=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13496)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13496)));
IkReal gconst28=((1.0)*r21*x13497);
IkReal gconst29=((-1.0)*r20*x13497);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13501 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13501.valid){
continue;
}
IkReal x13499=((1.0)*(x13501.value));
IkReal x13500=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13499)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13499)));
IkReal gconst28=((1.0)*r21*x13500);
IkReal gconst29=((-1.0)*r20*x13500);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13504 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13504.valid){
continue;
}
IkReal x13502=((1.0)*(x13504.value));
IkReal x13503=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13502)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13502)));
IkReal gconst28=((1.0)*r21*x13503);
IkReal gconst29=((-1.0)*r20*x13503);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13507 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13507.valid){
continue;
}
IkReal x13505=((1.0)*(x13507.value));
IkReal x13506=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13505)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13505)));
IkReal gconst28=((1.0)*r21*x13506);
IkReal gconst29=((-1.0)*r20*x13506);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13510 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13510.valid){
continue;
}
IkReal x13508=((1.0)*(x13510.value));
IkReal x13509=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13508)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13508)));
IkReal gconst28=((1.0)*r21*x13509);
IkReal gconst29=((-1.0)*r20*x13509);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13511=(gconst29*r10);
IkReal x13512=(gconst28*r11);
CheckValue<IkReal> x13513 = IKatan2WithCheck(IkReal((x13511+(((-1.0)*x13512)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13513.valid){
continue;
}
CheckValue<IkReal> x13514=IKPowWithIntegerCheck(IKsign(((x13512*x13512)+(r12*r12)+(((-2.0)*x13511*x13512))+(x13511*x13511))),-1);
if(!x13514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13513.value)+(((1.5707963267949)*(x13514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13515=IKsin(j4);
IkReal x13516=IKcos(j4);
IkReal x13517=(gconst28*r11);
IkReal x13518=((1.0)*cj2);
IkReal x13519=((1.0)*x13516);
IkReal x13520=(gconst29*x13516);
IkReal x13521=(gconst28*x13515);
IkReal x13522=((1.0)*x13515);
IkReal x13523=(gconst29*x13522);
evalcond[0]=(((r21*x13521))+(((-1.0)*r22*x13519))+(((-1.0)*r20*x13523)));
evalcond[1]=(((r01*x13521))+(((-1.0)*r00*x13523))+(((-1.0)*r02*x13519)));
evalcond[2]=((((-1.0)*r12*x13522))+(((-1.0)*x13517*x13519))+((r10*x13520)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13519))+((x13515*x13517))+(((-1.0)*r10*x13523)));
evalcond[4]=((((-1.0)*r22*x13522))+((r20*x13520))+(((-1.0)*cj1*x13518))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13519)));
evalcond[5]=((((-1.0)*sj1*x13518))+(((-1.0)*gconst28*r01*x13519))+(((-1.0)*cj1*sj2))+((r00*x13520))+(((-1.0)*r02*x13522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13524=((1.0)*gconst29);
CheckValue<IkReal> x13525 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13524))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13525.valid){
continue;
}
CheckValue<IkReal> x13526=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13524)))),-1);
if(!x13526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13525.value)+(((1.5707963267949)*(x13526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13527=IKsin(j4);
IkReal x13528=IKcos(j4);
IkReal x13529=(gconst28*r11);
IkReal x13530=((1.0)*cj2);
IkReal x13531=((1.0)*x13528);
IkReal x13532=(gconst29*x13528);
IkReal x13533=(gconst28*x13527);
IkReal x13534=((1.0)*x13527);
IkReal x13535=(gconst29*x13534);
evalcond[0]=((((-1.0)*r22*x13531))+(((-1.0)*r20*x13535))+((r21*x13533)));
evalcond[1]=((((-1.0)*r02*x13531))+(((-1.0)*r00*x13535))+((r01*x13533)));
evalcond[2]=((((-1.0)*r12*x13534))+(((-1.0)*x13529*x13531))+((r10*x13532)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13531))+(((-1.0)*r10*x13535))+((x13527*x13529)));
evalcond[4]=((((-1.0)*r22*x13534))+((r20*x13532))+(((-1.0)*cj1*x13530))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13531)));
evalcond[5]=((((-1.0)*sj1*x13530))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13531))+(((-1.0)*r02*x13534))+((r00*x13532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13536=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13536.valid){
continue;
}
CheckValue<IkReal> x13537 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13537.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13536.value)))+(x13537.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13538=IKsin(j4);
IkReal x13539=IKcos(j4);
IkReal x13540=(gconst28*r11);
IkReal x13541=((1.0)*cj2);
IkReal x13542=((1.0)*x13539);
IkReal x13543=(gconst29*x13539);
IkReal x13544=(gconst28*x13538);
IkReal x13545=((1.0)*x13538);
IkReal x13546=(gconst29*x13545);
evalcond[0]=(((r21*x13544))+(((-1.0)*r22*x13542))+(((-1.0)*r20*x13546)));
evalcond[1]=(((r01*x13544))+(((-1.0)*r02*x13542))+(((-1.0)*r00*x13546)));
evalcond[2]=((((-1.0)*x13540*x13542))+((r10*x13543))+(((-1.0)*r12*x13545)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13546))+(((-1.0)*r12*x13542))+((x13538*x13540)));
evalcond[4]=((((-1.0)*gconst28*r21*x13542))+((sj1*sj2))+((r20*x13543))+(((-1.0)*r22*x13545))+(((-1.0)*cj1*x13541)));
evalcond[5]=((((-1.0)*gconst28*r01*x13542))+((r00*x13543))+(((-1.0)*r02*x13545))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13541)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13549 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13549.valid){
continue;
}
IkReal x13547=((1.0)*(x13549.value));
IkReal x13548=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13547)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13547)));
IkReal gconst28=((1.0)*r21*x13548);
IkReal gconst29=((-1.0)*r20*x13548);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13552 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13552.valid){
continue;
}
IkReal x13550=((1.0)*(x13552.value));
IkReal x13551=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13550)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13550)));
IkReal gconst28=((1.0)*r21*x13551);
IkReal gconst29=((-1.0)*r20*x13551);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13555 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13555.valid){
continue;
}
IkReal x13553=((1.0)*(x13555.value));
IkReal x13554=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13553)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13553)));
IkReal gconst28=((1.0)*r21*x13554);
IkReal gconst29=((-1.0)*r20*x13554);
IkReal x13556=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13560=IKPowWithIntegerCheck(x13556,-1);
if(!x13560.valid){
continue;
}
IkReal x13557=x13560.value;
IkReal x13558=((1.0)*x13557);
IkReal x13559=((((-1.0)*x13558*(r10*r10)*(r20*r20)))+(((-1.0)*x13558*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x13557)));
j4eval[0]=x13559;
j4eval[1]=r12;
j4eval[2]=x13556;
j4eval[3]=IKsign(x13559);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13561=(gconst28*r11);
IkReal x13562=(gconst29*r10);
CheckValue<IkReal> x13563 = IKatan2WithCheck(IkReal((x13561+(((-1.0)*x13562)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13563.valid){
continue;
}
CheckValue<IkReal> x13564=IKPowWithIntegerCheck(IKsign(((((2.0)*x13561*x13562))+(((-1.0)*(r12*r12)))+(((-1.0)*(x13562*x13562)))+(((-1.0)*(x13561*x13561))))),-1);
if(!x13564.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13563.value)+(((1.5707963267949)*(x13564.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13565=IKcos(j4);
IkReal x13566=IKsin(j4);
IkReal x13567=(gconst29*r10);
IkReal x13568=(gconst29*r20);
IkReal x13569=(gconst28*r21);
IkReal x13570=((1.0)*cj2);
IkReal x13571=(gconst29*r00);
IkReal x13572=((1.0)*x13565);
IkReal x13573=((1.0)*x13566);
IkReal x13574=(gconst28*x13565);
IkReal x13575=(gconst28*x13566);
evalcond[0]=((((-1.0)*x13567*x13572))+((r11*x13574))+((r12*x13566)));
evalcond[1]=((((-1.0)*r22*x13572))+(((-1.0)*x13568*x13573))+((x13566*x13569)));
evalcond[2]=((((-1.0)*r02*x13572))+(((-1.0)*x13571*x13573))+((r01*x13575)));
evalcond[3]=((1.0)+(((-1.0)*x13567*x13573))+((r11*x13575))+(((-1.0)*r12*x13572)));
evalcond[4]=((((-1.0)*x13568*x13572))+((x13565*x13569))+((sj1*sj2))+(((-1.0)*cj1*x13570))+((r22*x13566)));
evalcond[5]=((((-1.0)*sj1*x13570))+(((-1.0)*cj1*sj2))+((r02*x13566))+(((-1.0)*x13571*x13572))+((r01*x13574)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13576=((1.0)*gconst29);
CheckValue<IkReal> x13577=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13576))+(((-1.0)*gconst28*r00)))),-1);
if(!x13577.valid){
continue;
}
CheckValue<IkReal> x13578 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13576))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13577.value)))+(x13578.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13579=IKcos(j4);
IkReal x13580=IKsin(j4);
IkReal x13581=(gconst29*r10);
IkReal x13582=(gconst29*r20);
IkReal x13583=(gconst28*r21);
IkReal x13584=((1.0)*cj2);
IkReal x13585=(gconst29*r00);
IkReal x13586=((1.0)*x13579);
IkReal x13587=((1.0)*x13580);
IkReal x13588=(gconst28*x13579);
IkReal x13589=(gconst28*x13580);
evalcond[0]=(((r12*x13580))+(((-1.0)*x13581*x13586))+((r11*x13588)));
evalcond[1]=(((x13580*x13583))+(((-1.0)*r22*x13586))+(((-1.0)*x13582*x13587)));
evalcond[2]=((((-1.0)*r02*x13586))+(((-1.0)*x13585*x13587))+((r01*x13589)));
evalcond[3]=((1.0)+(((-1.0)*x13581*x13587))+(((-1.0)*r12*x13586))+((r11*x13589)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x13584))+((x13579*x13583))+((r22*x13580))+(((-1.0)*x13582*x13586)));
evalcond[5]=((((-1.0)*x13585*x13586))+(((-1.0)*sj1*x13584))+(((-1.0)*cj1*sj2))+((r01*x13588))+((r02*x13580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13590=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13590.valid){
continue;
}
CheckValue<IkReal> x13591 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13591.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13590.value)))+(x13591.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13592=IKcos(j4);
IkReal x13593=IKsin(j4);
IkReal x13594=(gconst29*r10);
IkReal x13595=(gconst29*r20);
IkReal x13596=(gconst28*r21);
IkReal x13597=((1.0)*cj2);
IkReal x13598=(gconst29*r00);
IkReal x13599=((1.0)*x13592);
IkReal x13600=((1.0)*x13593);
IkReal x13601=(gconst28*x13592);
IkReal x13602=(gconst28*x13593);
evalcond[0]=(((r11*x13601))+(((-1.0)*x13594*x13599))+((r12*x13593)));
evalcond[1]=(((x13593*x13596))+(((-1.0)*x13595*x13600))+(((-1.0)*r22*x13599)));
evalcond[2]=((((-1.0)*x13598*x13600))+(((-1.0)*r02*x13599))+((r01*x13602)));
evalcond[3]=((1.0)+((r11*x13602))+(((-1.0)*x13594*x13600))+(((-1.0)*r12*x13599)));
evalcond[4]=(((r22*x13593))+((sj1*sj2))+((x13592*x13596))+(((-1.0)*cj1*x13597))+(((-1.0)*x13595*x13599)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x13598*x13599))+(((-1.0)*sj1*x13597))+((r02*x13593))+((r01*x13601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13605 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13605.valid){
continue;
}
IkReal x13603=((1.0)*(x13605.value));
IkReal x13604=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13603)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13603)));
IkReal gconst28=((1.0)*r21*x13604);
IkReal gconst29=((-1.0)*r20*x13604);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13608 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13608.valid){
continue;
}
IkReal x13606=((1.0)*(x13608.value));
IkReal x13607=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13606)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13606)));
IkReal gconst28=((1.0)*r21*x13607);
IkReal gconst29=((-1.0)*r20*x13607);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13611 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13611.valid){
continue;
}
IkReal x13609=((1.0)*(x13611.value));
IkReal x13610=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13609)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13609)));
IkReal gconst28=((1.0)*r21*x13610);
IkReal gconst29=((-1.0)*r20*x13610);
IkReal x13612=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13616=IKPowWithIntegerCheck(x13612,-1);
if(!x13616.valid){
continue;
}
IkReal x13613=x13616.value;
IkReal x13614=((1.0)*x13613);
IkReal x13615=((((-2.0)*r10*r11*r20*r21*x13613))+(((-1.0)*x13614*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13614*(r10*r10)*(r20*r20))));
j4eval[0]=x13615;
j4eval[1]=r12;
j4eval[2]=x13612;
j4eval[3]=IKsign(x13615);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13617=(gconst28*r11);
IkReal x13618=(gconst29*r10);
CheckValue<IkReal> x13619=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13617*x13617)))+(((-1.0)*(x13618*x13618)))+(((-1.0)*(r12*r12)))+(((2.0)*x13617*x13618)))),-1);
if(!x13619.valid){
continue;
}
CheckValue<IkReal> x13620 = IKatan2WithCheck(IkReal((x13617+(((-1.0)*x13618)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13619.value)))+(x13620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13621=IKcos(j4);
IkReal x13622=IKsin(j4);
IkReal x13623=(gconst29*r10);
IkReal x13624=(gconst29*r20);
IkReal x13625=(gconst28*r21);
IkReal x13626=(gconst29*r00);
IkReal x13627=((1.0)*x13621);
IkReal x13628=((1.0)*x13622);
IkReal x13629=(gconst28*x13621);
IkReal x13630=(gconst28*x13622);
evalcond[0]=(((r12*x13622))+(((-1.0)*x13623*x13627))+((r11*x13629)));
evalcond[1]=((((-1.0)*x13624*x13628))+((x13622*x13625))+(((-1.0)*r22*x13627)));
evalcond[2]=((((-1.0)*x13626*x13628))+(((-1.0)*r02*x13627))+((r01*x13630)));
evalcond[3]=((1.0)+((r11*x13630))+(((-1.0)*x13623*x13628))+(((-1.0)*r12*x13627)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13624*x13627))+((cj1*sj2))+((x13621*x13625))+((r22*x13622)));
evalcond[5]=((((-1.0)*x13626*x13627))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13622))+((r01*x13629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13631=((1.0)*gconst29);
CheckValue<IkReal> x13632 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13632.valid){
continue;
}
CheckValue<IkReal> x13633=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13631))+(((-1.0)*gconst28*r00)))),-1);
if(!x13633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13632.value)+(((1.5707963267949)*(x13633.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13634=IKcos(j4);
IkReal x13635=IKsin(j4);
IkReal x13636=(gconst29*r10);
IkReal x13637=(gconst29*r20);
IkReal x13638=(gconst28*r21);
IkReal x13639=(gconst29*r00);
IkReal x13640=((1.0)*x13634);
IkReal x13641=((1.0)*x13635);
IkReal x13642=(gconst28*x13634);
IkReal x13643=(gconst28*x13635);
evalcond[0]=(((r12*x13635))+((r11*x13642))+(((-1.0)*x13636*x13640)));
evalcond[1]=(((x13635*x13638))+(((-1.0)*r22*x13640))+(((-1.0)*x13637*x13641)));
evalcond[2]=((((-1.0)*x13639*x13641))+((r01*x13643))+(((-1.0)*r02*x13640)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13640))+((r11*x13643))+(((-1.0)*x13636*x13641)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x13634*x13638))+((r22*x13635))+(((-1.0)*x13637*x13640)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13635))+(((-1.0)*x13639*x13640))+((r01*x13642)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13644=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13644.valid){
continue;
}
CheckValue<IkReal> x13645 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13644.value)))+(x13645.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13646=IKcos(j4);
IkReal x13647=IKsin(j4);
IkReal x13648=(gconst29*r10);
IkReal x13649=(gconst29*r20);
IkReal x13650=(gconst28*r21);
IkReal x13651=(gconst29*r00);
IkReal x13652=((1.0)*x13646);
IkReal x13653=((1.0)*x13647);
IkReal x13654=(gconst28*x13646);
IkReal x13655=(gconst28*x13647);
evalcond[0]=((((-1.0)*x13648*x13652))+((r12*x13647))+((r11*x13654)));
evalcond[1]=((((-1.0)*r22*x13652))+(((-1.0)*x13649*x13653))+((x13647*x13650)));
evalcond[2]=(((r01*x13655))+(((-1.0)*r02*x13652))+(((-1.0)*x13651*x13653)));
evalcond[3]=((1.0)+(((-1.0)*x13648*x13653))+(((-1.0)*r12*x13652))+((r11*x13655)));
evalcond[4]=(((cj2*sj1))+((r22*x13647))+((cj1*sj2))+(((-1.0)*x13649*x13652))+((x13646*x13650)));
evalcond[5]=(((r02*x13647))+((r01*x13654))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x13651*x13652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13658 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13658.valid){
continue;
}
IkReal x13656=((1.0)*(x13658.value));
IkReal x13657=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13656)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13656)));
IkReal gconst28=((1.0)*r21*x13657);
IkReal gconst29=((-1.0)*r20*x13657);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13661 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13661.valid){
continue;
}
IkReal x13659=((1.0)*(x13661.value));
IkReal x13660=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13659)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13659)));
IkReal gconst28=((1.0)*r21*x13660);
IkReal gconst29=((-1.0)*r20*x13660);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13664 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13664.valid){
continue;
}
IkReal x13662=((1.0)*(x13664.value));
IkReal x13663=x13489;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13662)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13662)));
IkReal gconst28=((1.0)*r21*x13663);
IkReal gconst29=((-1.0)*r20*x13663);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13665=(gconst29*r10);
IkReal x13666=(gconst28*r11);
CheckValue<IkReal> x13667=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x13665*x13666))+(x13665*x13665)+(x13666*x13666))),-1);
if(!x13667.valid){
continue;
}
CheckValue<IkReal> x13668 = IKatan2WithCheck(IkReal((x13665+(((-1.0)*x13666)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13667.value)))+(x13668.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13669=IKsin(j4);
IkReal x13670=IKcos(j4);
IkReal x13671=(gconst28*r11);
IkReal x13672=((1.0)*x13670);
IkReal x13673=(gconst29*x13670);
IkReal x13674=(gconst28*x13669);
IkReal x13675=((1.0)*x13669);
IkReal x13676=(gconst29*x13675);
evalcond[0]=((((-1.0)*r20*x13676))+((r21*x13674))+(((-1.0)*r22*x13672)));
evalcond[1]=(((r01*x13674))+(((-1.0)*r00*x13676))+(((-1.0)*r02*x13672)));
evalcond[2]=((((-1.0)*r12*x13675))+(((-1.0)*x13671*x13672))+((r10*x13673)));
evalcond[3]=((1.0)+((x13669*x13671))+(((-1.0)*r12*x13672))+(((-1.0)*r10*x13676)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13672))+((cj1*sj2))+((r20*x13673))+(((-1.0)*r22*x13675)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13673))+(((-1.0)*r02*x13675))+(((-1.0)*gconst28*r01*x13672)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13677=((1.0)*gconst29);
CheckValue<IkReal> x13678 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13677))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13678.valid){
continue;
}
CheckValue<IkReal> x13679=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13677))+(((-1.0)*gconst28*r00)))),-1);
if(!x13679.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13678.value)+(((1.5707963267949)*(x13679.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13680=IKsin(j4);
IkReal x13681=IKcos(j4);
IkReal x13682=(gconst28*r11);
IkReal x13683=((1.0)*x13681);
IkReal x13684=(gconst29*x13681);
IkReal x13685=(gconst28*x13680);
IkReal x13686=((1.0)*x13680);
IkReal x13687=(gconst29*x13686);
evalcond[0]=((((-1.0)*r22*x13683))+(((-1.0)*r20*x13687))+((r21*x13685)));
evalcond[1]=((((-1.0)*r00*x13687))+((r01*x13685))+(((-1.0)*r02*x13683)));
evalcond[2]=((((-1.0)*x13682*x13683))+(((-1.0)*r12*x13686))+((r10*x13684)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13687))+(((-1.0)*r12*x13683))+((x13680*x13682)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x13686))+((cj1*sj2))+(((-1.0)*gconst28*r21*x13683))+((r20*x13684)));
evalcond[5]=((((-1.0)*gconst28*r01*x13683))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13684))+(((-1.0)*r02*x13686)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13688=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13688.valid){
continue;
}
CheckValue<IkReal> x13689 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13688.value)))+(x13689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13690=IKsin(j4);
IkReal x13691=IKcos(j4);
IkReal x13692=(gconst28*r11);
IkReal x13693=((1.0)*x13691);
IkReal x13694=(gconst29*x13691);
IkReal x13695=(gconst28*x13690);
IkReal x13696=((1.0)*x13690);
IkReal x13697=(gconst29*x13696);
evalcond[0]=((((-1.0)*r20*x13697))+((r21*x13695))+(((-1.0)*r22*x13693)));
evalcond[1]=(((r01*x13695))+(((-1.0)*r02*x13693))+(((-1.0)*r00*x13697)));
evalcond[2]=(((r10*x13694))+(((-1.0)*x13692*x13693))+(((-1.0)*r12*x13696)));
evalcond[3]=((1.0)+((x13690*x13692))+(((-1.0)*r10*x13697))+(((-1.0)*r12*x13693)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst28*r21*x13693))+((cj1*sj2))+((r20*x13694))+(((-1.0)*r22*x13696)));
evalcond[5]=(((r00*x13694))+(((-1.0)*r02*x13696))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst28*r01*x13693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13698=gconst28*gconst28;
IkReal x13699=gconst29*gconst29;
IkReal x13700=(r11*r21);
IkReal x13701=(gconst29*sj3);
IkReal x13702=((1.0)*cj3);
IkReal x13703=(r10*r20);
IkReal x13704=(r10*r21);
IkReal x13705=(r11*r20);
IkReal x13706=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13707 = IKatan2WithCheck(IkReal((((r11*r22*x13701))+((gconst28*r10*r22*sj3)))),IkReal((((gconst28*x13700*x13701))+((sj3*x13698*x13704))+(((-1.0)*gconst28*x13701*x13703))+(((-1.0)*sj3*x13699*x13705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13707.valid){
continue;
}
CheckValue<IkReal> x13708=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13699*x13702*x13703))+((x13704*x13706))+((x13705*x13706))+(((-1.0)*x13698*x13700*x13702))+(((-1.0)*r12*r22*x13702)))),-1);
if(!x13708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13707.value)+(((1.5707963267949)*(x13708.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13709=IKsin(j4);
IkReal x13710=IKcos(j4);
IkReal x13711=(sj1*sj2);
IkReal x13712=(gconst29*r20);
IkReal x13713=(gconst28*r20);
IkReal x13714=((1.0)*cj2);
IkReal x13715=(r11*sj3);
IkReal x13716=(cj1*sj2);
IkReal x13717=(gconst29*r01);
IkReal x13718=(gconst29*r10);
IkReal x13719=(cj3*gconst28);
IkReal x13720=(cj3*gconst29);
IkReal x13721=(gconst28*sj3);
IkReal x13722=(gconst29*r00);
IkReal x13723=(cj1*x13714);
IkReal x13724=((1.0)*x13710);
IkReal x13725=((1.0)*x13709);
IkReal x13726=(gconst28*x13709);
IkReal x13727=(cj3*x13709);
IkReal x13728=(sj3*x13710);
evalcond[0]=((((-1.0)*x13712*x13725))+(((-1.0)*r22*x13724))+((r21*x13726)));
evalcond[1]=((((-1.0)*x13722*x13725))+((r01*x13726))+(((-1.0)*r02*x13724)));
evalcond[2]=((1.0)+((r11*x13726))+(((-1.0)*r12*x13724))+(((-1.0)*x13718*x13725)));
evalcond[3]=(((r12*x13727))+((r10*x13721))+((gconst29*x13715))+(((-1.0)*cj3*x13718*x13724))+((r11*x13710*x13719)));
evalcond[4]=((((-1.0)*r12*sj3*x13725))+((r11*x13720))+((x13718*x13728))+((r10*x13719))+(((-1.0)*gconst28*x13715*x13724)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x13712*x13724))+((gconst29*r21*sj3))+((sj3*x13713))+x13716+((r22*x13727))+((r21*x13710*x13719)));
evalcond[6]=(((r01*x13710*x13719))+((sj3*x13717))+((r00*x13721))+x13711+((r02*x13727))+(((-1.0)*x13723))+(((-1.0)*r00*x13720*x13724)));
evalcond[7]=((((-1.0)*r21*x13721*x13724))+x13711+((r21*x13720))+((cj3*x13713))+(((-1.0)*r22*sj3*x13725))+(((-1.0)*x13723))+((x13712*x13728)));
evalcond[8]=((((-1.0)*x13716))+(((-1.0)*sj1*x13714))+((x13722*x13728))+((cj3*x13717))+((r00*x13719))+(((-1.0)*r02*sj3*x13725))+(((-1.0)*r01*x13721*x13724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13729=((1.0)*gconst29);
CheckValue<IkReal> x13730 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13729))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13730.valid){
continue;
}
CheckValue<IkReal> x13731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13729))+(((-1.0)*gconst28*r00)))),-1);
if(!x13731.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13730.value)+(((1.5707963267949)*(x13731.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13732=IKsin(j4);
IkReal x13733=IKcos(j4);
IkReal x13734=(sj1*sj2);
IkReal x13735=(gconst29*r20);
IkReal x13736=(gconst28*r20);
IkReal x13737=((1.0)*cj2);
IkReal x13738=(r11*sj3);
IkReal x13739=(cj1*sj2);
IkReal x13740=(gconst29*r01);
IkReal x13741=(gconst29*r10);
IkReal x13742=(cj3*gconst28);
IkReal x13743=(cj3*gconst29);
IkReal x13744=(gconst28*sj3);
IkReal x13745=(gconst29*r00);
IkReal x13746=(cj1*x13737);
IkReal x13747=((1.0)*x13733);
IkReal x13748=((1.0)*x13732);
IkReal x13749=(gconst28*x13732);
IkReal x13750=(cj3*x13732);
IkReal x13751=(sj3*x13733);
evalcond[0]=((((-1.0)*r22*x13747))+(((-1.0)*x13735*x13748))+((r21*x13749)));
evalcond[1]=((((-1.0)*r02*x13747))+((r01*x13749))+(((-1.0)*x13745*x13748)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13747))+(((-1.0)*x13741*x13748))+((r11*x13749)));
evalcond[3]=(((r12*x13750))+(((-1.0)*cj3*x13741*x13747))+((r11*x13733*x13742))+((r10*x13744))+((gconst29*x13738)));
evalcond[4]=(((x13741*x13751))+(((-1.0)*r12*sj3*x13748))+(((-1.0)*gconst28*x13738*x13747))+((r10*x13742))+((r11*x13743)));
evalcond[5]=(((r21*x13733*x13742))+((cj2*sj1))+((r22*x13750))+((gconst29*r21*sj3))+x13739+(((-1.0)*cj3*x13735*x13747))+((sj3*x13736)));
evalcond[6]=(((r01*x13733*x13742))+x13734+((r02*x13750))+(((-1.0)*r00*x13743*x13747))+(((-1.0)*x13746))+((sj3*x13740))+((r00*x13744)));
evalcond[7]=((((-1.0)*r21*x13744*x13747))+((x13735*x13751))+x13734+(((-1.0)*r22*sj3*x13748))+((r21*x13743))+(((-1.0)*x13746))+((cj3*x13736)));
evalcond[8]=((((-1.0)*sj1*x13737))+(((-1.0)*r02*sj3*x13748))+(((-1.0)*r01*x13744*x13747))+((cj3*x13740))+(((-1.0)*x13739))+((x13745*x13751))+((r00*x13742)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13752=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13752.valid){
continue;
}
CheckValue<IkReal> x13753 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13752.value)))+(x13753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13754=IKsin(j4);
IkReal x13755=IKcos(j4);
IkReal x13756=(sj1*sj2);
IkReal x13757=(gconst29*r20);
IkReal x13758=(gconst28*r20);
IkReal x13759=((1.0)*cj2);
IkReal x13760=(r11*sj3);
IkReal x13761=(cj1*sj2);
IkReal x13762=(gconst29*r01);
IkReal x13763=(gconst29*r10);
IkReal x13764=(cj3*gconst28);
IkReal x13765=(cj3*gconst29);
IkReal x13766=(gconst28*sj3);
IkReal x13767=(gconst29*r00);
IkReal x13768=(cj1*x13759);
IkReal x13769=((1.0)*x13755);
IkReal x13770=((1.0)*x13754);
IkReal x13771=(gconst28*x13754);
IkReal x13772=(cj3*x13754);
IkReal x13773=(sj3*x13755);
evalcond[0]=((((-1.0)*x13757*x13770))+(((-1.0)*r22*x13769))+((r21*x13771)));
evalcond[1]=((((-1.0)*r02*x13769))+((r01*x13771))+(((-1.0)*x13767*x13770)));
evalcond[2]=((1.0)+((r11*x13771))+(((-1.0)*r12*x13769))+(((-1.0)*x13763*x13770)));
evalcond[3]=((((-1.0)*cj3*x13763*x13769))+((gconst29*x13760))+((r10*x13766))+((r11*x13755*x13764))+((r12*x13772)));
evalcond[4]=(((r11*x13765))+(((-1.0)*gconst28*x13760*x13769))+((r10*x13764))+(((-1.0)*r12*sj3*x13770))+((x13763*x13773)));
evalcond[5]=((((-1.0)*cj3*x13757*x13769))+((cj2*sj1))+((r21*x13755*x13764))+((gconst29*r21*sj3))+x13761+((sj3*x13758))+((r22*x13772)));
evalcond[6]=(x13756+((r00*x13766))+(((-1.0)*r00*x13765*x13769))+((sj3*x13762))+((r01*x13755*x13764))+(((-1.0)*x13768))+((r02*x13772)));
evalcond[7]=(x13756+((x13757*x13773))+(((-1.0)*r22*sj3*x13770))+(((-1.0)*r21*x13766*x13769))+((r21*x13765))+((cj3*x13758))+(((-1.0)*x13768)));
evalcond[8]=((((-1.0)*sj1*x13759))+(((-1.0)*x13761))+((r00*x13764))+((x13767*x13773))+((cj3*x13762))+(((-1.0)*r01*x13766*x13769))+(((-1.0)*r02*sj3*x13770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13774=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13774);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13774);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13775=(r11*sj5);
IkReal x13776=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x13776))+x13775);
j4eval[1]=((((-1.0)*cj3*x13776))+((cj3*x13775)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13777=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13777);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13777);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13778=(cj5*r10);
IkReal x13779=(r11*sj5);
j4eval[0]=((((-1.0)*x13778))+x13779);
j4eval[1]=(((sj3*x13778))+(((-1.0)*sj3*x13779)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13780=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13780);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13780);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13781=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13781);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13781);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13782=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13782))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13782)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13783=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13783);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13783);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13784=((1.0)*sj1);
CheckValue<IkReal> x13785=IKPowWithIntegerCheck(r22,-1);
if(!x13785.valid){
continue;
}
CheckValue<IkReal> x13786=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13786.valid){
continue;
}
if( IKabs(((x13785.value)*(((((-1.0)*cj2*x13784))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13786.value)*(((((-1.0)*sj2*x13784))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13785.value)*(((((-1.0)*cj2*x13784))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13786.value)*(((((-1.0)*sj2*x13784))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13785.value)*(((((-1.0)*cj2*x13784))+(((-1.0)*cj1*sj2))))), ((x13786.value)*(((((-1.0)*sj2*x13784))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13787=IKsin(j4);
IkReal x13788=IKcos(j4);
IkReal x13789=((1.0)*cj5);
IkReal x13790=(sj5*x13788);
IkReal x13791=(sj5*x13787);
evalcond[0]=((-1.0)*r22*x13788);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13787)));
evalcond[2]=(((r01*x13791))+(((-1.0)*r00*x13787*x13789)));
evalcond[3]=((((-1.0)*r10*x13788*x13789))+((r11*x13790)));
evalcond[4]=((1.0)+((r11*x13791))+(((-1.0)*r10*x13787*x13789)));
evalcond[5]=(((r01*x13790))+(((-1.0)*r00*x13788*x13789))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13792=((1.0)*cj5);
CheckValue<IkReal> x13793=IKPowWithIntegerCheck(((((-1.0)*r10*x13792))+((r11*sj5))),-1);
if(!x13793.valid){
continue;
}
CheckValue<IkReal> x13794=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13792))),-1);
if(!x13794.valid){
continue;
}
if( IKabs(((-1.0)*(x13793.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13794.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13793.value)))+IKsqr(((x13794.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13793.value)), ((x13794.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13795=IKsin(j4);
IkReal x13796=IKcos(j4);
IkReal x13797=((1.0)*cj5);
IkReal x13798=(sj5*x13796);
IkReal x13799=(sj5*x13795);
evalcond[0]=((-1.0)*r22*x13796);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13795)));
evalcond[2]=(((r01*x13799))+(((-1.0)*r00*x13795*x13797)));
evalcond[3]=((((-1.0)*r10*x13796*x13797))+((r11*x13798)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13795*x13797))+((r11*x13799)));
evalcond[5]=(((r01*x13798))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13796*x13797)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13800=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13800);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13800);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13801=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13801);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13801);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13802=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13802.valid){
continue;
}
CheckValue<IkReal> x13803=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13803.valid){
continue;
}
if( IKabs(((-1.0)*(x13802.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13803.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13802.value)))+IKsqr(((x13803.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13802.value)), ((x13803.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13804=IKsin(j4);
IkReal x13805=IKcos(j4);
IkReal x13806=(cj5*x13805);
IkReal x13807=(sj5*x13804);
IkReal x13808=((1.0)*cj5*x13804);
IkReal x13809=((1.0)*sj5*x13805);
evalcond[0]=((-1.0)*r22*x13805);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13804)));
evalcond[2]=(((r01*x13807))+(((-1.0)*r00*x13808)));
evalcond[3]=((((-1.0)*r11*x13809))+((r10*x13806)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13808))+((r11*x13807)));
evalcond[5]=(((r00*x13806))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13810=IKPowWithIntegerCheck(r22,-1);
if(!x13810.valid){
continue;
}
CheckValue<IkReal> x13811=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13811.valid){
continue;
}
if( IKabs(((x13810.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13811.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13810.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13811.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13810.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13811.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13812=IKsin(j4);
IkReal x13813=IKcos(j4);
IkReal x13814=(cj5*x13813);
IkReal x13815=(sj5*x13812);
IkReal x13816=((1.0)*cj5*x13812);
IkReal x13817=((1.0)*sj5*x13813);
evalcond[0]=((-1.0)*r22*x13813);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13812)));
evalcond[2]=(((r01*x13815))+(((-1.0)*r00*x13816)));
evalcond[3]=(((r10*x13814))+(((-1.0)*r11*x13817)));
evalcond[4]=((1.0)+((r11*x13815))+(((-1.0)*r10*x13816)));
evalcond[5]=(((r00*x13814))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13818=((1.0)*r10);
CheckValue<IkReal> x13819=IKPowWithIntegerCheck(cj3,-1);
if(!x13819.valid){
continue;
}
CheckValue<IkReal> x13820=IKPowWithIntegerCheck(r22,-1);
if(!x13820.valid){
continue;
}
CheckValue<IkReal> x13821=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13818))+((cj3*r11*sj5))),-1);
if(!x13821.valid){
continue;
}
if( IKabs(((x13819.value)*(x13820.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13821.value)*(((((-1.0)*sj3*sj5*x13818))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13819.value)*(x13820.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13821.value)*(((((-1.0)*sj3*sj5*x13818))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13819.value)*(x13820.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13821.value)*(((((-1.0)*sj3*sj5*x13818))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13822=IKsin(j4);
IkReal x13823=IKcos(j4);
IkReal x13824=(sj1*sj2);
IkReal x13825=(r11*sj5);
IkReal x13826=(r00*sj3);
IkReal x13827=(cj5*r01);
IkReal x13828=((1.0)*cj1);
IkReal x13829=(cj3*sj5);
IkReal x13830=(cj5*r11);
IkReal x13831=(r10*sj3);
IkReal x13832=(cj2*sj1);
IkReal x13833=((1.0)*cj5);
IkReal x13834=((1.0)*sj3);
IkReal x13835=(r01*sj5);
IkReal x13836=(cj2*x13828);
IkReal x13837=(cj3*x13823);
IkReal x13838=(r22*x13822);
IkReal x13839=(cj5*x13823);
IkReal x13840=(x13822*x13833);
evalcond[0]=((-1.0)*r22*x13823);
evalcond[1]=(x13832+((cj1*sj2))+((cj3*x13838)));
evalcond[2]=(((x13822*x13835))+(((-1.0)*r00*x13840)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13840))+((x13822*x13825)));
evalcond[4]=((((-1.0)*x13836))+(((-1.0)*x13834*x13838))+x13824);
evalcond[5]=(((x13825*x13837))+(((-1.0)*r10*x13833*x13837))+((sj5*x13831))+((sj3*x13830)));
evalcond[6]=(((r10*x13829))+((x13831*x13839))+(((-1.0)*x13823*x13825*x13834))+((cj3*x13830)));
evalcond[7]=((((-1.0)*x13836))+(((-1.0)*r00*x13833*x13837))+x13824+((sj3*x13827))+((sj5*x13826))+((r01*x13823*x13829)));
evalcond[8]=(((r00*x13829))+(((-1.0)*sj2*x13828))+((x13826*x13839))+((cj3*x13827))+(((-1.0)*x13823*x13834*x13835))+(((-1.0)*x13832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13841=(cj5*r10);
IkReal x13842=((1.0)*r11);
CheckValue<IkReal> x13843=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x13841))),-1);
if(!x13843.valid){
continue;
}
CheckValue<IkReal> x13844=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13842))+((sj3*x13841))),-1);
if(!x13844.valid){
continue;
}
if( IKabs(((-1.0)*(x13843.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13844.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13842)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13843.value)))+IKsqr(((x13844.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13842))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13843.value)), ((x13844.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x13842))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13845=IKsin(j4);
IkReal x13846=IKcos(j4);
IkReal x13847=(sj1*sj2);
IkReal x13848=(r11*sj5);
IkReal x13849=(r00*sj3);
IkReal x13850=(cj5*r01);
IkReal x13851=((1.0)*cj1);
IkReal x13852=(cj3*sj5);
IkReal x13853=(cj5*r11);
IkReal x13854=(r10*sj3);
IkReal x13855=(cj2*sj1);
IkReal x13856=((1.0)*cj5);
IkReal x13857=((1.0)*sj3);
IkReal x13858=(r01*sj5);
IkReal x13859=(cj2*x13851);
IkReal x13860=(cj3*x13846);
IkReal x13861=(r22*x13845);
IkReal x13862=(cj5*x13846);
IkReal x13863=(x13845*x13856);
evalcond[0]=((-1.0)*r22*x13846);
evalcond[1]=(x13855+((cj1*sj2))+((cj3*x13861)));
evalcond[2]=((((-1.0)*r00*x13863))+((x13845*x13858)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13863))+((x13845*x13848)));
evalcond[4]=(x13847+(((-1.0)*x13857*x13861))+(((-1.0)*x13859)));
evalcond[5]=((((-1.0)*r10*x13856*x13860))+((x13848*x13860))+((sj3*x13853))+((sj5*x13854)));
evalcond[6]=(((x13854*x13862))+(((-1.0)*x13846*x13848*x13857))+((cj3*x13853))+((r10*x13852)));
evalcond[7]=((((-1.0)*r00*x13856*x13860))+x13847+((sj3*x13850))+((sj5*x13849))+((r01*x13846*x13852))+(((-1.0)*x13859)));
evalcond[8]=((((-1.0)*x13855))+((r00*x13852))+(((-1.0)*sj2*x13851))+(((-1.0)*x13846*x13857*x13858))+((cj3*x13850))+((x13849*x13862)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13864=((1.0)*sj3);
IkReal x13865=(r11*sj5);
IkReal x13866=((1.0)*cj5*r10);
CheckValue<IkReal> x13867=IKPowWithIntegerCheck((x13865+(((-1.0)*x13866))),-1);
if(!x13867.valid){
continue;
}
CheckValue<IkReal> x13868=IKPowWithIntegerCheck(((((-1.0)*cj3*x13866))+((cj3*x13865))),-1);
if(!x13868.valid){
continue;
}
if( IKabs(((-1.0)*(x13867.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13868.value)*(((((-1.0)*r10*sj5*x13864))+(((-1.0)*cj5*r11*x13864)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13867.value)))+IKsqr(((x13868.value)*(((((-1.0)*r10*sj5*x13864))+(((-1.0)*cj5*r11*x13864))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13867.value)), ((x13868.value)*(((((-1.0)*r10*sj5*x13864))+(((-1.0)*cj5*r11*x13864))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13869=IKsin(j4);
IkReal x13870=IKcos(j4);
IkReal x13871=(sj1*sj2);
IkReal x13872=(r11*sj5);
IkReal x13873=(r00*sj3);
IkReal x13874=(cj5*r01);
IkReal x13875=((1.0)*cj1);
IkReal x13876=(cj3*sj5);
IkReal x13877=(cj5*r11);
IkReal x13878=(r10*sj3);
IkReal x13879=(cj2*sj1);
IkReal x13880=((1.0)*cj5);
IkReal x13881=((1.0)*sj3);
IkReal x13882=(r01*sj5);
IkReal x13883=(cj2*x13875);
IkReal x13884=(cj3*x13870);
IkReal x13885=(r22*x13869);
IkReal x13886=(cj5*x13870);
IkReal x13887=(x13869*x13880);
evalcond[0]=((-1.0)*r22*x13870);
evalcond[1]=(((cj3*x13885))+x13879+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13887))+((x13869*x13882)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13887))+((x13869*x13872)));
evalcond[4]=(x13871+(((-1.0)*x13881*x13885))+(((-1.0)*x13883)));
evalcond[5]=(((sj3*x13877))+((sj5*x13878))+((x13872*x13884))+(((-1.0)*r10*x13880*x13884)));
evalcond[6]=(((cj3*x13877))+((x13878*x13886))+(((-1.0)*x13870*x13872*x13881))+((r10*x13876)));
evalcond[7]=(((sj3*x13874))+((sj5*x13873))+(((-1.0)*r00*x13880*x13884))+x13871+((r01*x13870*x13876))+(((-1.0)*x13883)));
evalcond[8]=((((-1.0)*x13870*x13881*x13882))+((cj3*x13874))+(((-1.0)*x13879))+(((-1.0)*sj2*x13875))+((r00*x13876))+((x13873*x13886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13888=cj5*cj5;
IkReal x13889=((1.0)*cj3);
IkReal x13890=(r10*r21);
IkReal x13891=(cj5*sj5);
IkReal x13892=(r11*r21);
IkReal x13893=(r11*r20);
IkReal x13894=(r22*sj3);
IkReal x13895=(r10*r20);
IkReal x13896=((1.0)*sj3*x13888);
CheckValue<IkReal> x13897 = IKatan2WithCheck(IkReal((((r10*sj5*x13894))+((cj5*r11*x13894)))),IkReal((((sj3*x13891*x13892))+(((-1.0)*sj3*x13891*x13895))+((sj3*x13890))+(((-1.0)*x13893*x13896))+(((-1.0)*x13890*x13896)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13897.valid){
continue;
}
CheckValue<IkReal> x13898=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13889*x13892))+(((-1.0)*x13888*x13889*x13895))+(((-1.0)*r12*r22*x13889))+((cj3*x13888*x13892))+((cj3*x13891*x13893))+((cj3*x13890*x13891)))),-1);
if(!x13898.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13897.value)+(((1.5707963267949)*(x13898.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13899=IKsin(j4);
IkReal x13900=IKcos(j4);
IkReal x13901=(sj1*sj2);
IkReal x13902=(cj5*sj3);
IkReal x13903=(cj5*r10);
IkReal x13904=(r00*sj5);
IkReal x13905=(r11*sj5);
IkReal x13906=(cj3*cj5);
IkReal x13907=((1.0)*cj1);
IkReal x13908=(cj3*sj5);
IkReal x13909=(r21*sj5);
IkReal x13910=(cj2*sj1);
IkReal x13911=(sj3*sj5);
IkReal x13912=(r01*sj5);
IkReal x13913=(cj2*x13907);
IkReal x13914=((1.0)*x13900);
IkReal x13915=((1.0)*x13899);
IkReal x13916=(cj3*x13899);
IkReal x13917=(cj3*x13900);
evalcond[0]=(((x13899*x13909))+(((-1.0)*r22*x13914))+(((-1.0)*cj5*r20*x13915)));
evalcond[1]=(((x13899*x13912))+(((-1.0)*cj5*r00*x13915))+(((-1.0)*r02*x13914)));
evalcond[2]=((1.0)+((x13899*x13905))+(((-1.0)*r12*x13914))+(((-1.0)*x13903*x13915)));
evalcond[3]=(((r10*x13911))+((r12*x13916))+(((-1.0)*cj3*x13903*x13914))+((r11*x13902))+((x13905*x13917)));
evalcond[4]=(((r10*x13908))+(((-1.0)*r12*sj3*x13915))+((r10*x13900*x13902))+((r11*x13906))+(((-1.0)*sj3*x13905*x13914)));
evalcond[5]=(((r22*x13916))+((r21*x13900*x13908))+(((-1.0)*r20*x13906*x13914))+((cj1*sj2))+x13910+((r20*x13911))+((r21*x13902)));
evalcond[6]=(((r02*x13916))+(((-1.0)*r00*x13906*x13914))+x13901+((r01*x13902))+((sj3*x13904))+((r01*x13900*x13908))+(((-1.0)*x13913)));
evalcond[7]=((((-1.0)*r22*sj3*x13915))+x13901+((r20*x13908))+(((-1.0)*sj3*x13909*x13914))+((r21*x13906))+((r20*x13900*x13902))+(((-1.0)*x13913)));
evalcond[8]=(((r00*x13900*x13902))+(((-1.0)*r02*sj3*x13915))+(((-1.0)*r01*x13911*x13914))+(((-1.0)*x13910))+(((-1.0)*sj2*x13907))+((r01*x13906))+((cj3*x13904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13918=((1.0)*cj5);
CheckValue<IkReal> x13919=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13918)))),-1);
if(!x13919.valid){
continue;
}
CheckValue<IkReal> x13920 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13918)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13920.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13919.value)))+(x13920.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13921=IKsin(j4);
IkReal x13922=IKcos(j4);
IkReal x13923=(sj1*sj2);
IkReal x13924=(cj5*sj3);
IkReal x13925=(cj5*r10);
IkReal x13926=(r00*sj5);
IkReal x13927=(r11*sj5);
IkReal x13928=(cj3*cj5);
IkReal x13929=((1.0)*cj1);
IkReal x13930=(cj3*sj5);
IkReal x13931=(r21*sj5);
IkReal x13932=(cj2*sj1);
IkReal x13933=(sj3*sj5);
IkReal x13934=(r01*sj5);
IkReal x13935=(cj2*x13929);
IkReal x13936=((1.0)*x13922);
IkReal x13937=((1.0)*x13921);
IkReal x13938=(cj3*x13921);
IkReal x13939=(cj3*x13922);
evalcond[0]=((((-1.0)*cj5*r20*x13937))+(((-1.0)*r22*x13936))+((x13921*x13931)));
evalcond[1]=((((-1.0)*cj5*r00*x13937))+(((-1.0)*r02*x13936))+((x13921*x13934)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13936))+((x13921*x13927))+(((-1.0)*x13925*x13937)));
evalcond[3]=(((x13927*x13939))+(((-1.0)*cj3*x13925*x13936))+((r10*x13933))+((r11*x13924))+((r12*x13938)));
evalcond[4]=((((-1.0)*r12*sj3*x13937))+((r10*x13922*x13924))+((r10*x13930))+(((-1.0)*sj3*x13927*x13936))+((r11*x13928)));
evalcond[5]=(((r20*x13933))+((r21*x13924))+((cj1*sj2))+x13932+((r22*x13938))+(((-1.0)*r20*x13928*x13936))+((r21*x13922*x13930)));
evalcond[6]=((((-1.0)*r00*x13928*x13936))+((sj3*x13926))+x13923+(((-1.0)*x13935))+((r01*x13924))+((r02*x13938))+((r01*x13922*x13930)));
evalcond[7]=(((r20*x13930))+((r21*x13928))+(((-1.0)*r22*sj3*x13937))+(((-1.0)*sj3*x13931*x13936))+x13923+(((-1.0)*x13935))+((r20*x13922*x13924)));
evalcond[8]=((((-1.0)*sj2*x13929))+(((-1.0)*r02*sj3*x13937))+(((-1.0)*r01*x13933*x13936))+((r01*x13928))+(((-1.0)*x13932))+((cj3*x13926))+((r00*x13922*x13924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13940=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13940.valid){
continue;
}
CheckValue<IkReal> x13941 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13941.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13940.value)))+(x13941.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13942=IKsin(j4);
IkReal x13943=IKcos(j4);
IkReal x13944=(sj1*sj2);
IkReal x13945=(cj5*sj3);
IkReal x13946=(cj5*r10);
IkReal x13947=(r00*sj5);
IkReal x13948=(r11*sj5);
IkReal x13949=(cj3*cj5);
IkReal x13950=((1.0)*cj1);
IkReal x13951=(cj3*sj5);
IkReal x13952=(r21*sj5);
IkReal x13953=(cj2*sj1);
IkReal x13954=(sj3*sj5);
IkReal x13955=(r01*sj5);
IkReal x13956=(cj2*x13950);
IkReal x13957=((1.0)*x13943);
IkReal x13958=((1.0)*x13942);
IkReal x13959=(cj3*x13942);
IkReal x13960=(cj3*x13943);
evalcond[0]=((((-1.0)*cj5*r20*x13958))+(((-1.0)*r22*x13957))+((x13942*x13952)));
evalcond[1]=((((-1.0)*r02*x13957))+(((-1.0)*cj5*r00*x13958))+((x13942*x13955)));
evalcond[2]=((1.0)+(((-1.0)*x13946*x13958))+((x13942*x13948))+(((-1.0)*r12*x13957)));
evalcond[3]=(((r12*x13959))+((x13948*x13960))+(((-1.0)*cj3*x13946*x13957))+((r10*x13954))+((r11*x13945)));
evalcond[4]=((((-1.0)*sj3*x13948*x13957))+(((-1.0)*r12*sj3*x13958))+((r10*x13943*x13945))+((r10*x13951))+((r11*x13949)));
evalcond[5]=(((cj1*sj2))+x13953+((r22*x13959))+(((-1.0)*r20*x13949*x13957))+((r21*x13943*x13951))+((r20*x13954))+((r21*x13945)));
evalcond[6]=(((r01*x13943*x13951))+(((-1.0)*x13956))+x13944+(((-1.0)*r00*x13949*x13957))+((sj3*x13947))+((r01*x13945))+((r02*x13959)));
evalcond[7]=((((-1.0)*x13956))+x13944+(((-1.0)*r22*sj3*x13958))+(((-1.0)*sj3*x13952*x13957))+((r20*x13943*x13945))+((r20*x13951))+((r21*x13949)));
evalcond[8]=(((cj3*x13947))+(((-1.0)*r02*sj3*x13958))+((r00*x13943*x13945))+((r01*x13949))+(((-1.0)*r01*x13954*x13957))+(((-1.0)*sj2*x13950))+(((-1.0)*x13953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13961=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13961;
j4eval[1]=IKsign(x13961);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13962=((1.0)*cj5);
IkReal x13963=((((-1.0)*r21*x13962))+(((-1.0)*r20*sj5)));
j4eval[0]=x13963;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13962))))));
j4eval[2]=IKsign(x13963);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13964=cj5*cj5;
IkReal x13965=(cj3*r21);
IkReal x13966=(cj5*sj5);
IkReal x13967=((1.0)*cj3);
IkReal x13968=((((-1.0)*r10*r20*x13964*x13967))+(((-1.0)*r12*r22*x13967))+((cj3*r11*r20*x13966))+((r10*x13965*x13966))+((r11*x13964*x13965))+(((-1.0)*r11*x13965)));
j4eval[0]=x13968;
j4eval[1]=IKsign(x13968);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13969=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13969;
j4eval[1]=IKsign(x13969);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13970=((1.0)*cj5);
IkReal x13971=((((-1.0)*r21*x13970))+(((-1.0)*r20*sj5)));
j4eval[0]=x13971;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13970))))));
j4eval[2]=IKsign(x13971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13972=cj5*cj5;
IkReal x13973=r11*r11;
IkReal x13974=(cj5*r10);
IkReal x13975=(r11*sj5);
IkReal x13976=((((2.0)*x13974*x13975))+(((-1.0)*x13973))+(((-1.0)*(r12*r12)))+((x13972*x13973))+(((-1.0)*x13972*(r10*r10))));
j4eval[0]=x13976;
j4eval[1]=((IKabs(r12))+(IKabs((x13974+(((-1.0)*x13975))))));
j4eval[2]=IKsign(x13976);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13977=cj5*cj5;
IkReal x13978=r11*r11;
IkReal x13979=(cj5*r10);
IkReal x13980=(r11*sj5);
CheckValue<IkReal> x13981 = IKatan2WithCheck(IkReal((x13979+(((-1.0)*x13980)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13981.valid){
continue;
}
CheckValue<IkReal> x13982=IKPowWithIntegerCheck(IKsign(((((2.0)*x13979*x13980))+(((-1.0)*x13978))+(((-1.0)*x13977*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13977*x13978)))),-1);
if(!x13982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13981.value)+(((1.5707963267949)*(x13982.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13983=IKsin(j4);
IkReal x13984=IKcos(j4);
IkReal x13985=(cj5*r10);
IkReal x13986=(r01*sj5);
IkReal x13987=(cj5*r00);
IkReal x13988=(cj5*r20);
IkReal x13989=((1.0)*x13984);
IkReal x13990=((1.0)*x13983);
IkReal x13991=(sj5*x13983);
evalcond[0]=((((-1.0)*x13988*x13990))+((r21*x13991))+(((-1.0)*r22*x13989)));
evalcond[1]=(((x13983*x13986))+(((-1.0)*r02*x13989))+(((-1.0)*x13987*x13990)));
evalcond[2]=((((-1.0)*r11*sj5*x13989))+(((-1.0)*r12*x13990))+((x13984*x13985)));
evalcond[3]=((-1.0)+((r11*x13991))+(((-1.0)*x13985*x13990))+(((-1.0)*r12*x13989)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x13990))+((cj1*sj2))+(((-1.0)*x13986*x13989))+((x13984*x13987)));
evalcond[5]=((((-1.0)*r21*sj5*x13989))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x13984*x13988))+(((-1.0)*r22*x13990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13992=((1.0)*cj5);
CheckValue<IkReal> x13993 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x13992)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13993.valid){
continue;
}
CheckValue<IkReal> x13994=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13992))+(((-1.0)*r20*sj5)))),-1);
if(!x13994.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13993.value)+(((1.5707963267949)*(x13994.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13995=IKsin(j4);
IkReal x13996=IKcos(j4);
IkReal x13997=(cj5*r10);
IkReal x13998=(r01*sj5);
IkReal x13999=(cj5*r00);
IkReal x14000=(cj5*r20);
IkReal x14001=((1.0)*x13996);
IkReal x14002=((1.0)*x13995);
IkReal x14003=(sj5*x13995);
evalcond[0]=((((-1.0)*x14000*x14002))+((r21*x14003))+(((-1.0)*r22*x14001)));
evalcond[1]=((((-1.0)*r02*x14001))+((x13995*x13998))+(((-1.0)*x13999*x14002)));
evalcond[2]=(((x13996*x13997))+(((-1.0)*r11*sj5*x14001))+(((-1.0)*r12*x14002)));
evalcond[3]=((-1.0)+((r11*x14003))+(((-1.0)*x13997*x14002))+(((-1.0)*r12*x14001)));
evalcond[4]=((((-1.0)*r02*x14002))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x13998*x14001))+((x13996*x13999)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x13996*x14000))+(((-1.0)*r21*sj5*x14001))+(((-1.0)*r22*x14002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14004 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14004.valid){
continue;
}
CheckValue<IkReal> x14005=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14004.value)+(((1.5707963267949)*(x14005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14006=IKsin(j4);
IkReal x14007=IKcos(j4);
IkReal x14008=(cj5*r10);
IkReal x14009=(r01*sj5);
IkReal x14010=(cj5*r00);
IkReal x14011=(cj5*r20);
IkReal x14012=((1.0)*x14007);
IkReal x14013=((1.0)*x14006);
IkReal x14014=(sj5*x14006);
evalcond[0]=(((r21*x14014))+(((-1.0)*x14011*x14013))+(((-1.0)*r22*x14012)));
evalcond[1]=(((x14006*x14009))+(((-1.0)*r02*x14012))+(((-1.0)*x14010*x14013)));
evalcond[2]=((((-1.0)*r11*sj5*x14012))+(((-1.0)*r12*x14013))+((x14007*x14008)));
evalcond[3]=((-1.0)+(((-1.0)*x14008*x14013))+((r11*x14014))+(((-1.0)*r12*x14012)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x14013))+((cj1*sj2))+(((-1.0)*x14009*x14012))+((x14007*x14010)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14007*x14011))+(((-1.0)*r21*sj5*x14012))+(((-1.0)*r22*x14013)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14015=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14015;
j4eval[1]=IKsign(x14015);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14016=((1.0)*cj5);
IkReal x14017=((((-1.0)*r21*x14016))+(((-1.0)*r20*sj5)));
j4eval[0]=x14017;
j4eval[1]=((IKabs((((r01*sj5))+(((-1.0)*r00*x14016)))))+(IKabs(r02)));
j4eval[2]=IKsign(x14017);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14018=cj5*cj5;
IkReal x14019=r11*r11;
IkReal x14020=(r11*sj5);
IkReal x14021=(cj5*r10);
IkReal x14022=((((-2.0)*x14020*x14021))+(r12*r12)+((x14018*(r10*r10)))+(((-1.0)*x14018*x14019))+x14019);
j4eval[0]=x14022;
j4eval[1]=IKsign(x14022);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14021))+x14020))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14023=cj5*cj5;
IkReal x14024=r11*r11;
IkReal x14025=(cj5*r10);
IkReal x14026=(r11*sj5);
CheckValue<IkReal> x14027 = IKatan2WithCheck(IkReal(((((-1.0)*x14025))+x14026)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14027.valid){
continue;
}
CheckValue<IkReal> x14028=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x14025*x14026))+(((-1.0)*x14023*x14024))+((x14023*(r10*r10)))+x14024)),-1);
if(!x14028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14027.value)+(((1.5707963267949)*(x14028.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14029=IKcos(j4);
IkReal x14030=IKsin(j4);
IkReal x14031=(cj5*r00);
IkReal x14032=(cj5*r10);
IkReal x14033=(r21*sj5);
IkReal x14034=(cj5*r20);
IkReal x14035=((1.0)*x14029);
IkReal x14036=((1.0)*x14030);
IkReal x14037=(sj5*x14030);
IkReal x14038=(sj5*x14029);
evalcond[0]=(((r11*x14038))+(((-1.0)*x14032*x14035))+((r12*x14030)));
evalcond[1]=(((x14030*x14033))+(((-1.0)*x14034*x14036))+(((-1.0)*r22*x14035)));
evalcond[2]=(((r01*x14037))+(((-1.0)*x14031*x14036))+(((-1.0)*r02*x14035)));
evalcond[3]=((-1.0)+((r11*x14037))+(((-1.0)*x14032*x14036))+(((-1.0)*r12*x14035)));
evalcond[4]=(((r01*x14038))+((cj2*sj1))+(((-1.0)*x14031*x14035))+((cj1*sj2))+((r02*x14030)));
evalcond[5]=(((r22*x14030))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14034*x14035))+((x14029*x14033)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14039=((1.0)*cj5);
CheckValue<IkReal> x14040 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14039)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14040.valid){
continue;
}
CheckValue<IkReal> x14041=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14039))+(((-1.0)*r20*sj5)))),-1);
if(!x14041.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14040.value)+(((1.5707963267949)*(x14041.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14042=IKcos(j4);
IkReal x14043=IKsin(j4);
IkReal x14044=(cj5*r00);
IkReal x14045=(cj5*r10);
IkReal x14046=(r21*sj5);
IkReal x14047=(cj5*r20);
IkReal x14048=((1.0)*x14042);
IkReal x14049=((1.0)*x14043);
IkReal x14050=(sj5*x14043);
IkReal x14051=(sj5*x14042);
evalcond[0]=((((-1.0)*x14045*x14048))+((r11*x14051))+((r12*x14043)));
evalcond[1]=(((x14043*x14046))+(((-1.0)*r22*x14048))+(((-1.0)*x14047*x14049)));
evalcond[2]=((((-1.0)*x14044*x14049))+(((-1.0)*r02*x14048))+((r01*x14050)));
evalcond[3]=((-1.0)+(((-1.0)*x14045*x14049))+((r11*x14050))+(((-1.0)*r12*x14048)));
evalcond[4]=((((-1.0)*x14044*x14048))+((cj2*sj1))+((cj1*sj2))+((r02*x14043))+((r01*x14051)));
evalcond[5]=(((r22*x14043))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14042*x14046))+(((-1.0)*x14047*x14048)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14052 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14052.valid){
continue;
}
CheckValue<IkReal> x14053=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14053.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14052.value)+(((1.5707963267949)*(x14053.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14054=IKcos(j4);
IkReal x14055=IKsin(j4);
IkReal x14056=(cj5*r00);
IkReal x14057=(cj5*r10);
IkReal x14058=(r21*sj5);
IkReal x14059=(cj5*r20);
IkReal x14060=((1.0)*x14054);
IkReal x14061=((1.0)*x14055);
IkReal x14062=(sj5*x14055);
IkReal x14063=(sj5*x14054);
evalcond[0]=((((-1.0)*x14057*x14060))+((r12*x14055))+((r11*x14063)));
evalcond[1]=((((-1.0)*x14059*x14061))+(((-1.0)*r22*x14060))+((x14055*x14058)));
evalcond[2]=((((-1.0)*x14056*x14061))+((r01*x14062))+(((-1.0)*r02*x14060)));
evalcond[3]=((-1.0)+(((-1.0)*x14057*x14061))+(((-1.0)*r12*x14060))+((r11*x14062)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14056*x14060))+((r02*x14055))+((r01*x14063)));
evalcond[5]=((((-1.0)*x14059*x14060))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14054*x14058))+((r22*x14055)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14065 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14065)==0){
continue;
}
IkReal x14064=pow(x14065,-0.5);
CheckValue<IkReal> x14066 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14066.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14066.value));
IkReal gconst37=((-1.0)*r01*x14064);
IkReal gconst38=(r00*x14064);
CheckValue<IkReal> x14067 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14067.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14067.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14070 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14070.valid){
continue;
}
IkReal x14068=((-1.0)*(x14070.value));
IkReal x14069=x14064;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14068;
IkReal gconst36=x14068;
IkReal gconst37=((-1.0)*r01*x14069);
IkReal gconst38=(r00*x14069);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14073 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14073.valid){
continue;
}
IkReal x14071=((-1.0)*(x14073.value));
IkReal x14072=x14064;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14071;
IkReal gconst36=x14071;
IkReal gconst37=((-1.0)*r01*x14072);
IkReal gconst38=(r00*x14072);
CheckValue<IkReal> x14081=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14081.valid){
continue;
}
IkReal x14074=x14081.value;
IkReal x14075=(sj3*x14074);
IkReal x14076=(r11*x14075);
IkReal x14077=(r21*x14075);
IkReal x14078=(r20*x14075);
IkReal x14079=(r10*x14075);
IkReal x14080=(r00*r01*x14075);
j4eval[0]=IKsign((((r21*x14076*(r01*r01)))+((r12*r22*sj3))+((r00*r01*r20*x14076))+((r00*r01*r10*x14077))+((r10*x14078*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14082=gconst38*gconst38;
IkReal x14083=gconst37*gconst37;
IkReal x14084=((1.0)*cj3);
IkReal x14085=(r11*r20);
IkReal x14086=(r10*sj3);
IkReal x14087=(gconst37*gconst38);
IkReal x14088=(r11*sj3);
IkReal x14089=(r21*x14083);
IkReal x14090=(cj3*x14087);
CheckValue<IkReal> x14091 = IKatan2WithCheck(IkReal((((gconst38*r22*x14088))+((gconst37*r22*x14086)))),IkReal(((((-1.0)*sj3*x14082*x14085))+((r21*x14087*x14088))+((x14086*x14089))+(((-1.0)*r20*x14086*x14087)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14091.valid){
continue;
}
CheckValue<IkReal> x14092=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14084*x14089))+(((-1.0)*r12*r22*x14084))+((r10*r21*x14090))+(((-1.0)*r10*r20*x14082*x14084))+((x14085*x14090)))),-1);
if(!x14092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14091.value)+(((1.5707963267949)*(x14092.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14093=IKsin(j4);
IkReal x14094=IKcos(j4);
IkReal x14095=(cj2*sj1);
IkReal x14096=(cj1*sj2);
IkReal x14097=(gconst38*r21);
IkReal x14098=(cj3*r20);
IkReal x14099=(gconst38*r10);
IkReal x14100=(cj3*gconst37);
IkReal x14101=(sj1*sj2);
IkReal x14102=(gconst38*r00);
IkReal x14103=(cj1*cj2);
IkReal x14104=(gconst37*sj3);
IkReal x14105=(gconst38*r20);
IkReal x14106=(gconst38*r01);
IkReal x14107=(gconst38*r11);
IkReal x14108=((1.0)*x14094);
IkReal x14109=((1.0)*x14093);
IkReal x14110=(cj3*x14093);
IkReal x14111=(sj3*x14094);
IkReal x14112=(gconst37*x14093);
IkReal x14113=(x14095+x14096);
evalcond[0]=((((-1.0)*x14105*x14109))+(((-1.0)*r22*x14108))+((r21*x14112)));
evalcond[1]=(((r01*x14112))+(((-1.0)*r02*x14108))+(((-1.0)*x14102*x14109)));
evalcond[2]=((-1.0)+((r11*x14112))+(((-1.0)*x14099*x14109))+(((-1.0)*r12*x14108)));
evalcond[3]=(((sj3*x14107))+(((-1.0)*cj3*x14099*x14108))+((r10*x14104))+((r11*x14094*x14100))+((r12*x14110)));
evalcond[4]=((((-1.0)*r11*x14104*x14108))+((x14099*x14111))+((cj3*x14107))+((r10*x14100))+(((-1.0)*r12*sj3*x14109)));
evalcond[5]=(((r21*x14094*x14100))+((sj3*x14097))+(((-1.0)*gconst38*x14098*x14108))+((r22*x14110))+x14113+((r20*x14104)));
evalcond[6]=(((r02*x14110))+((sj3*x14106))+((r00*x14104))+(((-1.0)*x14101))+(((-1.0)*cj3*x14102*x14108))+x14103+((r01*x14094*x14100)));
evalcond[7]=(((r00*x14100))+((x14102*x14111))+(((-1.0)*r02*sj3*x14109))+((cj3*x14106))+x14113+(((-1.0)*r01*x14104*x14108)));
evalcond[8]=((((-1.0)*r22*sj3*x14109))+(((-1.0)*x14103))+((x14105*x14111))+((gconst37*x14098))+x14101+((cj3*x14097))+(((-1.0)*r21*x14104*x14108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14114=gconst38*gconst38;
IkReal x14115=gconst37*gconst37;
IkReal x14116=(gconst37*r10);
IkReal x14117=(cj3*r22);
IkReal x14118=((1.0)*gconst38);
IkReal x14119=(r21*sj3);
IkReal x14120=(gconst38*r11);
IkReal x14121=(cj3*r20);
IkReal x14122=(cj3*r21);
IkReal x14123=(r20*sj3);
CheckValue<IkReal> x14124 = IKatan2WithCheck(IkReal((((x14116*x14117))+((x14117*x14120)))),IkReal(((((-1.0)*r11*x14114*x14121))+(((-1.0)*x14116*x14118*x14121))+((gconst37*x14120*x14122))+((r10*x14115*x14122)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14124.valid){
continue;
}
CheckValue<IkReal> x14125=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14116*x14118*x14119))+((r12*r22*sj3))+((r10*x14114*x14123))+(((-1.0)*gconst37*r11*x14118*x14123))+((r11*x14115*x14119)))),-1);
if(!x14125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14124.value)+(((1.5707963267949)*(x14125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14126=IKsin(j4);
IkReal x14127=IKcos(j4);
IkReal x14128=(cj2*sj1);
IkReal x14129=(cj1*sj2);
IkReal x14130=(gconst38*r21);
IkReal x14131=(cj3*r20);
IkReal x14132=(gconst38*r10);
IkReal x14133=(cj3*gconst37);
IkReal x14134=(sj1*sj2);
IkReal x14135=(gconst38*r00);
IkReal x14136=(cj1*cj2);
IkReal x14137=(gconst37*sj3);
IkReal x14138=(gconst38*r20);
IkReal x14139=(gconst38*r01);
IkReal x14140=(gconst38*r11);
IkReal x14141=((1.0)*x14127);
IkReal x14142=((1.0)*x14126);
IkReal x14143=(cj3*x14126);
IkReal x14144=(sj3*x14127);
IkReal x14145=(gconst37*x14126);
IkReal x14146=(x14129+x14128);
evalcond[0]=((((-1.0)*r22*x14141))+((r21*x14145))+(((-1.0)*x14138*x14142)));
evalcond[1]=((((-1.0)*x14135*x14142))+((r01*x14145))+(((-1.0)*r02*x14141)));
evalcond[2]=((-1.0)+(((-1.0)*x14132*x14142))+(((-1.0)*r12*x14141))+((r11*x14145)));
evalcond[3]=(((r11*x14127*x14133))+((r10*x14137))+((sj3*x14140))+(((-1.0)*cj3*x14132*x14141))+((r12*x14143)));
evalcond[4]=(((cj3*x14140))+(((-1.0)*r12*sj3*x14142))+(((-1.0)*r11*x14137*x14141))+((r10*x14133))+((x14132*x14144)));
evalcond[5]=(((r20*x14137))+((sj3*x14130))+((r21*x14127*x14133))+(((-1.0)*gconst38*x14131*x14141))+((r22*x14143))+x14146);
evalcond[6]=((((-1.0)*cj3*x14135*x14141))+(((-1.0)*x14134))+((r02*x14143))+((sj3*x14139))+x14136+((r01*x14127*x14133))+((r00*x14137)));
evalcond[7]=((((-1.0)*r01*x14137*x14141))+(((-1.0)*r02*sj3*x14142))+x14146+((x14135*x14144))+((cj3*x14139))+((r00*x14133)));
evalcond[8]=(((x14138*x14144))+(((-1.0)*x14136))+(((-1.0)*r22*sj3*x14142))+(((-1.0)*r21*x14137*x14141))+((gconst37*x14131))+x14134+((cj3*x14130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14147=((1.0)*gconst38);
CheckValue<IkReal> x14148=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14147)))),-1);
if(!x14148.valid){
continue;
}
CheckValue<IkReal> x14149 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14147))+((gconst37*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14149.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14148.value)))+(x14149.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14150=IKsin(j4);
IkReal x14151=IKcos(j4);
IkReal x14152=(cj2*sj1);
IkReal x14153=(cj1*sj2);
IkReal x14154=(gconst38*r21);
IkReal x14155=(cj3*r20);
IkReal x14156=(gconst38*r10);
IkReal x14157=(cj3*gconst37);
IkReal x14158=(sj1*sj2);
IkReal x14159=(gconst38*r00);
IkReal x14160=(cj1*cj2);
IkReal x14161=(gconst37*sj3);
IkReal x14162=(gconst38*r20);
IkReal x14163=(gconst38*r01);
IkReal x14164=(gconst38*r11);
IkReal x14165=((1.0)*x14151);
IkReal x14166=((1.0)*x14150);
IkReal x14167=(cj3*x14150);
IkReal x14168=(sj3*x14151);
IkReal x14169=(gconst37*x14150);
IkReal x14170=(x14152+x14153);
evalcond[0]=((((-1.0)*r22*x14165))+(((-1.0)*x14162*x14166))+((r21*x14169)));
evalcond[1]=((((-1.0)*r02*x14165))+((r01*x14169))+(((-1.0)*x14159*x14166)));
evalcond[2]=((-1.0)+(((-1.0)*x14156*x14166))+(((-1.0)*r12*x14165))+((r11*x14169)));
evalcond[3]=(((r10*x14161))+(((-1.0)*cj3*x14156*x14165))+((sj3*x14164))+((r12*x14167))+((r11*x14151*x14157)));
evalcond[4]=(((cj3*x14164))+((r10*x14157))+(((-1.0)*r11*x14161*x14165))+(((-1.0)*r12*sj3*x14166))+((x14156*x14168)));
evalcond[5]=(((sj3*x14154))+(((-1.0)*gconst38*x14155*x14165))+((r21*x14151*x14157))+((r22*x14167))+x14170+((r20*x14161)));
evalcond[6]=(((sj3*x14163))+(((-1.0)*cj3*x14159*x14165))+((r02*x14167))+((r00*x14161))+((r01*x14151*x14157))+x14160+(((-1.0)*x14158)));
evalcond[7]=(((cj3*x14163))+((x14159*x14168))+(((-1.0)*r02*sj3*x14166))+((r00*x14157))+x14170+(((-1.0)*r01*x14161*x14165)));
evalcond[8]=(((cj3*x14154))+(((-1.0)*r21*x14161*x14165))+((x14162*x14168))+(((-1.0)*r22*sj3*x14166))+((gconst37*x14155))+x14158+(((-1.0)*x14160)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14172 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14172)==0){
continue;
}
IkReal x14171=pow(x14172,-0.5);
CheckValue<IkReal> x14173 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14173.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14173.value))));
IkReal gconst40=((1.0)*r01*x14171);
IkReal gconst41=((-1.0)*r00*x14171);
CheckValue<IkReal> x14174 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14174.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14174.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14177 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14177.valid){
continue;
}
IkReal x14175=((1.0)*(x14177.value));
IkReal x14176=x14171;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14175)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14175)));
IkReal gconst40=((1.0)*r01*x14176);
IkReal gconst41=((-1.0)*r00*x14176);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14180 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14180.valid){
continue;
}
IkReal x14178=((1.0)*(x14180.value));
IkReal x14179=x14171;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14178)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14178)));
IkReal gconst40=((1.0)*r01*x14179);
IkReal gconst41=((-1.0)*r00*x14179);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14181=gconst41*gconst41;
IkReal x14182=gconst40*gconst40;
IkReal x14183=(gconst40*r10);
IkReal x14184=(r22*sj3);
IkReal x14185=(r11*sj3);
IkReal x14186=((1.0)*cj3);
IkReal x14187=(gconst41*r21);
IkReal x14188=(gconst41*r20);
IkReal x14189=(r21*x14182);
IkReal x14190=((1.0)*r20*x14181);
CheckValue<IkReal> x14191=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22*x14186))+((cj3*x14183*x14187))+(((-1.0)*r11*x14186*x14189))+((cj3*gconst40*r11*x14188))+(((-1.0)*r10*r20*x14181*x14186)))),-1);
if(!x14191.valid){
continue;
}
CheckValue<IkReal> x14192 = IKatan2WithCheck(IkReal((((gconst41*r11*x14184))+((x14183*x14184)))),IkReal(((((-1.0)*sj3*x14183*x14188))+((r10*sj3*x14189))+(((-1.0)*x14185*x14190))+((gconst40*x14185*x14187)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14191.value)))+(x14192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14193=IKsin(j4);
IkReal x14194=IKcos(j4);
IkReal x14195=(cj2*sj1);
IkReal x14196=(cj1*sj2);
IkReal x14197=(gconst40*sj3);
IkReal x14198=(gconst41*sj3);
IkReal x14199=(gconst41*r20);
IkReal x14200=(cj3*gconst41);
IkReal x14201=(sj1*sj2);
IkReal x14202=(cj1*cj2);
IkReal x14203=(cj3*gconst40);
IkReal x14204=((1.0)*x14194);
IkReal x14205=((1.0)*x14193);
IkReal x14206=(cj3*x14193);
IkReal x14207=(gconst40*x14193);
IkReal x14208=(x14195+x14196);
IkReal x14209=(x14194*x14203);
evalcond[0]=((((-1.0)*x14199*x14205))+((r21*x14207))+(((-1.0)*r22*x14204)));
evalcond[1]=((((-1.0)*gconst41*r00*x14205))+(((-1.0)*r02*x14204))+((r01*x14207)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14205))+(((-1.0)*r12*x14204))+((r11*x14207)));
evalcond[3]=(((r10*x14197))+((r11*x14198))+(((-1.0)*r10*x14200*x14204))+((r12*x14206))+((r11*x14209)));
evalcond[4]=((((-1.0)*r11*x14197*x14204))+((r10*x14194*x14198))+((r10*x14203))+(((-1.0)*r12*sj3*x14205))+((r11*x14200)));
evalcond[5]=((((-1.0)*cj3*x14199*x14204))+((r21*x14209))+((r22*x14206))+((r21*x14198))+x14208+((r20*x14197)));
evalcond[6]=(((r02*x14206))+((r01*x14198))+((r01*x14209))+(((-1.0)*x14201))+((r00*x14197))+(((-1.0)*r00*x14200*x14204))+x14202);
evalcond[7]=((((-1.0)*r01*x14197*x14204))+((r00*x14194*x14198))+(((-1.0)*r02*sj3*x14205))+((r00*x14203))+((r01*x14200))+x14208);
evalcond[8]=(((r20*x14194*x14198))+(((-1.0)*r21*x14197*x14204))+((r20*x14203))+((r21*x14200))+(((-1.0)*x14202))+(((-1.0)*r22*sj3*x14205))+x14201);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14210=((1.0)*gconst41);
CheckValue<IkReal> x14211 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14210))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14211.valid){
continue;
}
CheckValue<IkReal> x14212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14210))+(((-1.0)*gconst40*r20)))),-1);
if(!x14212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14211.value)+(((1.5707963267949)*(x14212.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14213=IKsin(j4);
IkReal x14214=IKcos(j4);
IkReal x14215=(cj2*sj1);
IkReal x14216=(cj1*sj2);
IkReal x14217=(gconst40*sj3);
IkReal x14218=(gconst41*sj3);
IkReal x14219=(gconst41*r20);
IkReal x14220=(cj3*gconst41);
IkReal x14221=(sj1*sj2);
IkReal x14222=(cj1*cj2);
IkReal x14223=(cj3*gconst40);
IkReal x14224=((1.0)*x14214);
IkReal x14225=((1.0)*x14213);
IkReal x14226=(cj3*x14213);
IkReal x14227=(gconst40*x14213);
IkReal x14228=(x14216+x14215);
IkReal x14229=(x14214*x14223);
evalcond[0]=((((-1.0)*x14219*x14225))+((r21*x14227))+(((-1.0)*r22*x14224)));
evalcond[1]=((((-1.0)*gconst41*r00*x14225))+(((-1.0)*r02*x14224))+((r01*x14227)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14224))+((r11*x14227))+(((-1.0)*gconst41*r10*x14225)));
evalcond[3]=(((r11*x14218))+((r10*x14217))+(((-1.0)*r10*x14220*x14224))+((r11*x14229))+((r12*x14226)));
evalcond[4]=(((r10*x14214*x14218))+((r10*x14223))+(((-1.0)*r12*sj3*x14225))+((r11*x14220))+(((-1.0)*r11*x14217*x14224)));
evalcond[5]=(((r22*x14226))+((r21*x14229))+(((-1.0)*cj3*x14219*x14224))+((r21*x14218))+((r20*x14217))+x14228);
evalcond[6]=(((r02*x14226))+((r01*x14218))+(((-1.0)*r00*x14220*x14224))+((r00*x14217))+(((-1.0)*x14221))+((r01*x14229))+x14222);
evalcond[7]=(((r00*x14214*x14218))+(((-1.0)*r01*x14217*x14224))+((r00*x14223))+(((-1.0)*r02*sj3*x14225))+((r01*x14220))+x14228);
evalcond[8]=((((-1.0)*r21*x14217*x14224))+((r20*x14223))+((r20*x14214*x14218))+((r21*x14220))+(((-1.0)*x14222))+x14221+(((-1.0)*r22*sj3*x14225)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14230 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14230.valid){
continue;
}
CheckValue<IkReal> x14231=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14230.value)+(((1.5707963267949)*(x14231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14232=IKsin(j4);
IkReal x14233=IKcos(j4);
IkReal x14234=(cj2*sj1);
IkReal x14235=(cj1*sj2);
IkReal x14236=(gconst40*sj3);
IkReal x14237=(gconst41*sj3);
IkReal x14238=(gconst41*r20);
IkReal x14239=(cj3*gconst41);
IkReal x14240=(sj1*sj2);
IkReal x14241=(cj1*cj2);
IkReal x14242=(cj3*gconst40);
IkReal x14243=((1.0)*x14233);
IkReal x14244=((1.0)*x14232);
IkReal x14245=(cj3*x14232);
IkReal x14246=(gconst40*x14232);
IkReal x14247=(x14235+x14234);
IkReal x14248=(x14233*x14242);
evalcond[0]=(((r21*x14246))+(((-1.0)*x14238*x14244))+(((-1.0)*r22*x14243)));
evalcond[1]=((((-1.0)*gconst41*r00*x14244))+((r01*x14246))+(((-1.0)*r02*x14243)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14244))+((r11*x14246))+(((-1.0)*r12*x14243)));
evalcond[3]=(((r10*x14236))+((r12*x14245))+((r11*x14248))+(((-1.0)*r10*x14239*x14243))+((r11*x14237)));
evalcond[4]=(((r10*x14233*x14237))+(((-1.0)*r11*x14236*x14243))+((r10*x14242))+((r11*x14239))+(((-1.0)*r12*sj3*x14244)));
evalcond[5]=(((r21*x14248))+((r20*x14236))+((r21*x14237))+(((-1.0)*cj3*x14238*x14243))+x14247+((r22*x14245)));
evalcond[6]=((((-1.0)*x14240))+((r02*x14245))+(((-1.0)*r00*x14239*x14243))+((r01*x14237))+((r00*x14236))+((r01*x14248))+x14241);
evalcond[7]=((((-1.0)*r01*x14236*x14243))+(((-1.0)*r02*sj3*x14244))+((r00*x14233*x14237))+((r01*x14239))+x14247+((r00*x14242)));
evalcond[8]=((((-1.0)*r22*sj3*x14244))+(((-1.0)*x14241))+((r21*x14239))+((r20*x14242))+(((-1.0)*r21*x14236*x14243))+((r20*x14233*x14237))+x14240);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14249=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14249);
rxp1_1=(px*r21);
rxp1_2=(r11*x14249);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14250=(r11*sj5);
IkReal x14251=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14251))+x14250);
j4eval[1]=(((cj3*x14250))+(((-1.0)*cj3*x14251)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14252=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14252);
rxp1_1=(px*r21);
rxp1_2=(r11*x14252);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14253=(cj5*r10);
IkReal x14254=(r11*sj5);
j4eval[0]=(x14254+(((-1.0)*x14253)));
j4eval[1]=((((-1.0)*sj3*x14254))+((sj3*x14253)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14255=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14255);
rxp1_1=(px*r21);
rxp1_2=(r11*x14255);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14256=((1.0)*r10);
CheckValue<IkReal> x14257=IKPowWithIntegerCheck(cj3,-1);
if(!x14257.valid){
continue;
}
CheckValue<IkReal> x14258=IKPowWithIntegerCheck(r02,-1);
if(!x14258.valid){
continue;
}
CheckValue<IkReal> x14259=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14256))),-1);
if(!x14259.valid){
continue;
}
if( IKabs(((x14257.value)*(x14258.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14259.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14256)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14257.value)*(x14258.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14259.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14256))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14257.value)*(x14258.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14259.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14256))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14260=IKsin(j4);
IkReal x14261=IKcos(j4);
IkReal x14262=(cj2*sj1);
IkReal x14263=(cj1*sj2);
IkReal x14264=(cj5*r10);
IkReal x14265=(sj1*sj2);
IkReal x14266=(cj5*sj3);
IkReal x14267=(r11*sj5);
IkReal x14268=(cj3*sj5);
IkReal x14269=(r21*sj5);
IkReal x14270=(cj1*cj2);
IkReal x14271=(cj3*cj5);
IkReal x14272=(sj3*sj5);
IkReal x14273=((1.0)*x14260);
IkReal x14274=(r20*x14261);
IkReal x14275=(cj3*x14261);
IkReal x14276=(sj3*x14261);
IkReal x14277=(x14262+x14263);
evalcond[0]=((-1.0)*r02*x14261);
evalcond[1]=((((-1.0)*cj5*r20*x14273))+((x14260*x14269)));
evalcond[2]=((((-1.0)*x14265))+((cj3*r02*x14260))+x14270);
evalcond[3]=((((-1.0)*r02*sj3*x14273))+x14277);
evalcond[4]=((-1.0)+(((-1.0)*x14264*x14273))+((x14260*x14267)));
evalcond[5]=((((-1.0)*x14264*x14275))+((x14267*x14275))+((r11*x14266))+((r10*x14272)));
evalcond[6]=(((r11*x14271))+(((-1.0)*x14267*x14276))+((x14264*x14276))+((r10*x14268)));
evalcond[7]=((((-1.0)*x14271*x14274))+((r21*x14266))+((r20*x14272))+((r21*x14261*x14268))+x14277);
evalcond[8]=((((-1.0)*x14270))+(((-1.0)*x14269*x14276))+((x14266*x14274))+((r21*x14271))+((r20*x14268))+x14265);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14278=(cj5*r10);
IkReal x14279=((1.0)*r11);
CheckValue<IkReal> x14280=IKPowWithIntegerCheck(((((-1.0)*x14278))+((r11*sj5))),-1);
if(!x14280.valid){
continue;
}
CheckValue<IkReal> x14281=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14279))+((sj3*x14278))),-1);
if(!x14281.valid){
continue;
}
if( IKabs(x14280.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14281.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14279)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14280.value)+IKsqr(((x14281.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14279))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14280.value, ((x14281.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14279))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14282=IKsin(j4);
IkReal x14283=IKcos(j4);
IkReal x14284=(cj2*sj1);
IkReal x14285=(cj1*sj2);
IkReal x14286=(cj5*r10);
IkReal x14287=(sj1*sj2);
IkReal x14288=(cj5*sj3);
IkReal x14289=(r11*sj5);
IkReal x14290=(cj3*sj5);
IkReal x14291=(r21*sj5);
IkReal x14292=(cj1*cj2);
IkReal x14293=(cj3*cj5);
IkReal x14294=(sj3*sj5);
IkReal x14295=((1.0)*x14282);
IkReal x14296=(r20*x14283);
IkReal x14297=(cj3*x14283);
IkReal x14298=(sj3*x14283);
IkReal x14299=(x14284+x14285);
evalcond[0]=((-1.0)*r02*x14283);
evalcond[1]=(((x14282*x14291))+(((-1.0)*cj5*r20*x14295)));
evalcond[2]=(((cj3*r02*x14282))+(((-1.0)*x14287))+x14292);
evalcond[3]=((((-1.0)*r02*sj3*x14295))+x14299);
evalcond[4]=((-1.0)+((x14282*x14289))+(((-1.0)*x14286*x14295)));
evalcond[5]=(((x14289*x14297))+(((-1.0)*x14286*x14297))+((r10*x14294))+((r11*x14288)));
evalcond[6]=(((x14286*x14298))+(((-1.0)*x14289*x14298))+((r10*x14290))+((r11*x14293)));
evalcond[7]=(((r20*x14294))+((r21*x14288))+((r21*x14283*x14290))+x14299+(((-1.0)*x14293*x14296)));
evalcond[8]=(((r20*x14290))+((r21*x14293))+(((-1.0)*x14291*x14298))+(((-1.0)*x14292))+((x14288*x14296))+x14287);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14300=((1.0)*r10);
IkReal x14301=(r11*sj5);
CheckValue<IkReal> x14302=IKPowWithIntegerCheck(((((-1.0)*cj5*x14300))+x14301),-1);
if(!x14302.valid){
continue;
}
CheckValue<IkReal> x14303=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x14300))+((cj3*x14301))),-1);
if(!x14303.valid){
continue;
}
if( IKabs(x14302.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14303.value)*(((((-1.0)*sj3*sj5*x14300))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14302.value)+IKsqr(((x14303.value)*(((((-1.0)*sj3*sj5*x14300))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14302.value, ((x14303.value)*(((((-1.0)*sj3*sj5*x14300))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14304=IKsin(j4);
IkReal x14305=IKcos(j4);
IkReal x14306=(cj2*sj1);
IkReal x14307=(cj1*sj2);
IkReal x14308=(cj5*r10);
IkReal x14309=(sj1*sj2);
IkReal x14310=(cj5*sj3);
IkReal x14311=(r11*sj5);
IkReal x14312=(cj3*sj5);
IkReal x14313=(r21*sj5);
IkReal x14314=(cj1*cj2);
IkReal x14315=(cj3*cj5);
IkReal x14316=(sj3*sj5);
IkReal x14317=((1.0)*x14304);
IkReal x14318=(r20*x14305);
IkReal x14319=(cj3*x14305);
IkReal x14320=(sj3*x14305);
IkReal x14321=(x14307+x14306);
evalcond[0]=((-1.0)*r02*x14305);
evalcond[1]=((((-1.0)*cj5*r20*x14317))+((x14304*x14313)));
evalcond[2]=(((cj3*r02*x14304))+(((-1.0)*x14309))+x14314);
evalcond[3]=((((-1.0)*r02*sj3*x14317))+x14321);
evalcond[4]=((-1.0)+(((-1.0)*x14308*x14317))+((x14304*x14311)));
evalcond[5]=(((r11*x14310))+((x14311*x14319))+(((-1.0)*x14308*x14319))+((r10*x14316)));
evalcond[6]=(((r11*x14315))+((x14308*x14320))+(((-1.0)*x14311*x14320))+((r10*x14312)));
evalcond[7]=(((r21*x14305*x14312))+((r20*x14316))+((r21*x14310))+x14321+(((-1.0)*x14315*x14318)));
evalcond[8]=((((-1.0)*x14314))+((r20*x14312))+(((-1.0)*x14313*x14320))+((r21*x14315))+x14309+((x14310*x14318)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14322=cj5*cj5;
IkReal x14323=((1.0)*cj3);
IkReal x14324=(r10*r21);
IkReal x14325=(cj5*sj5);
IkReal x14326=(r11*r21);
IkReal x14327=(r11*r20);
IkReal x14328=(r22*sj3);
IkReal x14329=(r10*r20);
IkReal x14330=((1.0)*sj3*x14322);
CheckValue<IkReal> x14331 = IKatan2WithCheck(IkReal((((r10*sj5*x14328))+((cj5*r11*x14328)))),IkReal(((((-1.0)*sj3*x14325*x14329))+(((-1.0)*x14327*x14330))+(((-1.0)*x14324*x14330))+((sj3*x14324))+((sj3*x14325*x14326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14331.valid){
continue;
}
CheckValue<IkReal> x14332=IKPowWithIntegerCheck(IKsign((((cj3*x14325*x14327))+((cj3*x14324*x14325))+(((-1.0)*x14322*x14323*x14329))+(((-1.0)*r12*r22*x14323))+(((-1.0)*x14323*x14326))+((cj3*x14322*x14326)))),-1);
if(!x14332.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14331.value)+(((1.5707963267949)*(x14332.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14333=IKsin(j4);
IkReal x14334=IKcos(j4);
IkReal x14335=(cj2*sj1);
IkReal x14336=(cj1*sj2);
IkReal x14337=(cj5*sj3);
IkReal x14338=(cj5*r10);
IkReal x14339=(r00*sj5);
IkReal x14340=(sj1*sj2);
IkReal x14341=(r11*sj5);
IkReal x14342=(cj3*cj5);
IkReal x14343=(cj3*sj5);
IkReal x14344=(r21*sj5);
IkReal x14345=(cj1*cj2);
IkReal x14346=(sj3*sj5);
IkReal x14347=(r01*sj5);
IkReal x14348=((1.0)*x14334);
IkReal x14349=((1.0)*x14333);
IkReal x14350=(cj3*x14333);
IkReal x14351=(cj3*x14334);
IkReal x14352=(x14335+x14336);
evalcond[0]=(((x14333*x14344))+(((-1.0)*r22*x14348))+(((-1.0)*cj5*r20*x14349)));
evalcond[1]=(((x14333*x14347))+(((-1.0)*cj5*r00*x14349))+(((-1.0)*r02*x14348)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14348))+((x14333*x14341))+(((-1.0)*x14338*x14349)));
evalcond[3]=(((r11*x14337))+((r12*x14350))+((r10*x14346))+((x14341*x14351))+(((-1.0)*cj3*x14338*x14348)));
evalcond[4]=(((r11*x14342))+((r10*x14343))+(((-1.0)*r12*sj3*x14349))+(((-1.0)*sj3*x14341*x14348))+((r10*x14334*x14337)));
evalcond[5]=(((r21*x14334*x14343))+(((-1.0)*r20*x14342*x14348))+((r20*x14346))+((r22*x14350))+x14352+((r21*x14337)));
evalcond[6]=((((-1.0)*r00*x14342*x14348))+((r01*x14334*x14343))+((r02*x14350))+(((-1.0)*x14340))+((r01*x14337))+x14345+((sj3*x14339)));
evalcond[7]=(((r01*x14342))+(((-1.0)*r01*x14346*x14348))+(((-1.0)*r02*sj3*x14349))+x14352+((r00*x14334*x14337))+((cj3*x14339)));
evalcond[8]=(((r20*x14334*x14337))+((r21*x14342))+(((-1.0)*x14345))+(((-1.0)*sj3*x14344*x14348))+((r20*x14343))+x14340+(((-1.0)*r22*sj3*x14349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14353=((1.0)*cj5);
CheckValue<IkReal> x14354 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14353)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14354.valid){
continue;
}
CheckValue<IkReal> x14355=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14353))+(((-1.0)*r20*sj5)))),-1);
if(!x14355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14354.value)+(((1.5707963267949)*(x14355.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14356=IKsin(j4);
IkReal x14357=IKcos(j4);
IkReal x14358=(cj2*sj1);
IkReal x14359=(cj1*sj2);
IkReal x14360=(cj5*sj3);
IkReal x14361=(cj5*r10);
IkReal x14362=(r00*sj5);
IkReal x14363=(sj1*sj2);
IkReal x14364=(r11*sj5);
IkReal x14365=(cj3*cj5);
IkReal x14366=(cj3*sj5);
IkReal x14367=(r21*sj5);
IkReal x14368=(cj1*cj2);
IkReal x14369=(sj3*sj5);
IkReal x14370=(r01*sj5);
IkReal x14371=((1.0)*x14357);
IkReal x14372=((1.0)*x14356);
IkReal x14373=(cj3*x14356);
IkReal x14374=(cj3*x14357);
IkReal x14375=(x14358+x14359);
evalcond[0]=(((x14356*x14367))+(((-1.0)*r22*x14371))+(((-1.0)*cj5*r20*x14372)));
evalcond[1]=((((-1.0)*cj5*r00*x14372))+((x14356*x14370))+(((-1.0)*r02*x14371)));
evalcond[2]=((-1.0)+((x14356*x14364))+(((-1.0)*r12*x14371))+(((-1.0)*x14361*x14372)));
evalcond[3]=(((r10*x14369))+((r11*x14360))+((r12*x14373))+((x14364*x14374))+(((-1.0)*cj3*x14361*x14371)));
evalcond[4]=(((r10*x14366))+((r11*x14365))+(((-1.0)*r12*sj3*x14372))+((r10*x14357*x14360))+(((-1.0)*sj3*x14364*x14371)));
evalcond[5]=(((r20*x14369))+((r22*x14373))+((r21*x14360))+(((-1.0)*r20*x14365*x14371))+x14375+((r21*x14357*x14366)));
evalcond[6]=(((sj3*x14362))+((r01*x14357*x14366))+(((-1.0)*x14363))+((r01*x14360))+(((-1.0)*r00*x14365*x14371))+x14368+((r02*x14373)));
evalcond[7]=(((cj3*x14362))+((r00*x14357*x14360))+(((-1.0)*r02*sj3*x14372))+(((-1.0)*r01*x14369*x14371))+((r01*x14365))+x14375);
evalcond[8]=((((-1.0)*sj3*x14367*x14371))+((r20*x14366))+(((-1.0)*x14368))+((r21*x14365))+(((-1.0)*r22*sj3*x14372))+((r20*x14357*x14360))+x14363);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14376 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14376.valid){
continue;
}
CheckValue<IkReal> x14377=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14377.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14376.value)+(((1.5707963267949)*(x14377.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14378=IKsin(j4);
IkReal x14379=IKcos(j4);
IkReal x14380=(cj2*sj1);
IkReal x14381=(cj1*sj2);
IkReal x14382=(cj5*sj3);
IkReal x14383=(cj5*r10);
IkReal x14384=(r00*sj5);
IkReal x14385=(sj1*sj2);
IkReal x14386=(r11*sj5);
IkReal x14387=(cj3*cj5);
IkReal x14388=(cj3*sj5);
IkReal x14389=(r21*sj5);
IkReal x14390=(cj1*cj2);
IkReal x14391=(sj3*sj5);
IkReal x14392=(r01*sj5);
IkReal x14393=((1.0)*x14379);
IkReal x14394=((1.0)*x14378);
IkReal x14395=(cj3*x14378);
IkReal x14396=(cj3*x14379);
IkReal x14397=(x14381+x14380);
evalcond[0]=(((x14378*x14389))+(((-1.0)*cj5*r20*x14394))+(((-1.0)*r22*x14393)));
evalcond[1]=(((x14378*x14392))+(((-1.0)*cj5*r00*x14394))+(((-1.0)*r02*x14393)));
evalcond[2]=((-1.0)+((x14378*x14386))+(((-1.0)*x14383*x14394))+(((-1.0)*r12*x14393)));
evalcond[3]=((((-1.0)*cj3*x14383*x14393))+((x14386*x14396))+((r12*x14395))+((r11*x14382))+((r10*x14391)));
evalcond[4]=((((-1.0)*sj3*x14386*x14393))+((r10*x14388))+((r11*x14387))+(((-1.0)*r12*sj3*x14394))+((r10*x14379*x14382)));
evalcond[5]=(((r21*x14379*x14388))+((r21*x14382))+((r22*x14395))+(((-1.0)*r20*x14387*x14393))+x14397+((r20*x14391)));
evalcond[6]=((((-1.0)*r00*x14387*x14393))+(((-1.0)*x14385))+((r01*x14382))+((r01*x14379*x14388))+((r02*x14395))+x14390+((sj3*x14384)));
evalcond[7]=((((-1.0)*r02*sj3*x14394))+(((-1.0)*r01*x14391*x14393))+((r01*x14387))+((r00*x14379*x14382))+((cj3*x14384))+x14397);
evalcond[8]=(((r20*x14388))+(((-1.0)*x14390))+((r21*x14387))+(((-1.0)*sj3*x14389*x14393))+(((-1.0)*r22*sj3*x14394))+x14385+((r20*x14379*x14382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14398=((-1.0)*r00);
IkReal x14400 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14400)==0){
continue;
}
IkReal x14399=pow(x14400,-0.5);
CheckValue<IkReal> x14401 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14398),IKFAST_ATAN2_MAGTHRESH);
if(!x14401.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14401.value));
IkReal gconst13=(r01*x14399);
IkReal gconst14=(x14398*x14399);
CheckValue<IkReal> x14402 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14402.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14402.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14403=((-1.0)*r00);
IkReal x14404=x14399;
CheckValue<IkReal> x14406 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14403),IKFAST_ATAN2_MAGTHRESH);
if(!x14406.valid){
continue;
}
IkReal x14405=((-1.0)*(x14406.value));
sj5=gconst13;
cj5=gconst14;
j5=x14405;
IkReal gconst12=x14405;
IkReal gconst13=(r01*x14404);
IkReal gconst14=(x14403*x14404);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14407=((1.0)*sj0);
IkReal x14408=((1.0)*cj0);
CheckValue<IkReal> x14409 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14408))+(((-1.0)*r12*x14407)))),IkReal((((cj0*gconst14*r00))+(((-1.0)*gconst13*r11*x14407))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r01*x14408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14409.valid){
continue;
}
CheckValue<IkReal> x14410=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14410.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14409.value)+(((1.5707963267949)*(x14410.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14411=IKsin(j4);
IkReal x14412=IKcos(j4);
IkReal x14413=((1.0)*r22);
IkReal x14414=((1.0)*r12);
IkReal x14415=(gconst13*sj3);
IkReal x14416=(gconst13*r01);
IkReal x14417=(sj1*sj2);
IkReal x14418=(gconst14*sj3);
IkReal x14419=(cj2*sj1);
IkReal x14420=((1.0)*sj0);
IkReal x14421=(cj3*gconst13);
IkReal x14422=(cj3*gconst14);
IkReal x14423=((1.0)*cj0);
IkReal x14424=((1.0)*gconst14);
IkReal x14425=(cj1*sj2);
IkReal x14426=(sj3*x14411);
IkReal x14427=((1.0)*cj1*cj2);
IkReal x14428=(cj3*x14412);
IkReal x14429=(cj3*x14411);
IkReal x14430=(gconst13*x14411);
IkReal x14431=((1.0)*x14412);
IkReal x14432=(x14411*x14424);
evalcond[0]=(((r21*x14430))+(((-1.0)*x14412*x14413))+(((-1.0)*r20*x14432)));
evalcond[1]=((((-1.0)*r10*x14432))+cj0+((r11*x14430))+(((-1.0)*x14412*x14414)));
evalcond[2]=((((-1.0)*r00*x14432))+((x14411*x14416))+(((-1.0)*r02*x14431))+(((-1.0)*x14420)));
evalcond[3]=(((r21*x14418))+((r21*x14412*x14421))+x14425+x14419+((r22*x14429))+(((-1.0)*r20*x14422*x14431))+((r20*x14415)));
evalcond[4]=((((-1.0)*x14413*x14426))+((r20*x14421))+x14417+(((-1.0)*r21*x14415*x14431))+((r20*x14412*x14418))+(((-1.0)*x14427))+((r21*x14422)));
evalcond[5]=(((cj0*x14417))+((r00*x14415))+(((-1.0)*r00*x14422*x14431))+((r01*x14418))+((r02*x14429))+((x14416*x14428))+(((-1.0)*cj1*cj2*x14423)));
evalcond[6]=(((r11*x14418))+((r12*x14429))+((sj0*x14417))+((r11*x14412*x14421))+(((-1.0)*r10*x14422*x14431))+((r10*x14415))+(((-1.0)*cj1*cj2*x14420)));
evalcond[7]=((((-1.0)*x14419*x14423))+(((-1.0)*x14423*x14425))+(((-1.0)*r01*x14415*x14431))+((r00*x14412*x14418))+((r01*x14422))+((r00*x14421))+(((-1.0)*r02*x14426)));
evalcond[8]=((((-1.0)*x14419*x14420))+(((-1.0)*r11*x14415*x14431))+((r11*x14422))+(((-1.0)*x14420*x14425))+((r10*x14421))+(((-1.0)*x14414*x14426))+((r10*x14412*x14418)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14433=((1.0)*gconst14);
CheckValue<IkReal> x14434=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r10))+(((-1.0)*r11*x14433)))),-1);
if(!x14434.valid){
continue;
}
CheckValue<IkReal> x14435 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14433))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14435.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14434.value)))+(x14435.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14436=IKsin(j4);
IkReal x14437=IKcos(j4);
IkReal x14438=((1.0)*r22);
IkReal x14439=((1.0)*r12);
IkReal x14440=(gconst13*sj3);
IkReal x14441=(gconst13*r01);
IkReal x14442=(sj1*sj2);
IkReal x14443=(gconst14*sj3);
IkReal x14444=(cj2*sj1);
IkReal x14445=((1.0)*sj0);
IkReal x14446=(cj3*gconst13);
IkReal x14447=(cj3*gconst14);
IkReal x14448=((1.0)*cj0);
IkReal x14449=((1.0)*gconst14);
IkReal x14450=(cj1*sj2);
IkReal x14451=(sj3*x14436);
IkReal x14452=((1.0)*cj1*cj2);
IkReal x14453=(cj3*x14437);
IkReal x14454=(cj3*x14436);
IkReal x14455=(gconst13*x14436);
IkReal x14456=((1.0)*x14437);
IkReal x14457=(x14436*x14449);
evalcond[0]=((((-1.0)*x14437*x14438))+(((-1.0)*r20*x14457))+((r21*x14455)));
evalcond[1]=(cj0+((r11*x14455))+(((-1.0)*x14437*x14439))+(((-1.0)*r10*x14457)));
evalcond[2]=((((-1.0)*x14445))+(((-1.0)*r00*x14457))+((x14436*x14441))+(((-1.0)*r02*x14456)));
evalcond[3]=(((r20*x14440))+(((-1.0)*r20*x14447*x14456))+x14450+x14444+((r22*x14454))+((r21*x14437*x14446))+((r21*x14443)));
evalcond[4]=((((-1.0)*r21*x14440*x14456))+(((-1.0)*x14452))+(((-1.0)*x14438*x14451))+((r20*x14437*x14443))+((r20*x14446))+x14442+((r21*x14447)));
evalcond[5]=(((r01*x14443))+((r00*x14440))+((x14441*x14453))+(((-1.0)*r00*x14447*x14456))+(((-1.0)*cj1*cj2*x14448))+((r02*x14454))+((cj0*x14442)));
evalcond[6]=(((sj0*x14442))+(((-1.0)*r10*x14447*x14456))+((r12*x14454))+((r10*x14440))+((r11*x14443))+(((-1.0)*cj1*cj2*x14445))+((r11*x14437*x14446)));
evalcond[7]=((((-1.0)*r02*x14451))+(((-1.0)*x14448*x14450))+((r01*x14447))+((r00*x14446))+((r00*x14437*x14443))+(((-1.0)*r01*x14440*x14456))+(((-1.0)*x14444*x14448)));
evalcond[8]=(((r10*x14437*x14443))+(((-1.0)*x14439*x14451))+((r10*x14446))+((r11*x14447))+(((-1.0)*r11*x14440*x14456))+(((-1.0)*x14444*x14445))+(((-1.0)*x14445*x14450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14458=((-1.0)*r01);
IkReal x14460 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14460)==0){
continue;
}
IkReal x14459=pow(x14460,-0.5);
CheckValue<IkReal> x14461 = IKatan2WithCheck(IkReal(x14458),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14461.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14461.value))));
IkReal gconst16=(x14458*x14459);
IkReal gconst17=((1.0)*r00*x14459);
CheckValue<IkReal> x14462 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14462.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14462.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14463=((-1.0)*r01);
CheckValue<IkReal> x14466 = IKatan2WithCheck(IkReal(x14463),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14466.valid){
continue;
}
IkReal x14464=((1.0)*(x14466.value));
IkReal x14465=x14459;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14464)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14464)));
IkReal gconst16=(x14463*x14465);
IkReal gconst17=((1.0)*r00*x14465);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14467=((-1.0)*r01);
CheckValue<IkReal> x14470 = IKatan2WithCheck(IkReal(x14467),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14470.valid){
continue;
}
IkReal x14468=((1.0)*(x14470.value));
IkReal x14469=x14459;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14468)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14468)));
IkReal gconst16=(x14467*x14469);
IkReal gconst17=((1.0)*r00*x14469);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14471=((-1.0)*r01);
CheckValue<IkReal> x14474 = IKatan2WithCheck(IkReal(x14471),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14474.valid){
continue;
}
IkReal x14472=((1.0)*(x14474.value));
IkReal x14473=x14459;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14472)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14472)));
IkReal gconst16=(x14471*x14473);
IkReal gconst17=((1.0)*r00*x14473);
IkReal x14475=r02*r02;
IkReal x14476=(r12*sj0);
IkReal x14477=((1.0)*cj0);
IkReal x14478=x14459;
j4eval[0]=((IKabs(((((-1.0)*x14476))+(((-1.0)*r02*x14477)))))+(IKabs((((cj0*x14475*x14478))+(((-1.0)*x14477*x14478))+((r02*x14476*x14478))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14479=((-1.0)*r01);
CheckValue<IkReal> x14482 = IKatan2WithCheck(IkReal(x14479),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14482.valid){
continue;
}
IkReal x14480=((1.0)*(x14482.value));
IkReal x14481=x14459;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14480)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14480)));
IkReal gconst16=(x14479*x14481);
IkReal gconst17=((1.0)*r00*x14481);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14483=((-1.0)*r01);
CheckValue<IkReal> x14486 = IKatan2WithCheck(IkReal(x14483),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14486.valid){
continue;
}
IkReal x14484=((1.0)*(x14486.value));
IkReal x14485=x14459;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14484)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14484)));
IkReal gconst16=(x14483*x14485);
IkReal gconst17=((1.0)*r00*x14485);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14487=gconst16*gconst16;
IkReal x14488=gconst17*gconst17;
IkReal x14489=(r11*sj3);
IkReal x14490=(cj3*r10);
IkReal x14491=((1.0)*cj3);
IkReal x14492=(r10*sj3);
IkReal x14493=(gconst16*gconst17);
IkReal x14494=(r21*x14487);
IkReal x14495=((1.0)*r20*x14488);
CheckValue<IkReal> x14496=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14490*x14495))+(((-1.0)*r12*r22*x14491))+((cj3*r11*r20*x14493))+((r21*x14490*x14493))+(((-1.0)*r11*x14491*x14494)))),-1);
if(!x14496.valid){
continue;
}
CheckValue<IkReal> x14497 = IKatan2WithCheck(IkReal((((gconst17*r22*x14489))+((gconst16*r22*x14492)))),IkReal((((r21*x14489*x14493))+((x14492*x14494))+(((-1.0)*r20*x14492*x14493))+(((-1.0)*x14489*x14495)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14497.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14496.value)))+(x14497.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14498=IKsin(j4);
IkReal x14499=IKcos(j4);
IkReal x14500=(cj2*sj1);
IkReal x14501=(cj1*sj2);
IkReal x14502=(gconst16*r21);
IkReal x14503=(cj3*gconst17);
IkReal x14504=(gconst16*r20);
IkReal x14505=(sj1*sj2);
IkReal x14506=(gconst17*r20);
IkReal x14507=(gconst17*sj3);
IkReal x14508=(gconst16*r10);
IkReal x14509=(cj1*cj2);
IkReal x14510=(gconst16*sj3);
IkReal x14511=((1.0)*x14499);
IkReal x14512=((1.0)*x14498);
IkReal x14513=(gconst16*x14498);
IkReal x14514=(cj3*x14499);
IkReal x14515=(cj3*x14498);
IkReal x14516=(x14501+x14500);
evalcond[0]=((((-1.0)*r22*x14511))+((x14498*x14502))+(((-1.0)*x14506*x14512)));
evalcond[1]=((((-1.0)*gconst17*r00*x14512))+((r01*x14513))+(((-1.0)*r02*x14511)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14512))+((r11*x14513))+(((-1.0)*r12*x14511)));
evalcond[3]=(((r12*x14515))+(((-1.0)*r10*x14503*x14511))+((sj3*x14508))+((r11*x14507))+((gconst16*r11*x14514)));
evalcond[4]=(((cj3*x14508))+((r10*x14499*x14507))+(((-1.0)*r11*x14510*x14511))+((r11*x14503))+(((-1.0)*r12*sj3*x14512)));
evalcond[5]=(((r22*x14515))+((x14502*x14514))+((r21*x14507))+(((-1.0)*r20*x14503*x14511))+x14516+((sj3*x14504)));
evalcond[6]=((((-1.0)*r00*x14503*x14511))+((r00*x14510))+((gconst16*r01*x14514))+(((-1.0)*x14505))+x14509+((r02*x14515))+((r01*x14507)));
evalcond[7]=(((r00*x14499*x14507))+(((-1.0)*r02*sj3*x14512))+x14516+((r01*x14503))+(((-1.0)*r01*x14510*x14511))+((cj3*gconst16*r00)));
evalcond[8]=(((cj3*x14504))+(((-1.0)*x14509))+(((-1.0)*sj3*x14502*x14511))+((r21*x14503))+x14505+((sj3*x14499*x14506))+(((-1.0)*r22*sj3*x14512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14517=((1.0)*gconst17);
CheckValue<IkReal> x14518 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14517))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14518.valid){
continue;
}
CheckValue<IkReal> x14519=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14517))+(((-1.0)*gconst16*r20)))),-1);
if(!x14519.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14518.value)+(((1.5707963267949)*(x14519.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14520=IKsin(j4);
IkReal x14521=IKcos(j4);
IkReal x14522=(cj2*sj1);
IkReal x14523=(cj1*sj2);
IkReal x14524=(gconst16*r21);
IkReal x14525=(cj3*gconst17);
IkReal x14526=(gconst16*r20);
IkReal x14527=(sj1*sj2);
IkReal x14528=(gconst17*r20);
IkReal x14529=(gconst17*sj3);
IkReal x14530=(gconst16*r10);
IkReal x14531=(cj1*cj2);
IkReal x14532=(gconst16*sj3);
IkReal x14533=((1.0)*x14521);
IkReal x14534=((1.0)*x14520);
IkReal x14535=(gconst16*x14520);
IkReal x14536=(cj3*x14521);
IkReal x14537=(cj3*x14520);
IkReal x14538=(x14523+x14522);
evalcond[0]=(((x14520*x14524))+(((-1.0)*r22*x14533))+(((-1.0)*x14528*x14534)));
evalcond[1]=(((r01*x14535))+(((-1.0)*gconst17*r00*x14534))+(((-1.0)*r02*x14533)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14534))+(((-1.0)*r12*x14533))+((r11*x14535)));
evalcond[3]=((((-1.0)*r10*x14525*x14533))+((r12*x14537))+((r11*x14529))+((sj3*x14530))+((gconst16*r11*x14536)));
evalcond[4]=((((-1.0)*r12*sj3*x14534))+((cj3*x14530))+((r11*x14525))+((r10*x14521*x14529))+(((-1.0)*r11*x14532*x14533)));
evalcond[5]=(((sj3*x14526))+((r22*x14537))+x14538+((r21*x14529))+(((-1.0)*r20*x14525*x14533))+((x14524*x14536)));
evalcond[6]=((((-1.0)*x14527))+((r02*x14537))+((r01*x14529))+((r00*x14532))+x14531+((gconst16*r01*x14536))+(((-1.0)*r00*x14525*x14533)));
evalcond[7]=((((-1.0)*r02*sj3*x14534))+((r01*x14525))+((r00*x14521*x14529))+x14538+((cj3*gconst16*r00))+(((-1.0)*r01*x14532*x14533)));
evalcond[8]=((((-1.0)*x14531))+((cj3*x14526))+((sj3*x14521*x14528))+x14527+((r21*x14525))+(((-1.0)*r22*sj3*x14534))+(((-1.0)*sj3*x14524*x14533)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14539=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14539.valid){
continue;
}
CheckValue<IkReal> x14540 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14540.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14539.value)))+(x14540.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14541=IKsin(j4);
IkReal x14542=IKcos(j4);
IkReal x14543=(cj2*sj1);
IkReal x14544=(cj1*sj2);
IkReal x14545=(gconst16*r21);
IkReal x14546=(cj3*gconst17);
IkReal x14547=(gconst16*r20);
IkReal x14548=(sj1*sj2);
IkReal x14549=(gconst17*r20);
IkReal x14550=(gconst17*sj3);
IkReal x14551=(gconst16*r10);
IkReal x14552=(cj1*cj2);
IkReal x14553=(gconst16*sj3);
IkReal x14554=((1.0)*x14542);
IkReal x14555=((1.0)*x14541);
IkReal x14556=(gconst16*x14541);
IkReal x14557=(cj3*x14542);
IkReal x14558=(cj3*x14541);
IkReal x14559=(x14543+x14544);
evalcond[0]=(((x14541*x14545))+(((-1.0)*r22*x14554))+(((-1.0)*x14549*x14555)));
evalcond[1]=((((-1.0)*r02*x14554))+((r01*x14556))+(((-1.0)*gconst17*r00*x14555)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14555))+(((-1.0)*r12*x14554))+((r11*x14556)));
evalcond[3]=(((sj3*x14551))+(((-1.0)*r10*x14546*x14554))+((r12*x14558))+((gconst16*r11*x14557))+((r11*x14550)));
evalcond[4]=(((r11*x14546))+((r10*x14542*x14550))+(((-1.0)*r11*x14553*x14554))+((cj3*x14551))+(((-1.0)*r12*sj3*x14555)));
evalcond[5]=(((x14545*x14557))+x14559+((sj3*x14547))+(((-1.0)*r20*x14546*x14554))+((r22*x14558))+((r21*x14550)));
evalcond[6]=(((gconst16*r01*x14557))+(((-1.0)*x14548))+((r02*x14558))+(((-1.0)*r00*x14546*x14554))+x14552+((r01*x14550))+((r00*x14553)));
evalcond[7]=(((r01*x14546))+(((-1.0)*r01*x14553*x14554))+((r00*x14542*x14550))+x14559+(((-1.0)*r02*sj3*x14555))+((cj3*gconst16*r00)));
evalcond[8]=(((sj3*x14542*x14549))+(((-1.0)*r22*sj3*x14555))+((cj3*x14547))+((r21*x14546))+x14548+(((-1.0)*x14552))+(((-1.0)*sj3*x14545*x14554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14560=((-1.0)*r01);
CheckValue<IkReal> x14563 = IKatan2WithCheck(IkReal(x14560),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14563.valid){
continue;
}
IkReal x14561=((1.0)*(x14563.value));
IkReal x14562=x14459;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14561)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14561)));
IkReal gconst16=(x14560*x14562);
IkReal gconst17=((1.0)*r00*x14562);
IkReal x14564=r02*r02;
IkReal x14565=(r12*sj0);
IkReal x14566=((1.0)*cj0);
IkReal x14567=x14459;
j4eval[0]=((IKabs(((((-1.0)*r02*x14566))+(((-1.0)*x14565)))))+(IKabs((((cj0*x14564*x14567))+((r02*x14565*x14567))+(((-1.0)*x14566*x14567))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14568=((1.0)*r12);
IkReal x14569=(sj1*sj2);
IkReal x14570=(cj1*cj2);
IkReal x14571=((1.0)*sj3);
IkReal x14572=(gconst16*r21);
IkReal x14573=(cj3*gconst16*r20);
IkReal x14574=(gconst17*r20*sj3);
IkReal x14575=(cj3*gconst17*r21);
CheckValue<IkReal> x14576=IKPowWithIntegerCheck(((((-1.0)*r10*r20*x14571*(gconst17*gconst17)))+((gconst17*r10*sj3*x14572))+(((-1.0)*gconst16*r11*x14571*x14572))+((gconst16*r11*x14574))),-1);
if(!x14576.valid){
continue;
}
CheckValue<IkReal> x14577=IKPowWithIntegerCheck(((((-1.0)*x14571*x14572))+x14574),-1);
if(!x14577.valid){
continue;
}
if( IKabs(((x14576.value)*((((cj0*sj3*x14572))+(((-1.0)*x14568*x14575))+(((-1.0)*x14568*x14573))+((r12*x14570))+(((-1.0)*x14568*x14569))+(((-1.0)*cj0*gconst17*r20*x14571)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14577.value)*((x14570+(((-1.0)*x14569))+(((-1.0)*x14573))+(((-1.0)*x14575)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14576.value)*((((cj0*sj3*x14572))+(((-1.0)*x14568*x14575))+(((-1.0)*x14568*x14573))+((r12*x14570))+(((-1.0)*x14568*x14569))+(((-1.0)*cj0*gconst17*r20*x14571))))))+IKsqr(((x14577.value)*((x14570+(((-1.0)*x14569))+(((-1.0)*x14573))+(((-1.0)*x14575))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14576.value)*((((cj0*sj3*x14572))+(((-1.0)*x14568*x14575))+(((-1.0)*x14568*x14573))+((r12*x14570))+(((-1.0)*x14568*x14569))+(((-1.0)*cj0*gconst17*r20*x14571))))), ((x14577.value)*((x14570+(((-1.0)*x14569))+(((-1.0)*x14573))+(((-1.0)*x14575))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14578=IKsin(j4);
IkReal x14579=IKcos(j4);
IkReal x14580=((1.0)*gconst17);
IkReal x14581=(gconst17*sj3);
IkReal x14582=(gconst16*r21);
IkReal x14583=(cj3*gconst17);
IkReal x14584=(sj1*sj2);
IkReal x14585=((1.0)*sj0);
IkReal x14586=(gconst16*sj3);
IkReal x14587=(cj3*gconst16);
IkReal x14588=(cj2*sj1);
IkReal x14589=((1.0)*cj0);
IkReal x14590=((1.0)*sj3);
IkReal x14591=(cj1*sj2);
IkReal x14592=(cj3*x14579);
IkReal x14593=(gconst16*x14578);
IkReal x14594=((1.0)*x14579);
IkReal x14595=((1.0)*cj1*cj2);
IkReal x14596=(r02*x14578);
IkReal x14597=(r12*x14578);
evalcond[0]=(((x14578*x14582))+(((-1.0)*r20*x14578*x14580)));
evalcond[1]=(cj0+(((-1.0)*r10*x14578*x14580))+(((-1.0)*r12*x14594))+((r11*x14593)));
evalcond[2]=((((-1.0)*r02*x14594))+(((-1.0)*r00*x14578*x14580))+(((-1.0)*x14585))+((r01*x14593)));
evalcond[3]=(((r20*x14586))+((x14582*x14592))+((r21*x14581))+x14588+x14591+(((-1.0)*r20*x14580*x14592)));
evalcond[4]=(((r20*x14587))+(((-1.0)*x14595))+(((-1.0)*x14579*x14582*x14590))+((r21*x14583))+x14584+((r20*x14579*x14581)));
evalcond[5]=(((cj3*x14596))+(((-1.0)*r00*x14580*x14592))+((r01*x14579*x14587))+(((-1.0)*cj1*cj2*x14589))+((r00*x14586))+((r01*x14581))+((cj0*x14584)));
evalcond[6]=(((cj3*x14597))+((sj0*x14584))+((r11*x14579*x14587))+(((-1.0)*cj1*cj2*x14585))+(((-1.0)*r10*x14580*x14592))+((r10*x14586))+((r11*x14581)));
evalcond[7]=((((-1.0)*x14588*x14589))+(((-1.0)*r01*x14586*x14594))+((r00*x14587))+(((-1.0)*x14589*x14591))+((r01*x14583))+(((-1.0)*x14590*x14596))+((r00*x14579*x14581)));
evalcond[8]=(((r10*x14579*x14581))+((r10*x14587))+(((-1.0)*x14585*x14588))+(((-1.0)*x14585*x14591))+((r11*x14583))+(((-1.0)*r11*x14586*x14594))+(((-1.0)*x14590*x14597)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14598=((1.0)*sj0);
IkReal x14599=((1.0)*cj0);
CheckValue<IkReal> x14600=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14600.valid){
continue;
}
CheckValue<IkReal> x14601 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14599))+(((-1.0)*r12*x14598)))),IkReal(((((-1.0)*gconst16*r01*x14599))+(((-1.0)*gconst16*r11*x14598))+((cj0*gconst17*r00))+((gconst17*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14601.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14600.value)))+(x14601.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14602=IKsin(j4);
IkReal x14603=IKcos(j4);
IkReal x14604=((1.0)*gconst17);
IkReal x14605=(gconst17*sj3);
IkReal x14606=(gconst16*r21);
IkReal x14607=(cj3*gconst17);
IkReal x14608=(sj1*sj2);
IkReal x14609=((1.0)*sj0);
IkReal x14610=(gconst16*sj3);
IkReal x14611=(cj3*gconst16);
IkReal x14612=(cj2*sj1);
IkReal x14613=((1.0)*cj0);
IkReal x14614=((1.0)*sj3);
IkReal x14615=(cj1*sj2);
IkReal x14616=(cj3*x14603);
IkReal x14617=(gconst16*x14602);
IkReal x14618=((1.0)*x14603);
IkReal x14619=((1.0)*cj1*cj2);
IkReal x14620=(r02*x14602);
IkReal x14621=(r12*x14602);
evalcond[0]=(((x14602*x14606))+(((-1.0)*r20*x14602*x14604)));
evalcond[1]=(cj0+(((-1.0)*r12*x14618))+((r11*x14617))+(((-1.0)*r10*x14602*x14604)));
evalcond[2]=((((-1.0)*r00*x14602*x14604))+((r01*x14617))+(((-1.0)*r02*x14618))+(((-1.0)*x14609)));
evalcond[3]=(((x14606*x14616))+((r21*x14605))+(((-1.0)*r20*x14604*x14616))+x14615+x14612+((r20*x14610)));
evalcond[4]=(((r20*x14603*x14605))+((r21*x14607))+(((-1.0)*x14603*x14606*x14614))+x14608+(((-1.0)*x14619))+((r20*x14611)));
evalcond[5]=(((r01*x14603*x14611))+((cj3*x14620))+((cj0*x14608))+((r01*x14605))+(((-1.0)*cj1*cj2*x14613))+((r00*x14610))+(((-1.0)*r00*x14604*x14616)));
evalcond[6]=(((sj0*x14608))+((r10*x14610))+((cj3*x14621))+(((-1.0)*cj1*cj2*x14609))+((r11*x14605))+(((-1.0)*r10*x14604*x14616))+((r11*x14603*x14611)));
evalcond[7]=((((-1.0)*x14612*x14613))+(((-1.0)*x14613*x14615))+(((-1.0)*r01*x14610*x14618))+((r01*x14607))+((r00*x14603*x14605))+((r00*x14611))+(((-1.0)*x14614*x14620)));
evalcond[8]=(((r10*x14603*x14605))+(((-1.0)*r11*x14610*x14618))+((r10*x14611))+((r11*x14607))+(((-1.0)*x14614*x14621))+(((-1.0)*x14609*x14612))+(((-1.0)*x14609*x14615)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14622=((1.0)*sj0);
IkReal x14623=((1.0)*cj0);
CheckValue<IkReal> x14624=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14624.valid){
continue;
}
CheckValue<IkReal> x14625 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14623))+(((-1.0)*r12*x14622)))),IkReal(((((-1.0)*gconst16*r01*x14623))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14625.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14624.value)))+(x14625.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14626=IKsin(j4);
IkReal x14627=IKcos(j4);
IkReal x14628=(cj3*gconst17);
IkReal x14629=(gconst16*r21);
IkReal x14630=(gconst17*sj3);
IkReal x14631=(gconst16*r20);
IkReal x14632=(sj1*sj2);
IkReal x14633=(gconst16*r10);
IkReal x14634=(cj2*sj1);
IkReal x14635=(gconst16*sj3);
IkReal x14636=((1.0)*cj0);
IkReal x14637=((1.0)*sj0);
IkReal x14638=(cj1*sj2);
IkReal x14639=((1.0)*x14627);
IkReal x14640=(gconst16*x14626);
IkReal x14641=(cj3*x14627);
IkReal x14642=(cj3*x14626);
IkReal x14643=((1.0)*cj1*cj2);
IkReal x14644=((1.0)*gconst17*x14626);
IkReal x14645=((1.0)*sj3*x14626);
evalcond[0]=((((-1.0)*r22*x14639))+((x14626*x14629))+(((-1.0)*r20*x14644)));
evalcond[1]=(((r11*x14640))+cj0+(((-1.0)*r10*x14644))+(((-1.0)*r12*x14639)));
evalcond[2]=((((-1.0)*x14637))+((r01*x14640))+(((-1.0)*r00*x14644))+(((-1.0)*r02*x14639)));
evalcond[3]=(((sj3*x14631))+((r22*x14642))+((x14629*x14641))+x14638+x14634+(((-1.0)*r20*x14628*x14639))+((r21*x14630)));
evalcond[4]=((((-1.0)*sj3*x14629*x14639))+((r21*x14628))+((r20*x14627*x14630))+(((-1.0)*r22*x14645))+((cj3*x14631))+x14632+(((-1.0)*x14643)));
evalcond[5]=((((-1.0)*r00*x14628*x14639))+((cj0*x14632))+((r01*x14630))+(((-1.0)*cj1*cj2*x14636))+((r00*x14635))+((r02*x14642))+((gconst16*r01*x14641)));
evalcond[6]=(((gconst16*r11*x14641))+((r12*x14642))+((sj3*x14633))+(((-1.0)*r10*x14628*x14639))+((r11*x14630))+(((-1.0)*cj1*cj2*x14637))+((sj0*x14632)));
evalcond[7]=((((-1.0)*x14636*x14638))+(((-1.0)*r02*x14645))+(((-1.0)*x14634*x14636))+((r00*x14627*x14630))+((r01*x14628))+((cj3*gconst16*r00))+(((-1.0)*r01*x14635*x14639)));
evalcond[8]=((((-1.0)*r11*x14635*x14639))+(((-1.0)*r12*x14645))+((r10*x14627*x14630))+(((-1.0)*x14637*x14638))+((r11*x14628))+((cj3*x14633))+(((-1.0)*x14634*x14637)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14646=((1.0)*gconst17);
CheckValue<IkReal> x14647=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14646)))),-1);
if(!x14647.valid){
continue;
}
CheckValue<IkReal> x14648 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14647.value)))+(x14648.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14649=IKsin(j4);
IkReal x14650=IKcos(j4);
IkReal x14651=(cj3*gconst17);
IkReal x14652=(gconst16*r21);
IkReal x14653=(gconst17*sj3);
IkReal x14654=(gconst16*r20);
IkReal x14655=(sj1*sj2);
IkReal x14656=(gconst16*r10);
IkReal x14657=(cj2*sj1);
IkReal x14658=(gconst16*sj3);
IkReal x14659=((1.0)*cj0);
IkReal x14660=((1.0)*sj0);
IkReal x14661=(cj1*sj2);
IkReal x14662=((1.0)*x14650);
IkReal x14663=(gconst16*x14649);
IkReal x14664=(cj3*x14650);
IkReal x14665=(cj3*x14649);
IkReal x14666=((1.0)*cj1*cj2);
IkReal x14667=((1.0)*gconst17*x14649);
IkReal x14668=((1.0)*sj3*x14649);
evalcond[0]=((((-1.0)*r22*x14662))+((x14649*x14652))+(((-1.0)*r20*x14667)));
evalcond[1]=(cj0+(((-1.0)*r10*x14667))+(((-1.0)*r12*x14662))+((r11*x14663)));
evalcond[2]=(((r01*x14663))+(((-1.0)*r00*x14667))+(((-1.0)*r02*x14662))+(((-1.0)*x14660)));
evalcond[3]=((((-1.0)*r20*x14651*x14662))+((sj3*x14654))+((r22*x14665))+((x14652*x14664))+x14657+x14661+((r21*x14653)));
evalcond[4]=(((r20*x14650*x14653))+(((-1.0)*r22*x14668))+(((-1.0)*sj3*x14652*x14662))+x14655+((r21*x14651))+((cj3*x14654))+(((-1.0)*x14666)));
evalcond[5]=(((r02*x14665))+((gconst16*r01*x14664))+((cj0*x14655))+(((-1.0)*r00*x14651*x14662))+((r00*x14658))+((r01*x14653))+(((-1.0)*cj1*cj2*x14659)));
evalcond[6]=(((gconst16*r11*x14664))+((sj0*x14655))+((sj3*x14656))+(((-1.0)*cj1*cj2*x14660))+(((-1.0)*r10*x14651*x14662))+((r12*x14665))+((r11*x14653)));
evalcond[7]=((((-1.0)*x14659*x14661))+((r01*x14651))+(((-1.0)*r01*x14658*x14662))+((r00*x14650*x14653))+(((-1.0)*x14657*x14659))+(((-1.0)*r02*x14668))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14660*x14661))+((r10*x14650*x14653))+(((-1.0)*r12*x14668))+(((-1.0)*x14657*x14660))+(((-1.0)*r11*x14658*x14662))+((cj3*x14656))+((r11*x14651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14669=((1.0)*gconst17);
CheckValue<IkReal> x14670=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14669)))),-1);
if(!x14670.valid){
continue;
}
CheckValue<IkReal> x14671 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14669))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14671.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14670.value)))+(x14671.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14672=IKsin(j4);
IkReal x14673=IKcos(j4);
IkReal x14674=(cj3*gconst17);
IkReal x14675=(gconst16*r21);
IkReal x14676=(gconst17*sj3);
IkReal x14677=(gconst16*r20);
IkReal x14678=(sj1*sj2);
IkReal x14679=(gconst16*r10);
IkReal x14680=(cj2*sj1);
IkReal x14681=(gconst16*sj3);
IkReal x14682=((1.0)*cj0);
IkReal x14683=((1.0)*sj0);
IkReal x14684=(cj1*sj2);
IkReal x14685=((1.0)*x14673);
IkReal x14686=(gconst16*x14672);
IkReal x14687=(cj3*x14673);
IkReal x14688=(cj3*x14672);
IkReal x14689=((1.0)*cj1*cj2);
IkReal x14690=((1.0)*gconst17*x14672);
IkReal x14691=((1.0)*sj3*x14672);
evalcond[0]=(((x14672*x14675))+(((-1.0)*r20*x14690))+(((-1.0)*r22*x14685)));
evalcond[1]=(cj0+((r11*x14686))+(((-1.0)*r12*x14685))+(((-1.0)*r10*x14690)));
evalcond[2]=(((r01*x14686))+(((-1.0)*r00*x14690))+(((-1.0)*r02*x14685))+(((-1.0)*x14683)));
evalcond[3]=((((-1.0)*r20*x14674*x14685))+((r21*x14676))+((x14675*x14687))+x14684+x14680+((sj3*x14677))+((r22*x14688)));
evalcond[4]=(((r21*x14674))+(((-1.0)*sj3*x14675*x14685))+(((-1.0)*x14689))+((r20*x14673*x14676))+(((-1.0)*r22*x14691))+x14678+((cj3*x14677)));
evalcond[5]=(((r00*x14681))+(((-1.0)*r00*x14674*x14685))+(((-1.0)*cj1*cj2*x14682))+((cj0*x14678))+((r01*x14676))+((r02*x14688))+((gconst16*r01*x14687)));
evalcond[6]=(((sj0*x14678))+(((-1.0)*cj1*cj2*x14683))+(((-1.0)*r10*x14674*x14685))+((r12*x14688))+((gconst16*r11*x14687))+((r11*x14676))+((sj3*x14679)));
evalcond[7]=((((-1.0)*r02*x14691))+(((-1.0)*x14682*x14684))+(((-1.0)*x14680*x14682))+((r01*x14674))+((r00*x14673*x14676))+(((-1.0)*r01*x14681*x14685))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14683*x14684))+(((-1.0)*x14680*x14683))+((cj3*x14679))+((r10*x14673*x14676))+((r11*x14674))+(((-1.0)*r12*x14691))+(((-1.0)*r11*x14681*x14685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14692=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14692;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14692);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14693=((1.0)*cj5);
IkReal x14694=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14693)));
j4eval[0]=x14694;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14693))))));
j4eval[2]=IKsign(x14694);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14695=cj5*cj5;
IkReal x14696=(cj3*r01);
IkReal x14697=(cj5*sj5);
IkReal x14698=((1.0)*cj3);
IkReal x14699=((((-1.0)*r02*r22*x14698))+(((-1.0)*r00*r20*x14695*x14698))+((r21*x14695*x14696))+(((-1.0)*r21*x14696))+((r20*x14696*x14697))+((cj3*r00*r21*x14697)));
j4eval[0]=x14699;
j4eval[1]=IKsign(x14699);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14700=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14700;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14700);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14701=((1.0)*cj5);
IkReal x14702=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14701)));
j4eval[0]=x14702;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14701)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14702);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14703=cj5*cj5;
IkReal x14704=r01*r01;
IkReal x14705=(r01*sj5);
IkReal x14706=(cj5*r00);
IkReal x14707=((((-1.0)*x14704))+(((2.0)*x14705*x14706))+(((-1.0)*(r02*r02)))+(((-1.0)*x14703*(r00*r00)))+((x14703*x14704)));
j4eval[0]=x14707;
j4eval[1]=IKsign(x14707);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14705))+x14706))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14708=cj5*cj5;
IkReal x14709=r01*r01;
IkReal x14710=(r01*sj5);
IkReal x14711=(cj5*r00);
CheckValue<IkReal> x14712=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14709))+((x14708*x14709))+(((-1.0)*(r02*r02)))+(((-1.0)*x14708*(r00*r00)))+(((2.0)*x14710*x14711)))),-1);
if(!x14712.valid){
continue;
}
CheckValue<IkReal> x14713 = IKatan2WithCheck(IkReal(((((-1.0)*x14710))+x14711)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14712.value)))+(x14713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14714=IKsin(j4);
IkReal x14715=IKcos(j4);
IkReal x14716=(cj5*r10);
IkReal x14717=(r01*sj5);
IkReal x14718=((1.0)*cj2);
IkReal x14719=(cj5*r00);
IkReal x14720=(cj5*r20);
IkReal x14721=((1.0)*x14715);
IkReal x14722=((1.0)*x14714);
IkReal x14723=(sj5*x14714);
evalcond[0]=(((r21*x14723))+(((-1.0)*r22*x14721))+(((-1.0)*x14720*x14722)));
evalcond[1]=((((-1.0)*r12*x14721))+(((-1.0)*x14716*x14722))+((r11*x14723)));
evalcond[2]=((((-1.0)*x14717*x14721))+(((-1.0)*r02*x14722))+((x14715*x14719)));
evalcond[3]=((-1.0)+(((-1.0)*x14719*x14722))+((x14714*x14717))+(((-1.0)*r02*x14721)));
evalcond[4]=((((-1.0)*r21*sj5*x14721))+((x14715*x14720))+((sj1*sj2))+(((-1.0)*r22*x14722))+(((-1.0)*cj1*x14718)));
evalcond[5]=((((-1.0)*sj1*x14718))+(((-1.0)*r12*x14722))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14721))+((x14715*x14716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14724=((1.0)*cj5);
CheckValue<IkReal> x14725 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14724))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14725.valid){
continue;
}
CheckValue<IkReal> x14726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14724))+(((-1.0)*r10*sj5)))),-1);
if(!x14726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14725.value)+(((1.5707963267949)*(x14726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14727=IKsin(j4);
IkReal x14728=IKcos(j4);
IkReal x14729=(cj5*r10);
IkReal x14730=(r01*sj5);
IkReal x14731=((1.0)*cj2);
IkReal x14732=(cj5*r00);
IkReal x14733=(cj5*r20);
IkReal x14734=((1.0)*x14728);
IkReal x14735=((1.0)*x14727);
IkReal x14736=(sj5*x14727);
evalcond[0]=((((-1.0)*r22*x14734))+(((-1.0)*x14733*x14735))+((r21*x14736)));
evalcond[1]=((((-1.0)*x14729*x14735))+(((-1.0)*r12*x14734))+((r11*x14736)));
evalcond[2]=(((x14728*x14732))+(((-1.0)*r02*x14735))+(((-1.0)*x14730*x14734)));
evalcond[3]=((-1.0)+((x14727*x14730))+(((-1.0)*x14732*x14735))+(((-1.0)*r02*x14734)));
evalcond[4]=((((-1.0)*r21*sj5*x14734))+((x14728*x14733))+((sj1*sj2))+(((-1.0)*cj1*x14731))+(((-1.0)*r22*x14735)));
evalcond[5]=(((x14728*x14729))+(((-1.0)*sj1*x14731))+(((-1.0)*r12*x14735))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x14734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14737=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14737.valid){
continue;
}
CheckValue<IkReal> x14738 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14738.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14737.value)))+(x14738.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14739=IKsin(j4);
IkReal x14740=IKcos(j4);
IkReal x14741=(cj5*r10);
IkReal x14742=(r01*sj5);
IkReal x14743=((1.0)*cj2);
IkReal x14744=(cj5*r00);
IkReal x14745=(cj5*r20);
IkReal x14746=((1.0)*x14740);
IkReal x14747=((1.0)*x14739);
IkReal x14748=(sj5*x14739);
evalcond[0]=(((r21*x14748))+(((-1.0)*r22*x14746))+(((-1.0)*x14745*x14747)));
evalcond[1]=(((r11*x14748))+(((-1.0)*x14741*x14747))+(((-1.0)*r12*x14746)));
evalcond[2]=((((-1.0)*x14742*x14746))+(((-1.0)*r02*x14747))+((x14740*x14744)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14746))+((x14739*x14742))+(((-1.0)*x14744*x14747)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r22*x14747))+(((-1.0)*cj1*x14743))+((x14740*x14745))+(((-1.0)*r21*sj5*x14746)));
evalcond[5]=((((-1.0)*r11*sj5*x14746))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x14743))+((x14740*x14741))+(((-1.0)*r12*x14747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14749=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14749;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14749);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14750=((1.0)*cj5);
IkReal x14751=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14750)));
j4eval[0]=x14751;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*r20*x14750))+((r21*sj5))))));
j4eval[2]=IKsign(x14751);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14752=cj5*cj5;
IkReal x14753=r01*r01;
IkReal x14754=(cj5*r00);
IkReal x14755=(r01*sj5);
IkReal x14756=(((x14752*(r00*r00)))+(((-1.0)*x14752*x14753))+x14753+(r02*r02)+(((-2.0)*x14754*x14755)));
j4eval[0]=x14756;
j4eval[1]=IKsign(x14756);
j4eval[2]=((IKabs(r02))+(IKabs((x14755+(((-1.0)*x14754))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14757=cj5*cj5;
IkReal x14758=r01*r01;
IkReal x14759=(r01*sj5);
IkReal x14760=(cj5*r00);
CheckValue<IkReal> x14761=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14759*x14760))+x14758+(((-1.0)*x14757*x14758))+(r02*r02)+((x14757*(r00*r00))))),-1);
if(!x14761.valid){
continue;
}
CheckValue<IkReal> x14762 = IKatan2WithCheck(IkReal(((((-1.0)*x14760))+x14759)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14762.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14761.value)))+(x14762.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14763=IKcos(j4);
IkReal x14764=IKsin(j4);
IkReal x14765=(cj5*r00);
IkReal x14766=(cj5*r10);
IkReal x14767=(r21*sj5);
IkReal x14768=((1.0)*cj2);
IkReal x14769=(cj5*r20);
IkReal x14770=((1.0)*x14763);
IkReal x14771=((1.0)*x14764);
IkReal x14772=(sj5*x14764);
IkReal x14773=(sj5*x14763);
evalcond[0]=((((-1.0)*x14765*x14770))+((r01*x14773))+((r02*x14764)));
evalcond[1]=(((x14764*x14767))+(((-1.0)*r22*x14770))+(((-1.0)*x14769*x14771)));
evalcond[2]=(((r11*x14772))+(((-1.0)*x14766*x14771))+(((-1.0)*r12*x14770)));
evalcond[3]=((-1.0)+(((-1.0)*x14765*x14771))+(((-1.0)*r02*x14770))+((r01*x14772)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x14769*x14770))+(((-1.0)*cj1*x14768))+((r22*x14764))+((x14763*x14767)));
evalcond[5]=((((-1.0)*sj1*x14768))+((r11*x14773))+(((-1.0)*cj1*sj2))+((r12*x14764))+(((-1.0)*x14766*x14770)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14774=((1.0)*cj5);
CheckValue<IkReal> x14775 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14774)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14775.valid){
continue;
}
CheckValue<IkReal> x14776=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14774)))),-1);
if(!x14776.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14775.value)+(((1.5707963267949)*(x14776.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14777=IKcos(j4);
IkReal x14778=IKsin(j4);
IkReal x14779=(cj5*r00);
IkReal x14780=(cj5*r10);
IkReal x14781=(r21*sj5);
IkReal x14782=((1.0)*cj2);
IkReal x14783=(cj5*r20);
IkReal x14784=((1.0)*x14777);
IkReal x14785=((1.0)*x14778);
IkReal x14786=(sj5*x14778);
IkReal x14787=(sj5*x14777);
evalcond[0]=(((r01*x14787))+(((-1.0)*x14779*x14784))+((r02*x14778)));
evalcond[1]=(((x14778*x14781))+(((-1.0)*x14783*x14785))+(((-1.0)*r22*x14784)));
evalcond[2]=((((-1.0)*x14780*x14785))+(((-1.0)*r12*x14784))+((r11*x14786)));
evalcond[3]=((-1.0)+((r01*x14786))+(((-1.0)*x14779*x14785))+(((-1.0)*r02*x14784)));
evalcond[4]=(((r22*x14778))+(((-1.0)*x14783*x14784))+((sj1*sj2))+(((-1.0)*cj1*x14782))+((x14777*x14781)));
evalcond[5]=((((-1.0)*x14780*x14784))+((r12*x14778))+(((-1.0)*sj1*x14782))+(((-1.0)*cj1*sj2))+((r11*x14787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14788=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14788.valid){
continue;
}
CheckValue<IkReal> x14789 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14788.value)))+(x14789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14790=IKcos(j4);
IkReal x14791=IKsin(j4);
IkReal x14792=(cj5*r00);
IkReal x14793=(cj5*r10);
IkReal x14794=(r21*sj5);
IkReal x14795=((1.0)*cj2);
IkReal x14796=(cj5*r20);
IkReal x14797=((1.0)*x14790);
IkReal x14798=((1.0)*x14791);
IkReal x14799=(sj5*x14791);
IkReal x14800=(sj5*x14790);
evalcond[0]=((((-1.0)*x14792*x14797))+((r01*x14800))+((r02*x14791)));
evalcond[1]=((((-1.0)*x14796*x14798))+(((-1.0)*r22*x14797))+((x14791*x14794)));
evalcond[2]=((((-1.0)*x14793*x14798))+(((-1.0)*r12*x14797))+((r11*x14799)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14797))+((r01*x14799))+(((-1.0)*x14792*x14798)));
evalcond[4]=((((-1.0)*x14796*x14797))+((sj1*sj2))+((x14790*x14794))+(((-1.0)*cj1*x14795))+((r22*x14791)));
evalcond[5]=((((-1.0)*x14793*x14797))+(((-1.0)*sj1*x14795))+(((-1.0)*cj1*sj2))+((r12*x14791))+((r11*x14800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14802 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14802)==0){
continue;
}
IkReal x14801=pow(x14802,-0.5);
CheckValue<IkReal> x14803 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14803.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14803.value));
IkReal gconst49=((-1.0)*r21*x14801);
IkReal gconst50=(r20*x14801);
CheckValue<IkReal> x14804 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14804.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14804.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14807 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14807.valid){
continue;
}
IkReal x14805=((-1.0)*(x14807.value));
IkReal x14806=x14801;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14805;
IkReal gconst48=x14805;
IkReal gconst49=((-1.0)*r21*x14806);
IkReal gconst50=(r20*x14806);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14810 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14810.valid){
continue;
}
IkReal x14808=((-1.0)*(x14810.value));
IkReal x14809=x14801;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14808;
IkReal gconst48=x14808;
IkReal gconst49=((-1.0)*r21*x14809);
IkReal gconst50=(r20*x14809);
CheckValue<IkReal> x14818=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14818.valid){
continue;
}
IkReal x14811=x14818.value;
IkReal x14812=(sj3*x14811);
IkReal x14813=(r11*x14812);
IkReal x14814=(r00*x14812);
IkReal x14815=(r01*x14812);
IkReal x14816=(r10*x14812);
IkReal x14817=(r20*r21*x14812);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14813))+((r10*x14814*(r20*r20)))+((r01*x14813*(r21*r21)))+((r10*r20*r21*x14815))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14819=gconst49*gconst49;
IkReal x14820=gconst50*gconst50;
IkReal x14821=((1.0)*cj3);
IkReal x14822=(gconst50*r01);
IkReal x14823=(gconst49*r10);
IkReal x14824=(r12*sj3);
IkReal x14825=(gconst49*r00);
IkReal x14826=(r00*sj3);
IkReal x14827=(r11*x14819);
IkReal x14828=(r10*x14820);
CheckValue<IkReal> x14829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x14821*x14827))+((cj3*gconst50*r11*x14825))+((cj3*x14822*x14823))+(((-1.0)*r02*r12*x14821))+(((-1.0)*r00*x14821*x14828)))),-1);
if(!x14829.valid){
continue;
}
CheckValue<IkReal> x14830 = IKatan2WithCheck(IkReal((((x14822*x14824))+((x14824*x14825)))),IkReal((((x14826*x14827))+((gconst49*r11*sj3*x14822))+(((-1.0)*r01*sj3*x14828))+(((-1.0)*gconst50*x14823*x14826)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14829.value)))+(x14830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14831=IKsin(j4);
IkReal x14832=IKcos(j4);
IkReal x14833=(sj1*sj2);
IkReal x14834=(gconst50*r20);
IkReal x14835=(gconst50*sj3);
IkReal x14836=(cj3*r01);
IkReal x14837=(gconst50*r10);
IkReal x14838=(gconst49*sj3);
IkReal x14839=((1.0)*cj2);
IkReal x14840=(cj1*sj2);
IkReal x14841=(cj3*r11);
IkReal x14842=(gconst50*r00);
IkReal x14843=(cj3*r21);
IkReal x14844=(cj3*gconst49);
IkReal x14845=(cj1*x14839);
IkReal x14846=((1.0)*x14832);
IkReal x14847=((1.0)*x14831);
IkReal x14848=(gconst49*x14831);
IkReal x14849=(gconst49*x14832);
IkReal x14850=(cj3*x14831);
evalcond[0]=((((-1.0)*x14834*x14847))+(((-1.0)*r22*x14846))+((r21*x14848)));
evalcond[1]=((((-1.0)*x14837*x14847))+((r11*x14848))+(((-1.0)*r12*x14846)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14846))+(((-1.0)*x14842*x14847))+((r01*x14848)));
evalcond[3]=(((x14836*x14849))+((r02*x14850))+((r01*x14835))+(((-1.0)*cj3*x14842*x14846))+((r00*x14838)));
evalcond[4]=(((gconst50*x14836))+(((-1.0)*r02*sj3*x14847))+(((-1.0)*r01*x14838*x14846))+((r00*x14832*x14835))+((r00*x14844)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x14834*x14846))+((x14843*x14849))+x14840+((r20*x14838))+((r21*x14835))+((r22*x14850)));
evalcond[6]=(((x14841*x14849))+x14833+((r11*x14835))+(((-1.0)*x14845))+((r10*x14838))+(((-1.0)*cj3*x14837*x14846))+((r12*x14850)));
evalcond[7]=(((sj3*x14832*x14834))+((r20*x14844))+x14833+(((-1.0)*r21*x14838*x14846))+(((-1.0)*x14845))+((gconst50*x14843))+(((-1.0)*r22*sj3*x14847)));
evalcond[8]=((((-1.0)*x14840))+((r10*x14832*x14835))+(((-1.0)*sj1*x14839))+((gconst50*x14841))+((r10*x14844))+(((-1.0)*r11*x14838*x14846))+(((-1.0)*r12*sj3*x14847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14851=gconst49*gconst49;
IkReal x14852=gconst50*gconst50;
IkReal x14853=(cj3*r12);
IkReal x14854=(gconst49*r00);
IkReal x14855=(r01*r11);
IkReal x14856=(r00*r11);
IkReal x14857=(cj3*gconst50);
IkReal x14858=((1.0)*r01*r10);
IkReal x14859=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14860 = IKatan2WithCheck(IkReal((((x14853*x14854))+((gconst50*r01*x14853)))),IkReal(((((-1.0)*cj3*x14852*x14858))+((cj3*x14851*x14856))+(((-1.0)*r10*x14854*x14857))+((gconst49*x14855*x14857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14860.valid){
continue;
}
CheckValue<IkReal> x14861=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*gconst50*r11*sj3*x14854))+(((-1.0)*x14858*x14859))+((r00*r10*sj3*x14852))+((sj3*x14851*x14855)))),-1);
if(!x14861.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14860.value)+(((1.5707963267949)*(x14861.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14862=IKsin(j4);
IkReal x14863=IKcos(j4);
IkReal x14864=(sj1*sj2);
IkReal x14865=(gconst50*r20);
IkReal x14866=(gconst50*sj3);
IkReal x14867=(cj3*r01);
IkReal x14868=(gconst50*r10);
IkReal x14869=(gconst49*sj3);
IkReal x14870=((1.0)*cj2);
IkReal x14871=(cj1*sj2);
IkReal x14872=(cj3*r11);
IkReal x14873=(gconst50*r00);
IkReal x14874=(cj3*r21);
IkReal x14875=(cj3*gconst49);
IkReal x14876=(cj1*x14870);
IkReal x14877=((1.0)*x14863);
IkReal x14878=((1.0)*x14862);
IkReal x14879=(gconst49*x14862);
IkReal x14880=(gconst49*x14863);
IkReal x14881=(cj3*x14862);
evalcond[0]=((((-1.0)*r22*x14877))+((r21*x14879))+(((-1.0)*x14865*x14878)));
evalcond[1]=(((r11*x14879))+(((-1.0)*x14868*x14878))+(((-1.0)*r12*x14877)));
evalcond[2]=((-1.0)+(((-1.0)*x14873*x14878))+(((-1.0)*r02*x14877))+((r01*x14879)));
evalcond[3]=((((-1.0)*cj3*x14873*x14877))+((x14867*x14880))+((r01*x14866))+((r00*x14869))+((r02*x14881)));
evalcond[4]=(((r00*x14863*x14866))+(((-1.0)*r01*x14869*x14877))+((r00*x14875))+((gconst50*x14867))+(((-1.0)*r02*sj3*x14878)));
evalcond[5]=(((cj2*sj1))+((r20*x14869))+((r22*x14881))+x14871+((x14874*x14880))+(((-1.0)*cj3*x14865*x14877))+((r21*x14866)));
evalcond[6]=(((x14872*x14880))+(((-1.0)*cj3*x14868*x14877))+((r12*x14881))+x14864+((r10*x14869))+(((-1.0)*x14876))+((r11*x14866)));
evalcond[7]=((((-1.0)*r21*x14869*x14877))+(((-1.0)*r22*sj3*x14878))+x14864+((sj3*x14863*x14865))+((gconst50*x14874))+(((-1.0)*x14876))+((r20*x14875)));
evalcond[8]=(((r10*x14875))+(((-1.0)*r12*sj3*x14878))+((gconst50*x14872))+(((-1.0)*r11*x14869*x14877))+((r10*x14863*x14866))+(((-1.0)*x14871))+(((-1.0)*sj1*x14870)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14882=((1.0)*gconst50);
CheckValue<IkReal> x14883 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14882)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14883.valid){
continue;
}
CheckValue<IkReal> x14884=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14882)))),-1);
if(!x14884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14883.value)+(((1.5707963267949)*(x14884.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14885=IKsin(j4);
IkReal x14886=IKcos(j4);
IkReal x14887=(sj1*sj2);
IkReal x14888=(gconst50*r20);
IkReal x14889=(gconst50*sj3);
IkReal x14890=(cj3*r01);
IkReal x14891=(gconst50*r10);
IkReal x14892=(gconst49*sj3);
IkReal x14893=((1.0)*cj2);
IkReal x14894=(cj1*sj2);
IkReal x14895=(cj3*r11);
IkReal x14896=(gconst50*r00);
IkReal x14897=(cj3*r21);
IkReal x14898=(cj3*gconst49);
IkReal x14899=(cj1*x14893);
IkReal x14900=((1.0)*x14886);
IkReal x14901=((1.0)*x14885);
IkReal x14902=(gconst49*x14885);
IkReal x14903=(gconst49*x14886);
IkReal x14904=(cj3*x14885);
evalcond[0]=(((r21*x14902))+(((-1.0)*r22*x14900))+(((-1.0)*x14888*x14901)));
evalcond[1]=((((-1.0)*r12*x14900))+((r11*x14902))+(((-1.0)*x14891*x14901)));
evalcond[2]=((-1.0)+((r01*x14902))+(((-1.0)*r02*x14900))+(((-1.0)*x14896*x14901)));
evalcond[3]=(((r00*x14892))+((r02*x14904))+((r01*x14889))+((x14890*x14903))+(((-1.0)*cj3*x14896*x14900)));
evalcond[4]=((((-1.0)*r01*x14892*x14900))+((r00*x14886*x14889))+((r00*x14898))+((gconst50*x14890))+(((-1.0)*r02*sj3*x14901)));
evalcond[5]=(((r22*x14904))+((cj2*sj1))+x14894+(((-1.0)*cj3*x14888*x14900))+((r21*x14889))+((r20*x14892))+((x14897*x14903)));
evalcond[6]=(((r10*x14892))+((r11*x14889))+((x14895*x14903))+x14887+((r12*x14904))+(((-1.0)*x14899))+(((-1.0)*cj3*x14891*x14900)));
evalcond[7]=(x14887+((gconst50*x14897))+(((-1.0)*r22*sj3*x14901))+(((-1.0)*r21*x14892*x14900))+(((-1.0)*x14899))+((r20*x14898))+((sj3*x14886*x14888)));
evalcond[8]=((((-1.0)*sj1*x14893))+((r10*x14898))+((gconst50*x14895))+((r10*x14886*x14889))+(((-1.0)*x14894))+(((-1.0)*r11*x14892*x14900))+(((-1.0)*r12*sj3*x14901)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14906 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14906)==0){
continue;
}
IkReal x14905=pow(x14906,-0.5);
CheckValue<IkReal> x14907 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14907.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14907.value))));
IkReal gconst52=((1.0)*r21*x14905);
IkReal gconst53=((-1.0)*r20*x14905);
CheckValue<IkReal> x14908 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14908.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14908.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14911 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14911.valid){
continue;
}
IkReal x14909=((1.0)*(x14911.value));
IkReal x14910=x14905;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14909)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14909)));
IkReal gconst52=((1.0)*r21*x14910);
IkReal gconst53=((-1.0)*r20*x14910);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14914 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14914.valid){
continue;
}
IkReal x14912=((1.0)*(x14914.value));
IkReal x14913=x14905;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14912)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14912)));
IkReal gconst52=((1.0)*r21*x14913);
IkReal gconst53=((-1.0)*r20*x14913);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14917 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14917.valid){
continue;
}
IkReal x14915=((1.0)*(x14917.value));
IkReal x14916=x14905;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14915)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14915)));
IkReal gconst52=((1.0)*r21*x14916);
IkReal gconst53=((-1.0)*r20*x14916);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14918=gconst52*gconst52;
IkReal x14919=gconst53*gconst53;
IkReal x14920=(gconst53*r01);
IkReal x14921=(cj3*r20);
IkReal x14922=(r22*sj3);
IkReal x14923=((1.0)*cj3);
IkReal x14924=(gconst52*sj3);
IkReal x14925=((1.0)*r00);
IkReal x14926=(gconst52*r00);
IkReal x14927=(r21*x14918);
CheckValue<IkReal> x14928 = IKatan2WithCheck(IkReal((((x14920*x14922))+((x14922*x14926)))),IkReal((((r00*sj3*x14927))+(((-1.0)*gconst53*r20*x14924*x14925))+(((-1.0)*r01*r20*sj3*x14919))+((r21*x14920*x14924)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14928.valid){
continue;
}
CheckValue<IkReal> x14929=IKPowWithIntegerCheck(IKsign((((gconst52*x14920*x14921))+(((-1.0)*r01*x14923*x14927))+((cj3*gconst53*r21*x14926))+(((-1.0)*r02*r22*x14923))+(((-1.0)*x14919*x14921*x14925)))),-1);
if(!x14929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14928.value)+(((1.5707963267949)*(x14929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14930=IKsin(j4);
IkReal x14931=IKcos(j4);
IkReal x14932=(sj1*sj2);
IkReal x14933=((1.0)*cj1);
IkReal x14934=(cj3*gconst52);
IkReal x14935=(gconst53*sj3);
IkReal x14936=(cj3*gconst53);
IkReal x14937=(cj2*sj1);
IkReal x14938=(gconst52*sj3);
IkReal x14939=(cj2*x14933);
IkReal x14940=((1.0)*x14931);
IkReal x14941=((1.0)*x14930);
IkReal x14942=(gconst52*x14930);
IkReal x14943=(cj3*x14930);
evalcond[0]=((((-1.0)*gconst53*r20*x14941))+((r21*x14942))+(((-1.0)*r22*x14940)));
evalcond[1]=((((-1.0)*r12*x14940))+(((-1.0)*gconst53*r10*x14941))+((r11*x14942)));
evalcond[2]=((-1.0)+((r01*x14942))+(((-1.0)*r02*x14940))+(((-1.0)*gconst53*r00*x14941)));
evalcond[3]=(((r01*x14935))+((r00*x14938))+((r02*x14943))+((r01*x14931*x14934))+(((-1.0)*r00*x14936*x14940)));
evalcond[4]=((((-1.0)*r02*sj3*x14941))+((r01*x14936))+((r00*x14934))+(((-1.0)*r01*x14938*x14940))+((r00*x14931*x14935)));
evalcond[5]=((((-1.0)*r20*x14936*x14940))+x14937+((r22*x14943))+((cj1*sj2))+((r21*x14935))+((r21*x14931*x14934))+((r20*x14938)));
evalcond[6]=((((-1.0)*r10*x14936*x14940))+((r12*x14943))+x14932+((r10*x14938))+((r11*x14931*x14934))+(((-1.0)*x14939))+((r11*x14935)));
evalcond[7]=(x14932+((r20*x14931*x14935))+((r21*x14936))+(((-1.0)*x14939))+(((-1.0)*r22*sj3*x14941))+((r20*x14934))+(((-1.0)*r21*x14938*x14940)));
evalcond[8]=((((-1.0)*x14937))+(((-1.0)*r12*sj3*x14941))+((r10*x14934))+(((-1.0)*sj2*x14933))+(((-1.0)*r11*x14938*x14940))+((r10*x14931*x14935))+((r11*x14936)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14944=((1.0)*gconst53);
CheckValue<IkReal> x14945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14944))+(((-1.0)*gconst52*r10)))),-1);
if(!x14945.valid){
continue;
}
CheckValue<IkReal> x14946 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x14944))+((gconst52*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14945.value)))+(x14946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14947=IKsin(j4);
IkReal x14948=IKcos(j4);
IkReal x14949=(sj1*sj2);
IkReal x14950=((1.0)*cj1);
IkReal x14951=(cj3*gconst52);
IkReal x14952=(gconst53*sj3);
IkReal x14953=(cj3*gconst53);
IkReal x14954=(cj2*sj1);
IkReal x14955=(gconst52*sj3);
IkReal x14956=(cj2*x14950);
IkReal x14957=((1.0)*x14948);
IkReal x14958=((1.0)*x14947);
IkReal x14959=(gconst52*x14947);
IkReal x14960=(cj3*x14947);
evalcond[0]=((((-1.0)*gconst53*r20*x14958))+(((-1.0)*r22*x14957))+((r21*x14959)));
evalcond[1]=((((-1.0)*r12*x14957))+(((-1.0)*gconst53*r10*x14958))+((r11*x14959)));
evalcond[2]=((-1.0)+((r01*x14959))+(((-1.0)*r02*x14957))+(((-1.0)*gconst53*r00*x14958)));
evalcond[3]=(((r01*x14948*x14951))+(((-1.0)*r00*x14953*x14957))+((r01*x14952))+((r00*x14955))+((r02*x14960)));
evalcond[4]=((((-1.0)*r02*sj3*x14958))+((r01*x14953))+((r00*x14951))+((r00*x14948*x14952))+(((-1.0)*r01*x14955*x14957)));
evalcond[5]=(((r22*x14960))+((r21*x14948*x14951))+x14954+((cj1*sj2))+((r21*x14952))+((r20*x14955))+(((-1.0)*r20*x14953*x14957)));
evalcond[6]=((((-1.0)*r10*x14953*x14957))+((r11*x14948*x14951))+x14949+((r12*x14960))+((r10*x14955))+(((-1.0)*x14956))+((r11*x14952)));
evalcond[7]=(x14949+(((-1.0)*r21*x14955*x14957))+(((-1.0)*x14956))+(((-1.0)*r22*sj3*x14958))+((r21*x14953))+((r20*x14951))+((r20*x14948*x14952)));
evalcond[8]=((((-1.0)*sj2*x14950))+((r10*x14951))+(((-1.0)*r12*sj3*x14958))+(((-1.0)*r11*x14955*x14957))+(((-1.0)*x14954))+((r10*x14948*x14952))+((r11*x14953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14961 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14961.valid){
continue;
}
CheckValue<IkReal> x14962=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14962.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14961.value)+(((1.5707963267949)*(x14962.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14963=IKsin(j4);
IkReal x14964=IKcos(j4);
IkReal x14965=(sj1*sj2);
IkReal x14966=((1.0)*cj1);
IkReal x14967=(cj3*gconst52);
IkReal x14968=(gconst53*sj3);
IkReal x14969=(cj3*gconst53);
IkReal x14970=(cj2*sj1);
IkReal x14971=(gconst52*sj3);
IkReal x14972=(cj2*x14966);
IkReal x14973=((1.0)*x14964);
IkReal x14974=((1.0)*x14963);
IkReal x14975=(gconst52*x14963);
IkReal x14976=(cj3*x14963);
evalcond[0]=((((-1.0)*gconst53*r20*x14974))+(((-1.0)*r22*x14973))+((r21*x14975)));
evalcond[1]=((((-1.0)*r12*x14973))+((r11*x14975))+(((-1.0)*gconst53*r10*x14974)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14974))+((r01*x14975))+(((-1.0)*r02*x14973)));
evalcond[3]=(((r01*x14968))+((r01*x14964*x14967))+((r02*x14976))+(((-1.0)*r00*x14969*x14973))+((r00*x14971)));
evalcond[4]=(((r01*x14969))+(((-1.0)*r01*x14971*x14973))+(((-1.0)*r02*sj3*x14974))+((r00*x14964*x14968))+((r00*x14967)));
evalcond[5]=((((-1.0)*r20*x14969*x14973))+((r22*x14976))+x14970+((cj1*sj2))+((r21*x14964*x14967))+((r20*x14971))+((r21*x14968)));
evalcond[6]=(x14965+((r12*x14976))+(((-1.0)*x14972))+((r11*x14968))+((r11*x14964*x14967))+(((-1.0)*r10*x14969*x14973))+((r10*x14971)));
evalcond[7]=((((-1.0)*r22*sj3*x14974))+x14965+(((-1.0)*x14972))+(((-1.0)*r21*x14971*x14973))+((r20*x14964*x14968))+((r20*x14967))+((r21*x14969)));
evalcond[8]=(((r10*x14964*x14968))+(((-1.0)*sj2*x14966))+(((-1.0)*x14970))+((r11*x14969))+(((-1.0)*r11*x14971*x14973))+((r10*x14967))+(((-1.0)*r12*sj3*x14974)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14977=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14977);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14977);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14978=(r01*sj5);
IkReal x14979=((1.0)*cj5*r00);
j4eval[0]=(x14978+(((-1.0)*x14979)));
j4eval[1]=(((cj3*x14978))+(((-1.0)*cj3*x14979)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14980=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14980);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14980);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14981=(cj5*r00);
IkReal x14982=(r01*sj5);
j4eval[0]=(x14982+(((-1.0)*x14981)));
j4eval[1]=(((sj3*x14981))+(((-1.0)*sj3*x14982)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14983=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14983);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14983);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14984=((1.0)*r00);
CheckValue<IkReal> x14985=IKPowWithIntegerCheck(cj3,-1);
if(!x14985.valid){
continue;
}
CheckValue<IkReal> x14986=IKPowWithIntegerCheck(r22,-1);
if(!x14986.valid){
continue;
}
CheckValue<IkReal> x14987=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x14984))),-1);
if(!x14987.valid){
continue;
}
if( IKabs(((x14985.value)*(x14986.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14987.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14984)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14985.value)*(x14986.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x14987.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14984))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14985.value)*(x14986.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x14987.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x14984))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14988=IKsin(j4);
IkReal x14989=IKcos(j4);
IkReal x14990=(sj1*sj2);
IkReal x14991=(cj5*sj3);
IkReal x14992=(r11*sj5);
IkReal x14993=(cj3*cj5);
IkReal x14994=((1.0)*cj1);
IkReal x14995=(cj3*sj5);
IkReal x14996=(sj3*sj5);
IkReal x14997=(cj2*sj1);
IkReal x14998=(r01*sj5);
IkReal x14999=((1.0)*sj3);
IkReal x15000=(cj2*x14994);
IkReal x15001=(r10*x14989);
IkReal x15002=(r22*x14988);
IkReal x15003=(cj3*x14989);
IkReal x15004=((1.0)*cj5*x14988);
evalcond[0]=((-1.0)*r22*x14989);
evalcond[1]=(x14997+((cj1*sj2))+((cj3*x15002)));
evalcond[2]=(((x14988*x14992))+(((-1.0)*r10*x15004)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15004))+((x14988*x14998)));
evalcond[4]=(x14990+(((-1.0)*x14999*x15002))+(((-1.0)*x15000)));
evalcond[5]=((((-1.0)*r00*x14989*x14993))+((r00*x14996))+((r01*x14991))+((r01*x14989*x14995)));
evalcond[6]=(((r00*x14989*x14991))+(((-1.0)*r01*x14989*x14996))+((r00*x14995))+((r01*x14993)));
evalcond[7]=(x14990+((r10*x14996))+((r11*x14991))+(((-1.0)*x14993*x15001))+((x14992*x15003))+(((-1.0)*x15000)));
evalcond[8]=((((-1.0)*x14989*x14992*x14999))+((r10*x14995))+((r11*x14993))+(((-1.0)*sj2*x14994))+((x14991*x15001))+(((-1.0)*x14997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15005=((1.0)*cj3);
IkReal x15006=(cj5*r00);
IkReal x15007=(r01*sj5);
CheckValue<IkReal> x15008=IKPowWithIntegerCheck(((((-1.0)*x15006))+x15007),-1);
if(!x15008.valid){
continue;
}
CheckValue<IkReal> x15009=IKPowWithIntegerCheck((((sj3*x15006))+(((-1.0)*sj3*x15007))),-1);
if(!x15009.valid){
continue;
}
if( IKabs(x15008.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15009.value)*(((((-1.0)*cj5*r01*x15005))+(((-1.0)*r00*sj5*x15005)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15008.value)+IKsqr(((x15009.value)*(((((-1.0)*cj5*r01*x15005))+(((-1.0)*r00*sj5*x15005))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15008.value, ((x15009.value)*(((((-1.0)*cj5*r01*x15005))+(((-1.0)*r00*sj5*x15005))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15010=IKsin(j4);
IkReal x15011=IKcos(j4);
IkReal x15012=(sj1*sj2);
IkReal x15013=(cj5*sj3);
IkReal x15014=(r11*sj5);
IkReal x15015=(cj3*cj5);
IkReal x15016=((1.0)*cj1);
IkReal x15017=(cj3*sj5);
IkReal x15018=(sj3*sj5);
IkReal x15019=(cj2*sj1);
IkReal x15020=(r01*sj5);
IkReal x15021=((1.0)*sj3);
IkReal x15022=(cj2*x15016);
IkReal x15023=(r10*x15011);
IkReal x15024=(r22*x15010);
IkReal x15025=(cj3*x15011);
IkReal x15026=((1.0)*cj5*x15010);
evalcond[0]=((-1.0)*r22*x15011);
evalcond[1]=(((cj1*sj2))+x15019+((cj3*x15024)));
evalcond[2]=((((-1.0)*r10*x15026))+((x15010*x15014)));
evalcond[3]=((-1.0)+((x15010*x15020))+(((-1.0)*r00*x15026)));
evalcond[4]=(x15012+(((-1.0)*x15022))+(((-1.0)*x15021*x15024)));
evalcond[5]=((((-1.0)*r00*x15011*x15015))+((r00*x15018))+((r01*x15013))+((r01*x15011*x15017)));
evalcond[6]=(((r00*x15011*x15013))+(((-1.0)*r01*x15011*x15018))+((r00*x15017))+((r01*x15015)));
evalcond[7]=((((-1.0)*x15015*x15023))+((r10*x15018))+((x15014*x15025))+x15012+(((-1.0)*x15022))+((r11*x15013)));
evalcond[8]=((((-1.0)*x15019))+((x15013*x15023))+((r10*x15017))+(((-1.0)*x15011*x15014*x15021))+((r11*x15015))+(((-1.0)*sj2*x15016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15027=((1.0)*sj3);
IkReal x15028=(r01*sj5);
IkReal x15029=((1.0)*cj5*r00);
CheckValue<IkReal> x15030=IKPowWithIntegerCheck((x15028+(((-1.0)*x15029))),-1);
if(!x15030.valid){
continue;
}
CheckValue<IkReal> x15031=IKPowWithIntegerCheck(((((-1.0)*cj3*x15029))+((cj3*x15028))),-1);
if(!x15031.valid){
continue;
}
if( IKabs(x15030.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15031.value)*(((((-1.0)*r00*sj5*x15027))+(((-1.0)*cj5*r01*x15027)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15030.value)+IKsqr(((x15031.value)*(((((-1.0)*r00*sj5*x15027))+(((-1.0)*cj5*r01*x15027))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15030.value, ((x15031.value)*(((((-1.0)*r00*sj5*x15027))+(((-1.0)*cj5*r01*x15027))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15032=IKsin(j4);
IkReal x15033=IKcos(j4);
IkReal x15034=(sj1*sj2);
IkReal x15035=(cj5*sj3);
IkReal x15036=(r11*sj5);
IkReal x15037=(cj3*cj5);
IkReal x15038=((1.0)*cj1);
IkReal x15039=(cj3*sj5);
IkReal x15040=(sj3*sj5);
IkReal x15041=(cj2*sj1);
IkReal x15042=(r01*sj5);
IkReal x15043=((1.0)*sj3);
IkReal x15044=(cj2*x15038);
IkReal x15045=(r10*x15033);
IkReal x15046=(r22*x15032);
IkReal x15047=(cj3*x15033);
IkReal x15048=((1.0)*cj5*x15032);
evalcond[0]=((-1.0)*r22*x15033);
evalcond[1]=(((cj3*x15046))+((cj1*sj2))+x15041);
evalcond[2]=(((x15032*x15036))+(((-1.0)*r10*x15048)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15048))+((x15032*x15042)));
evalcond[4]=((((-1.0)*x15044))+(((-1.0)*x15043*x15046))+x15034);
evalcond[5]=(((r01*x15035))+((r01*x15033*x15039))+((r00*x15040))+(((-1.0)*r00*x15033*x15037)));
evalcond[6]=(((r00*x15039))+((r01*x15037))+(((-1.0)*r01*x15033*x15040))+((r00*x15033*x15035)));
evalcond[7]=((((-1.0)*x15044))+x15034+((r11*x15035))+((r10*x15040))+(((-1.0)*x15037*x15045))+((x15036*x15047)));
evalcond[8]=((((-1.0)*sj2*x15038))+(((-1.0)*x15033*x15036*x15043))+((r10*x15039))+((r11*x15037))+(((-1.0)*x15041))+((x15035*x15045)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15049=cj5*cj5;
IkReal x15050=(cj3*r20);
IkReal x15051=(r21*sj3);
IkReal x15052=((1.0)*cj3);
IkReal x15053=(r01*r21);
IkReal x15054=(r01*sj3);
IkReal x15055=(r00*sj5);
IkReal x15056=(cj5*r01*sj5);
IkReal x15057=((1.0)*x15049);
CheckValue<IkReal> x15058 = IKatan2WithCheck(IkReal((((r22*sj3*x15055))+((cj5*r22*x15054)))),IkReal(((((-1.0)*r00*x15051*x15057))+(((-1.0)*cj5*r20*sj3*x15055))+(((-1.0)*r20*x15054*x15057))+((x15051*x15056))+((r00*x15051)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15058.valid){
continue;
}
CheckValue<IkReal> x15059=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15052*x15053))+((x15050*x15056))+((cj3*cj5*r21*x15055))+(((-1.0)*r02*r22*x15052))+(((-1.0)*r00*x15050*x15057))+((cj3*x15049*x15053)))),-1);
if(!x15059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15058.value)+(((1.5707963267949)*(x15059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15060=IKsin(j4);
IkReal x15061=IKcos(j4);
IkReal x15062=(sj1*sj2);
IkReal x15063=(r11*sj5);
IkReal x15064=(cj5*r10);
IkReal x15065=(cj5*r01);
IkReal x15066=(cj5*r00);
IkReal x15067=((1.0)*cj1);
IkReal x15068=(cj3*sj5);
IkReal x15069=(r21*sj5);
IkReal x15070=(cj5*sj3);
IkReal x15071=(sj3*sj5);
IkReal x15072=(cj2*sj1);
IkReal x15073=(r01*sj5);
IkReal x15074=(cj3*cj5);
IkReal x15075=(cj5*r20);
IkReal x15076=(cj2*x15067);
IkReal x15077=((1.0)*x15061);
IkReal x15078=((1.0)*x15060);
IkReal x15079=(cj3*x15061);
IkReal x15080=(sj3*x15061);
IkReal x15081=(cj3*x15060);
evalcond[0]=(((x15060*x15069))+(((-1.0)*r22*x15077))+(((-1.0)*x15075*x15078)));
evalcond[1]=(((x15060*x15063))+(((-1.0)*r12*x15077))+(((-1.0)*x15064*x15078)));
evalcond[2]=((-1.0)+(((-1.0)*x15066*x15078))+((x15060*x15073))+(((-1.0)*r02*x15077)));
evalcond[3]=(((r01*x15061*x15068))+((sj3*x15065))+((r02*x15081))+((r00*x15071))+(((-1.0)*cj3*x15066*x15077)));
evalcond[4]=((((-1.0)*r01*x15071*x15077))+((r00*x15068))+((cj3*x15065))+(((-1.0)*r02*sj3*x15078))+((x15066*x15080)));
evalcond[5]=(((cj1*sj2))+((r22*x15081))+(((-1.0)*r20*x15074*x15077))+x15072+((r21*x15061*x15068))+((r20*x15071))+((r21*x15070)));
evalcond[6]=((((-1.0)*x15076))+((r12*x15081))+((x15063*x15079))+((r11*x15070))+x15062+(((-1.0)*cj3*x15064*x15077))+((r10*x15071)));
evalcond[7]=((((-1.0)*x15076))+(((-1.0)*r22*sj3*x15078))+((r20*x15068))+((r20*x15061*x15070))+(((-1.0)*sj3*x15069*x15077))+x15062+((r21*x15074)));
evalcond[8]=((((-1.0)*sj2*x15067))+(((-1.0)*sj3*x15063*x15077))+(((-1.0)*r12*sj3*x15078))+((r11*x15074))+(((-1.0)*x15072))+((r10*x15068))+((x15064*x15080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15082=((1.0)*cj5);
CheckValue<IkReal> x15083 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15082)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15083.valid){
continue;
}
CheckValue<IkReal> x15084=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15082)))),-1);
if(!x15084.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15083.value)+(((1.5707963267949)*(x15084.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15085=IKsin(j4);
IkReal x15086=IKcos(j4);
IkReal x15087=(sj1*sj2);
IkReal x15088=(r11*sj5);
IkReal x15089=(cj5*r10);
IkReal x15090=(cj5*r01);
IkReal x15091=(cj5*r00);
IkReal x15092=((1.0)*cj1);
IkReal x15093=(cj3*sj5);
IkReal x15094=(r21*sj5);
IkReal x15095=(cj5*sj3);
IkReal x15096=(sj3*sj5);
IkReal x15097=(cj2*sj1);
IkReal x15098=(r01*sj5);
IkReal x15099=(cj3*cj5);
IkReal x15100=(cj5*r20);
IkReal x15101=(cj2*x15092);
IkReal x15102=((1.0)*x15086);
IkReal x15103=((1.0)*x15085);
IkReal x15104=(cj3*x15086);
IkReal x15105=(sj3*x15086);
IkReal x15106=(cj3*x15085);
evalcond[0]=((((-1.0)*r22*x15102))+((x15085*x15094))+(((-1.0)*x15100*x15103)));
evalcond[1]=((((-1.0)*x15089*x15103))+(((-1.0)*r12*x15102))+((x15085*x15088)));
evalcond[2]=((-1.0)+((x15085*x15098))+(((-1.0)*r02*x15102))+(((-1.0)*x15091*x15103)));
evalcond[3]=(((sj3*x15090))+(((-1.0)*cj3*x15091*x15102))+((r00*x15096))+((r02*x15106))+((r01*x15086*x15093)));
evalcond[4]=(((x15091*x15105))+((r00*x15093))+((cj3*x15090))+(((-1.0)*r01*x15096*x15102))+(((-1.0)*r02*sj3*x15103)));
evalcond[5]=(((r21*x15086*x15093))+((r21*x15095))+(((-1.0)*r20*x15099*x15102))+((r22*x15106))+((r20*x15096))+((cj1*sj2))+x15097);
evalcond[6]=(((r12*x15106))+((x15088*x15104))+x15087+((r11*x15095))+((r10*x15096))+(((-1.0)*x15101))+(((-1.0)*cj3*x15089*x15102)));
evalcond[7]=(((r21*x15099))+((r20*x15093))+x15087+((r20*x15086*x15095))+(((-1.0)*r22*sj3*x15103))+(((-1.0)*x15101))+(((-1.0)*sj3*x15094*x15102)));
evalcond[8]=(((x15089*x15105))+(((-1.0)*sj3*x15088*x15102))+(((-1.0)*x15097))+((r11*x15099))+((r10*x15093))+(((-1.0)*r12*sj3*x15103))+(((-1.0)*sj2*x15092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15107=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15107.valid){
continue;
}
CheckValue<IkReal> x15108 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15107.value)))+(x15108.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15109=IKsin(j4);
IkReal x15110=IKcos(j4);
IkReal x15111=(sj1*sj2);
IkReal x15112=(r11*sj5);
IkReal x15113=(cj5*r10);
IkReal x15114=(cj5*r01);
IkReal x15115=(cj5*r00);
IkReal x15116=((1.0)*cj1);
IkReal x15117=(cj3*sj5);
IkReal x15118=(r21*sj5);
IkReal x15119=(cj5*sj3);
IkReal x15120=(sj3*sj5);
IkReal x15121=(cj2*sj1);
IkReal x15122=(r01*sj5);
IkReal x15123=(cj3*cj5);
IkReal x15124=(cj5*r20);
IkReal x15125=(cj2*x15116);
IkReal x15126=((1.0)*x15110);
IkReal x15127=((1.0)*x15109);
IkReal x15128=(cj3*x15110);
IkReal x15129=(sj3*x15110);
IkReal x15130=(cj3*x15109);
evalcond[0]=(((x15109*x15118))+(((-1.0)*r22*x15126))+(((-1.0)*x15124*x15127)));
evalcond[1]=(((x15109*x15112))+(((-1.0)*x15113*x15127))+(((-1.0)*r12*x15126)));
evalcond[2]=((-1.0)+(((-1.0)*x15115*x15127))+(((-1.0)*r02*x15126))+((x15109*x15122)));
evalcond[3]=((((-1.0)*cj3*x15115*x15126))+((r00*x15120))+((sj3*x15114))+((r01*x15110*x15117))+((r02*x15130)));
evalcond[4]=(((x15115*x15129))+(((-1.0)*r02*sj3*x15127))+((cj3*x15114))+(((-1.0)*r01*x15120*x15126))+((r00*x15117)));
evalcond[5]=(((r21*x15110*x15117))+((r20*x15120))+((cj1*sj2))+((r22*x15130))+x15121+(((-1.0)*r20*x15123*x15126))+((r21*x15119)));
evalcond[6]=((((-1.0)*x15125))+((x15112*x15128))+((r11*x15119))+x15111+((r12*x15130))+((r10*x15120))+(((-1.0)*cj3*x15113*x15126)));
evalcond[7]=(((r21*x15123))+(((-1.0)*x15125))+((r20*x15117))+(((-1.0)*r22*sj3*x15127))+((r20*x15110*x15119))+x15111+(((-1.0)*sj3*x15118*x15126)));
evalcond[8]=((((-1.0)*sj2*x15116))+((r10*x15117))+(((-1.0)*r12*sj3*x15127))+((x15113*x15129))+(((-1.0)*x15121))+(((-1.0)*sj3*x15112*x15126))+((r11*x15123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15131=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15131;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15131);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15132=((1.0)*cj5);
IkReal x15133=((((-1.0)*r21*x15132))+(((-1.0)*r20*sj5)));
j4eval[0]=x15133;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15132))+((r11*sj5))))));
j4eval[2]=IKsign(x15133);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15134=cj5*cj5;
IkReal x15135=(cj3*r01);
IkReal x15136=(cj5*sj5);
IkReal x15137=((1.0)*cj3);
IkReal x15138=((((-1.0)*r00*r20*x15134*x15137))+(((-1.0)*r02*r22*x15137))+((r20*x15135*x15136))+((cj3*r00*r21*x15136))+(((-1.0)*r21*x15135))+((r21*x15134*x15135)));
j4eval[0]=x15138;
j4eval[1]=IKsign(x15138);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15139=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15139;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15139);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15140=((1.0)*cj5);
IkReal x15141=((((-1.0)*r21*x15140))+(((-1.0)*r20*sj5)));
j4eval[0]=x15141;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15140))+((r11*sj5))))));
j4eval[2]=IKsign(x15141);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15142=cj5*cj5;
IkReal x15143=r01*r01;
IkReal x15144=(cj5*r00);
IkReal x15145=(r01*sj5);
IkReal x15146=(((x15142*(r00*r00)))+x15143+(((-1.0)*x15142*x15143))+(r02*r02)+(((-2.0)*x15144*x15145)));
j4eval[0]=x15146;
j4eval[1]=((IKabs(((((-1.0)*x15145))+x15144)))+(IKabs(r02)));
j4eval[2]=IKsign(x15146);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15147=cj5*cj5;
IkReal x15148=r01*r01;
IkReal x15149=(r01*sj5);
IkReal x15150=(cj5*r00);
CheckValue<IkReal> x15151 = IKatan2WithCheck(IkReal(((((-1.0)*x15149))+x15150)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15151.valid){
continue;
}
CheckValue<IkReal> x15152=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15147*x15148))+(((-2.0)*x15149*x15150))+x15148+((x15147*(r00*r00)))+(r02*r02))),-1);
if(!x15152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15151.value)+(((1.5707963267949)*(x15152.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15153=IKsin(j4);
IkReal x15154=IKcos(j4);
IkReal x15155=(cj5*r10);
IkReal x15156=(r01*sj5);
IkReal x15157=(cj5*r00);
IkReal x15158=(cj5*r20);
IkReal x15159=((1.0)*x15154);
IkReal x15160=((1.0)*x15153);
IkReal x15161=(sj5*x15153);
evalcond[0]=((((-1.0)*r22*x15159))+((r21*x15161))+(((-1.0)*x15158*x15160)));
evalcond[1]=(((r11*x15161))+(((-1.0)*x15155*x15160))+(((-1.0)*r12*x15159)));
evalcond[2]=(((x15154*x15157))+(((-1.0)*x15156*x15159))+(((-1.0)*r02*x15160)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15159))+((x15153*x15156))+(((-1.0)*x15157*x15160)));
evalcond[4]=(((x15154*x15155))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15159))+(((-1.0)*r12*x15160)));
evalcond[5]=(((x15154*x15158))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15160))+(((-1.0)*r21*sj5*x15159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15162=((1.0)*cj5);
CheckValue<IkReal> x15163 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15162)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15163.valid){
continue;
}
CheckValue<IkReal> x15164=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15162))+(((-1.0)*r20*sj5)))),-1);
if(!x15164.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15163.value)+(((1.5707963267949)*(x15164.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15165=IKsin(j4);
IkReal x15166=IKcos(j4);
IkReal x15167=(cj5*r10);
IkReal x15168=(r01*sj5);
IkReal x15169=(cj5*r00);
IkReal x15170=(cj5*r20);
IkReal x15171=((1.0)*x15166);
IkReal x15172=((1.0)*x15165);
IkReal x15173=(sj5*x15165);
evalcond[0]=((((-1.0)*x15170*x15172))+((r21*x15173))+(((-1.0)*r22*x15171)));
evalcond[1]=(((r11*x15173))+(((-1.0)*r12*x15171))+(((-1.0)*x15167*x15172)));
evalcond[2]=((((-1.0)*r02*x15172))+((x15166*x15169))+(((-1.0)*x15168*x15171)));
evalcond[3]=((1.0)+((x15165*x15168))+(((-1.0)*r02*x15171))+(((-1.0)*x15169*x15172)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15171))+((x15166*x15167))+(((-1.0)*r12*x15172)));
evalcond[5]=((((-1.0)*r21*sj5*x15171))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15166*x15170))+(((-1.0)*r22*x15172)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15174 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15174.valid){
continue;
}
CheckValue<IkReal> x15175=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15175.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15174.value)+(((1.5707963267949)*(x15175.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15176=IKsin(j4);
IkReal x15177=IKcos(j4);
IkReal x15178=(cj5*r10);
IkReal x15179=(r01*sj5);
IkReal x15180=(cj5*r00);
IkReal x15181=(cj5*r20);
IkReal x15182=((1.0)*x15177);
IkReal x15183=((1.0)*x15176);
IkReal x15184=(sj5*x15176);
evalcond[0]=(((r21*x15184))+(((-1.0)*x15181*x15183))+(((-1.0)*r22*x15182)));
evalcond[1]=(((r11*x15184))+(((-1.0)*x15178*x15183))+(((-1.0)*r12*x15182)));
evalcond[2]=((((-1.0)*r02*x15183))+((x15177*x15180))+(((-1.0)*x15179*x15182)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15182))+((x15176*x15179))+(((-1.0)*x15180*x15183)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15182))+((x15177*x15178))+((cj1*sj2))+(((-1.0)*r12*x15183)));
evalcond[5]=((((-1.0)*r21*sj5*x15182))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15177*x15181))+(((-1.0)*r22*x15183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15185=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15185;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15185);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15186=((1.0)*cj5);
IkReal x15187=((((-1.0)*r21*x15186))+(((-1.0)*r20*sj5)));
j4eval[0]=x15187;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15186))))));
j4eval[2]=IKsign(x15187);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15188=cj5*cj5;
IkReal x15189=r01*r01;
IkReal x15190=(r01*sj5);
IkReal x15191=(cj5*r00);
IkReal x15192=((((-1.0)*x15189))+(((-1.0)*(r02*r02)))+(((-1.0)*x15188*(r00*r00)))+(((2.0)*x15190*x15191))+((x15188*x15189)));
j4eval[0]=x15192;
j4eval[1]=IKsign(x15192);
j4eval[2]=((IKabs(r02))+(IKabs((x15190+(((-1.0)*x15191))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15193=cj5*cj5;
IkReal x15194=r01*r01;
IkReal x15195=(r01*sj5);
IkReal x15196=(cj5*r00);
CheckValue<IkReal> x15197=IKPowWithIntegerCheck(IKsign((((x15193*x15194))+(((2.0)*x15195*x15196))+(((-1.0)*(r02*r02)))+(((-1.0)*x15194))+(((-1.0)*x15193*(r00*r00))))),-1);
if(!x15197.valid){
continue;
}
CheckValue<IkReal> x15198 = IKatan2WithCheck(IkReal((x15195+(((-1.0)*x15196)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15197.value)))+(x15198.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15199=IKcos(j4);
IkReal x15200=IKsin(j4);
IkReal x15201=(cj5*r00);
IkReal x15202=(cj5*r10);
IkReal x15203=(r21*sj5);
IkReal x15204=(cj5*r20);
IkReal x15205=((1.0)*x15199);
IkReal x15206=((1.0)*x15200);
IkReal x15207=(sj5*x15200);
IkReal x15208=(sj5*x15199);
evalcond[0]=(((r01*x15208))+(((-1.0)*x15201*x15205))+((r02*x15200)));
evalcond[1]=(((x15200*x15203))+(((-1.0)*r22*x15205))+(((-1.0)*x15204*x15206)));
evalcond[2]=(((r11*x15207))+(((-1.0)*x15202*x15206))+(((-1.0)*r12*x15205)));
evalcond[3]=((1.0)+((r01*x15207))+(((-1.0)*x15201*x15206))+(((-1.0)*r02*x15205)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r11*x15208))+(((-1.0)*x15202*x15205))+((r12*x15200)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15200))+((x15199*x15203))+(((-1.0)*x15204*x15205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15209=((1.0)*cj5);
CheckValue<IkReal> x15210 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15210.valid){
continue;
}
CheckValue<IkReal> x15211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15209))+(((-1.0)*r20*sj5)))),-1);
if(!x15211.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15210.value)+(((1.5707963267949)*(x15211.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15212=IKcos(j4);
IkReal x15213=IKsin(j4);
IkReal x15214=(cj5*r00);
IkReal x15215=(cj5*r10);
IkReal x15216=(r21*sj5);
IkReal x15217=(cj5*r20);
IkReal x15218=((1.0)*x15212);
IkReal x15219=((1.0)*x15213);
IkReal x15220=(sj5*x15213);
IkReal x15221=(sj5*x15212);
evalcond[0]=((((-1.0)*x15214*x15218))+((r02*x15213))+((r01*x15221)));
evalcond[1]=(((x15213*x15216))+(((-1.0)*r22*x15218))+(((-1.0)*x15217*x15219)));
evalcond[2]=((((-1.0)*r12*x15218))+((r11*x15220))+(((-1.0)*x15215*x15219)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15218))+(((-1.0)*x15214*x15219))+((r01*x15220)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15213))+((r11*x15221))+(((-1.0)*x15215*x15218)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15213))+((x15212*x15216))+(((-1.0)*x15217*x15218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15222 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15222.valid){
continue;
}
CheckValue<IkReal> x15223=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15223.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15222.value)+(((1.5707963267949)*(x15223.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15224=IKcos(j4);
IkReal x15225=IKsin(j4);
IkReal x15226=(cj5*r00);
IkReal x15227=(cj5*r10);
IkReal x15228=(r21*sj5);
IkReal x15229=(cj5*r20);
IkReal x15230=((1.0)*x15224);
IkReal x15231=((1.0)*x15225);
IkReal x15232=(sj5*x15225);
IkReal x15233=(sj5*x15224);
evalcond[0]=(((r01*x15233))+((r02*x15225))+(((-1.0)*x15226*x15230)));
evalcond[1]=(((x15225*x15228))+(((-1.0)*r22*x15230))+(((-1.0)*x15229*x15231)));
evalcond[2]=((((-1.0)*r12*x15230))+((r11*x15232))+(((-1.0)*x15227*x15231)));
evalcond[3]=((1.0)+((r01*x15232))+(((-1.0)*r02*x15230))+(((-1.0)*x15226*x15231)));
evalcond[4]=(((r12*x15225))+((cj2*sj1))+((cj1*sj2))+((r11*x15233))+(((-1.0)*x15227*x15230)));
evalcond[5]=(((r22*x15225))+((x15224*x15228))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15229*x15230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15235 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15235)==0){
continue;
}
IkReal x15234=pow(x15235,-0.5);
CheckValue<IkReal> x15236 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15236.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15236.value));
IkReal gconst61=((-1.0)*r11*x15234);
IkReal gconst62=(r10*x15234);
CheckValue<IkReal> x15237 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15237.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15237.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15240 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15240.valid){
continue;
}
IkReal x15238=((-1.0)*(x15240.value));
IkReal x15239=x15234;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15238;
IkReal gconst60=x15238;
IkReal gconst61=((-1.0)*r11*x15239);
IkReal gconst62=(r10*x15239);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15243 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15243.valid){
continue;
}
IkReal x15241=((-1.0)*(x15243.value));
IkReal x15242=x15234;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15241;
IkReal gconst60=x15241;
IkReal gconst61=((-1.0)*r11*x15242);
IkReal gconst62=(r10*x15242);
CheckValue<IkReal> x15251=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15251.valid){
continue;
}
IkReal x15244=x15251.value;
IkReal x15245=(sj3*x15244);
IkReal x15246=(r20*x15245);
IkReal x15247=(r00*x15245);
IkReal x15248=(r01*x15245);
IkReal x15249=(r21*x15245);
IkReal x15250=(r10*r11*x15245);
j4eval[0]=IKsign((((r00*x15246*(r10*r10)))+((r10*r11*r21*x15247))+((r01*r10*r11*x15246))+((r21*x15248*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15252=gconst61*gconst61;
IkReal x15253=gconst62*gconst62;
IkReal x15254=(cj3*r01);
IkReal x15255=(r22*sj3);
IkReal x15256=(gconst61*r00);
IkReal x15257=((1.0)*cj3);
IkReal x15258=(gconst62*r01);
IkReal x15259=((1.0)*sj3);
IkReal x15260=(gconst61*gconst62*r20);
IkReal x15261=(r21*x15252);
IkReal x15262=(r20*x15253);
CheckValue<IkReal> x15263 = IKatan2WithCheck(IkReal((((x15255*x15256))+((x15255*x15258)))),IkReal((((gconst61*r21*sj3*x15258))+(((-1.0)*r01*x15259*x15262))+((r00*sj3*x15261))+(((-1.0)*gconst62*r20*x15256*x15259)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15263.valid){
continue;
}
CheckValue<IkReal> x15264=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15254*x15261))+((cj3*gconst62*r21*x15256))+(((-1.0)*r02*r22*x15257))+(((-1.0)*r00*x15257*x15262))+((x15254*x15260)))),-1);
if(!x15264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15263.value)+(((1.5707963267949)*(x15264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15265=IKsin(j4);
IkReal x15266=IKcos(j4);
IkReal x15267=(cj2*sj1);
IkReal x15268=(cj1*sj2);
IkReal x15269=(gconst61*sj3);
IkReal x15270=(cj3*gconst61);
IkReal x15271=(cj3*gconst62);
IkReal x15272=(sj1*sj2);
IkReal x15273=(gconst62*sj3);
IkReal x15274=(cj1*cj2);
IkReal x15275=((1.0)*x15266);
IkReal x15276=((1.0)*x15265);
IkReal x15277=(gconst61*x15265);
IkReal x15278=(cj3*x15265);
IkReal x15279=(x15267+x15268);
evalcond[0]=((((-1.0)*gconst62*r20*x15276))+(((-1.0)*r22*x15275))+((r21*x15277)));
evalcond[1]=(((r11*x15277))+(((-1.0)*r12*x15275))+(((-1.0)*gconst62*r10*x15276)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15276))+(((-1.0)*r02*x15275))+((r01*x15277)));
evalcond[3]=((((-1.0)*r00*x15271*x15275))+((r02*x15278))+((r00*x15269))+((r01*x15266*x15270))+((r01*x15273)));
evalcond[4]=((((-1.0)*r01*x15269*x15275))+(((-1.0)*r02*sj3*x15276))+((r00*x15266*x15273))+((r01*x15271))+((r00*x15270)));
evalcond[5]=(((r20*x15269))+(((-1.0)*r20*x15271*x15275))+((r22*x15278))+((r21*x15266*x15270))+x15279+((r21*x15273)));
evalcond[6]=(((r12*x15278))+((r11*x15273))+x15274+(((-1.0)*r10*x15271*x15275))+((r11*x15266*x15270))+((r10*x15269))+(((-1.0)*x15272)));
evalcond[7]=(((r11*x15271))+x15279+(((-1.0)*r11*x15269*x15275))+(((-1.0)*r12*sj3*x15276))+((r10*x15270))+((r10*x15266*x15273)));
evalcond[8]=(x15272+(((-1.0)*r22*sj3*x15276))+((r20*x15266*x15273))+((r20*x15270))+(((-1.0)*r21*x15269*x15275))+((r21*x15271))+(((-1.0)*x15274)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15280=gconst61*gconst61;
IkReal x15281=gconst62*gconst62;
IkReal x15282=(cj3*r22);
IkReal x15283=(gconst62*r01);
IkReal x15284=(gconst61*r00);
IkReal x15285=((1.0)*r20);
IkReal x15286=(cj3*r21);
IkReal x15287=(r21*sj3);
CheckValue<IkReal> x15288 = IKatan2WithCheck(IkReal((((x15282*x15284))+((x15282*x15283)))),IkReal(((((-1.0)*cj3*r01*x15281*x15285))+((r00*x15280*x15286))+((gconst61*x15283*x15286))+(((-1.0)*cj3*gconst62*x15284*x15285)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15288.valid){
continue;
}
CheckValue<IkReal> x15289=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst62*x15284*x15287))+((r01*x15280*x15287))+((r00*r20*sj3*x15281))+(((-1.0)*gconst61*sj3*x15283*x15285))+((r02*r22*sj3)))),-1);
if(!x15289.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15288.value)+(((1.5707963267949)*(x15289.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15290=IKsin(j4);
IkReal x15291=IKcos(j4);
IkReal x15292=(cj2*sj1);
IkReal x15293=(cj1*sj2);
IkReal x15294=(gconst61*sj3);
IkReal x15295=(cj3*gconst61);
IkReal x15296=(cj3*gconst62);
IkReal x15297=(sj1*sj2);
IkReal x15298=(gconst62*sj3);
IkReal x15299=(cj1*cj2);
IkReal x15300=((1.0)*x15291);
IkReal x15301=((1.0)*x15290);
IkReal x15302=(gconst61*x15290);
IkReal x15303=(cj3*x15290);
IkReal x15304=(x15292+x15293);
evalcond[0]=((((-1.0)*gconst62*r20*x15301))+((r21*x15302))+(((-1.0)*r22*x15300)));
evalcond[1]=((((-1.0)*gconst62*r10*x15301))+(((-1.0)*r12*x15300))+((r11*x15302)));
evalcond[2]=((1.0)+((r01*x15302))+(((-1.0)*r02*x15300))+(((-1.0)*gconst62*r00*x15301)));
evalcond[3]=(((r02*x15303))+((r01*x15298))+(((-1.0)*r00*x15296*x15300))+((r00*x15294))+((r01*x15291*x15295)));
evalcond[4]=((((-1.0)*r02*sj3*x15301))+((r01*x15296))+((r00*x15295))+(((-1.0)*r01*x15294*x15300))+((r00*x15291*x15298)));
evalcond[5]=(((r20*x15294))+x15304+((r21*x15298))+((r21*x15291*x15295))+((r22*x15303))+(((-1.0)*r20*x15296*x15300)));
evalcond[6]=(((r10*x15294))+(((-1.0)*r10*x15296*x15300))+(((-1.0)*x15297))+((r11*x15298))+x15299+((r11*x15291*x15295))+((r12*x15303)));
evalcond[7]=(((r10*x15291*x15298))+((r10*x15295))+((r11*x15296))+(((-1.0)*r12*sj3*x15301))+x15304+(((-1.0)*r11*x15294*x15300)));
evalcond[8]=(((r20*x15295))+(((-1.0)*x15299))+x15297+((r21*x15296))+((r20*x15291*x15298))+(((-1.0)*r21*x15294*x15300))+(((-1.0)*r22*sj3*x15301)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15305=((1.0)*gconst62);
CheckValue<IkReal> x15306=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15305)))),-1);
if(!x15306.valid){
continue;
}
CheckValue<IkReal> x15307 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15305))+((gconst61*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15306.value)))+(x15307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15308=IKsin(j4);
IkReal x15309=IKcos(j4);
IkReal x15310=(cj2*sj1);
IkReal x15311=(cj1*sj2);
IkReal x15312=(gconst61*sj3);
IkReal x15313=(cj3*gconst61);
IkReal x15314=(cj3*gconst62);
IkReal x15315=(sj1*sj2);
IkReal x15316=(gconst62*sj3);
IkReal x15317=(cj1*cj2);
IkReal x15318=((1.0)*x15309);
IkReal x15319=((1.0)*x15308);
IkReal x15320=(gconst61*x15308);
IkReal x15321=(cj3*x15308);
IkReal x15322=(x15311+x15310);
evalcond[0]=((((-1.0)*gconst62*r20*x15319))+((r21*x15320))+(((-1.0)*r22*x15318)));
evalcond[1]=(((r11*x15320))+(((-1.0)*gconst62*r10*x15319))+(((-1.0)*r12*x15318)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15319))+((r01*x15320))+(((-1.0)*r02*x15318)));
evalcond[3]=(((r01*x15309*x15313))+((r01*x15316))+((r00*x15312))+(((-1.0)*r00*x15314*x15318))+((r02*x15321)));
evalcond[4]=((((-1.0)*r01*x15312*x15318))+((r01*x15314))+((r00*x15313))+(((-1.0)*r02*sj3*x15319))+((r00*x15309*x15316)));
evalcond[5]=((((-1.0)*r20*x15314*x15318))+((r22*x15321))+x15322+((r21*x15309*x15313))+((r21*x15316))+((r20*x15312)));
evalcond[6]=(((r11*x15316))+(((-1.0)*x15315))+((r11*x15309*x15313))+((r12*x15321))+x15317+((r10*x15312))+(((-1.0)*r10*x15314*x15318)));
evalcond[7]=(((r11*x15314))+(((-1.0)*r11*x15312*x15318))+x15322+(((-1.0)*r12*sj3*x15319))+((r10*x15313))+((r10*x15309*x15316)));
evalcond[8]=((((-1.0)*x15317))+((r20*x15309*x15316))+x15315+(((-1.0)*r21*x15312*x15318))+(((-1.0)*r22*sj3*x15319))+((r21*x15314))+((r20*x15313)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15324 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15324)==0){
continue;
}
IkReal x15323=pow(x15324,-0.5);
CheckValue<IkReal> x15325 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15325.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15325.value))));
IkReal gconst64=((1.0)*r11*x15323);
IkReal gconst65=((-1.0)*r10*x15323);
CheckValue<IkReal> x15326 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15326.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15326.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15329 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15329.valid){
continue;
}
IkReal x15327=((1.0)*(x15329.value));
IkReal x15328=x15323;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15327)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15327)));
IkReal gconst64=((1.0)*r11*x15328);
IkReal gconst65=((-1.0)*r10*x15328);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15330=gconst64*gconst64;
IkReal x15331=gconst65*gconst65;
IkReal x15332=(gconst65*r01);
IkReal x15333=(cj3*r22);
IkReal x15334=(gconst64*r00);
IkReal x15335=(cj3*r21);
IkReal x15336=((1.0)*gconst64*sj3);
IkReal x15337=((1.0)*cj3*r20);
CheckValue<IkReal> x15338 = IKatan2WithCheck(IkReal((((x15333*x15334))+((x15332*x15333)))),IkReal(((((-1.0)*gconst65*x15334*x15337))+((r00*x15330*x15335))+(((-1.0)*r01*x15331*x15337))+((gconst64*x15332*x15335)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15338.valid){
continue;
}
CheckValue<IkReal> x15339=IKPowWithIntegerCheck(IKsign((((r01*r21*sj3*x15330))+((r00*r20*sj3*x15331))+(((-1.0)*r20*x15332*x15336))+(((-1.0)*gconst65*r21*sj3*x15334))+((r02*r22*sj3)))),-1);
if(!x15339.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15338.value)+(((1.5707963267949)*(x15339.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15340=IKsin(j4);
IkReal x15341=IKcos(j4);
IkReal x15342=(cj2*sj1);
IkReal x15343=(cj1*sj2);
IkReal x15344=(cj3*gconst64);
IkReal x15345=(gconst65*r21);
IkReal x15346=(sj1*sj2);
IkReal x15347=(gconst65*sj3);
IkReal x15348=(gconst64*sj3);
IkReal x15349=(cj3*gconst65);
IkReal x15350=(cj1*cj2);
IkReal x15351=((1.0)*x15341);
IkReal x15352=((1.0)*x15340);
IkReal x15353=(cj3*x15340);
IkReal x15354=(gconst64*x15340);
IkReal x15355=(x15342+x15343);
evalcond[0]=((((-1.0)*r22*x15351))+(((-1.0)*gconst65*r20*x15352))+((r21*x15354)));
evalcond[1]=((((-1.0)*r12*x15351))+((r11*x15354))+(((-1.0)*gconst65*r10*x15352)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15352))+(((-1.0)*r02*x15351))+((r01*x15354)));
evalcond[3]=(((r00*x15348))+((r01*x15347))+((r01*x15341*x15344))+(((-1.0)*r00*x15349*x15351))+((r02*x15353)));
evalcond[4]=(((r00*x15344))+((r01*x15349))+(((-1.0)*r01*x15348*x15351))+((r00*x15341*x15347))+(((-1.0)*r02*sj3*x15352)));
evalcond[5]=(((r21*x15341*x15344))+((r22*x15353))+x15355+(((-1.0)*r20*x15349*x15351))+((r20*x15348))+((sj3*x15345)));
evalcond[6]=(((r11*x15341*x15344))+(((-1.0)*r10*x15349*x15351))+((r11*x15347))+((r12*x15353))+((r10*x15348))+x15350+(((-1.0)*x15346)));
evalcond[7]=((((-1.0)*r11*x15348*x15351))+(((-1.0)*r12*sj3*x15352))+((r11*x15349))+((r10*x15344))+x15355+((r10*x15341*x15347)));
evalcond[8]=(((r20*x15341*x15347))+((cj3*x15345))+(((-1.0)*r22*sj3*x15352))+x15346+((r20*x15344))+(((-1.0)*x15350))+(((-1.0)*r21*x15348*x15351)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15356=((1.0)*gconst65);
CheckValue<IkReal> x15357 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15356))+((gconst64*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15357.valid){
continue;
}
CheckValue<IkReal> x15358=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst64*r20))+(((-1.0)*r21*x15356)))),-1);
if(!x15358.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15357.value)+(((1.5707963267949)*(x15358.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15359=IKsin(j4);
IkReal x15360=IKcos(j4);
IkReal x15361=(cj2*sj1);
IkReal x15362=(cj1*sj2);
IkReal x15363=(cj3*gconst64);
IkReal x15364=(gconst65*r21);
IkReal x15365=(sj1*sj2);
IkReal x15366=(gconst65*sj3);
IkReal x15367=(gconst64*sj3);
IkReal x15368=(cj3*gconst65);
IkReal x15369=(cj1*cj2);
IkReal x15370=((1.0)*x15360);
IkReal x15371=((1.0)*x15359);
IkReal x15372=(cj3*x15359);
IkReal x15373=(gconst64*x15359);
IkReal x15374=(x15361+x15362);
evalcond[0]=(((r21*x15373))+(((-1.0)*gconst65*r20*x15371))+(((-1.0)*r22*x15370)));
evalcond[1]=((((-1.0)*gconst65*r10*x15371))+(((-1.0)*r12*x15370))+((r11*x15373)));
evalcond[2]=((1.0)+((r01*x15373))+(((-1.0)*gconst65*r00*x15371))+(((-1.0)*r02*x15370)));
evalcond[3]=((((-1.0)*r00*x15368*x15370))+((r02*x15372))+((r00*x15367))+((r01*x15366))+((r01*x15360*x15363)));
evalcond[4]=((((-1.0)*r02*sj3*x15371))+(((-1.0)*r01*x15367*x15370))+((r00*x15360*x15366))+((r00*x15363))+((r01*x15368)));
evalcond[5]=(x15374+((r21*x15360*x15363))+(((-1.0)*r20*x15368*x15370))+((r20*x15367))+((sj3*x15364))+((r22*x15372)));
evalcond[6]=(((r10*x15367))+x15369+((r11*x15360*x15363))+((r11*x15366))+(((-1.0)*r10*x15368*x15370))+(((-1.0)*x15365))+((r12*x15372)));
evalcond[7]=(((r10*x15363))+((r10*x15360*x15366))+(((-1.0)*r12*sj3*x15371))+x15374+((r11*x15368))+(((-1.0)*r11*x15367*x15370)));
evalcond[8]=(((cj3*x15364))+x15365+(((-1.0)*x15369))+((r20*x15363))+(((-1.0)*r22*sj3*x15371))+((r20*x15360*x15366))+(((-1.0)*r21*x15367*x15370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15375=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15375);
rxp0_2=(py*r00);
rxp1_0=(r21*x15375);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15376=(r01*sj5);
IkReal x15377=((1.0)*cj5*r00);
j4eval[0]=(x15376+(((-1.0)*x15377)));
j4eval[1]=((((-1.0)*cj3*x15377))+((cj3*x15376)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15378=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15378);
rxp0_2=(py*r00);
rxp1_0=(r21*x15378);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15379=(cj5*r00);
IkReal x15380=(r01*sj5);
j4eval[0]=((((-1.0)*x15379))+x15380);
j4eval[1]=(((sj3*x15379))+(((-1.0)*sj3*x15380)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15381=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15381);
rxp0_2=(py*r00);
rxp1_0=(r21*x15381);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15382=((1.0)*r00);
CheckValue<IkReal> x15383=IKPowWithIntegerCheck(cj3,-1);
if(!x15383.valid){
continue;
}
CheckValue<IkReal> x15384=IKPowWithIntegerCheck(r12,-1);
if(!x15384.valid){
continue;
}
CheckValue<IkReal> x15385=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15382))),-1);
if(!x15385.valid){
continue;
}
if( IKabs(((x15383.value)*(x15384.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15385.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15382)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15383.value)*(x15384.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15385.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15382))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15383.value)*(x15384.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15385.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15382))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15386=IKsin(j4);
IkReal x15387=IKcos(j4);
IkReal x15388=(cj2*sj1);
IkReal x15389=(cj1*sj2);
IkReal x15390=(sj1*sj2);
IkReal x15391=(cj5*sj3);
IkReal x15392=(cj3*cj5);
IkReal x15393=(r21*sj5);
IkReal x15394=(cj1*cj2);
IkReal x15395=(r00*sj5);
IkReal x15396=(r01*sj5);
IkReal x15397=(r20*sj5);
IkReal x15398=((1.0)*x15386);
IkReal x15399=(r20*x15387);
IkReal x15400=(r00*x15387);
IkReal x15401=(cj3*x15387);
IkReal x15402=(x15388+x15389);
IkReal x15403=((1.0)*sj3*x15387);
evalcond[0]=((-1.0)*r12*x15387);
evalcond[1]=(((x15386*x15393))+(((-1.0)*cj5*r20*x15398)));
evalcond[2]=(x15394+(((-1.0)*x15390))+((cj3*r12*x15386)));
evalcond[3]=(x15402+(((-1.0)*r12*sj3*x15398)));
evalcond[4]=((1.0)+((x15386*x15396))+(((-1.0)*cj5*r00*x15398)));
evalcond[5]=((((-1.0)*x15392*x15400))+((sj3*x15395))+((r01*x15391))+((x15396*x15401)));
evalcond[6]=((((-1.0)*x15396*x15403))+((cj3*x15395))+((r01*x15392))+((x15391*x15400)));
evalcond[7]=(((r21*x15391))+(((-1.0)*x15392*x15399))+((x15393*x15401))+((sj3*x15397))+x15402);
evalcond[8]=(((r21*x15392))+((cj3*x15397))+x15390+(((-1.0)*x15393*x15403))+((x15391*x15399))+(((-1.0)*x15394)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15404=((1.0)*r01);
IkReal x15405=(cj5*r00);
CheckValue<IkReal> x15406=IKPowWithIntegerCheck(((((-1.0)*x15405))+((r01*sj5))),-1);
if(!x15406.valid){
continue;
}
CheckValue<IkReal> x15407=IKPowWithIntegerCheck((((sj3*x15405))+(((-1.0)*sj3*sj5*x15404))),-1);
if(!x15407.valid){
continue;
}
if( IKabs(((-1.0)*(x15406.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15407.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15404)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15406.value)))+IKsqr(((x15407.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15404))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15406.value)), ((x15407.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15404))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15408=IKsin(j4);
IkReal x15409=IKcos(j4);
IkReal x15410=(cj2*sj1);
IkReal x15411=(cj1*sj2);
IkReal x15412=(sj1*sj2);
IkReal x15413=(cj5*sj3);
IkReal x15414=(cj3*cj5);
IkReal x15415=(r21*sj5);
IkReal x15416=(cj1*cj2);
IkReal x15417=(r00*sj5);
IkReal x15418=(r01*sj5);
IkReal x15419=(r20*sj5);
IkReal x15420=((1.0)*x15408);
IkReal x15421=(r20*x15409);
IkReal x15422=(r00*x15409);
IkReal x15423=(cj3*x15409);
IkReal x15424=(x15410+x15411);
IkReal x15425=((1.0)*sj3*x15409);
evalcond[0]=((-1.0)*r12*x15409);
evalcond[1]=(((x15408*x15415))+(((-1.0)*cj5*r20*x15420)));
evalcond[2]=((((-1.0)*x15412))+x15416+((cj3*r12*x15408)));
evalcond[3]=((((-1.0)*r12*sj3*x15420))+x15424);
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15420))+((x15408*x15418)));
evalcond[5]=((((-1.0)*x15414*x15422))+((r01*x15413))+((x15418*x15423))+((sj3*x15417)));
evalcond[6]=(((x15413*x15422))+((cj3*x15417))+((r01*x15414))+(((-1.0)*x15418*x15425)));
evalcond[7]=((((-1.0)*x15414*x15421))+((x15415*x15423))+((sj3*x15419))+x15424+((r21*x15413)));
evalcond[8]=(((x15413*x15421))+((cj3*x15419))+(((-1.0)*x15416))+(((-1.0)*x15415*x15425))+x15412+((r21*x15414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15426=((1.0)*r00);
IkReal x15427=(r01*sj5);
CheckValue<IkReal> x15428=IKPowWithIntegerCheck(((((-1.0)*cj5*x15426))+x15427),-1);
if(!x15428.valid){
continue;
}
CheckValue<IkReal> x15429=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15426))+((cj3*x15427))),-1);
if(!x15429.valid){
continue;
}
if( IKabs(((-1.0)*(x15428.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15429.value)*(((((-1.0)*sj3*sj5*x15426))+(((-1.0)*cj5*r01*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15428.value)))+IKsqr(((x15429.value)*(((((-1.0)*sj3*sj5*x15426))+(((-1.0)*cj5*r01*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15428.value)), ((x15429.value)*(((((-1.0)*sj3*sj5*x15426))+(((-1.0)*cj5*r01*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15430=IKsin(j4);
IkReal x15431=IKcos(j4);
IkReal x15432=(cj2*sj1);
IkReal x15433=(cj1*sj2);
IkReal x15434=(sj1*sj2);
IkReal x15435=(cj5*sj3);
IkReal x15436=(cj3*cj5);
IkReal x15437=(r21*sj5);
IkReal x15438=(cj1*cj2);
IkReal x15439=(r00*sj5);
IkReal x15440=(r01*sj5);
IkReal x15441=(r20*sj5);
IkReal x15442=((1.0)*x15430);
IkReal x15443=(r20*x15431);
IkReal x15444=(r00*x15431);
IkReal x15445=(cj3*x15431);
IkReal x15446=(x15432+x15433);
IkReal x15447=((1.0)*sj3*x15431);
evalcond[0]=((-1.0)*r12*x15431);
evalcond[1]=(((x15430*x15437))+(((-1.0)*cj5*r20*x15442)));
evalcond[2]=(((cj3*r12*x15430))+(((-1.0)*x15434))+x15438);
evalcond[3]=(x15446+(((-1.0)*r12*sj3*x15442)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15442))+((x15430*x15440)));
evalcond[5]=(((sj3*x15439))+((x15440*x15445))+(((-1.0)*x15436*x15444))+((r01*x15435)));
evalcond[6]=(((x15435*x15444))+(((-1.0)*x15440*x15447))+((cj3*x15439))+((r01*x15436)));
evalcond[7]=(((sj3*x15441))+((r21*x15435))+((x15437*x15445))+(((-1.0)*x15436*x15443))+x15446);
evalcond[8]=(((r21*x15436))+((x15435*x15443))+(((-1.0)*x15438))+x15434+((cj3*x15441))+(((-1.0)*x15437*x15447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15448=cj5*cj5;
IkReal x15449=(cj3*r20);
IkReal x15450=(r21*sj3);
IkReal x15451=((1.0)*cj3);
IkReal x15452=(r01*r21);
IkReal x15453=(r01*sj3);
IkReal x15454=(r00*sj5);
IkReal x15455=(cj5*r01*sj5);
IkReal x15456=((1.0)*x15448);
CheckValue<IkReal> x15457=IKPowWithIntegerCheck(IKsign((((x15449*x15455))+((cj3*x15448*x15452))+((cj3*cj5*r21*x15454))+(((-1.0)*x15451*x15452))+(((-1.0)*r02*r22*x15451))+(((-1.0)*r00*x15449*x15456)))),-1);
if(!x15457.valid){
continue;
}
CheckValue<IkReal> x15458 = IKatan2WithCheck(IkReal((((cj5*r22*x15453))+((r22*sj3*x15454)))),IkReal((((r00*x15450))+(((-1.0)*cj5*r20*sj3*x15454))+((x15450*x15455))+(((-1.0)*r00*x15450*x15456))+(((-1.0)*r20*x15453*x15456)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15458.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15457.value)))+(x15458.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15459=IKsin(j4);
IkReal x15460=IKcos(j4);
IkReal x15461=(cj2*sj1);
IkReal x15462=(cj1*sj2);
IkReal x15463=(r11*sj5);
IkReal x15464=(cj5*r10);
IkReal x15465=(sj1*sj2);
IkReal x15466=(cj5*r01);
IkReal x15467=(cj5*r00);
IkReal x15468=(cj3*sj5);
IkReal x15469=(r21*sj5);
IkReal x15470=(cj1*cj2);
IkReal x15471=(cj5*sj3);
IkReal x15472=(sj3*sj5);
IkReal x15473=(r01*sj5);
IkReal x15474=(cj3*cj5);
IkReal x15475=(cj5*r20);
IkReal x15476=((1.0)*x15460);
IkReal x15477=((1.0)*x15459);
IkReal x15478=(cj3*x15460);
IkReal x15479=(sj3*x15460);
IkReal x15480=(cj3*x15459);
IkReal x15481=(x15462+x15461);
evalcond[0]=(((x15459*x15469))+(((-1.0)*r22*x15476))+(((-1.0)*x15475*x15477)));
evalcond[1]=(((x15459*x15463))+(((-1.0)*r12*x15476))+(((-1.0)*x15464*x15477)));
evalcond[2]=((1.0)+((x15459*x15473))+(((-1.0)*x15467*x15477))+(((-1.0)*r02*x15476)));
evalcond[3]=(((r02*x15480))+((r00*x15472))+((r01*x15460*x15468))+((sj3*x15466))+(((-1.0)*cj3*x15467*x15476)));
evalcond[4]=(((x15467*x15479))+((r00*x15468))+((cj3*x15466))+(((-1.0)*r01*x15472*x15476))+(((-1.0)*r02*sj3*x15477)));
evalcond[5]=(((r21*x15460*x15468))+((r22*x15480))+((r21*x15471))+(((-1.0)*r20*x15474*x15476))+x15481+((r20*x15472)));
evalcond[6]=((((-1.0)*x15465))+((x15463*x15478))+((r12*x15480))+(((-1.0)*cj3*x15464*x15476))+x15470+((r11*x15471))+((r10*x15472)));
evalcond[7]=((((-1.0)*r12*sj3*x15477))+(((-1.0)*sj3*x15463*x15476))+x15481+((x15464*x15479))+((r10*x15468))+((r11*x15474)));
evalcond[8]=((((-1.0)*sj3*x15469*x15476))+(((-1.0)*x15470))+((r20*x15460*x15471))+((r21*x15474))+x15465+((r20*x15468))+(((-1.0)*r22*sj3*x15477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15482=((1.0)*cj5);
CheckValue<IkReal> x15483 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15482)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15483.valid){
continue;
}
CheckValue<IkReal> x15484=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15482))+(((-1.0)*r20*sj5)))),-1);
if(!x15484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15483.value)+(((1.5707963267949)*(x15484.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15485=IKsin(j4);
IkReal x15486=IKcos(j4);
IkReal x15487=(cj2*sj1);
IkReal x15488=(cj1*sj2);
IkReal x15489=(r11*sj5);
IkReal x15490=(cj5*r10);
IkReal x15491=(sj1*sj2);
IkReal x15492=(cj5*r01);
IkReal x15493=(cj5*r00);
IkReal x15494=(cj3*sj5);
IkReal x15495=(r21*sj5);
IkReal x15496=(cj1*cj2);
IkReal x15497=(cj5*sj3);
IkReal x15498=(sj3*sj5);
IkReal x15499=(r01*sj5);
IkReal x15500=(cj3*cj5);
IkReal x15501=(cj5*r20);
IkReal x15502=((1.0)*x15486);
IkReal x15503=((1.0)*x15485);
IkReal x15504=(cj3*x15486);
IkReal x15505=(sj3*x15486);
IkReal x15506=(cj3*x15485);
IkReal x15507=(x15488+x15487);
evalcond[0]=((((-1.0)*r22*x15502))+(((-1.0)*x15501*x15503))+((x15485*x15495)));
evalcond[1]=(((x15485*x15489))+(((-1.0)*x15490*x15503))+(((-1.0)*r12*x15502)));
evalcond[2]=((1.0)+(((-1.0)*x15493*x15503))+((x15485*x15499))+(((-1.0)*r02*x15502)));
evalcond[3]=(((r00*x15498))+((sj3*x15492))+((r02*x15506))+(((-1.0)*cj3*x15493*x15502))+((r01*x15486*x15494)));
evalcond[4]=(((x15493*x15505))+((r00*x15494))+(((-1.0)*r02*sj3*x15503))+((cj3*x15492))+(((-1.0)*r01*x15498*x15502)));
evalcond[5]=(((r22*x15506))+((r20*x15498))+(((-1.0)*r20*x15500*x15502))+x15507+((r21*x15497))+((r21*x15486*x15494)));
evalcond[6]=((((-1.0)*cj3*x15490*x15502))+((r10*x15498))+((r11*x15497))+((x15489*x15504))+((r12*x15506))+x15496+(((-1.0)*x15491)));
evalcond[7]=(((x15490*x15505))+((r10*x15494))+((r11*x15500))+(((-1.0)*r12*sj3*x15503))+x15507+(((-1.0)*sj3*x15489*x15502)));
evalcond[8]=((((-1.0)*sj3*x15495*x15502))+(((-1.0)*r22*sj3*x15503))+((r20*x15486*x15497))+((r20*x15494))+x15491+((r21*x15500))+(((-1.0)*x15496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15508 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15508.valid){
continue;
}
CheckValue<IkReal> x15509=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15508.value)+(((1.5707963267949)*(x15509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15510=IKsin(j4);
IkReal x15511=IKcos(j4);
IkReal x15512=(cj2*sj1);
IkReal x15513=(cj1*sj2);
IkReal x15514=(r11*sj5);
IkReal x15515=(cj5*r10);
IkReal x15516=(sj1*sj2);
IkReal x15517=(cj5*r01);
IkReal x15518=(cj5*r00);
IkReal x15519=(cj3*sj5);
IkReal x15520=(r21*sj5);
IkReal x15521=(cj1*cj2);
IkReal x15522=(cj5*sj3);
IkReal x15523=(sj3*sj5);
IkReal x15524=(r01*sj5);
IkReal x15525=(cj3*cj5);
IkReal x15526=(cj5*r20);
IkReal x15527=((1.0)*x15511);
IkReal x15528=((1.0)*x15510);
IkReal x15529=(cj3*x15511);
IkReal x15530=(sj3*x15511);
IkReal x15531=(cj3*x15510);
IkReal x15532=(x15513+x15512);
evalcond[0]=(((x15510*x15520))+(((-1.0)*r22*x15527))+(((-1.0)*x15526*x15528)));
evalcond[1]=((((-1.0)*r12*x15527))+(((-1.0)*x15515*x15528))+((x15510*x15514)));
evalcond[2]=((1.0)+((x15510*x15524))+(((-1.0)*x15518*x15528))+(((-1.0)*r02*x15527)));
evalcond[3]=((((-1.0)*cj3*x15518*x15527))+((r02*x15531))+((sj3*x15517))+((r00*x15523))+((r01*x15511*x15519)));
evalcond[4]=((((-1.0)*r01*x15523*x15527))+((cj3*x15517))+((x15518*x15530))+(((-1.0)*r02*sj3*x15528))+((r00*x15519)));
evalcond[5]=(((r21*x15511*x15519))+((r20*x15523))+((r21*x15522))+(((-1.0)*r20*x15525*x15527))+x15532+((r22*x15531)));
evalcond[6]=(((r10*x15523))+((x15514*x15529))+(((-1.0)*cj3*x15515*x15527))+((r12*x15531))+x15521+((r11*x15522))+(((-1.0)*x15516)));
evalcond[7]=((((-1.0)*sj3*x15514*x15527))+(((-1.0)*r12*sj3*x15528))+((r10*x15519))+x15532+((r11*x15525))+((x15515*x15530)));
evalcond[8]=(((r20*x15511*x15522))+((r21*x15525))+((r20*x15519))+(((-1.0)*r22*sj3*x15528))+(((-1.0)*x15521))+(((-1.0)*sj3*x15520*x15527))+x15516);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15533=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15533);
rxp1_1=(px*r21);
rxp1_2=(r11*x15533);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15534=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15534);
rxp1_1=(px*r21);
rxp1_2=(r11*x15534);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15535=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x15535)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15535)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15536=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15536);
rxp1_1=(px*r21);
rxp1_2=(r11*x15536);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15537=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15537);
rxp1_1=(px*r21);
rxp1_2=(r11*x15537);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15538=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15538);
rxp1_1=(px*r21);
rxp1_2=(r11*x15538);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15539=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15539);
rxp1_1=(px*r21);
rxp1_2=(r11*x15539);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15542=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15542.valid){
continue;
}
IkReal x15540=x15542.value;
IkReal x15541=(sj0*x15540);
cj4array[0]=(((cj2*sj1*x15541))+((cj1*sj2*x15541)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15543=IKsin(j4);
IkReal x15544=IKcos(j4);
IkReal x15545=(cj5*r20);
IkReal x15546=(r21*sj5);
IkReal x15547=((1.0)*x15543);
IkReal x15548=((1.0)*x15544);
evalcond[0]=((-1.0)*r02*x15543);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15548)));
evalcond[2]=((((-1.0)*x15545*x15547))+((x15543*x15546)));
evalcond[3]=((((-1.0)*cj5*r10*x15547))+((r11*sj5*x15543)));
evalcond[4]=((((-1.0)*x15546*x15548))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15544*x15545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15550=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15550.valid){
continue;
}
IkReal x15549=x15550.value;
cj4array[0]=(((cj1*cj2*x15549))+(((-1.0)*sj1*sj2*x15549)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15551=IKsin(j4);
IkReal x15552=IKcos(j4);
IkReal x15553=(r11*sj5);
IkReal x15554=((1.0)*sj0);
IkReal x15555=((1.0)*x15552);
IkReal x15556=((1.0)*cj5*x15551);
evalcond[0]=((-1.0)*r02*x15551);
evalcond[1]=((((-1.0)*r02*x15555))+(((-1.0)*x15554)));
evalcond[2]=(((r21*sj5*x15551))+(((-1.0)*r20*x15556)));
evalcond[3]=(((x15551*x15553))+(((-1.0)*r10*x15556)));
evalcond[4]=(((cj5*r10*x15552))+(((-1.0)*cj1*sj2*x15554))+(((-1.0)*x15553*x15555))+(((-1.0)*cj2*sj1*x15554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15557=IKPowWithIntegerCheck(r02,-1);
if(!x15557.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15557.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15558=IKsin(j4);
IkReal x15559=IKcos(j4);
IkReal x15560=((1.0)*sj0);
IkReal x15561=(cj5*x15559);
IkReal x15562=(sj5*x15558);
IkReal x15563=((1.0)*sj5*x15559);
IkReal x15564=((1.0)*cj5*x15558);
evalcond[0]=((-1.0)*r02*x15558);
evalcond[1]=(((r21*x15562))+(((-1.0)*r20*x15564)));
evalcond[2]=((((-1.0)*r10*x15564))+((r11*x15562)));
evalcond[3]=((((-1.0)*r21*x15563))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x15561)));
evalcond[4]=((((-1.0)*r11*x15563))+((r10*x15561))+(((-1.0)*cj1*sj2*x15560))+(((-1.0)*cj2*sj1*x15560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15565=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15565);
rxp1_1=(px*r21);
rxp1_2=(r11*x15565);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15566=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15566);
rxp1_1=(px*r21);
rxp1_2=(r11*x15566);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15567=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15567);
rxp1_1=(px*r21);
rxp1_2=(r11*x15567);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15570=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15570.valid){
continue;
}
IkReal x15568=x15570.value;
IkReal x15569=(sj0*x15568);
cj4array[0]=(((cj2*sj1*x15569))+((cj1*sj2*x15569)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15571=IKsin(j4);
IkReal x15572=IKcos(j4);
IkReal x15573=(r21*sj5);
IkReal x15574=((1.0)*cj5*r20);
evalcond[0]=(r02*x15571);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15572)));
evalcond[2]=(((x15571*x15573))+(((-1.0)*x15571*x15574)));
evalcond[3]=(((r11*sj5*x15571))+(((-1.0)*cj5*r10*x15571)));
evalcond[4]=(((x15572*x15573))+(((-1.0)*x15572*x15574))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15576=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15576.valid){
continue;
}
IkReal x15575=x15576.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15575))+((cj1*cj2*x15575)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15577=IKsin(j4);
IkReal x15578=IKcos(j4);
IkReal x15579=((1.0)*sj0);
IkReal x15580=((1.0)*cj5);
IkReal x15581=(sj5*x15577);
evalcond[0]=(r02*x15577);
evalcond[1]=((((-1.0)*r02*x15578))+(((-1.0)*x15579)));
evalcond[2]=((((-1.0)*r20*x15577*x15580))+((r21*x15581)));
evalcond[3]=(((r11*x15581))+(((-1.0)*r10*x15577*x15580)));
evalcond[4]=(((r11*sj5*x15578))+(((-1.0)*cj1*sj2*x15579))+(((-1.0)*r10*x15578*x15580))+(((-1.0)*cj2*sj1*x15579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15582=IKPowWithIntegerCheck(r02,-1);
if(!x15582.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15582.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15583=IKsin(j4);
IkReal x15584=IKcos(j4);
IkReal x15585=((1.0)*cj1);
IkReal x15586=(r21*sj5);
IkReal x15587=((1.0)*cj5);
IkReal x15588=(r11*sj5);
evalcond[0]=(r02*x15583);
evalcond[1]=((((-1.0)*r20*x15583*x15587))+((x15583*x15586)));
evalcond[2]=((((-1.0)*r10*x15583*x15587))+((x15583*x15588)));
evalcond[3]=(((x15584*x15586))+(((-1.0)*cj2*x15585))+((sj1*sj2))+(((-1.0)*r20*x15584*x15587)));
evalcond[4]=(((x15584*x15588))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x15585))+(((-1.0)*r10*x15584*x15587)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15589 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15589.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15589.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15590 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15590.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15590.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15591=((-1.0)*r10);
CheckValue<IkReal> x15593 = IKatan2WithCheck(IkReal(x15591),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15593.valid){
continue;
}
IkReal x15592=((-1.0)*(x15593.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15591);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15592;
IkReal gconst66=x15592;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15594=((-1.0)*r10);
CheckValue<IkReal> x15596 = IKatan2WithCheck(IkReal(x15594),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15596.valid){
continue;
}
IkReal x15595=((-1.0)*(x15596.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15594);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15595;
IkReal gconst66=x15595;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15597=((-1.0)*r10);
CheckValue<IkReal> x15599 = IKatan2WithCheck(IkReal(x15597),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15599.valid){
continue;
}
IkReal x15598=((-1.0)*(x15599.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15597);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15598;
IkReal gconst66=x15598;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15600=((1.0)*gconst67);
IkReal x15601=(cj1*cj2);
IkReal x15602=((1.0)*sj1*sj2);
CheckValue<IkReal> x15603=IKPowWithIntegerCheck(cj3,-1);
if(!x15603.valid){
continue;
}
CheckValue<IkReal> x15604=IKPowWithIntegerCheck(r02,-1);
if(!x15604.valid){
continue;
}
CheckValue<IkReal> x15605=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15600))+((gconst68*r20*sj3))),-1);
if(!x15605.valid){
continue;
}
if( IKabs(((x15603.value)*(x15604.value)*((((cj0*x15601))+(((-1.0)*cj0*x15602)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15605.value)*(((((-1.0)*x15602))+x15601+(((-1.0)*cj3*r20*x15600))+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15603.value)*(x15604.value)*((((cj0*x15601))+(((-1.0)*cj0*x15602))))))+IKsqr(((x15605.value)*(((((-1.0)*x15602))+x15601+(((-1.0)*cj3*r20*x15600))+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15603.value)*(x15604.value)*((((cj0*x15601))+(((-1.0)*cj0*x15602))))), ((x15605.value)*(((((-1.0)*x15602))+x15601+(((-1.0)*cj3*r20*x15600))+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15606=IKsin(j4);
IkReal x15607=IKcos(j4);
IkReal x15608=(sj1*sj2);
IkReal x15609=(gconst68*sj3);
IkReal x15610=(gconst67*r11);
IkReal x15611=(gconst67*sj3);
IkReal x15612=((1.0)*gconst68);
IkReal x15613=(cj2*sj1);
IkReal x15614=((1.0)*cj0);
IkReal x15615=((1.0)*sj0);
IkReal x15616=(cj3*gconst67);
IkReal x15617=(cj3*gconst68);
IkReal x15618=(cj1*sj2);
IkReal x15619=(gconst67*r21);
IkReal x15620=((1.0)*cj1*cj2);
IkReal x15621=(cj3*x15607);
IkReal x15622=((1.0)*x15607);
IkReal x15623=(r02*x15606);
evalcond[0]=((((-1.0)*x15615))+(((-1.0)*r02*x15622)));
evalcond[1]=(((x15606*x15619))+(((-1.0)*r20*x15606*x15612)));
evalcond[2]=(cj0+((x15606*x15610))+(((-1.0)*r10*x15606*x15612)));
evalcond[3]=(((cj0*x15608))+((cj3*x15623))+(((-1.0)*cj1*cj2*x15614)));
evalcond[4]=((((-1.0)*x15613*x15614))+(((-1.0)*x15614*x15618))+(((-1.0)*sj3*x15623)));
evalcond[5]=(((r21*x15607*x15616))+x15613+x15618+(((-1.0)*r20*x15612*x15621))+((r20*x15611))+((r21*x15609)));
evalcond[6]=(((r21*x15617))+((r20*x15607*x15609))+(((-1.0)*x15620))+x15608+((r20*x15616))+(((-1.0)*r21*x15611*x15622)));
evalcond[7]=((((-1.0)*r10*x15612*x15621))+((x15610*x15621))+((r10*x15611))+(((-1.0)*cj1*cj2*x15615))+((r11*x15609))+((sj0*x15608)));
evalcond[8]=((((-1.0)*x15615*x15618))+((r10*x15607*x15609))+(((-1.0)*sj3*x15610*x15622))+(((-1.0)*x15613*x15615))+((r11*x15617))+((r10*x15616)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15626=IKPowWithIntegerCheck(r02,-1);
if(!x15626.valid){
continue;
}
IkReal x15624=x15626.value;
IkReal x15625=((1.0)*cj0);
CheckValue<IkReal> x15627=IKPowWithIntegerCheck(sj3,-1);
if(!x15627.valid){
continue;
}
if( IKabs((x15624*(x15627.value)*(((((-1.0)*cj1*sj2*x15625))+(((-1.0)*cj2*sj1*x15625)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15624)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15624*(x15627.value)*(((((-1.0)*cj1*sj2*x15625))+(((-1.0)*cj2*sj1*x15625))))))+IKsqr(((-1.0)*sj0*x15624))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15624*(x15627.value)*(((((-1.0)*cj1*sj2*x15625))+(((-1.0)*cj2*sj1*x15625))))), ((-1.0)*sj0*x15624));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15628=IKsin(j4);
IkReal x15629=IKcos(j4);
IkReal x15630=(sj1*sj2);
IkReal x15631=(gconst68*sj3);
IkReal x15632=(gconst67*r11);
IkReal x15633=(gconst67*sj3);
IkReal x15634=((1.0)*gconst68);
IkReal x15635=(cj2*sj1);
IkReal x15636=((1.0)*cj0);
IkReal x15637=((1.0)*sj0);
IkReal x15638=(cj3*gconst67);
IkReal x15639=(cj3*gconst68);
IkReal x15640=(cj1*sj2);
IkReal x15641=(gconst67*r21);
IkReal x15642=((1.0)*cj1*cj2);
IkReal x15643=(cj3*x15629);
IkReal x15644=((1.0)*x15629);
IkReal x15645=(r02*x15628);
evalcond[0]=((((-1.0)*r02*x15644))+(((-1.0)*x15637)));
evalcond[1]=((((-1.0)*r20*x15628*x15634))+((x15628*x15641)));
evalcond[2]=(cj0+(((-1.0)*r10*x15628*x15634))+((x15628*x15632)));
evalcond[3]=((((-1.0)*cj1*cj2*x15636))+((cj3*x15645))+((cj0*x15630)));
evalcond[4]=((((-1.0)*sj3*x15645))+(((-1.0)*x15636*x15640))+(((-1.0)*x15635*x15636)));
evalcond[5]=(((r20*x15633))+(((-1.0)*r20*x15634*x15643))+x15635+x15640+((r21*x15629*x15638))+((r21*x15631)));
evalcond[6]=(((r20*x15638))+((r20*x15629*x15631))+x15630+((r21*x15639))+(((-1.0)*x15642))+(((-1.0)*r21*x15633*x15644)));
evalcond[7]=((((-1.0)*cj1*cj2*x15637))+((r11*x15631))+((x15632*x15643))+((sj0*x15630))+((r10*x15633))+(((-1.0)*r10*x15634*x15643)));
evalcond[8]=((((-1.0)*x15637*x15640))+((r10*x15629*x15631))+(((-1.0)*sj3*x15632*x15644))+(((-1.0)*x15635*x15637))+((r11*x15639))+((r10*x15638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15647=IKPowWithIntegerCheck(r02,-1);
if(!x15647.valid){
continue;
}
IkReal x15646=x15647.value;
CheckValue<IkReal> x15648=IKPowWithIntegerCheck(cj3,-1);
if(!x15648.valid){
continue;
}
if( IKabs((x15646*(x15648.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15646)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15646*(x15648.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15646))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15646*(x15648.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15646));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15649=IKsin(j4);
IkReal x15650=IKcos(j4);
IkReal x15651=(sj1*sj2);
IkReal x15652=(gconst68*sj3);
IkReal x15653=(gconst67*r11);
IkReal x15654=(gconst67*sj3);
IkReal x15655=((1.0)*gconst68);
IkReal x15656=(cj2*sj1);
IkReal x15657=((1.0)*cj0);
IkReal x15658=((1.0)*sj0);
IkReal x15659=(cj3*gconst67);
IkReal x15660=(cj3*gconst68);
IkReal x15661=(cj1*sj2);
IkReal x15662=(gconst67*r21);
IkReal x15663=((1.0)*cj1*cj2);
IkReal x15664=(cj3*x15650);
IkReal x15665=((1.0)*x15650);
IkReal x15666=(r02*x15649);
evalcond[0]=((((-1.0)*x15658))+(((-1.0)*r02*x15665)));
evalcond[1]=((((-1.0)*r20*x15649*x15655))+((x15649*x15662)));
evalcond[2]=(cj0+(((-1.0)*r10*x15649*x15655))+((x15649*x15653)));
evalcond[3]=((((-1.0)*cj1*cj2*x15657))+((cj3*x15666))+((cj0*x15651)));
evalcond[4]=((((-1.0)*x15657*x15661))+(((-1.0)*x15656*x15657))+(((-1.0)*sj3*x15666)));
evalcond[5]=(((r21*x15650*x15659))+(((-1.0)*r20*x15655*x15664))+x15656+x15661+((r21*x15652))+((r20*x15654)));
evalcond[6]=((((-1.0)*r21*x15654*x15665))+(((-1.0)*x15663))+x15651+((r21*x15660))+((r20*x15650*x15652))+((r20*x15659)));
evalcond[7]=(((r10*x15654))+(((-1.0)*cj1*cj2*x15658))+((r11*x15652))+(((-1.0)*r10*x15655*x15664))+((x15653*x15664))+((sj0*x15651)));
evalcond[8]=(((r10*x15659))+(((-1.0)*sj3*x15653*x15665))+(((-1.0)*x15658*x15661))+((r11*x15660))+((r10*x15650*x15652))+(((-1.0)*x15656*x15658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15667=((-1.0)*r10);
CheckValue<IkReal> x15668 = IKatan2WithCheck(IkReal(x15667),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15668.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15668.value))));
IkReal gconst70=x15667;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15669 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15669.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15669.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15670=((-1.0)*r10);
IkReal x15671=((-1.0)*r11);
CheckValue<IkReal> x15673 = IKatan2WithCheck(IkReal(x15670),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15673.valid){
continue;
}
IkReal x15672=((1.0)*(x15673.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15670);
rxp1_1=(px*r21);
rxp1_2=(px*x15671);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15672)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15672)));
IkReal gconst70=x15670;
IkReal gconst71=x15671;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15674=((-1.0)*r10);
IkReal x15675=((-1.0)*r11);
CheckValue<IkReal> x15677 = IKatan2WithCheck(IkReal(x15674),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15677.valid){
continue;
}
IkReal x15676=((1.0)*(x15677.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15674);
rxp1_1=(px*r21);
rxp1_2=(px*x15675);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15676)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15676)));
IkReal gconst70=x15674;
IkReal gconst71=x15675;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15678=((-1.0)*r10);
IkReal x15679=((-1.0)*r11);
CheckValue<IkReal> x15681 = IKatan2WithCheck(IkReal(x15678),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15681.valid){
continue;
}
IkReal x15680=((1.0)*(x15681.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15678);
rxp1_1=(px*r21);
rxp1_2=(px*x15679);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15680)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15680)));
IkReal gconst70=x15678;
IkReal gconst71=x15679;
IkReal x15682=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((r10*r21*x15682))+(((-1.0)*r11*r20*x15682)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15683=((1.0)*r21);
IkReal x15684=(cj1*cj2);
IkReal x15685=((1.0)*sj1*sj2);
CheckValue<IkReal> x15686=IKPowWithIntegerCheck(cj3,-1);
if(!x15686.valid){
continue;
}
CheckValue<IkReal> x15687=IKPowWithIntegerCheck(r02,-1);
if(!x15687.valid){
continue;
}
CheckValue<IkReal> x15688=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15683))+((gconst71*r20*sj3))),-1);
if(!x15688.valid){
continue;
}
if( IKabs(((x15686.value)*(x15687.value)*((((cj0*x15684))+(((-1.0)*cj0*x15685)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15688.value)*(((((-1.0)*cj3*gconst71*x15683))+x15684+(((-1.0)*x15685))+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15686.value)*(x15687.value)*((((cj0*x15684))+(((-1.0)*cj0*x15685))))))+IKsqr(((x15688.value)*(((((-1.0)*cj3*gconst71*x15683))+x15684+(((-1.0)*x15685))+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15686.value)*(x15687.value)*((((cj0*x15684))+(((-1.0)*cj0*x15685))))), ((x15688.value)*(((((-1.0)*cj3*gconst71*x15683))+x15684+(((-1.0)*x15685))+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15689=IKsin(j4);
IkReal x15690=IKcos(j4);
IkReal x15691=(cj3*gconst70);
IkReal x15692=(sj1*sj2);
IkReal x15693=((1.0)*gconst71);
IkReal x15694=(gconst71*sj3);
IkReal x15695=(cj2*sj1);
IkReal x15696=((1.0)*sj0);
IkReal x15697=(gconst70*r11);
IkReal x15698=(gconst70*sj3);
IkReal x15699=((1.0)*cj0);
IkReal x15700=(cj3*gconst71);
IkReal x15701=(cj1*sj2);
IkReal x15702=((1.0)*cj1*cj2);
IkReal x15703=(r21*x15690);
IkReal x15704=(r10*x15690);
IkReal x15705=((1.0)*x15690);
IkReal x15706=(r02*x15689);
IkReal x15707=(r20*x15690);
evalcond[0]=((((-1.0)*x15696))+(((-1.0)*r02*x15705)));
evalcond[1]=(((gconst70*r21*x15689))+(((-1.0)*r20*x15689*x15693)));
evalcond[2]=(cj0+((x15689*x15697))+(((-1.0)*r10*x15689*x15693)));
evalcond[3]=(((cj3*x15706))+((cj0*x15692))+(((-1.0)*cj1*cj2*x15699)));
evalcond[4]=((((-1.0)*x15695*x15699))+(((-1.0)*sj3*x15706))+(((-1.0)*x15699*x15701)));
evalcond[5]=(((r20*x15698))+((r21*x15694))+x15695+x15701+(((-1.0)*cj3*x15693*x15707))+((x15691*x15703)));
evalcond[6]=((((-1.0)*x15702))+((r20*x15691))+((x15694*x15707))+x15692+((r21*x15700))+(((-1.0)*x15698*x15703)));
evalcond[7]=(((r10*x15698))+((r11*x15690*x15691))+((r11*x15694))+((sj0*x15692))+(((-1.0)*cj3*x15693*x15704))+(((-1.0)*cj1*cj2*x15696)));
evalcond[8]=(((r11*x15700))+((r10*x15691))+(((-1.0)*sj3*x15697*x15705))+((x15694*x15704))+(((-1.0)*x15696*x15701))+(((-1.0)*x15695*x15696)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15710=IKPowWithIntegerCheck(r02,-1);
if(!x15710.valid){
continue;
}
IkReal x15708=x15710.value;
IkReal x15709=((1.0)*cj0);
CheckValue<IkReal> x15711=IKPowWithIntegerCheck(sj3,-1);
if(!x15711.valid){
continue;
}
if( IKabs((x15708*(x15711.value)*(((((-1.0)*cj2*sj1*x15709))+(((-1.0)*cj1*sj2*x15709)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15708)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15708*(x15711.value)*(((((-1.0)*cj2*sj1*x15709))+(((-1.0)*cj1*sj2*x15709))))))+IKsqr(((-1.0)*sj0*x15708))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15708*(x15711.value)*(((((-1.0)*cj2*sj1*x15709))+(((-1.0)*cj1*sj2*x15709))))), ((-1.0)*sj0*x15708));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15712=IKsin(j4);
IkReal x15713=IKcos(j4);
IkReal x15714=(cj3*gconst70);
IkReal x15715=(sj1*sj2);
IkReal x15716=((1.0)*gconst71);
IkReal x15717=(gconst71*sj3);
IkReal x15718=(cj2*sj1);
IkReal x15719=((1.0)*sj0);
IkReal x15720=(gconst70*r11);
IkReal x15721=(gconst70*sj3);
IkReal x15722=((1.0)*cj0);
IkReal x15723=(cj3*gconst71);
IkReal x15724=(cj1*sj2);
IkReal x15725=((1.0)*cj1*cj2);
IkReal x15726=(r21*x15713);
IkReal x15727=(r10*x15713);
IkReal x15728=((1.0)*x15713);
IkReal x15729=(r02*x15712);
IkReal x15730=(r20*x15713);
evalcond[0]=((((-1.0)*x15719))+(((-1.0)*r02*x15728)));
evalcond[1]=((((-1.0)*r20*x15712*x15716))+((gconst70*r21*x15712)));
evalcond[2]=(cj0+((x15712*x15720))+(((-1.0)*r10*x15712*x15716)));
evalcond[3]=((((-1.0)*cj1*cj2*x15722))+((cj0*x15715))+((cj3*x15729)));
evalcond[4]=((((-1.0)*sj3*x15729))+(((-1.0)*x15722*x15724))+(((-1.0)*x15718*x15722)));
evalcond[5]=(((r20*x15721))+((r21*x15717))+x15724+x15718+((x15714*x15726))+(((-1.0)*cj3*x15716*x15730)));
evalcond[6]=((((-1.0)*x15725))+((r20*x15714))+((r21*x15723))+x15715+(((-1.0)*x15721*x15726))+((x15717*x15730)));
evalcond[7]=(((r11*x15713*x15714))+(((-1.0)*cj1*cj2*x15719))+((r10*x15721))+((sj0*x15715))+(((-1.0)*cj3*x15716*x15727))+((r11*x15717)));
evalcond[8]=(((r11*x15723))+(((-1.0)*sj3*x15720*x15728))+(((-1.0)*x15718*x15719))+((r10*x15714))+(((-1.0)*x15719*x15724))+((x15717*x15727)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15732=IKPowWithIntegerCheck(r02,-1);
if(!x15732.valid){
continue;
}
IkReal x15731=x15732.value;
CheckValue<IkReal> x15733=IKPowWithIntegerCheck(cj3,-1);
if(!x15733.valid){
continue;
}
if( IKabs((x15731*(x15733.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15731)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15731*(x15733.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15731))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15731*(x15733.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15731));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15734=IKsin(j4);
IkReal x15735=IKcos(j4);
IkReal x15736=(cj3*gconst70);
IkReal x15737=(sj1*sj2);
IkReal x15738=((1.0)*gconst71);
IkReal x15739=(gconst71*sj3);
IkReal x15740=(cj2*sj1);
IkReal x15741=((1.0)*sj0);
IkReal x15742=(gconst70*r11);
IkReal x15743=(gconst70*sj3);
IkReal x15744=((1.0)*cj0);
IkReal x15745=(cj3*gconst71);
IkReal x15746=(cj1*sj2);
IkReal x15747=((1.0)*cj1*cj2);
IkReal x15748=(r21*x15735);
IkReal x15749=(r10*x15735);
IkReal x15750=((1.0)*x15735);
IkReal x15751=(r02*x15734);
IkReal x15752=(r20*x15735);
evalcond[0]=((((-1.0)*x15741))+(((-1.0)*r02*x15750)));
evalcond[1]=((((-1.0)*r20*x15734*x15738))+((gconst70*r21*x15734)));
evalcond[2]=(cj0+((x15734*x15742))+(((-1.0)*r10*x15734*x15738)));
evalcond[3]=(((cj3*x15751))+((cj0*x15737))+(((-1.0)*cj1*cj2*x15744)));
evalcond[4]=((((-1.0)*x15744*x15746))+(((-1.0)*sj3*x15751))+(((-1.0)*x15740*x15744)));
evalcond[5]=((((-1.0)*cj3*x15738*x15752))+((r21*x15739))+x15746+x15740+((r20*x15743))+((x15736*x15748)));
evalcond[6]=((((-1.0)*x15743*x15748))+((r20*x15736))+(((-1.0)*x15747))+((r21*x15745))+x15737+((x15739*x15752)));
evalcond[7]=(((r11*x15739))+((r11*x15735*x15736))+((sj0*x15737))+(((-1.0)*cj3*x15738*x15749))+(((-1.0)*cj1*cj2*x15741))+((r10*x15743)));
evalcond[8]=(((x15739*x15749))+(((-1.0)*sj3*x15742*x15750))+(((-1.0)*x15741*x15746))+((r11*x15745))+((r10*x15736))+(((-1.0)*x15740*x15741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15754=IKPowWithIntegerCheck(r02,-1);
if(!x15754.valid){
continue;
}
IkReal x15753=x15754.value;
CheckValue<IkReal> x15755=IKPowWithIntegerCheck(cj3,-1);
if(!x15755.valid){
continue;
}
if( IKabs((x15753*(x15755.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15753)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15753*(x15755.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15753))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15753*(x15755.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15753));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15756=IKsin(j4);
IkReal x15757=IKcos(j4);
IkReal x15758=(cj5*r10);
IkReal x15759=(sj1*sj2);
IkReal x15760=(cj5*sj3);
IkReal x15761=(r11*sj5);
IkReal x15762=(cj3*cj5);
IkReal x15763=(cj3*sj5);
IkReal x15764=(r21*sj5);
IkReal x15765=(cj2*sj1);
IkReal x15766=((1.0)*sj0);
IkReal x15767=((1.0)*cj0);
IkReal x15768=(sj3*sj5);
IkReal x15769=(cj1*sj2);
IkReal x15770=((1.0)*cj1*cj2);
IkReal x15771=((1.0)*x15756);
IkReal x15772=(r20*x15757);
IkReal x15773=(cj3*x15757);
IkReal x15774=(sj3*x15757);
evalcond[0]=((((-1.0)*r02*x15757))+(((-1.0)*x15766)));
evalcond[1]=(((x15756*x15764))+(((-1.0)*cj5*r20*x15771)));
evalcond[2]=(cj0+((x15756*x15761))+(((-1.0)*x15758*x15771)));
evalcond[3]=(((cj3*r02*x15756))+(((-1.0)*cj1*cj2*x15767))+((cj0*x15759)));
evalcond[4]=((((-1.0)*r02*sj3*x15771))+(((-1.0)*x15765*x15767))+(((-1.0)*x15767*x15769)));
evalcond[5]=(((r21*x15760))+((r20*x15768))+x15769+x15765+((r21*x15757*x15763))+(((-1.0)*x15762*x15772)));
evalcond[6]=(((r21*x15762))+(((-1.0)*x15770))+(((-1.0)*x15764*x15774))+((r20*x15763))+((x15760*x15772))+x15759);
evalcond[7]=(((r10*x15768))+(((-1.0)*x15758*x15773))+((sj0*x15759))+((x15761*x15773))+(((-1.0)*cj1*cj2*x15766))+((r11*x15760)));
evalcond[8]=(((r10*x15763))+(((-1.0)*x15761*x15774))+((x15758*x15774))+(((-1.0)*x15765*x15766))+((r11*x15762))+(((-1.0)*x15766*x15769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15775=((1.0)*sj3);
IkReal x15776=((1.0)*cj5);
CheckValue<IkReal> x15777=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15776))),-1);
if(!x15777.valid){
continue;
}
CheckValue<IkReal> x15778=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15776))),-1);
if(!x15778.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15777.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15778.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15775))+(((-1.0)*cj5*r21*x15775)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15777.value)))+IKsqr(((x15778.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15775))+(((-1.0)*cj5*r21*x15775))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15777.value)), ((x15778.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15775))+(((-1.0)*cj5*r21*x15775))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15779=IKsin(j4);
IkReal x15780=IKcos(j4);
IkReal x15781=(cj5*r10);
IkReal x15782=(sj1*sj2);
IkReal x15783=(cj5*sj3);
IkReal x15784=(r11*sj5);
IkReal x15785=(cj3*cj5);
IkReal x15786=(cj3*sj5);
IkReal x15787=(r21*sj5);
IkReal x15788=(cj2*sj1);
IkReal x15789=((1.0)*sj0);
IkReal x15790=((1.0)*cj0);
IkReal x15791=(sj3*sj5);
IkReal x15792=(cj1*sj2);
IkReal x15793=((1.0)*cj1*cj2);
IkReal x15794=((1.0)*x15779);
IkReal x15795=(r20*x15780);
IkReal x15796=(cj3*x15780);
IkReal x15797=(sj3*x15780);
evalcond[0]=((((-1.0)*r02*x15780))+(((-1.0)*x15789)));
evalcond[1]=((((-1.0)*cj5*r20*x15794))+((x15779*x15787)));
evalcond[2]=(cj0+(((-1.0)*x15781*x15794))+((x15779*x15784)));
evalcond[3]=((((-1.0)*cj1*cj2*x15790))+((cj0*x15782))+((cj3*r02*x15779)));
evalcond[4]=((((-1.0)*r02*sj3*x15794))+(((-1.0)*x15788*x15790))+(((-1.0)*x15790*x15792)));
evalcond[5]=((((-1.0)*x15785*x15795))+((r21*x15783))+((r20*x15791))+x15788+x15792+((r21*x15780*x15786)));
evalcond[6]=(((r21*x15785))+(((-1.0)*x15793))+(((-1.0)*x15787*x15797))+((x15783*x15795))+x15782+((r20*x15786)));
evalcond[7]=((((-1.0)*cj1*cj2*x15789))+((sj0*x15782))+((r10*x15791))+((r11*x15783))+(((-1.0)*x15781*x15796))+((x15784*x15796)));
evalcond[8]=((((-1.0)*x15784*x15797))+((r10*x15786))+((x15781*x15797))+(((-1.0)*x15789*x15792))+((r11*x15785))+(((-1.0)*x15788*x15789)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15798=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15798.valid){
continue;
}
CheckValue<IkReal> x15799=IKPowWithIntegerCheck(r02,-1);
if(!x15799.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15798.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15799.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15798.value)))+IKsqr(((-1.0)*sj0*(x15799.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15798.value)), ((-1.0)*sj0*(x15799.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15800=IKsin(j4);
IkReal x15801=IKcos(j4);
IkReal x15802=(cj5*r10);
IkReal x15803=(sj1*sj2);
IkReal x15804=(cj5*sj3);
IkReal x15805=(r11*sj5);
IkReal x15806=(cj3*cj5);
IkReal x15807=(cj3*sj5);
IkReal x15808=(r21*sj5);
IkReal x15809=(cj2*sj1);
IkReal x15810=((1.0)*sj0);
IkReal x15811=((1.0)*cj0);
IkReal x15812=(sj3*sj5);
IkReal x15813=(cj1*sj2);
IkReal x15814=((1.0)*cj1*cj2);
IkReal x15815=((1.0)*x15800);
IkReal x15816=(r20*x15801);
IkReal x15817=(cj3*x15801);
IkReal x15818=(sj3*x15801);
evalcond[0]=((((-1.0)*x15810))+(((-1.0)*r02*x15801)));
evalcond[1]=((((-1.0)*cj5*r20*x15815))+((x15800*x15808)));
evalcond[2]=(cj0+((x15800*x15805))+(((-1.0)*x15802*x15815)));
evalcond[3]=((((-1.0)*cj1*cj2*x15811))+((cj0*x15803))+((cj3*r02*x15800)));
evalcond[4]=((((-1.0)*r02*sj3*x15815))+(((-1.0)*x15809*x15811))+(((-1.0)*x15811*x15813)));
evalcond[5]=(((r21*x15804))+(((-1.0)*x15806*x15816))+((r20*x15812))+x15809+x15813+((r21*x15801*x15807)));
evalcond[6]=((((-1.0)*x15814))+(((-1.0)*x15808*x15818))+((x15804*x15816))+((r21*x15806))+x15803+((r20*x15807)));
evalcond[7]=((((-1.0)*cj1*cj2*x15810))+((r10*x15812))+((r11*x15804))+(((-1.0)*x15802*x15817))+((x15805*x15817))+((sj0*x15803)));
evalcond[8]=(((x15802*x15818))+((r10*x15807))+((r11*x15806))+(((-1.0)*x15809*x15810))+(((-1.0)*x15810*x15813))+(((-1.0)*x15805*x15818)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15819=((1.0)*sj0);
IkReal x15820=((1.0)*cj0);
CheckValue<IkReal> x15821=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15821.valid){
continue;
}
CheckValue<IkReal> x15822 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15820))+(((-1.0)*r12*x15819)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x15820))+(((-1.0)*r11*sj5*x15819)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15822.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15821.value)))+(x15822.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15823=IKsin(j4);
IkReal x15824=IKcos(j4);
IkReal x15825=(r11*sj5);
IkReal x15826=(cj5*r10);
IkReal x15827=(sj1*sj2);
IkReal x15828=(cj5*sj3);
IkReal x15829=((1.0)*sj0);
IkReal x15830=(cj3*cj5);
IkReal x15831=(cj3*sj5);
IkReal x15832=(r21*sj5);
IkReal x15833=(cj2*sj1);
IkReal x15834=(sj3*sj5);
IkReal x15835=(r01*sj5);
IkReal x15836=((1.0)*cj0);
IkReal x15837=(cj1*sj2);
IkReal x15838=((1.0)*x15824);
IkReal x15839=((1.0)*x15823);
IkReal x15840=(cj3*x15824);
IkReal x15841=((1.0)*cj1*cj2);
IkReal x15842=(cj3*x15823);
evalcond[0]=(((x15823*x15832))+(((-1.0)*r22*x15838))+(((-1.0)*cj5*r20*x15839)));
evalcond[1]=(cj0+((x15823*x15825))+(((-1.0)*x15826*x15839))+(((-1.0)*r12*x15838)));
evalcond[2]=((((-1.0)*r02*x15838))+(((-1.0)*x15829))+((x15823*x15835))+(((-1.0)*cj5*r00*x15839)));
evalcond[3]=((((-1.0)*r20*x15830*x15838))+((r20*x15834))+((r21*x15828))+((r21*x15824*x15831))+((r22*x15842))+x15833+x15837);
evalcond[4]=((((-1.0)*sj3*x15832*x15838))+((r20*x15831))+(((-1.0)*r22*sj3*x15839))+((r20*x15824*x15828))+(((-1.0)*x15841))+x15827+((r21*x15830)));
evalcond[5]=(((r01*x15828))+((r02*x15842))+((r01*x15824*x15831))+((r00*x15834))+(((-1.0)*cj1*cj2*x15836))+(((-1.0)*r00*x15830*x15838))+((cj0*x15827)));
evalcond[6]=(((r10*x15834))+((x15825*x15840))+(((-1.0)*cj3*x15826*x15838))+(((-1.0)*cj1*cj2*x15829))+((r12*x15842))+((r11*x15828))+((sj0*x15827)));
evalcond[7]=((((-1.0)*r02*sj3*x15839))+(((-1.0)*x15833*x15836))+((r00*x15824*x15828))+(((-1.0)*r01*x15834*x15838))+(((-1.0)*x15836*x15837))+((r01*x15830))+((r00*x15831)));
evalcond[8]=(((r10*x15831))+((sj3*x15824*x15826))+((r11*x15830))+(((-1.0)*sj3*x15825*x15838))+(((-1.0)*x15829*x15837))+(((-1.0)*x15829*x15833))+(((-1.0)*r12*sj3*x15839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15843=((1.0)*cj5);
CheckValue<IkReal> x15844=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15843)))),-1);
if(!x15844.valid){
continue;
}
CheckValue<IkReal> x15845 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x15843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15845.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15844.value)))+(x15845.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15846=IKsin(j4);
IkReal x15847=IKcos(j4);
IkReal x15848=(r11*sj5);
IkReal x15849=(cj5*r10);
IkReal x15850=(sj1*sj2);
IkReal x15851=(cj5*sj3);
IkReal x15852=((1.0)*sj0);
IkReal x15853=(cj3*cj5);
IkReal x15854=(cj3*sj5);
IkReal x15855=(r21*sj5);
IkReal x15856=(cj2*sj1);
IkReal x15857=(sj3*sj5);
IkReal x15858=(r01*sj5);
IkReal x15859=((1.0)*cj0);
IkReal x15860=(cj1*sj2);
IkReal x15861=((1.0)*x15847);
IkReal x15862=((1.0)*x15846);
IkReal x15863=(cj3*x15847);
IkReal x15864=((1.0)*cj1*cj2);
IkReal x15865=(cj3*x15846);
evalcond[0]=(((x15846*x15855))+(((-1.0)*r22*x15861))+(((-1.0)*cj5*r20*x15862)));
evalcond[1]=(((x15846*x15848))+cj0+(((-1.0)*x15849*x15862))+(((-1.0)*r12*x15861)));
evalcond[2]=((((-1.0)*cj5*r00*x15862))+((x15846*x15858))+(((-1.0)*r02*x15861))+(((-1.0)*x15852)));
evalcond[3]=((((-1.0)*r20*x15853*x15861))+((r22*x15865))+((r20*x15857))+((r21*x15847*x15854))+((r21*x15851))+x15856+x15860);
evalcond[4]=((((-1.0)*x15864))+(((-1.0)*r22*sj3*x15862))+((r20*x15854))+((r20*x15847*x15851))+((r21*x15853))+(((-1.0)*sj3*x15855*x15861))+x15850);
evalcond[5]=(((cj0*x15850))+((r02*x15865))+((r01*x15847*x15854))+((r00*x15857))+((r01*x15851))+(((-1.0)*cj1*cj2*x15859))+(((-1.0)*r00*x15853*x15861)));
evalcond[6]=(((x15848*x15863))+((r12*x15865))+(((-1.0)*cj3*x15849*x15861))+((r10*x15857))+(((-1.0)*cj1*cj2*x15852))+((r11*x15851))+((sj0*x15850)));
evalcond[7]=((((-1.0)*x15859*x15860))+((r00*x15854))+((r01*x15853))+(((-1.0)*r02*sj3*x15862))+((r00*x15847*x15851))+(((-1.0)*x15856*x15859))+(((-1.0)*r01*x15857*x15861)));
evalcond[8]=((((-1.0)*x15852*x15856))+(((-1.0)*sj3*x15848*x15861))+((r10*x15854))+(((-1.0)*x15852*x15860))+((r11*x15853))+(((-1.0)*r12*sj3*x15862))+((sj3*x15847*x15849)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15866=((1.0)*cj5);
CheckValue<IkReal> x15867 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15867.valid){
continue;
}
CheckValue<IkReal> x15868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15866)))),-1);
if(!x15868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15867.value)+(((1.5707963267949)*(x15868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15869=IKsin(j4);
IkReal x15870=IKcos(j4);
IkReal x15871=(r11*sj5);
IkReal x15872=(cj5*r10);
IkReal x15873=(sj1*sj2);
IkReal x15874=(cj5*sj3);
IkReal x15875=((1.0)*sj0);
IkReal x15876=(cj3*cj5);
IkReal x15877=(cj3*sj5);
IkReal x15878=(r21*sj5);
IkReal x15879=(cj2*sj1);
IkReal x15880=(sj3*sj5);
IkReal x15881=(r01*sj5);
IkReal x15882=((1.0)*cj0);
IkReal x15883=(cj1*sj2);
IkReal x15884=((1.0)*x15870);
IkReal x15885=((1.0)*x15869);
IkReal x15886=(cj3*x15870);
IkReal x15887=((1.0)*cj1*cj2);
IkReal x15888=(cj3*x15869);
evalcond[0]=((((-1.0)*cj5*r20*x15885))+(((-1.0)*r22*x15884))+((x15869*x15878)));
evalcond[1]=(cj0+(((-1.0)*x15872*x15885))+(((-1.0)*r12*x15884))+((x15869*x15871)));
evalcond[2]=((((-1.0)*cj5*r00*x15885))+(((-1.0)*r02*x15884))+(((-1.0)*x15875))+((x15869*x15881)));
evalcond[3]=(((r21*x15870*x15877))+((r20*x15880))+((r21*x15874))+((r22*x15888))+(((-1.0)*r20*x15876*x15884))+x15883+x15879);
evalcond[4]=((((-1.0)*sj3*x15878*x15884))+((r20*x15877))+((r21*x15876))+(((-1.0)*x15887))+(((-1.0)*r22*sj3*x15885))+x15873+((r20*x15870*x15874)));
evalcond[5]=(((r01*x15874))+((r00*x15880))+((r01*x15870*x15877))+(((-1.0)*r00*x15876*x15884))+(((-1.0)*cj1*cj2*x15882))+((r02*x15888))+((cj0*x15873)));
evalcond[6]=(((x15871*x15886))+((r11*x15874))+((r10*x15880))+(((-1.0)*cj3*x15872*x15884))+((r12*x15888))+(((-1.0)*cj1*cj2*x15875))+((sj0*x15873)));
evalcond[7]=((((-1.0)*x15882*x15883))+((r01*x15876))+((r00*x15877))+(((-1.0)*r01*x15880*x15884))+((r00*x15870*x15874))+(((-1.0)*r02*sj3*x15885))+(((-1.0)*x15879*x15882)));
evalcond[8]=(((r11*x15876))+(((-1.0)*x15875*x15883))+(((-1.0)*x15875*x15879))+((r10*x15877))+(((-1.0)*r12*sj3*x15885))+((sj3*x15870*x15872))+(((-1.0)*sj3*x15871*x15884)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15889=cj5*cj5;
IkReal x15890=r21*r21;
IkReal x15891=r20*r20;
IkReal x15892=(r20*r21);
IkReal x15893=((1.0)*cj3);
IkReal x15894=((1.0)*cj5);
IkReal x15895=(cj1*sj2);
IkReal x15896=(cj5*sj5);
IkReal x15897=(sj3*sj5);
IkReal x15898=(cj2*sj1);
IkReal x15899=(r21*sj5);
CheckValue<IkReal> x15900=IKPowWithIntegerCheck(IKsign(((((2.0)*cj3*x15892*x15896))+(((-1.0)*x15893*(r22*r22)))+((cj3*x15889*x15890))+(((-1.0)*x15889*x15891*x15893))+(((-1.0)*x15890*x15893)))),-1);
if(!x15900.valid){
continue;
}
CheckValue<IkReal> x15901 = IKatan2WithCheck(IkReal((((cj5*r21*r22*sj3))+((r20*r22*x15897))+((r22*x15895))+((r22*x15898)))),IkReal(((((-1.0)*x15891*x15894*x15897))+((sj3*x15890*x15896))+((x15898*x15899))+((sj3*x15892))+(((-1.0)*r20*x15894*x15895))+(((-1.0)*r20*x15894*x15898))+(((-2.0)*sj3*x15889*x15892))+((x15895*x15899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15900.value)))+(x15901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15902=IKsin(j4);
IkReal x15903=IKcos(j4);
IkReal x15904=(cj3*r21);
IkReal x15905=(r21*sj5);
IkReal x15906=(r20*sj5);
IkReal x15907=(cj5*r20);
IkReal x15908=((1.0)*x15903);
IkReal x15909=((1.0)*x15902);
evalcond[0]=((((-1.0)*x15907*x15909))+((x15902*x15905))+(((-1.0)*r22*x15908)));
evalcond[1]=(((cj2*sj1))+((sj3*x15906))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15902))+((sj5*x15903*x15904))+(((-1.0)*cj3*x15907*x15908)));
evalcond[2]=(((cj5*x15904))+(((-1.0)*r22*sj3*x15909))+(((-1.0)*sj3*x15905*x15908))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x15903*x15907))+((cj3*x15906)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15910=(cj5*sj4);
IkReal x15911=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15911))+(((-1.0)*r00*x15910)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15910))+(((-1.0)*r11*x15911))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15911))+(((-1.0)*r00*x15910))))+IKsqr((((r10*x15910))+(((-1.0)*r11*x15911))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15911))+(((-1.0)*r00*x15910))), (((r10*x15910))+(((-1.0)*r11*x15911))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15912=IKcos(j0);
IkReal x15913=IKsin(j0);
IkReal x15914=(r02*sj4);
IkReal x15915=((1.0)*sj3);
IkReal x15916=(r12*sj4);
IkReal x15917=(cj3*cj4);
IkReal x15918=((1.0)*cj5);
IkReal x15919=(r11*sj5);
IkReal x15920=((1.0)*cj1);
IkReal x15921=((0.39225)*sj1);
IkReal x15922=(cj5*r01);
IkReal x15923=(r01*sj5);
IkReal x15924=(r00*sj5);
IkReal x15925=((1.0)*sj1);
IkReal x15926=((0.39225)*cj2);
IkReal x15927=(cj5*r11);
IkReal x15928=(r10*sj5);
IkReal x15929=((1.0)*cj4);
IkReal x15930=(sj2*x15912);
IkReal x15931=(sj2*x15913);
IkReal x15932=(cj4*cj5*sj3);
IkReal x15933=(cj1*x15912);
IkReal x15934=(cj2*x15912);
IkReal x15935=(cj1*x15913);
IkReal x15936=(cj2*x15913);
evalcond[0]=((((-1.0)*r12*x15929))+((sj4*x15919))+(((-1.0)*r10*sj4*x15918))+x15912);
evalcond[1]=((((-1.0)*r00*sj4*x15918))+(((-1.0)*x15913))+(((-1.0)*r02*x15929))+((sj4*x15923)));
evalcond[2]=(((x15926*x15933))+(((-0.09465)*x15924))+(((-0.09465)*x15922))+(((-1.0)*px))+(((0.425)*x15933))+(((-1.0)*x15921*x15930))+(((-0.10915)*x15913)));
evalcond[3]=(((x15926*x15935))+(((0.10915)*x15912))+(((-0.09465)*x15928))+(((-0.09465)*x15927))+(((-1.0)*py))+(((0.425)*x15935))+(((-1.0)*x15921*x15931)));
evalcond[4]=((((-1.0)*x15920*x15934))+((sj3*x15922))+((sj3*x15924))+((cj3*x15914))+((sj1*x15930))+((x15917*x15923))+(((-1.0)*r00*x15917*x15918)));
evalcond[5]=((((-1.0)*r10*x15917*x15918))+(((-1.0)*x15920*x15936))+((sj3*x15927))+((sj3*x15928))+((x15917*x15919))+((cj3*x15916))+((sj1*x15931)));
evalcond[6]=((((-1.0)*x15920*x15930))+(((-1.0)*cj4*x15915*x15923))+((cj3*x15924))+((cj3*x15922))+((r00*x15932))+(((-1.0)*x15914*x15915))+(((-1.0)*x15925*x15934)));
evalcond[7]=((((-1.0)*x15920*x15931))+((cj3*x15928))+((cj3*x15927))+(((-1.0)*cj4*x15915*x15919))+(((-1.0)*x15925*x15936))+(((-1.0)*x15915*x15916))+((r10*x15932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15937=cj5*cj5;
IkReal x15938=r21*r21;
IkReal x15939=r20*r20;
IkReal x15940=(r20*r21);
IkReal x15941=(sj1*sj2);
IkReal x15942=(r21*sj5);
IkReal x15943=(cj1*cj2);
IkReal x15944=(cj5*r20);
IkReal x15945=(cj5*sj5);
IkReal x15946=(cj3*r22);
IkReal x15947=(sj3*x15938);
CheckValue<IkReal> x15948=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+(((-2.0)*sj3*x15940*x15945))+(((-1.0)*x15937*x15947))+((sj3*x15937*x15939))+x15947)),-1);
if(!x15948.valid){
continue;
}
CheckValue<IkReal> x15949 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15943))+((r20*sj5*x15946))+((cj5*r21*x15946))+((r22*x15941)))),IkReal(((((-2.0)*cj3*x15937*x15940))+((cj3*x15940))+((x15943*x15944))+(((-1.0)*x15942*x15943))+(((-1.0)*x15941*x15944))+((cj3*x15938*x15945))+(((-1.0)*cj3*x15939*x15945))+((x15941*x15942)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15949.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15948.value)))+(x15949.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15950=IKsin(j4);
IkReal x15951=IKcos(j4);
IkReal x15952=(cj3*r21);
IkReal x15953=(r21*sj5);
IkReal x15954=(r20*sj5);
IkReal x15955=(cj5*r20);
IkReal x15956=((1.0)*x15951);
IkReal x15957=((1.0)*x15950);
evalcond[0]=((((-1.0)*r22*x15956))+((x15950*x15953))+(((-1.0)*x15955*x15957)));
evalcond[1]=(((cj2*sj1))+((sj5*x15951*x15952))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15950))+((sj3*x15954))+(((-1.0)*cj3*x15955*x15956)));
evalcond[2]=((((-1.0)*r22*sj3*x15957))+((sj3*x15951*x15955))+((cj5*x15952))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*sj3*x15953*x15956))+((cj3*x15954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15958=(cj5*sj4);
IkReal x15959=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15959))+(((-1.0)*r00*x15958)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15959))+((r10*x15958))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15959))+(((-1.0)*r00*x15958))))+IKsqr(((((-1.0)*r11*x15959))+((r10*x15958))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15959))+(((-1.0)*r00*x15958))), ((((-1.0)*r11*x15959))+((r10*x15958))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15960=IKcos(j0);
IkReal x15961=IKsin(j0);
IkReal x15962=(r02*sj4);
IkReal x15963=((1.0)*sj3);
IkReal x15964=(r12*sj4);
IkReal x15965=(cj3*cj4);
IkReal x15966=((1.0)*cj5);
IkReal x15967=(r11*sj5);
IkReal x15968=((1.0)*cj1);
IkReal x15969=((0.39225)*sj1);
IkReal x15970=(cj5*r01);
IkReal x15971=(r01*sj5);
IkReal x15972=(r00*sj5);
IkReal x15973=((1.0)*sj1);
IkReal x15974=((0.39225)*cj2);
IkReal x15975=(cj5*r11);
IkReal x15976=(r10*sj5);
IkReal x15977=((1.0)*cj4);
IkReal x15978=(sj2*x15960);
IkReal x15979=(sj2*x15961);
IkReal x15980=(cj4*cj5*sj3);
IkReal x15981=(cj1*x15960);
IkReal x15982=(cj2*x15960);
IkReal x15983=(cj1*x15961);
IkReal x15984=(cj2*x15961);
evalcond[0]=(((sj4*x15967))+(((-1.0)*r10*sj4*x15966))+(((-1.0)*r12*x15977))+x15960);
evalcond[1]=((((-1.0)*r00*sj4*x15966))+((sj4*x15971))+(((-1.0)*x15961))+(((-1.0)*r02*x15977)));
evalcond[2]=((((-0.09465)*x15970))+(((-0.09465)*x15972))+(((-0.10915)*x15961))+(((0.425)*x15981))+(((-1.0)*px))+(((-1.0)*x15969*x15978))+((x15974*x15981)));
evalcond[3]=((((-0.09465)*x15975))+(((-0.09465)*x15976))+(((0.425)*x15983))+(((0.10915)*x15960))+(((-1.0)*py))+(((-1.0)*x15969*x15979))+((x15974*x15983)));
evalcond[4]=((((-1.0)*x15968*x15982))+((sj1*x15978))+(((-1.0)*r00*x15965*x15966))+((x15965*x15971))+((sj3*x15972))+((sj3*x15970))+((cj3*x15962)));
evalcond[5]=((((-1.0)*x15968*x15984))+((sj1*x15979))+((x15965*x15967))+((sj3*x15975))+((sj3*x15976))+(((-1.0)*r10*x15965*x15966))+((cj3*x15964)));
evalcond[6]=(((r00*x15980))+(((-1.0)*x15962*x15963))+(((-1.0)*x15973*x15982))+(((-1.0)*cj4*x15963*x15971))+((cj3*x15970))+((cj3*x15972))+(((-1.0)*x15968*x15978)));
evalcond[7]=((((-1.0)*x15973*x15984))+((r10*x15980))+(((-1.0)*x15963*x15964))+(((-1.0)*cj4*x15963*x15967))+((cj3*x15975))+((cj3*x15976))+(((-1.0)*x15968*x15979)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - ur5 (4af10b9a8fcfe3f5f059ef1c4aedbc79)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
